{"tree":["js","ui","animation","frames-and-windows","regular-expressions","async","network"],"bySlugMap":{"js":{"type":"Article","value":{"title":"The JavaScript language","slug":"js","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js","isFolder":true,"weight":1,"content":"\nHere we learn JavaScript, starting from scratch and go on to advanced concepts like OOP.\n\nWe concentrate on the language itself here, with the minimum of environment-specific notes.","libs":[],"children":["getting-started","first-steps","code-quality","object-basics","data-types","advanced-functions","object-oriented-programming","error-handling"]}},"getting-started":{"type":"Article","value":{"title":"An introduction","slug":"getting-started","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/01-getting-started","isFolder":true,"weight":1,"content":"\nAbout the JavaScript language and the environment to develop with it.","libs":[],"children":["intro","code-editors","devtools"],"parent":"js"}},"intro":{"type":"Article","value":{"title":"An Introduction to JavaScript","slug":"intro","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/01-getting-started/1-intro/article.md","isFolder":false,"weight":1,"content":"\nLet's see what's so special about JavaScript, what we can achieve with it and which other technologies play well with it.\n\n## What is JavaScript?\n\n*JavaScript* was initially created to *\"make webpages alive\"*.\n\nThe programs in this language are called *scripts*. They can be written right in the HTML and execute automatically as the page loads.\n\nScripts are provided and executed as a plain text. They don't need a special preparation or a compilation to run.\n\nIn this aspect, JavaScript is very different from another language called [Java](http://en.wikipedia.org/wiki/Java).\n\n```smart header=\"Why <u>Java</u>Script?\"\nWhen JavaScript was created, it initially had another name: \"LiveScript\". But Java language was very popular at that time, so it was decided that positioning a new language as a \"younger brother\" of Java would help.\n\nBut as it evolved, JavaScript became a fully independent language, with its own specification called [ECMAScript](http://en.wikipedia.org/wiki/ECMAScript), and now it has no relation to Java at all.\n```\n\nAt present, JavaScript can execute not only in the browser, but also on the server, or actually on any device where there exists a special program called [the JavaScript engine](https://en.wikipedia.org/wiki/JavaScript_engine).\n\nThe browser has an embedded engine, sometimes it's also called a \"JavaScript virtual machine\".\n\nDifferent engines have different \"codenames\", for example:\n\n- [V8](https://en.wikipedia.org/wiki/V8_(JavaScript_engine)) -- in Chrome and Opera.\n- [SpiderMonkey](https://en.wikipedia.org/wiki/SpiderMonkey) -- in Firefox.\n- ...There are other codenames like \"Trident\", \"Chakra\" for different versions of IE, \"ChakraCore\" for Microsoft Edge, \"Nitro\" and \"SquirrelFish\" for Safari etc.\n\nThe terms above are good to remember, because they are used in developer articles on the internet. We'll use them too. For instance, if \"a feature X is supported by V8\", then it probably works in Chrome and Opera.\n\n```smart header=\"How engines work?\"\n\nEngines are complicated. But the basics are easy.\n\n1. The engine (embedded if it's a browser) reads (\"parses\") the script.\n2. Then it converts (\"compiles\") the script to the machine language.\n3. And then the machine code runs, pretty fast.\n\nThe engine applies optimizations on every stage of the process. It even watches the compiled script as it runs, analyzes the data that flows through it and applies optimizations to the machine code based on that knowledge. At the end, scripts are quite fast.\n```\n\n## What can in-browser JavaScript do?\n\nThe modern JavaScript is a \"safe\" programming language. It does not provide low-level access to memory or CPU, because it was initially created for browsers which do not require it.\n\nThe capabilities greatly depend on the environment that runs JavaScript. For instance, [Node.JS](https://wikipedia.org/wiki/Node.js) supports functions that allow JavaScript to read/write arbitrary files, perform network requests etc.\n\nIn-browser JavaScript can do everything related to webpage manipulation, interaction with the user and the webserver.\n\nFor instance, in-browser JavaScript is able to:\n\n- Add new HTML to the page, change the existing content, modify styles.\n- React to user actions, run on mouse clicks, pointer movements, key presses.\n- Send requests over the network to remote servers, download and upload files (so-called [AJAX](https://en.wikipedia.org/wiki/Ajax_(programming)) and [COMET](https://en.wikipedia.org/wiki/Comet_(programming)) technologies).\n- Get and set cookies, ask questions to the visitor, show messages.\n- Remember the data on the client-side (\"local storage\").\n\n## What CAN'T in-browser JavaScript do?\n\nJavaScript's abilities in the browser are limited for the sake of the user's safety. The aim is to prevent an evil webpage from accessing private information or harming the user's data.\n\nThe examples of such restrictions are:\n\n- JavaScript on a webpage may not read/write arbitrary files on the hard disk, copy them or execute programs. It has no direct access to OS system functions.\n\n    Modern browsers allow it to work with files, but the access is limited and only provided if the user does certain actions, like \"dropping\" a file into a browser window or selecting it via an `<input>` tag.\n\n    There are ways to interact with camera/microphone and other devices, but they require a user's explicit permission. So a JavaScript-enabled page may not sneakily enable a web-camera, observe the surroundings and send the information to the [NSA](https://en.wikipedia.org/wiki/National_Security_Agency).\n- Different tabs/windows generally do not know about each other. Sometimes they do, for example when one window uses JavaScript to open the other one. But even in this case, JavaScript from one page may not access the other if they come from different sites (from a different domain, protocol or port).\n\n    This is called the \"Same Origin Policy\". To work around that, *both pages* must contain a special JavaScript code that handles data exchange.\n\n    The limitation is again for user's safety. A page from `http://anysite.com` which a user has opened must not be able to access another browser tab with the URL `http://gmail.com` and steal information from there.\n- JavaScript can easily communicate over the net to the server where the current page came from. But its ability to receive data from other sites/domains is crippled. Though possible, it requires explicit agreement (expressed in HTTP headers) from the remote side. Once again, that's safety limitations.\n\n![](limitations.png)\n\nSuch limits do not exist if JavaScript is used outside of the browser, for example on a server. Modern browsers also allow installing plugin/extensions which may get extended permissions.\n\n## What makes JavaScript unique?\n\nThere are at least *three* great things about JavaScript:\n\n```compare\n+ Full integration with HTML/CSS.\n+ Simple things done simply.\n+ Supported by all major browsers and enabled by default.\n```\n\nCombined, these three things exist only in JavaScript and no other browser technology.\n\nThat's what makes JavaScript unique. That's why it's the most widespread tool to create browser interfaces.\n\nWhile planning to learn a new technology, it's beneficial to check its perspectives. So let's move on to the modern trends that include new languages and browser abilities.\n\n\n## Languages \"over\" JavaScript\n\nThe syntax of JavaScript does not suit everyone's needs. Different people want different features.\n\nThat's to be expected, because projects and requirements are different for everyone.\n\nSo recently a plethora of new languages appeared, which are *transpiled* (converted) to JavaScript before they run in the browser.\n\nModern tools make the transpilation very fast and transparent, actually allowing developers to code in another language and autoconverting it \"under the hood\".\n\nExamples of such languages:\n\n- [CoffeeScript](http://coffeescript.org/) is a \"syntactic sugar\" for JavaScript, it introduces shorter syntax, allowing to write more precise and clear code. Usually Ruby devs like it.\n- [TypeScript](http://www.typescriptlang.org/) is concentrated on adding \"strict data typing\", to simplify development and support of complex systems. It is developed by Microsoft.\n- [Dart](https://www.dartlang.org/) is a standalone language that has its own engine that runs in non-browser environments (like mobile apps). It was initially offered by Google as a replacement for JavaScript, but as of now, browsers require it to be transpiled to JavaScript just like the ones above.\n\nThere are more. Of course even if we use one of those languages, we should also know JavaScript, to really understand what we're doing.\n\n## Summary\n\n- JavaScript was initially created as a browser-only language, but now it is used in many other environments as well.\n- At this moment, JavaScript has a unique position as the most widely-adopted browser language with full integration with HTML/CSS.\n- There are many languages that get \"transpiled\" to JavaScript and provide certain features. It is recommended to take a look at them, at least briefly, after mastering JavaScript.","libs":[],"children":[],"parent":"getting-started"}},"code-editors":{"type":"Article","value":{"title":"Code editors","slug":"code-editors","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/01-getting-started/2-code-editors/article.md","isFolder":false,"weight":2,"content":"\nA code editor is the place where programmers spend most of their time.\n\nThere are two archetypes: IDE and lightweight editors. Many people feel comfortable choosing one tool of each type.\n\n## IDE\n\nThe term [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) (Integrated Development Environment) means a powerful editor with many features that usually operates on a \"whole project\". As the name suggests, that's not just an editor, but a full-scale \"development environment\".\n\nAn IDE loads the project (can be many files), allows navigation between files, provides autocompletion based on the whole project (not just the open file), integrates with a version management system (like [git](https://git-scm.com/)), a testing environment and other \"project-level\" stuff.\n\nIf you haven't considered selecting an IDE yet, look at the following variants:\n\n- [WebStorm](http://www.jetbrains.com/webstorm/) for frontend development and other editors of the same company if you need additional languages.\n- Visual Studio is fine if you're a .NET developer, and a free version is available ([Visual Studio Community](https://www.visualstudio.com/vs/community/))\n- [Netbeans](http://netbeans.org/).\n\nAll of the IDEs except Visual Studio are available on Windows, MacOs and Linux. Visual Studio doesn't work on Linux.\n\nMost IDEs are paid, but have a trial period. Their cost is usually negligible compared to a qualified developer's salary, so just choose the best one for you.\n\n## Lightweight editors\n\n\"Lightweight editors\" are not as powerful as IDEs, but they're fast, elegant and simple.\n\nThey are mainly used to instantly open and edit a file.\n\nThe main difference between a \"lightweight editor\" and an \"IDE\" is that an IDE works on a project-level, so it loads much more data on start, analyzes the project structure if needed and so on. A lightweight editor is much faster if we need only one file.\n\nIn practice, lightweight editors may have a lot of plugins including directory-level syntax analyzers and autocompleters, so there's no strict border between a lightweight editor and an IDE.\n\nThe following options deserve your attention:\n\n- [Visual Studio Code](https://code.visualstudio.com/) (cross-platform, free).\n- [Atom](https://atom.io/) (cross-platform, free).\n- [Sublime Text](http://www.sublimetext.com) (cross-platform, shareware).\n- [Notepad++](https://notepad-plus-plus.org/) (Windows, free).\n- [Vim](http://www.vim.org/) and [Emacs](https://www.gnu.org/software/emacs/) are also cool, if you know how to use them.\n\n## My favorites\n\nThe personal preference of the author is to have both an IDE for projects and a lightweight editor for quick and easy file editing.\n\nI'm using:\n\n- [WebStorm](http://www.jetbrains.com/webstorm/) for JS, and if there is one more language in the project, then I switch to one of the other Jetbrains offerings listed above.\n- As a lightweight editor -- [Sublime Text](http://www.sublimetext.com) or [Atom](https://atom.io/).\n\n## Let's not argue\n\nThe editors in the lists above are those that either I or my friends who I consider good developers have been using for a long time and are happy with.\n\nThere are other great editors in our big world. Please choose the one you like the most.\n\nThe choice of an editor, like any other tool, is individual and depends on your projects, habits, personal preferences.","libs":[],"children":[],"parent":"getting-started"}},"devtools":{"type":"Article","value":{"title":"Developer console","slug":"devtools","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/01-getting-started/3-devtools/article.md","isFolder":false,"weight":3,"content":"\nCode is prone to errors. You are quite likely to make errors... Oh, what am I talking about? You are *absolutely* going to make errors, at least if you're a human, not a [robot](https://en.wikipedia.org/wiki/Bender_(Futurama)).\n\nBut in the browser, a user doesn't see the errors by default. So, if something goes wrong in the script, we won't see what's broken and can't fix it.\n\nTo see errors and get a lot of other useful information about scripts, browsers have embedded \"developer tools\".\n\nMost often developers lean towards Chrome or Firefox for development, because those browsers have the best developer tools. Other browsers also provide developer tools, sometimes with special features, but are usually playing \"catch-up\" to Chrome or Firefox. So most people have a \"favorite\" browser and switch to others if a problem is browser-specific.\n\nDeveloper tools are really powerful, there are many features. To start, we'll learn how to open them, look at errors and run JavaScript commands.\n\n## Google Chrome\n\nOpen the page [bug.html](bug.html).\n\nThere's an error in the JavaScript code on it. It's hidden from a regular visitor's eyes, so let's open developer tools to see it.\n\nPress `key:F12` or, if you're on Mac, then `key:Cmd+Opt+J`.\n\nThe developer tools will open on the Console tab by default.\n\nIt looks somewhat like this:\n\n![chrome](chrome.png)\n\nThe exact look of developer tools depends on your version of Chrome. It changes from time to time, but should be similar.\n\n- Here we can see the red-colored error message. In this case the script contains an unknown \"lalala\" command.\n- On the right, there is a clickable link to the source `bug.html:12` with the line number where the error has occurred.\n\nBelow the error message there is a blue `>` symbol. It marks a \"command line\" where we can type JavaScript commands and press `key:Enter` to run them (`key:Shift+Enter` to input multi-line commands).\n\nNow we can see errors and that's enough for the start. We'll be back to developer tools later and cover debugging more in-depth in the chapter <info:debugging-chrome>.\n\n\n## Firefox, Edge and others\n\nMost other browsers use `key:F12` to open developer tools.\n\nThe look & feel of them is quite similar. Once you know how to use one of them (you can start with Chrome), you can easily switch to another.\n\n## Safari\n\nSafari (Mac browser, not supported by Windows/Linux) is a little bit special here. We need to enable the \"Develop menu\" first.\n\nOpen Preferences and go to \"Advanced\" pane. There's a checkbox at the bottom:\n\n![safari](safari.png)\n\nNow `key:Cmd+Opt+C` can toggle the console. Also note that the new top menu item named \"Develop\" has appeared. It has many commands and options.\n\n## Summary\n\n- Developer tools allow us to see errors, run commands, examine variables and much more.\n- They can be opened with `key:F12` for most browsers under Windows. Chrome for Mac needs `key:Cmd+Opt+J`, Safari: `key:Cmd+Opt+C` (need to enable first).\n\nNow we have the environment ready. In the next section we'll get down to JavaScript.","libs":[],"children":[],"parent":"getting-started"}},"first-steps":{"type":"Article","value":{"title":"JavaScript Fundamentals","slug":"first-steps","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps","isFolder":true,"weight":2,"content":"\nLet's learn the fundamentals of script building.","libs":[],"children":["hello-world","structure","strict-mode","variables","types","type-conversions","operators","comparison","alert-prompt-confirm","ifelse","logical-operators","while-for","switch","function-basics","function-expressions-arrows","javascript-specials"],"parent":"js"}},"hello-world":{"type":"Article","value":{"title":"Hello, world!","slug":"hello-world","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/01-hello-world/article.md","isFolder":false,"weight":1,"content":"\nThe tutorial that you're reading is about core JavaScript, which is platform-independent. Further on, you will learn Node.JS and other platforms that use it.\n\nBut, we need a working environment to run our scripts, and, just because this book is online, the browser is a good choice. We'll keep the amount of browser-specific commands (like `alert`) to a minimum, so that you don't spend time on them if you plan to concentrate on another environment like Node.JS. On the other hand, browser details are explained in detail in the [next part](/ui) of the tutorial.\n\nSo first, let's see how to attach a script to a webpage. For server-side environments, you can just execute it with a command like `\"node my.js\"` for Node.JS.\n\n\n## The \"script\" tag\n\nJavaScript programs can be inserted in any part of an HTML document with the help of the `<script>` tag.\n\nFor instance:\n\n```html run height=100\n<!DOCTYPE HTML>\n<html>\n\n<body>\n\n  <p>Before the script...</p>\n\n*!*\n  <script>\n    alert( 'Hello, world!' );\n  </script>\n*/!*\n\n  <p>...After the script.</p>\n\n</body>\n\n</html>\n```\n\n```online\nYou can run the example by clicking on the \"Play\" button in its right-top corner.\n```\n\nThe `<script>` tag contains JavaScript code which is automatically executed when the browser meets the tag.\n\n\n## The modern markup\n\nThe `<script>` tag has a few attributes that are rarely used nowadays, but we can find them in old code:\n\n The `type` attribute: <code>&lt;script <u>type</u>=...&gt;</code>\n\n : The old standard HTML4 required a script to have a type. Usually it was `type=\"text/javascript\"`. The modern HTML standard assumes this `type` by default. No attribute is required.\n\n The `language` attribute: <code>&lt;script <u>language</u>=...&gt;</code>\n  : This attribute was meant to show the language of the script. As of now, this attribute makes no sense, the language is JavaScript by default. No need to use it.\n\nComments before and after scripts.\n: In really ancient books and guides, one may find comments inside `<script>`, like this:\n\n    ```html no-beautify\n    <script type=\"text/javascript\"><!--\n        ...\n    //--></script>\n    ```\n\n    These comments were supposed to hide the code from an old browser that didn't know about a `<script>` tag. But all browsers born in the past 15+ years don't have any issues. We mention it here, because such comments serve as a sign. If you see that somewhere -- that code is probably really old and not worth looking into.\n\n\n## External scripts\n\nIf we have a lot of JavaScript code, we can put it into a separate file.\n\nThe script file is attached to HTML with the `src` attribute:\n\n```html\n<script src=\"/path/to/script.js\"></script>\n```\n\nHere `/path/to/script.js` is an absolute path to the file with the script (from the site root).\n\nIt is also possible to provide a path relative to the current page. For instance, `src=\"script.js\"` would mean a file `\"script.js\"` in the current folder.\n\nWe can give a full URL as well, for instance:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js\"></script>\n```\n\nTo attach several scripts, use multiple tags:\n\n```html\n<script src=\"/js/script1.js\"></script>\n<script src=\"/js/script2.js\"></script>\n…\n```\n\n```smart\nAs a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files.\n\nThe benefit of a separate file is that the browser will download it and then store in its [cache](https://en.wikipedia.org/wiki/Web_cache).\n\nAfter this, other pages that want the same script will take it from the cache instead of downloading it. So the file is actually downloaded only once.\n\nThat saves traffic and makes pages faster.\n```\n\n````warn header=\"If `src` is set, the script content is ignored.\"\nA single `<script>` tag can't have both the `src` attribute and the code inside.\n\nThis won't work:\n\n```html\n<script *!*src*/!*=\"file.js\">\n  alert(1); // the content is ignored, because src is set\n</script>\n```\n\nWe must choose: either it's an external `<script src=\"…\">` or a regular `<script>` with code.\n\nThe example above can be split into two scripts to work:\n\n```html\n<script src=\"file.js\"></script>\n<script>\n  alert(1);\n</script>\n```\n````\n\n## Summary\n\n- We can use a `<script>` tag to add JavaScript code to the page.\n- The `type` and `language` attributes are not required.\n- A script in an external file can be inserted with `<script src=\"path/to/script.js\"></script>`.\n\n\nThere is much more to learn about browser scripts and their interaction with the web-page. But let's keep in mind that this part of the tutorial is devoted to the JavaScript language, so we shouldn't distract ourselves from it. We'll be using a browser as a way to run JavaScript, which is very convenient for online reading, but yet one of many.","libs":[],"children":["hello-alert","hello-alert-ext"],"parent":"first-steps"}},"hello-alert":{"type":"Task","value":{"title":"Show an alert","slug":"hello-alert","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/01-hello-world/1-hello-alert","weight":1,"libs":[],"importance":5,"content":"\nCreate a page that shows a message \"I'm JavaScript!\".\n\nDo it in a sandbox, or on your hard drive, doesn't matter, just ensure that it works.\n\n[demo src=\"solution\"]","solution":"","parent":"hello-world"}},"hello-alert-ext":{"type":"Task","value":{"title":"Show an alert with an external script","slug":"hello-alert-ext","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/01-hello-world/2-hello-alert-ext","weight":2,"libs":[],"importance":5,"content":"\nTake the solution of the previous task <info:task/hello-alert>. Modify it by extracting the script content into an external file `alert.js`, residing in the same folder.\n\nOpen the page, ensure that the alert works.","solution":"The HTML code:\n\n[html src=\"index.html\"]\n\nFor the file `alert.js` in the same folder:\n\n[js src=\"alert.js\"]","parent":"hello-world"}},"structure":{"type":"Article","value":{"title":"Code structure","slug":"structure","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/02-structure/article.md","isFolder":false,"weight":2,"content":"\nThe first thing to study is the building blocks of the code.\n\n## Statements\n\nStatements are syntax constructs and commands that perform actions.\n\nWe've already seen a statement `alert('Hello, world!')`, which shows the message.\n\nWe can have as many statements in the code as we want. Another statement can be separated with a semicolon.\n\nFor example, here we split the message into two:\n\n```js run no-beautify\nalert('Hello'); alert('World');\n```\n\nUsually each statement is written on a separate line -- thus the code becomes more readable:\n\n```js run no-beautify\nalert('Hello');\nalert('World');\n```\n\n## Semicolons [#semicolon]\n\nA semicolon may be omitted in most cases when a line break exists.\n\nThis would also work:\n\n```js run no-beautify\nalert('Hello')\nalert('World')\n```\n\nHere JavaScript interprets the line break as an \"implicit\" semicolon. That's also called an [automatic semicolon insertion](https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion).\n\n**In most cases a newline implies a semicolon. But \"in most cases\" does not mean \"always\"!**\n\nThere are cases when a newline does not mean a semicolon, for example:\n\n```js run no-beautify\nalert(3 +\n1\n+ 2);\n```\n\nThe code outputs `6`, because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus `\"+\"`, then it is an \"incomplete expression\", no semicolon required. And in this case that works as intended.\n\n**But there are situations where JavaScript \"fails\" to assume a semicolon where it is really needed.**\n\nErrors which occur in such cases are quite hard to find and fix.\n\n````smart header=\"An example of an error\"\nIf you're curious to see a concrete example of such an error, check this code out:\n\n```js run\n[1, 2].forEach(alert)\n```\n\nNo need to think about the meaning of the brackets `[]` and `forEach` yet. We'll study them later, for now it does not matter. Let's just remember the result: it shows `1`, then `2`.\n\nNow let's add an `alert` before the code and *not* finish it with a semicolon:\n\n```js run no-beautify\nalert(\"There will be an error\")\n\n[1, 2].forEach(alert)\n```\n\nNow if we run it, only the first `alert` is shown, and then we have an error!\n\nBut everything is fine again if we add a semicolon after `alert`:\n```js run\nalert(\"All fine now\");\n\n[1, 2].forEach(alert)  \n```\n\nNow we have the \"All fine now\" message and then `1` and `2`.\n\n\nThe error in the no-semicolon variant occurs because JavaScript does not imply a semicolon before square brackets `[...]`.\n\nSo, because the semicolon is not auto-inserted, the code in the first example is treated as a single statement. That's how the engine sees it:\n\n```js run no-beautify\nalert(\"There will be an error\")[1, 2].forEach(alert)\n```\n\nBut it should be two separate statements, not a single one. Such a merging in this case is just wrong, hence the error. There are other situations when such a thing happens.\n````\n\nIt's recommended to put semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let's note once again -- *it is possible* to leave out semicolons most of the time. But it's safer -- especially for a beginner -- to use them.\n\n## Comments\n\nAs time goes on, the program becomes more and more complex. It becomes necessary to add *comments* which describe what happens and why.\n\nComments can be put into any place of the script. They don't affect the execution, because the engine simply ignores them.\n\n**One-line comments start with two forward slash characters `//`.**\n\nThe rest of the line is a comment. It may occupy a full line of its own or follow a statement.\n\nLike here:\n```js run\n// This comment occupies a line of its own\nalert('Hello');\n\nalert('World'); // This comment follows the statement\n```\n\n**Multiline comments start with a forward slash and an asterisk <code>/&#42;</code> and end with an asterisk and a forward slash <code>&#42;/</code>.**\n\nLike this:\n\n```js run\n/* An example with two messages.\nThis is a multiline comment.\n*/\nalert('Hello');\nalert('World');\n```\n\nThe content of comments is ignored, so if we put code inside <code>/&#42; ... &#42;/</code> it won't execute.\n\nSometimes it comes in handy to temporarily disable a part of code:\n\n```js run\n/* Commenting out the code\nalert('Hello');\n*/\nalert('World');\n```\n\n```smart header=\"Use hotkeys!\"\nIn most editors a line of code can be commented out by `key:Ctrl+/` hotkey for a single-line comment and something like `key:Ctrl+Shift+/` -- for multiline comments (select a piece of code and press the hotkey). For Mac try `key:Cmd` instead of `key:Ctrl`.\n```\n\n````warn header=\"Nested comments are not supported!\"\nThere may not be `/*...*/` inside another `/*...*/`.\n\nSuch code will die with an error:\n\n```js run no-beautify\n/*\n  /* nested comment ?!? */\n*/\nalert( 'World' );\n```\n````\n\nPlease, don't hesitate to comment your code.\n\nComments increase the overall code footprint, but that's not a problem at all. There are many tools which minify the code before publishing to the production server. They remove comments, so they don't appear in the working scripts. Therefore comments do not have any negative effects on production at all.\n\nFurther in the tutorial, there will be a chapter <info:coding-style> that also explains how to write better comments.","libs":[],"children":[],"parent":"first-steps"}},"strict-mode":{"type":"Article","value":{"title":"The modern mode, \"use strict\"","slug":"strict-mode","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/03-strict-mode/article.md","isFolder":false,"weight":3,"content":"\nFor a long time JavaScript was evolving without compatibility issues. New features were added to the language, but the old functionality did not change.\n\nThat had the benefit of never breaking existing code. But the downside was that any mistake or an imperfect decision made by JavaScript creators got stuck in the language forever.\n\nIt had been so until 2009 when ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most modifications are off by default. One needs to enable them explicitly with a special directive `\"use strict\"`.\n\n## \"use strict\"\n\nThe directive looks like a string: `\"use strict\"` or `'use strict'`. When it is located on the top of the script, then the whole script works the \"modern\" way.\n\nFor example\n\n```js\n\"use strict\";\n\n// this code works the modern way\n...\n```\n\nWe will learn functions (a way to group commands) soon.\n\nLooking ahead let's just note that `\"use strict\"` can be put at the start of a function (most kinds of functions) instead of the whole script. Then strict mode is enabled in that function only. But usually people use it for the whole script.\n\n\n````warn header=\"Ensure that \\\"use strict\\\" is at the top\"\nPlease make sure that `\"use strict\"` is on the top of the script, otherwise the strict mode may not be enabled.\n\nThere is no strict mode here:\n\n```js no-strict\nalert(\"some code\");\n// \"use strict\" below is ignored, must be on the top\n\n\"use strict\";\n\n// strict mode is not activated\n```\n\nOnly comments may appear above `\"use strict\"`.\n````\n\n```warn header=\"There's no way to cancel `use strict`\"\nThere is no directive `\"no use strict\"` or alike, that would return the old behavior.\n\nOnce we enter the strict mode, there's no return.\n```\n\n## Always \"use strict\"\n\nThe differences of `\"use strict\"` versus the \"default\" mode are still to be covered.\n\nIn the next chapters, as we learn language features, we'll make notes about the differences of the strict mode. Luckily, there are not so many. And they actually make our life better.\n\nAt this point in time it's enough to know about it in general:\n\n1. The `\"use strict\"` directive switches the engine to the \"modern\" mode, changing the behavior of some built-in features. We'll see the details as we study.\n2. The strict mode is enabled by `\"use strict\"` at the top. Also there are several language features like \"classes\" and \"modules\" that enable strict mode automatically.\n3. The strict mode is supported by all modern browsers.\n4. It's always recommended to start scripts with `\"use strict\"`. All examples in this tutorial assume so, unless (very rarely) specified otherwise.","libs":[],"children":[],"parent":"first-steps"}},"variables":{"type":"Article","value":{"title":"Variables","slug":"variables","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/04-variables/article.md","isFolder":false,"weight":4,"content":"\nMost of the time, a JavaScript application needs to work with information. Here are 2 examples:\n1. An online-shop -- the information might include goods being sold and a shopping cart. \n2. A chat application -- the information might include users, messages, and much more.\n\nVariables are used to store this information.\n\n## A variable\n\nA [variable](https://en.wikipedia.org/wiki/Variable_(computer_science)) is a \"named storage\" for data. We can use variables to store goodies, visitors and other data.\n\nTo create a variable in JavaScript, we need to use the `let` keyword.\n\nThe statement below creates (in other words: *declares* or *defines*) a variable with the name \"message\":\n\n```js\nlet message;\n```\n\nNow we can put some data into it by using the assignment operator `=`:\n\n```js\nlet message;\n\n*!*\nmessage = 'Hello'; // store the string\n*/!*\n```\n\nThe string is now saved into the memory area associated with the variable. We can access it using the variable name:\n\n```js run\nlet message;\nmessage = 'Hello!';\n\n*!*\nalert(message); // shows the variable content\n*/!*\n```\n\nTo be concise we can merge the variable declaration and assignment into a single line:\n\n```js run\nlet message = 'Hello!'; // define the variable and assign the value\n\nalert(message); // Hello!\n```\n\nWe can also declare multiple variables in one line:\n\n```js no-beautify\nlet user = 'John', age = 25, message = 'Hello';\n```\n\nThat might seem shorter, but it's not recommended. For the sake of better readability, please use a single line per variable.\n\nThe multiline variant is a bit longer, but easier to read:\n\n```js\nlet user = 'John';\nlet age = 25;\nlet message = 'Hello';\n```\n\nSome people also write many variables like that:\n```js no-beautify\nlet user = 'John',\n  age = 25,\n  message = 'Hello';\n```\n\n...Or even in the \"comma-first\" style:\n\n```js no-beautify\nlet user = 'John'\n  , age = 25\n  , message = 'Hello';\n```\n\nTechnically, all these variants do the same. So, it's a matter of personal taste and aesthetics.\n\n\n````smart header=\"`var` instead of `let`\"\nIn older scripts you may also find another keyword: `var` instead of `let`:\n\n```js\n*!*var*/!* message = 'Hello';\n```\n\nThe `var` keyword is *almost* the same as `let`. It also declares a variable, but in a slightly different, \"old-school\" fashion.\n\nThere are subtle differences between `let` and `var`, but they do not matter for us yet. We'll cover them in detail later, in the chapter <info:var>.\n````\n\n## A real-life analogy\n\nWe can easily grasp the concept of a \"variable\" if we imagine it as a \"box\" for data, with a uniquely-named sticker on it.\n\nFor instance, the variable `message` can be imagined as a box labeled `\"message\"` with the value `\"Hello!\"` in it:\n\n![](variable.png)\n\nWe can put any value into the box.\n\nAlso we can change it. The value can be changed as many times as needed:\n\n```js run\nlet message;\n\nmessage = 'Hello!';\n\nmessage = 'World!'; // value changed\n\nalert(message);\n```\n\nWhen the value is changed, the old data is removed from the variable:\n\n![](variable-change.png)\n\nWe can also declare two variables and copy data from one into the other.\n\n```js run\nlet hello = 'Hello world!';\n\nlet message;\n\n*!*\n// copy 'Hello world' from hello into message\nmessage = hello;\n*/!*\n\n// now two variables hold the same data\nalert(hello); // Hello world!\nalert(message); // Hello world!\n```\n\n```smart header=\"Functional languages\"\nIt may be interesting to know that there also exist [functional](https://en.wikipedia.org/wiki/Functional_programming) programming languages that forbid changing a variable value. For example, [Scala](http://www.scala-lang.org/) or [Erlang](http://www.erlang.org/).\n\nIn such languages, once the value is stored \"in the box\", it's there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can't reuse the old one.\n\nThough it may seem a little bit odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits. Studying such a language (even if not planning to use it soon) is recommended to broaden the mind.\n```\n\n## Variable naming [#variable-naming]\n\nThere are two limitations for a variable name in JavaScript:\n\n1. The name must contain only letters, digits, symbols `$` and `_`.\n2. The first character must not be a digit.\n\nValid names, for instance:\n\n```js\nlet userName;\nlet test123;\n```\n\nWhen the name contains multiple words, [camelCase](https://en.wikipedia.org/wiki/CamelCase) is commonly used. That is: words go one after another, each word starts with a capital letter: `myVeryLongName`.\n\nWhat's interesting -- the dollar sign `'$'` and the underscore `'_'` can also be used in names. They are regular symbols, just like letters, without any special meaning.\n\nThese names are valid:\n\n```js run untrusted\nlet $ = 1; // declared a variable with the name \"$\"\nlet _ = 2; // and now a variable with the name \"_\"\n\nalert($ + _); // 3\n```\n\nExamples of incorrect variable names:\n\n```js no-beautify\nlet 1a; // cannot start with a digit\n\nlet my-name; // a hyphen '-' is not allowed in the name\n```\n\n```smart header=\"Case matters\"\nVariables named `apple` and `AppLE` -- are two different variables.\n```\n\n````smart header=\"Non-english letters are allowed, but not recommended\"\nIt is possible to use any language, including cyrillic letters or even hieroglyphs, like this:\n\n```js\nlet имя = '...';\nlet 我 = '...';\n```\n\nTechnically, there is no error here, such names are allowed, but there is an international tradition to use English in variable names. Even if we're writing a small script, it may have a long life ahead. People from other countries may need to read it some time.\n````\n\n````warn header=\"Reserved names\"\nThere is a list of reserved words, which cannot be used as variable names, because they are used by the language itself.\n\nFor example, words `let`, `class`, `return`, `function` are reserved.\n\nThe code below gives a syntax error:\n\n```js run no-beautify\nlet let = 5; // can't name a variable \"let\", error!\nlet return = 5; // also can't name it \"return\", error!\n```\n````\n\n````warn header=\"An assignment without `use strict`\"\n\nNormally, we need to define a variable before using it. But in the old times, it was technically possible to create a variable by a mere assignment of the value, without `let`. This still works now if we don't put `use strict`. The behavior is kept for compatibility with old scripts.\n\n```js run no-strict\n// note: no \"use strict\" in this example\n\nnum = 5; // the variable \"num\" is created if didn't exist\n\nalert(num); // 5\n```\n\nThat's a bad practice, it gives an error in the strict mode:\n\n```js run untrusted\n\"use strict\";\n\n*!*\nnum = 5; // error: num is not defined\n*/!*\n```\n\n````\n\n## Constants\n\nTo declare a constant (unchanging) variable, one can use `const` instead of `let`:\n\n```js\nconst myBirthday = '18.04.1982';\n```\n\nVariables declared using `const` are called \"constants\". They cannot be changed. An attempt to do it would cause an error:\n\n```js run\nconst myBirthday = '18.04.1982';\n\nmyBirthday = '01.01.2001'; // error, can't reassign the constant!\n```\n\nWhen a programmer is sure that the variable should never change, he can use `const` to guarantee it, and also to clearly show that fact to everyone.\n\n\n### Uppercase constants\n\nThere is a widespread practice to use constants as aliases for difficult-to-remember values that are known prior to execution.\n\nSuch constants are named using capital letters and underscores.\n\nLike this:\n\n```js run\nconst COLOR_RED = \"#F00\";\nconst COLOR_GREEN = \"#0F0\";\nconst COLOR_BLUE = \"#00F\";\nconst COLOR_ORANGE = \"#FF7F00\";\n\n// ...when we need to pick a color\nlet color = COLOR_ORANGE;\nalert(color); // #FF7F00\n```\n\nBenefits:\n\n- `COLOR_ORANGE` is much easier to remember than `\"#FF7F00\"`.\n- It is much easier to mistype in `\"#FF7F00\"` than in `COLOR_ORANGE`.\n- When reading the code, `COLOR_ORANGE` is much more meaningful than `#FF7F00`.\n\nWhen should we use capitals for a constant, and when should we name them normally? Let's make that clear.\n\nBeing a \"constant\" just means that the value never changes. But there are constants that are known prior to execution (like a hexadecimal value for red), and there are those that are *calculated* in run-time, during the execution, but do not change after the assignment.\n\nFor instance:\n```js\nconst pageLoadTime = /* time taken by a webpage to load */;\n```\n\nThe value of `pageLoadTime` is not known prior to the page load, so it's named normally. But it's still a constant, because it doesn't change after assignment.\n\nIn other words, capital-named constants are only used as aliases for \"hard-coded\" values.  \n\n## Name things right\n\nTalking about variables, there's one more extremely important thing.\n\nPlease name the variables sensibly. Take time to think if needed.\n\nVariable naming is one of the most important and complex skills in programming. A quick glance at variable names can reveal which code is written by a beginner and which by an experienced developer.\n\nIn a real project, most of the time is spent on modifying and extending the existing code base, rather than writing something completely separate from scratch. And when we return to the code after some time of doing something else, it's much easier to find information that is well-labeled. Or, in other words, when the variables have good names.\n\nPlease spend some time thinking about the right name for a variable before declaring it. This will repay you a lot.\n\nSome good-to-follow rules are:\n\n- Use human-readable names like `userName` or `shoppingCart`.\n- Stay away from abbreviations or short names like `a`, `b`, `c`, unless you really know what you're doing.\n- Make the name maximally descriptive and concise. Examples of bad names are `data` and `value`. Such a name says nothing. It is only ok to use them if it's exceptionally obvious from the context which data or value is meant.\n- Agree on terms within your team and in your own mind. If a site visitor is called a \"user\" then we should name related variables like `currentUser` or `newUser`, but not `currentVisitor` or a `newManInTown`.\n\nSounds simple? Indeed it is, but creating good descriptive-and-concise names in practice is not. Go for it.\n\n```smart header=\"Reuse or create?\"\nAnd the last note. There are some lazy programmers who, instead of declaring a new variable, tend to reuse the existing ones.\n\nAs a result, the variable is like a box where people throw different things without changing the sticker. What is inside it now? Who knows... We need to come closer and check.\n\nSuch a programmer saves a little bit on variable declaration, but loses ten times more on debugging the code.\n\nAn extra variable is good, not evil.\n\nModern JavaScript minifiers and browsers optimize code well enough, so it won't create performance issues. Using different variables for different values can even help the engine to optimize.\n```\n\n## Summary\n\nWe can declare variables to store data. That can be done using `var` or `let` or `const`.\n\n- `let` -- is a modern variable declaration. The code must be in strict mode to use `let` in Chrome (V8).\n- `var` -- is an old-school variable declaration. Normally we don't use it at all, but we'll cover subtle differences from `let` in the chapter <info:var>, just in case you need them.\n- `const` -- is like `let`, but the value of the variable can't be changed.\n\nVariables should be named in a way that allows us to easily understand what's inside.","libs":[],"children":["hello-variables","declare-variables","uppercast-constant"],"parent":"first-steps"}},"hello-variables":{"type":"Task","value":{"title":"Working with variables","slug":"hello-variables","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/04-variables/1-hello-variables","weight":1,"libs":[],"importance":2,"content":"\n1. Declare two variables: `admin` and `name`.\n2. Assign the value `\"John\"` to `name`.\n3. Copy the value from `name` to `admin`.\n4. Show the value of `admin` using `alert` (must output \"John\").","solution":"In the code below, each line corresponds to the item in the task list.\n\n```js run\nlet admin, name; // can declare two variables at once\n\nname = \"John\";\n\nadmin = name;\n\nalert( admin ); // \"John\"\n```","parent":"variables"}},"declare-variables":{"type":"Task","value":{"title":"Giving the right name","slug":"declare-variables","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/04-variables/2-declare-variables","weight":2,"libs":[],"importance":3,"content":"\n1. Create the variable with the name of our planet. How would you name such a variable?\n2. Create the variable to store the name of the current visitor. How would you name that variable?","solution":"First, the variable for the name of our planet.\n\nThat's simple:\n\n```js\nlet ourPlanetName = \"Earth\";\n```\n\nNote, we could use a shorter name `planet`, but it might be not obvious what planet it refers to. It's nice to be more verbose. At least until the variable isNotTooLong.\n\nSecond, the name of the current visitor:\n\n```js\nlet currentUserName = \"John\";\n```\n\nAgain, we could shorten that to `userName` if we know for sure that the user is current.\n\nModern editors and autocomplete make long variable names easy to write. Don't save on them. A name with 3 words in it is fine.\n\nAnd if your editor does not have proper autocompletion, get [a new one](/editors).","parent":"variables"}},"uppercast-constant":{"type":"Task","value":{"title":"Uppercase const?","slug":"uppercast-constant","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/04-variables/3-uppercast-constant","weight":3,"libs":[],"importance":4,"content":"\nExamine the following code:\n\n```js\nconst birthday = '18.04.1982';\n\nconst age = someCode(birthday);\n```\n\nHere we have a constant `birthday` date and the `age` is calculated from `birthday` with the help of some code (it is not provided for shortness, and because details don't matter here).\n\nWould it be right to use upper case for `birthday`? For `age`? Or even for both?\n\n```js\nconst BIRTHDAY = '18.04.1982'; // make uppercase?\n\nconst AGE = someCode(BIRTHDAY); // make uppercase?\n```","solution":"We generally use upper case for constants that are \"hard-coded\". Or, in other words, when the value is known prior to execution and directly written into the code.\n\nIn this code, `birthday` is exactly like that. So we could use the upper case for it.\n\nIn contrast, `age` is evaluated in run-time. Today we have one age, a year after we'll have another one. It is constant in a sense that it does not change through the code execution. But it is a bit \"less of a constant\" than `birthday`, it is calculated, so we should keep the lower case for it.","parent":"variables"}},"types":{"type":"Article","value":{"title":"Data types","slug":"types","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/05-types/article.md","isFolder":false,"weight":5,"content":"\nA variable in JavaScript can contain any data. A variable can at one moment be a string and later receive a numeric value:\n\n```js\n// no error\nlet message = \"hello\";\nmessage = 123456;\n```\n\nProgramming languages that allow such things are called \"dynamically typed\", meaning that there are data types, but variables are not bound to any of them.\n\nThere are seven basic data types in JavaScript. Here we'll study the basics, and in the next chapters we'll talk about each of them in detail.\n\n## A number\n\n```js\nlet n = 123;\nn = 12.345;\n```\n\nThe *number* type serves both for integer and floating point numbers.\n\nThere are many operations for numbers, e.g. multiplication `*`, division `/`, addition `+`, subtraction `-` and so on.\n\nBesides regular numbers, there are so-called \"special numeric values\" which also belong to that type: `Infinity`, `-Infinity` and `NaN`.\n\n- `Infinity` represents the mathematical [Infinity](https://en.wikipedia.org/wiki/Infinity) ∞. It is a special value that's greater than any number.\n\n    We can get it as a result of division by zero:\n\n    ```js run\n    alert( 1 / 0 ); // Infinity\n    ```\n\n    Or just mention it in the code directly:\n\n    ```js run\n    alert( Infinity ); // Infinity\n    ```\n- `NaN` represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance:\n\n    ```js run\n    alert( \"not a number\" / 2 ); // NaN, such division is erroneous\n    ```\n\n    `NaN` is sticky. Any further operation on `NaN` would give `NaN`:\n\n    ```js run\n    alert( \"not a number\" / 2 + 5 ); // NaN\n    ```\n\n    So, if there's `NaN` somewhere in a mathematical expression, it propagates to the whole result.\n\n```smart header=\"Mathematical operations are safe\"\nDoing maths is safe in JavaScript. We can do anything: divide by zero, treat non-numeric strings as numbers, etc.\n\nThe script will never stop with a fatal error (\"die\"). At worst we'll get `NaN` as the result.\n```\n\nSpecial numeric values formally belong to the \"number\" type. Of course they are not numbers in a common sense of this word.\n\nWe'll see more about working with numbers in the chapter <info:number>.\n\n## A string\n\nA string in JavaScript must be quoted.\n\n```js\nlet str = \"Hello\";\nlet str2 = 'Single quotes are ok too';\nlet phrase = `can embed ${str}`;\n```\n\nIn JavaScript, there are 3 types of quotes.\n\n1. Double quotes: `\"Hello\"`.\n2. Single quotes: `'Hello'`.\n3. Backticks: <code>&#96;Hello&#96;</code>.\n\nDouble and single quotes are \"simple\" quotes. There's no difference between them in JavaScript.\n\nBackticks are \"extended functionality\" quotes. They allow us to embed variables and expressions into a string by wrapping them in `${…}`, for example:\n\n```js run\nlet name = \"John\";\n\n// embed a variable\nalert( `Hello, *!*${name}*/!*!` ); // Hello, John!\n\n// embed an expression\nalert( `the result is *!*${1 + 2}*/!*` ); // the result is 3\n```\n\nThe expression inside `${…}` is evaluated and the result becomes a part of the string. We can put anything there: a variable like `name` or an arithmetical expression like `1 + 2` or something more complex.\n\nPlease note that this can only be done in backticks. Other quotes do not allow such embedding!\n```js run\nalert( \"the result is ${1 + 2}\" ); // the result is ${1 + 2} (double quotes do nothing)\n```\n\nWe'll cover strings more thoroughly in the chapter <info:string>.\n\n```smart header=\"There is no *character* type.\"\nIn some languages, there is a special \"character\" type for a single character. For example, in the C language and in Java it is `char`.\n\nIn JavaScript, there is no such type. There's only one type: `string`. A string may consist of only one character or many of them.\n```\n\n## A boolean (logical type)\n\nThe boolean type has only two values: `true` and `false`.\n\nThis type is commonly used to store yes/no values: `true` means \"yes, correct\", and `false` means \"no, incorrect\".\n\nFor instance:\n\n```js\nlet nameFieldChecked = true; // yes, name field is checked\nlet ageFieldChecked = false; // no, age field is not checked\n```\n\nBoolean values also come as a result of comparisons:\n\n```js run\nlet isGreater = 4 > 1;\n\nalert( isGreater ); // true (the comparison result is \"yes\")\n```\n\nWe'll cover booleans more deeply later in the chapter <info:logical-operators>.\n\n## The \"null\" value\n\nThe special `null` value does not belong to any type of those described above.\n\nIt forms a separate type of its own, which contains only the `null` value:\n\n```js\nlet age = null;\n```\n\nIn JavaScript `null` is not a \"reference to a non-existing object\" or a \"null pointer\" like in some other languages.\n\nIt's just a special value which has the sense of \"nothing\", \"empty\" or \"value unknown\".\n\nThe code above states that the `age` is unknown or empty for some reason.\n\n## The \"undefined\" value\n\nThe special value `undefined` stands apart. It makes a type of its own, just like `null`.\n\nThe meaning of `undefined` is \"value is not assigned\".\n\nIf a variable is declared, but not assigned, then its value is exactly `undefined`:\n\n```js run\nlet x;\n\nalert(x); // shows \"undefined\"\n```\n\nTechnically, it is possible to assign `undefined` to any variable:\n\n```js run\nlet x = 123;\n\nx = undefined;\n\nalert(x); // \"undefined\"\n```\n\n...But it's not recommended to do that. Normally, we use `null` to write an \"empty\" or an \"unknown\" value into the variable, and `undefined` is only used for checks, to see if the variable is assigned or similar.\n\n## Objects and Symbols\n\nThe `object` type is special.\n\nAll other types are called \"primitive\", because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities. We'll deal with them later in the chapter <info:object> after we know enough about primitives.\n\nThe `symbol` type is used to create unique identifiers for objects. We have to mention it here for completeness, but it's better to study them after objects.\n\n## The typeof operator [#type-typeof]\n\nThe `typeof` operator returns the type of the argument. It's useful when we want to process values of different types differently, or just want to make a quick check.\n\nIt supports two forms of syntax:\n\n1. As an operator: `typeof x`.\n2. Function style: `typeof(x)`.\n\nIn other words, it works both with parentheses or without them. The result is the same.\n\nThe call to `typeof x` returns a string with the type name:\n\n```js\ntypeof undefined // \"undefined\"\n\ntypeof 0 // \"number\"\n\ntypeof true // \"boolean\"\n\ntypeof \"foo\" // \"string\"\n\ntypeof Symbol(\"id\") // \"symbol\"\n\n*!*\ntypeof Math // \"object\"  (1)\n*/!*\n\n*!*\ntypeof null // \"object\"  (2)\n*/!*\n\n*!*\ntypeof alert // \"function\"  (3)\n*/!*\n```\n\nThe last three lines may need additional explanations:\n\n1. `Math` is a built-in object that provides mathematical operations. We will learn it in the chapter <info:number>. Here it serves just as an example of an object.\n2. The result of `typeof null` is `\"object\"`. That's wrong. It is an officially recognized error in `typeof`, kept for compatibility. Of course, `null` is not an object. It is a special value with a separate type of its own. So, again, that's an error in the language.\n3. The result of `typeof alert` is `\"function\"`, because `alert` is a function of the language. We'll study functions in the next chapters, and we'll see that there's no special \"function\" type in the language. Functions belong to the object type. But `typeof` treats them differently. Formally, it's incorrect, but very convenient in practice.\n\n\n## Summary\n\nThere are 7 basic types in JavaScript.\n\n- `number` for numbers of any kind: integer or floating-point.\n- `string` for strings. A string may have one or more characters, there's no separate single-character type.\n- `boolean` for `true`/`false`.\n- `null` for unknown values -- a standalone type that has a single value `null`.\n- `undefined` for unassigned values -- a standalone type that has a single value `undefined`.\n- `object` for more complex data structures.\n- `symbol` for unique identifiers.\n\nThe `typeof` operator allows us to see which type is stored in the variable.\n\n- Two forms: `typeof x` or `typeof(x)`.\n- Returns a string with the name of the type, like `\"string\"`.\n- For `null` returns `\"object\"` -- that's an error in the language, it's not an object in fact.\n\nIn the next chapters we'll concentrate on primitive values and once we're familiar with them, then we'll move on to objects.","libs":[],"children":["string-quotes"],"parent":"first-steps"}},"string-quotes":{"type":"Task","value":{"title":"String quotes","slug":"string-quotes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/05-types/1-string-quotes","weight":1,"libs":[],"importance":5,"content":"\nWhat is the output of the script?\n\n```js\nlet name = \"Ilya\";\n\nalert( `hello ${1}` ); // ?\n\nalert( `hello ${\"name\"}` ); // ?\n\nalert( `hello ${name}` ); // ?\n```","solution":"Backticks embed the expression inside `${...}` into the string.\n\n```js run\nlet name = \"Ilya\";\n\n// the expression is a number 1\nalert( `hello ${1}` ); // hello 1\n\n// the expression is a string \"name\"\nalert( `hello ${\"name\"}` ); // hello name\n\n// the expression is a variable, embed it\nalert( `hello ${name}` ); // hello Ilya\n```","parent":"types"}},"type-conversions":{"type":"Article","value":{"title":"Type Conversions","slug":"type-conversions","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/06-type-conversions/article.md","isFolder":false,"weight":6,"content":"\nMost of the time, operators and functions automatically convert a value to the right type. That's called \"type conversion\".\n\nFor example, `alert` automatically converts any value to a string to show it. Mathematical operations convert values to numbers.\n\nThere are also cases when we need to explicitly convert a value to put things right.\n\n```smart header=\"Not talking about objects yet\"\nIn this chapter we don't cover objects yet. Here we study primitives first. Later, after we learn objects, we'll see how object conversion works in the chapter <info:object-toprimitive>.\n```\n\n## ToString\n\nString conversion happens when we need the string form of a value.\n\nFor example, `alert(value)` does it to show the value.\n\nWe can also use a call `String(value)` function for that:\n\n```js run\nlet value = true;\nalert(typeof value); // boolean\n\n*!*\nvalue = String(value); // now value is a string \"true\"\nalert(typeof value); // string\n*/!*\n```\n\nString conversion is mostly obvious. A `false` becomes `\"false\"`, `null` becomes `\"null\"` etc.\n\n## ToNumber\n\nNumeric conversion happens in mathematical functions and expressions automatically.\n\nFor example, when division `/` is applied to non-numbers:\n\n```js run\nalert( \"6\" / \"2\" ); // 3, strings are converted to numbers\n```\n\nWe can use a `Number(value)` function to explicitly convert a `value`:\n\n```js run\nlet str = \"123\";\nalert(typeof str); // string\n\nlet num = Number(str); // becomes a number 123\n\nalert(typeof num); // number\n```\n\nExplicit conversion is usually required when we read a value from a string-based source like a text form, but we expect a number to be entered.\n\nIf the string is not a valid number, the result of such conversion is `NaN`, for instance:\n\n```js run\nlet age = Number(\"an arbitrary string instead of a number\");\n\nalert(age); // NaN, conversion failed\n```\n\nNumeric conversion rules:\n\n| Value |  Becomes... |\n|-------|-------------|\n|`undefined`|`NaN`|\n|`null`|`0`|\n|<code>true&nbsp;and&nbsp;false</code> | `1` and `0` |\n| `string` | Whitespaces from the start and the end are removed. Then, if the remaining string is empty, the result is `0`. Otherwise, the number is \"read\" from the string. An error gives `NaN`. |\n\nExamples:\n\n```js run\nalert( Number(\"   123   \") ); // 123\nalert( Number(\"123z\") );      // NaN (error reading a number at \"z\")\nalert( Number(true) );        // 1\nalert( Number(false) );       // 0\n```\n\nPlease note that `null` and `undefined` behave differently here: `null` becomes a zero, while `undefined` becomes `NaN`.\n\n````smart header=\"Addition '+' concatenates strings\"\nAlmost all mathematical operations convert values to numbers. With a notable exception of the addition `+`. If one of the added values is a string, then another one is also converted to a string.\n\nThen it concatenates (joins) them:\n\n```js run\nalert( 1 + '2' ); // '12' (string to the right)\nalert( '1' + 2 ); // '12' (string to the left)\n```\n\nThat only happens when one of the arguments is a string. Otherwise, values are converted to numbers.\n````\n\n## ToBoolean\n\nBoolean conversion is the simplest one.\n\nIt happens in logical operations (later we'll meet condition tests and other kinds of them), but also can be performed manually with the call of `Boolean(value)`.\n\nThe conversion rule:\n\n- Values that are intuitively \"empty\", like `0`, an empty string, `null`, `undefined` and `NaN` become `false`.\n- Other values become `true`.\n\nFor instance:\n\n```js run\nalert( Boolean(1) ); // true\nalert( Boolean(0) ); // false\n\nalert( Boolean(\"hello\") ); // true\nalert( Boolean(\"\") ); // false\n```\n\n````warn header=\"Please note: the string with zero `\\\"0\\\"` is `true`\"\nSome languages (namely PHP) treat `\"0\"` as `false`. But in JavaScript a non-empty string is always `true`.\n\n```js run\nalert( Boolean(\"0\") ); // true\nalert( Boolean(\" \") ); // spaces, also true (any non-empty string is true)\n```\n````\n\n\n## Summary\n\nThere are three most widely used type conversions: to string, to number and to boolean.\n\n**`ToString`** -- Occurs when we output something, can be performed with `String(value)`. The conversion to string is usually obvious for primitive values.\n\n**`ToNumber`** -- Occurs in math operations, can be performed with `Number(value)`.\n\nThe conversion follows the rules:\n\n| Value |  Becomes... |\n|-------|-------------|\n|`undefined`|`NaN`|\n|`null`|`0`|\n|<code>true&nbsp;/&nbsp;false</code> | `1 / 0` |\n| `string` | The string is read \"as is\", whitespaces from both sides are ignored. An empty string becomes `0`. An error gives `NaN`. |\n\n**`ToBoolean`** -- Occurs in logical operations, or can be performed with `Boolean(value)`.\n\nFollows the rules:\n\n| Value |  Becomes... |\n|-------|-------------|\n|`0`, `null`, `undefined`, `NaN`, `\"\"` |`false`|\n|any other value| `true` |\n\n\nMost of these rules are easy to understand and memorize. The notable exceptions where people usually make mistakes are:\n\n- `undefined` is `NaN` as a number, not `0`.\n- `\"0\"` and space-only strings like `\"   \"` are true as a boolean.\n\nObjects are not covered here, we'll return to them later in the chapter <info:object-toprimitive> that is devoted exclusively to objects, after we learn more basic things about JavaScript.","libs":[],"children":["primitive-conversions-questions"],"parent":"first-steps"}},"primitive-conversions-questions":{"type":"Task","value":{"title":"Type conversions","slug":"primitive-conversions-questions","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/06-type-conversions/1-primitive-conversions-questions","weight":1,"libs":[],"importance":5,"content":"\nWhat are results of these expressions?\n\n```js no-beautify\n\"\" + 1 + 0\n\"\" - 1 + 0\ntrue + false\n6 / \"3\"\n\"2\" * \"3\"\n4 + 5 + \"px\"\n\"$\" + 4 + 5\n\"4\" - 2\n\"4px\" - 2\n7 / 0\n\"  -9\\n\" + 5\n\"  -9\\n\" - 5\nnull + 1\nundefined + 1\n```\n\nThink well, write down and then compare with the answer.","solution":"```js no-beautify\n\"\" + 1 + 0 = \"10\" // (1)\n\"\" - 1 + 0 = -1 // (2)\ntrue + false = 1\n6 / \"3\" = 2\n\"2\" * \"3\" = 6\n4 + 5 + \"px\" = \"9px\"\n\"$\" + 4 + 5 = \"$45\"\n\"4\" - 2 = 2\n\"4px\" - 2 = NaN\n7 / 0 = Infinity\n\" -9\\n\" + 5 = \" -9\\n5\"\n\" -9\\n\" - 5 = -14\nnull + 1 = 1 // (3)\nundefined + 1 = NaN // (4)\n```\n\n1. The addition with a string `\"\" + 1` converts `1` to a string: `\"\" + 1 = \"1\"`, and then we have `\"1\" + 0`, the same rule is applied.\n2. The subtraction `-` (like most math operations) only works with numbers, it converts an empty string `\"\"` to `0`.\n3. `null` becomes `0` after the numeric conversion.\n4. `undefined` becomes `NaN` after the numeric conversion.","parent":"type-conversions"}},"operators":{"type":"Article","value":{"title":"Operators","slug":"operators","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/07-operators/article.md","isFolder":false,"weight":7,"content":"\nMany operators are known to us from school. They are addition `+`, a multiplication `*`, a subtraction `-` and so on.\n\nIn this chapter we concentrate on aspects that are not covered by school arithmetic.\n\n## Terms: \"unary\", \"binary\", \"operand\"\n\nBefore we move on, let's grasp the common terminology.\n\n- *An operand* -- is what operators are applied to. For instance in multiplication `5 * 2` there are two operands: the left operand is `5`, and the right operand is `2`. Sometimes people say \"arguments\" instead of \"operands\".\n- An operator is *unary* if it has a single operand. For example, the unary negation `-` reverses the sign of the number:\n\n    ```js run\n    let x = 1;\n\n    *!*\n    x = -x;\n    */!*\n    alert( x ); // -1, unary negation was applied\n    ```\n- An operator is *binary* if it has two operands. The same minus exists in the binary form as well:\n\n    ```js run no-beautify\n    let x = 1, y = 3;\n    alert( y - x ); // 2, binary minus subtracts values\n    ```\n\n    Formally, we're talking about two different operators here: the unary negation (single operand, reverses the sign) and the binary subtraction (two operands, subtracts).\n\n## Strings concatenation, binary +\n\nNow let's see special features of JavaScript operators that are beyond school arithmetics.\n\nUsually the plus operator `+` sums numbers.\n\nBut if the binary `+` is applied to strings, it merges (concatenates) them:\n\n```js\nlet s = \"my\" + \"string\";\nalert(s); // mystring\n```\n\nNote that if any of the operands is a string, then the other one is converted to a string too.\n\nFor example:\n\n```js run\nalert( '1' + 2 ); // \"12\"\nalert( 2 + '1' ); // \"21\"\n```\n\nSee, it doesn't matter whether the first operand is a string or the second one. The rule is simple: if either operand is a string, then convert the other one into a string as well.\n\nHowever, note that operations run from left to right. If there are two numbers followed by a string, the numbers will be added before being converted to a string:\n\n\n```js run\nalert(2 + 2 + '1' ); // \"41\" and not \"221\"\n```\n\nString concatenation and conversion is a special feature of the binary plus `+`. Other arithmetic operators work only with numbers. They always convert their operands to numbers.\n\nFor instance, subtraction and division:\n\n```js run\nalert( 2 - '1' ); // 1\nalert( '6' / '2' ); // 3\n```\n\n## Numeric conversion, unary +\n\nThe plus `+` exists in two forms. The binary form that we used above and the unary form.\n\nThe unary plus or, in other words, the plus operator `+` applied to a single value, doesn't do anything with numbers, but if the operand is not a number, then it is converted into it.\n\nFor example:\n\n```js run\n// No effect on numbers\nlet x = 1;\nalert( +x ); // 1\n\nlet y = -2;\nalert( +y ); // -2\n\n*!*\n// Converts non-numbers\nalert( +true ); // 1\nalert( +\"\" );   // 0\n*/!*\n```\n\nIt actually does the same as `Number(...)`, but is shorter.\n\nA need to convert strings to numbers arises very often. For example, if we are getting values from HTML form fields, then they are usually strings.\n\nWhat if we want to sum them?\n\nThe binary plus would add them as strings:\n\n```js run\nlet apples = \"2\";\nlet oranges = \"3\";\n\nalert( apples + oranges ); // \"23\", the binary plus concatenates strings\n```\n\nIf we want to treat them as numbers, then we can convert and then sum:\n\n```js run\nlet apples = \"2\";\nlet oranges = \"3\";\n\n*!*\n// both values converted to numbers before the binary plus\nalert( +apples + +oranges ); // 5\n*/!*\n\n// the longer variant\n// alert( Number(apples) + Number(oranges) ); // 5\n```\n\nFrom a mathematician's standpoint the abundance of pluses may seem strange. But from a programmer's standpoint, there's nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.\n\nWhy are unary pluses applied to values before the binary one? As we're going to see, that's because of their *higher precedence*.\n\n## Operators precedence\n\nIf an expression has more than one operator, the execution order is defined by their *precedence*, or, in other words, there's an implicit priority order among the operators.\n\nFrom school we all know that the multiplication in the expression `1 + 2 * 2` should be calculated before the addition. That's exactly the precedence thing. The multiplication is said to have *a higher precedence* than the addition.\n\nParentheses override any precedence, so if we're not satisfied with the order, we can use them, like: `(1 + 2) * 2`.\n\nThere are many operators in JavaScript. Every operator has a corresponding precedence number. The one with the bigger number executes first. If the precedence is the same, the execution order is from left to right.\n\nAn extract from the [precedence table](https://developer.mozilla.org/en/JavaScript/Reference/operators/operator_precedence) (you don't need to remember this, but note that unary operators are higher than corresponding binary ones):\n\n| Precedence | Name | Sign |\n|------------|------|------|\n| ... | ... | ... |\n| 16 | unary plus | `+` |\n| 16 | unary negation | `-` |\n| 14 | multiplication | `*` |\n| 14 | division | `/` |\n| 13 | addition | `+` |\n| 13 | subtraction | `-` |\n| ... | ... | ... |\n| 3 | assignment | `=` |\n| ... | ... | ... |\n\nAs we can see, the \"unary plus\" has a priority of `16`, which is higher than `13` for the \"addition\" (binary plus). That's why in the expression `\"+apples + +oranges\"` unary pluses work first, and then the addition.\n\n## Assignment\n\nLet's note that an assignment `=` is also an operator. It is listed in the precedence table with the very low priority of `3`.\n\nThat's why when we assign a variable, like `x = 2 * 2 + 1`, then the calculations are done first, and afterwards the `=` is evaluated, storing the result in `x`.\n\n```js\nlet x = 2 * 2 + 1;\n\nalert( x ); // 5\n```\n\nIt is possible to chain assignments:\n\n```js run\nlet a, b, c;\n\n*!*\na = b = c = 2 + 2;\n*/!*\n\nalert( a ); // 4\nalert( b ); // 4\nalert( c ); // 4\n```\n\nChained assignments evaluate from right to left. First the rightmost expression `2 + 2` is evaluated then assigned to the variables on the left: `c`, `b` and `a`. At the end, all variables share a single value.\n\n````smart header=\"The assignment operator `\\\"=\\\"` returns a value\"\nAn operator always returns a value. That's obvious for most of them like an addition `+` or a multiplication `*`. But the assignment operator follows that rule too.\n\nThe call `x = value` writes the `value` into `x` *and then returns it*.\n\nHere's the demo that uses an assignment as part of a more complex expression:\n\n```js run\nlet a = 1;\nlet b = 2;\n\n*!*\nlet c = 3 - (a = b + 1);\n*/!*\n\nalert( a ); // 3\nalert( c ); // 0\n```\n\nIn the example above, the result of `(a = b + 1)` is the value which is assigned to `a` (that is `3`). It is then used to subtract from `3`.\n\nFunny code, isn't it? We should understand how it works, because sometimes we can see it in 3rd-party libraries, but shouldn't write anything like that ourselves. Such tricks definitely don't make the code clearer and readable.\n````\n\n## Remainder %\n\nThe remainder operator `%` despite its look does not have a relation to percents.\n\nThe result of `a % b` is the remainder of the integer division of `a` by `b`.\n\nFor instance:\n\n```js run\nalert( 5 % 2 ); // 1 is a remainder of 5 divided by 2\nalert( 8 % 3 ); // 2 is a remainder of 8 divided by 3\nalert( 6 % 3 ); // 0 is a remainder of 6 divided by 3\n```\n\n## Exponentiation **\n\nThe exponentiation operator `**` is a recent addition to the language.\n\nFor a natural number `b`, the result of `a ** b` is `a` multiplied by itself `b` times.\n\nFor instance:\n\n```js run\nalert( 2 ** 2 ); // 4  (2 * 2)\nalert( 2 ** 3 ); // 8  (2 * 2 * 2)\nalert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)\n```\n\nThe operator works for non-integer numbers of `a` and `b` as well, for instance:\n\n```js run\nalert( 4 ** (1/2) ); // 2 (power of 1/2 is the same as a square root, that's maths)\nalert( 8 ** (1/3) ); // 2 (power of 1/3 is the same as a cubic root)\n```\n\n## Increment/decrement\n\n<!-- Can't use -- in title, because built-in parse turns it into – -->\n\nIncreasing or decreasing a number by one is among the most common numerical operations.\n\nSo, there are special operators for that:\n\n- **Increment** `++` increases a variable by 1:\n\n    ```js run no-beautify\n    let counter = 2;\n    counter++;      // works the same as counter = counter + 1, but is shorter\n    alert( counter ); // 3\n    ```\n- **Decrement** `--` decreases a variable by 1:\n\n    ```js run no-beautify\n    let counter = 2;\n    counter--;      // works the same as counter = counter - 1, but is shorter\n    alert( counter ); // 1\n    ```\n\n```warn\nIncrement/decrement can be applied only to a variable. An attempt to use it on a value like `5++` will give an error.\n```\n\nOperators `++` and `--` can be placed both after and before the variable.\n\n- When the operator goes after the variable, it is called a \"postfix form\": `counter++`.\n- The \"prefix form\" is when the operator stands before the variable: `++counter`.\n\nBoth of these records do the same: increase `counter` by `1`.\n\nIs there any difference? Yes, but we can only see it if we use the returned value of `++/--`.\n\nLet's clarify. As we know, all operators return a value. Increment/decrement is not an exception here. The prefix form returns the new value, while the postfix form returns the old value (prior to increment/decrement).\n\nTo see the difference, here's the example:\n\n```js run\nlet counter = 1;\nlet a = ++counter; // (*)\n\nalert(a); // *!*2*/!*\n```\n\nHere in the line `(*)` the prefix call `++counter` increments `counter` and returns the new value that is `2`. So the `alert` shows `2`.\n\nNow let's use the postfix form:\n\n```js run\nlet counter = 1;\nlet a = counter++; // (*) changed ++counter to counter++\n\nalert(a); // *!*1*/!*\n```\n\nIn the line `(*)` the *postfix* form `counter++` also increments `counter`, but returns the *old* value (prior to increment). So the `alert` shows `1`.\n\nTo summarize:\n\n- If the result of increment/decrement is not used, then there is no difference in which form to use:\n\n    ```js run\n    let counter = 0;\n    counter++;\n    ++counter;\n    alert( counter ); // 2, the lines above did the same\n    ```\n- If we'd like to increase the value *and* use the result of the operator right now, then we need the prefix form:\n\n    ```js run\n    let counter = 0;\n    alert( ++counter ); // 1\n    ```\n- If we'd like to increment, but use the previous value, then we need the postfix form:\n\n    ```js run\n    let counter = 0;\n    alert( counter++ ); // 0\n    ```\n\n````smart header=\"Increment/decrement among other operators\"\nOperators `++/--` can be used inside an expression as well. Their precedence is higher than most other arithmetical operations.\n\nFor instance:\n\n```js run\nlet counter = 1;\nalert( 2 * ++counter ); // 4\n```\n\nCompare with:\n\n```js run\nlet counter = 1;\nalert( 2 * counter++ ); // 2, because counter++ returns the \"old\" value\n```\n\nThough technically allowable, such notation usually makes the code less readable. One line does multiple things -- not good.\n\nWhile reading the code, a fast \"vertical\" eye-scan can easily miss such `counter++`, and it won't be obvious that the variable increases.\n\nThe \"one line -- one action\" style is advised:\n\n```js run\nlet counter = 1;\nalert( 2 * counter );\ncounter++;\n```\n````\n\n## Bitwise operators\n\nBitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.\n\nThese operators are not JavaScript-specific. They are supported in most programming languages.\n\nThe list of operators:\n\n- AND ( `&` )\n- OR ( `|` )\n- XOR ( `^` )\n- NOT ( `~` )\n- LEFT SHIFT ( `<<` )\n- RIGHT SHIFT ( `>>` )\n- ZERO-FILL RIGHT SHIFT ( `>>>` )\n\nThese operators are used very rarely. To understand them, we should delve into low-level number representation, and it would not be optimal to do that right now. Especially because we won't need them any time soon. If you're curious, you can read the [Bitwise Operators](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators) article in MDN. It would be more practical to do that when a real need arises.\n\n## Modify-in-place\n\nWe often need to apply an operator to a variable and store the new result in it.\n\nFor example:\n\n```js\nlet n = 2;\nn = n + 5;\nn = n * 2;\n```\n\nThis notation can be shortened using operators `+=` and `*=`:\n\n```js run\nlet n = 2;\nn += 5; // now n = 7 (same as n = n + 5)\nn *= 2; // now n = 14 (same as n = n * 2)\n\nalert( n ); // 14\n```\n\nShort \"modify-and-assign\" operators exist for all arithmetical and bitwise operators: `/=`, `-=` etc.\n\nSuch operators have the same precedence as a normal assignment, so they run after most other calculations:\n\n```js run\nlet n = 2;\n\nn *= 3 + 5;\n\nalert( n ); // 16  (right part evaluated first, same as n *= 8)\n```\n\n## Comma\n\nThe comma operator `,` is one of most rare and unusual operators. Sometimes it's used to write shorter code, so we need to know it in order to understand what's going on.\n\nThe comma operator allows us to evaluate several expressions, dividing them with a comma `,`. Each of them is evaluated, but the result of only the last one is returned.\n\nFor example:\n\n```js run\n*!*\nlet a = (1 + 2, 3 + 4);\n*/!*\n\nalert( a ); // 7 (the result of 3 + 4)\n```\n\nHere, the first expression `1 + 2` is evaluated, and its result is thrown away, then `3 + 4` is evaluated and returned as the result.\n\n```smart header=\"Comma has a very low precedence\"\nPlease note that the comma operator has very low precedence, lower than `=`, so parentheses are important in the example above.\n\nWithout them: `a = 1 + 2, 3 + 4` evaluates `+` first, summing the numbers into `a = 3, 7`, then the assignment operator `=` assigns    `a = 3`, and then the number after the comma `7` is not processed anyhow, so it's ignored.\n```\n\nWhy do we need such an operator which throws away everything except the last part?\n\nSometimes people use it in more complex constructs to put several actions in one line.\n\nFor example:\n\n```js\n// three operations in one line\nfor (*!*a = 1, b = 3, c = a * b*/!*; a < 10; a++) {\n ...\n}\n```\n\nSuch tricks are used in many JavaScript frameworks, that's why we mention them. But usually they don't improve the code readability, so we should think well before writing like that.","libs":[],"children":["increment-order","assignment-result"],"parent":"first-steps"}},"increment-order":{"type":"Task","value":{"title":"The postfix and prefix forms","slug":"increment-order","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/07-operators/1-increment-order","weight":1,"libs":[],"importance":5,"content":"\nWhat are the final values of all variables `a`, `b`, `c` and `d` after the code below?\n\n```js\nlet a = 1, b = 1;\n\nlet c = ++a; // ?\nlet d = b++; // ?\n```","solution":"The answer is:\n\n- `a = 2`\n- `b = 2`\n- `c = 2`\n- `d = 1`\n\n```js run no-beautify\nlet a = 1, b = 1;\n\nalert( ++a ); // 2, prefix form returns the new value\nalert( b++ ); // 1, postfix form returns the old value\n\nalert( a ); // 2, incremented once\nalert( b ); // 2, incremented once\n```","parent":"operators"}},"assignment-result":{"type":"Task","value":{"title":"Assignment result","slug":"assignment-result","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/07-operators/2-assignment-result","weight":2,"libs":[],"importance":3,"content":"\nWhat are the values of `a` and `x` after the code below?\n\n```js\nlet a = 2;\n\nlet x = 1 + (a *= 2);\n```","solution":"The answer is:\n\n- `a = 4` (multiplied by 2)\n- `x = 5` (calculated as 1 + 4)","parent":"operators"}},"comparison":{"type":"Article","value":{"title":"Comparisons","slug":"comparison","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/08-comparison/article.md","isFolder":false,"weight":8,"content":"\nMany comparison operators we know from maths:\n\n- Greater/less than: <code>a &gt; b</code>, <code>a &lt; b</code>.\n- Greater/less than or equals: <code>a &gt;= b</code>, <code>a &lt;= b</code>.\n- Equality check is written as `a == b` (please note the double equation sign `=`. A single symbol `a = b` would mean an assignment).\n- Not equals. In maths the notation is <code>&ne;</code>, in JavaScript it's written as an assignment with an exclamation sign before it: <code>a != b</code>.\n\n## Boolean is the result\n\nJust as all other operators, a comparison returns a value. The value is of the boolean type.\n\n- `true` -- means \"yes\", \"correct\" or \"the truth\".\n- `false` -- means \"no\", \"wrong\" or \"a lie\".\n\nFor example:\n\n```js run\nalert( 2 > 1 );  // true (correct)\nalert( 2 == 1 ); // false (wrong)\nalert( 2 != 1 ); // true (correct)\n```\n\nA comparison result can be assigned to a variable, just like any value:\n\n```js run\nlet result = 5 > 4; // assign the result of the comparison\nalert( result ); // true\n```\n\n## String comparison\n\nTo see which string is greater than the other, the so-called \"dictionary\" or \"lexicographical\" order is used.\n\nIn other words, strings are compared letter-by-letter.\n\nFor example:\n\n```js run\nalert( 'Z' > 'A' ); // true\nalert( 'Glow' > 'Glee' ); // true\nalert( 'Bee' > 'Be' ); // true\n```\n\nThe algorithm to compare two strings is simple:\n\n1. Compare first characters of both strings.\n2. If the first one is greater(or less), then the first string is greater(or less) than the second. We're done.\n3. Otherwise if first characters are equal, compare the second characters the same way.\n4. Repeat until the end of any string.\n5. If both strings ended simultaneously, then they are equal. Otherwise the longer string is greater.\n\nIn the example above, the comparison `'Z' > 'A'` gets the result at the first step.\n\nStrings `\"Glow\"` and `\"Glee\"` are compared character-by-character:\n\n1. `G` is the same as `G`.\n2. `l` is the same as `l`.\n3. `o` is greater than `e`. Stop here. The first string is greater.\n\n```smart header=\"Not a real dictionary, but Unicode order\"\nThe comparison algorithm given above is roughly equivalent to the one used in book dictionaries or phone books. But it's not exactly the same.\n\nFor instance, case matters. A capital letter `\"A\"` is not equal to the lowercase `\"a\"`. Which one is greater? Actually, the lowercase `\"a\"` is. Why? Because the lowercase character has a greater index in the internal encoding table (Unicode). We'll get back to specific details and consequences in the chapter <info:string>.\n```\n\n## Comparison of different types\n\nWhen compared values belong to different types, they are converted to numbers.\n\nFor example:\n\n```js run\nalert( '2' > 1 ); // true, string '2' becomes a number 2\nalert( '01' == 1 ); // true, string '01' becomes a number 1\n```\n\nFor boolean values, `true` becomes `1` and `false` becomes `0`, that's why:\n\n```js run\nalert( true == 1 ); // true\nalert( false == 0 ); // true\n```\n\n````smart header=\"A funny consequence\"\nIt is possible that at the same time:\n\n- Two values are equal.\n- One of them is `true` as a boolean and the other one is `false` as a boolean.\n\nFor example:\n\n```js run\nlet a = 0;\nalert( Boolean(a) ); // false\n\nlet b = \"0\";\nalert( Boolean(b) ); // true\n\nalert(a == b); // true!\n```\n\nFrom JavaScript's standpoint that's quite normal. An equality check converts using the numeric conversion (hence `\"0\"` becomes `0`), while `Boolean` conversion uses another set of rules.\n````\n\n## Strict equality\n\nA regular equality check `==` has a problem. It cannot differ `0` from `false`:\n\n```js run\nalert( 0 == false ); // true\n```\n\nThe same thing with an empty string:\n\n```js run\nalert( '' == false ); // true\n```\n\nThat's because operands of different types are converted to a number by the equality operator `==`. An empty string, just like `false`, becomes a zero.\n\nWhat to do if we'd like to differentiate `0` from `false`?\n\n**A strict equality operator `===` checks the equality without type conversion.**\n\nIn other words, if `a` and `b` are of different types, then `a === b` immediately returns `false` without an attempt to convert them.\n\nLet's try it:\n\n```js run\nalert( 0 === false ); // false, because the types are different\n```\n\nThere also exists a \"strict non-equality\" operator `!==`, as an analogy for `!=`.\n\nThe strict equality check operator is a bit longer to write, but makes it obvious what's going on and leaves less space for errors.\n\n## Comparison with null and undefined\n\nLet's see more edge cases.\n\nThere's a non-intuitive behavior when `null` or `undefined` are compared with other values.\n\n\nFor a strict equality check `===`\n: These values are different, because each of them belongs to a separate type of its own.\n\n    ```js run\n    alert( null === undefined ); // false\n    ```\n\nFor a non-strict check `==`\n: There's a special rule. These two are a \"sweet couple\": they equal each other (in the sense of `==`), but not any other value.\n\n    ```js run\n    alert( null == undefined ); // true\n    ```\n\nFor maths and other comparisons `< > <= >=`\n: Values `null/undefined` are converted to a number: `null` becomes `0`, while `undefined` becomes `NaN`.\n\nNow let's see funny things that happen when we apply those rules. And, what's more important, how to not fall into a trap with these features.\n\n### Strange result: null vs 0\n\nLet's compare `null` with a zero:\n\n```js run\nalert( null > 0 );  // (1) false\nalert( null == 0 ); // (2) false\nalert( null >= 0 ); // (3) *!*true*/!*\n```\n\nYeah, mathematically that's strange. The last result states that \"`null` is greater than or equal to zero\". Then one of the comparisons above must be correct, but they are both false.\n\nThe reason is that an equality check `==` and comparisons `> < >= <=` work differently. Comparisons convert `null` to a number, hence treat it as `0`. That's why (3) `null >= 0` is true and (1) `null > 0` is false.\n\nOn the other hand, the equality check `==` for `undefined` and `null` works by the rule, without any conversions. They equal each other and don't equal anything else. That's why (2) `null == 0` is false.\n\n### An incomparable undefined\n\nThe value `undefined` shouldn't participate in comparisons at all:\n\n```js run\nalert( undefined > 0 ); // false (1)\nalert( undefined < 0 ); // false (2)\nalert( undefined == 0 ); // false (3)\n```\n\nWhy does it dislike a zero so much? Always false!\n\nWe've got these results because:\n\n- Comparisons `(1)` and `(2)` return `false` because `undefined` gets converted to `NaN`. And `NaN` is a special numeric value which returns `false` for all comparisons.\n- The equality check `(3)` returns `false`, because `undefined` only equals `null` and no other value.\n\n### Evade problems\n\nWhy did we observe these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there's a solid way to evade any problems with them.\n\nJust treat any comparison with `undefined/null` except the strict equality `===` with exceptional care.\n\nDon't use comparisons `>= > < <=` with a variable which may be `null/undefined`, unless you are really sure what you're doing. If a variable can have such values, then check for them separately.\n\n## Summary\n\n- Comparison operators return a logical value.\n- Strings are compared letter-by-letter in the \"dictionary\" order.\n- When values of different types are compared, they get converted to numbers (with the exclusion of a strict equality check).\n- Values `null` and `undefined` equal `==` each other and do not equal any other value.\n- Be careful when using comparisons like `>` or `<` with variables that can occasionally be `null/undefined`. Making a separate check for `null/undefined` is a good idea.","libs":[],"children":["comparison-questions"],"parent":"first-steps"}},"comparison-questions":{"type":"Task","value":{"title":"Comparisons","slug":"comparison-questions","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/08-comparison/1-comparison-questions","weight":1,"libs":[],"importance":5,"content":"\nWhat will be the result for expressions?\n\n```js no-beautify\n5 > 4\n\"apple\" > \"pineapple\"\n\"2\" > \"12\"\nundefined == null\nundefined === null\nnull == \"\\n0\\n\"\nnull === +\"\\n0\\n\"\n```","solution":"```js no-beautify\n5 > 4 → true\n\"apple\" > \"pineapple\" → false\n\"2\" > \"12\" → true \nundefined == null → true \nundefined === null → false \nnull == \"\\n0\\n\" → false\nnull === +\"\\n0\\n\" → false \n```\n\nSome of the reasons:\n\n1. Obviously, true.\n2. Dictionary comparison, hence false.\n3. Again, dictionary comparison, first char of `\"2\"` is greater than the first char of `\"1\"`.\n4. Values `null` and `undefined` equal each other only.\n5. Strict equality is strict. Different types from both sides lead to false.\n6. See (4).\n7. Strict equality of different types.","parent":"comparison"}},"alert-prompt-confirm":{"type":"Article","value":{"title":"Interaction: alert, prompt, confirm","slug":"alert-prompt-confirm","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/09-alert-prompt-confirm/article.md","isFolder":false,"weight":9,"content":"\nThis part of the tutorial aims to cover JavaScript \"as is\", without environment-specific tweaks.\n\nBut still we use a browser as the demo environment. So we should know at least a few user-interface functions. In this chapter we'll get familiar with the browser functions `alert`, `prompt` and `confirm`.\n\n## alert\n\nSyntax:\n\n```js\nalert(message);\n```\n\nThis shows a message and pauses the script execution until the user presses \"OK\".\n\nFor example:\n\n```js run\nalert(\"Hello\");\n```\n\nThe mini-window with the message is called a *modal window*. The word \"modal\" means that the visitor can't interact with the rest of the page, press other buttons etc, until they have dealt with the window. In this case -- until they press \"OK\".\n\n## prompt\n\nFunction `prompt` accepts two arguments:\n\n```js no-beautify\nresult = prompt(title[, default]);\n```\n\nIt shows a modal window with a text message, an input field for the visitor and buttons OK/CANCEL.\n\n`title`\n: The text to show to the visitor.\n\n`default`\n: An optional second parameter, the initial value for the input field.\n\nThe visitor may type something in the prompt input field and press OK. Or they can cancel the input by pressing the CANCEL button or hitting the `key:Esc` key.\n\nThe call to `prompt` returns the text from the field or `null` if the input was canceled.\n\nFor instance:\n\n```js run\nlet age = prompt('How old are you?', 100);\n\nalert(`You are ${age} years old!`); // You are 100 years old!\n```\n\n````warn header=\"IE: always supply a `default`\"\nThe second parameter is optional. But if we don't supply it, Internet Explorer would insert the text `\"undefined\"` into the prompt.\n\nRun this code in Internet Explorer to see that:\n\n```js run\nlet test = prompt(\"Test\");\n```\n\nSo, to look good in IE, it's recommended to always provide the second argument:\n\n```js run\nlet test = prompt(\"Test\", ''); // <-- for IE\n```\n````\n\n## confirm\n\nThe syntax:\n\n```js\nresult = confirm(question);\n```\n\nFunction `confirm` shows a modal window with a `question` and two buttons: OK and CANCEL.\n\nThe result is `true` if OK is pressed and `false` otherwise.\n\nFor example:\n\n```js run\nlet isBoss = confirm(\"Are you the boss?\");\n\nalert( isBoss ); // true if OK is pressed\n```\n\n## Summary\n\nWe covered 3 browser-specific functions to interact with the visitor:\n\n`alert`\n: shows a message.\n\n`prompt`\n: shows a message asking the user to input text. It returns the text or, if CANCEL or `key:Esc` is clicked, all browsers return `null`.\n\n`confirm`\n: shows a message and waits for the user to press \"OK\" or \"CANCEL\". It returns `true` for OK and `false` for CANCEL/`key:Esc`.\n\nAll these methods are modal: they pause the script execution and don't allow the visitor to interact with the rest of the page until the message has been dismissed.\n\nThere are two limitations shared by all the methods above:\n\n1. The exact location of the modal window is determined by the browser. Usually it's in the center.\n2. The exact look of the window also depends on the browser. We can't modify it.\n\nThat is the price for simplicity. There are other ways to show nicer windows and richer interaction with the visitor, but if \"bells and whistles\" do not matter much, these methods work just fine.","libs":[],"children":["simple-page"],"parent":"first-steps"}},"simple-page":{"type":"Task","value":{"title":"A simple page","slug":"simple-page","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/09-alert-prompt-confirm/1-simple-page","weight":1,"libs":[],"importance":4,"content":"\nCreate a web-page that asks for a name and outputs it.\n\n[demo]","solution":"JavaScript-code:\n\n```js demo run\nlet name = prompt(\"What is your name?\", \"\");\nalert(name);\n```\n\nThe full page:\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n\n  <script>\n    'use strict';\n\n    let name = prompt(\"What is your name?\", \"\");\n    alert(name);\n  </script>\n\n</body>\n</html>\n```","parent":"alert-prompt-confirm"}},"ifelse":{"type":"Article","value":{"title":"Conditional operators: if, '?'","slug":"ifelse","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/article.md","isFolder":false,"weight":10,"content":"\nSometimes we need to perform different actions based on a condition.\n\nThere is the `if` statement for that and also the conditional (ternary) operator for conditional evaluation which we will be referring as  the “question mark” operator `?` for simplicity.\n\n## The \"if\" statement\n\nThe `if` statement gets a condition, evaluates it and, if the result is `true`, executes the code.\n\nFor example:\n\n```js run\nlet year = prompt('In which year was ECMAScript-2015 specification published?', '');\n\n*!*\nif (year == 2015) alert( 'You are right!' );\n*/!*\n```\n\nIn the example above, the condition is a simple equality check: `year == 2015`, but it can be much more complex.\n\nIf there is more than one statement to be executed, we have to wrap our code block inside curly braces:\n\n```js\nif (year == 2015) {\n  alert( \"That's correct!\" );\n  alert( \"You're so smart!\" );\n}\n```\n\nIt is recommended to wrap your code block with curly braces `{}` every time with `if`, even if there is only one statement. That improves readability.\n\n## Boolean conversion\n\nThe `if (…)` statement evaluates the expression in parentheses and converts it to the boolean type.\n\nLet's recall the conversion rules from the chapter <info:type-conversions>:\n\n- A number `0`, an empty string `\"\"`, `null`, `undefined` and `NaN` become `false`. Because of that they are called \"falsy\" values.\n- Other values become `true`, so they are called \"truthy\".\n\nSo, the code under this condition would never execute:\n\n```js\nif (0) { // 0 is falsy\n  ...\n}\n```\n\n...And inside this condition -- always works:\n\n```js\nif (1) { // 1 is truthy\n  ...\n}\n```\n\nWe can also pass a pre-evaluated boolean value to `if`, like here:\n\n```js\nlet cond = (year == 2015); // equality evaluates to true or false\n\nif (cond) {\n  ...\n}\n```\n\n## The \"else\" clause\n\nThe `if` statement may contain an optional \"else\" block. It executes when the condition is wrong.\n\nFor example:\n```js run\nlet year = prompt('In which year was ECMAScript-2015 specification published?', '');\n\nif (year == 2015) {\n  alert( 'You guessed it right!' );\n} else {\n  alert( 'How can you be so wrong?' ); // any value except 2015\n}\n```\n\n## Several conditions: \"else if\"\n\nSometimes we'd like to test several variants of a condition. There is an `else if` clause for that.\n\nFor example:\n\n```js run\nlet year = prompt('In which year was ECMAScript-2015 specification published?', '');\n\nif (year < 2015) {\n  alert( 'Too early...' );\n} else if (year > 2015) {\n  alert( 'Too late' );\n} else {\n  alert( 'Exactly!' );\n}\n```\n\nIn the code above JavaScript first checks `year < 2015`. If it is falsy it then goes to the next condition `year > 2015`, and otherwise shows the last `alert`.\n\nThere can be more `else if` blocks. The ending `else` is optional.\n\n## Ternary operator '?'\n\nSometimes we need to assign a variable depending on a condition.\n\nFor instance:\n\n```js run no-beautify\nlet accessAllowed;\nlet age = prompt('How old are you?', '');\n\n*!*\nif (age > 18) {\n  accessAllowed = true;\n} else {\n  accessAllowed = false;\n}\n*/!*\n\nalert(accessAllowed);\n```\n\nThe so-called \"ternary\" or \"question mark\" operator lets us do that shorter and simpler.\n\nThe operator is represented by a question mark `?`.  The formal term \"ternary\" means that the operator has three operands. It is actually the one and only operator in JavaScript which has that many.\n\nThe syntax is:\n```js\nlet result = condition ? value1 : value2\n```\n\nThe `condition` is evaluated, if it's truthy then `value1` is returned, otherwise -- `value2`.\n\nFor example:\n\n```js\nlet accessAllowed = (age > 18) ? true : false;\n```\n\nTechnically, we can omit parentheses around `age > 18`. The question mark operator has a low precedence. It executes after the comparison `>`, so that'll do the same:\n\n```js\n// the comparison operator \"age > 18\" executes first anyway\n// (no need to wrap it into parentheses)\nlet accessAllowed = age > 18 ? true : false;\n```\n\nBut parentheses make the code more readable, so it's recommended to use them.\n\n````smart\nIn the example above it's possible to evade the question mark operator, because the comparison by itself returns `true/false`:\n\n```js\n// the same\nlet accessAllowed = age > 18;\n```\n````\n\n## Multiple '?'\n\nA sequence of question mark `?` operators allows returning a value that depends on more than one condition.\n\nFor instance:\n```js run\nlet age = prompt('age?', 18);\n\nlet message = (age < 3) ? 'Hi, baby!' :\n  (age < 18) ? 'Hello!' :\n  (age < 100) ? 'Greetings!' :\n  'What an unusual age!';\n\nalert( message );\n```\n\nIt may be difficult at first to grasp what's going on. But after a closer look we can see that it's just an ordinary sequence of tests.\n\n1. The first question mark checks whether `age < 3`.\n2. If true -- returns `'Hi, baby!'`, otherwise -- goes after the colon `\":\"` and checks for `age < 18`.\n3. If that's true -- returns `'Hello!'`, otherwise -- goes after the next colon `\":\"` and checks for `age < 100`.\n4. If that's true -- returns `'Greetings!'`, otherwise -- goes after the last colon `\":\"` and returns `'What an unusual age!'`.\n\nThe same logic using `if..else`:\n\n```js\nif (age < 3) {\n  message = 'Hi, baby!';\n} else if (age < 18) {\n  message = 'Hello!';\n} else if (age < 100) {\n  message = 'Greetings!';\n} else {\n  message = 'What an unusual age!';\n}\n```\n\n## Non-traditional use of '?'\n\nSometimes the question mark `?` is used as a replacement for `if`:\n\n```js run no-beautify\nlet company = prompt('Which company created JavaScript?', '');\n\n*!*\n(company == 'Netscape') ?\n   alert('Right!') : alert('Wrong.');\n*/!*\n```\n\nDepending on the condition `company == 'Netscape'`, either the first or the second part after `?` gets executed and shows the alert.\n\nWe don't assign a result to a variable here. The idea is to execute different code depending on the condition.\n\n**It is not recommended to use the question mark operator in this way.**\n\nThe notation seems to be shorter than `if`, which appeals to some programmers. But it is less readable.\n\nHere is the same code with `if` for comparison:\n\n```js run no-beautify\nlet company = prompt('Which company created JavaScript?', '');\n\n*!*\nif (company == 'Netscape') {\n  alert('Right!');\n} else {\n  alert('Wrong.');\n}\n*/!*\n```\n\nOur eyes scan the code vertically. The constructs which span several lines are easier to understand than a long horizontal instruction set.\n\nThe idea of a question mark `?` is to return one or another value depending on the condition. Please use it for exactly that. There is `if` to execute different branches of the code.","libs":[],"children":["if-zero-string","check-standard","sign","check-login","rewrite-if-question","rewrite-if-else-question"],"parent":"first-steps"}},"if-zero-string":{"type":"Task","value":{"title":"if (a string with zero)","slug":"if-zero-string","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/1-if-zero-string","weight":1,"libs":[],"importance":5,"content":"\nWill `alert` be shown?\n\n```js\nif (\"0\") {\n  alert( 'Hello' );\n}\n```","solution":"**Yes, it will.**\n\nAny string except an empty one (and `\"0\"` is not empty) becomes `true` in the logical context.\n\nWe can run and check:\n\n```js run\nif (\"0\") {\n  alert( 'Hello' );\n}\n```","parent":"ifelse"}},"check-standard":{"type":"Task","value":{"title":"The name of JavaScript","slug":"check-standard","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/2-check-standard","weight":2,"libs":[],"importance":2,"content":"\nUsing the `if..else` construct, write the code which asks: 'What is the \"official\" name of JavaScript?'\n\nIf the visitor enters \"ECMAScript\", then output \"Right!\", otherwise -- output: \"Didn't know? ECMAScript!\"\n\n![](ifelse_task2.png)\n\n[demo src=\"ifelse_task2\"]","solution":"[html run src=\"ifelse_task2/index.html\"]","parent":"ifelse"}},"sign":{"type":"Task","value":{"title":"Show the sign","slug":"sign","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/3-sign","weight":3,"libs":[],"importance":2,"content":"\nUsing `if..else`, write the code which gets a number via `prompt` and then shows in `alert`:\n\n- `1`, if the value is greater than zero,\n- `-1`, if less than zero,\n- `0`, if equals zero.\n\nIn this task we assume that the input is always a number.\n\n[demo src=\"if_sign\"]","solution":"```js run\nlet value = prompt('Type a number', 0);\n\nif (value > 0) {\n  alert( 1 );\n} else if (value < 0) {\n  alert( -1 );\n} else {\n  alert( 0 );\n}\n```","parent":"ifelse"}},"check-login":{"type":"Task","value":{"title":"Check the login","slug":"check-login","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/4-check-login","weight":4,"libs":[],"importance":3,"content":"\nWrite the code which asks for a login with `prompt`.\n\nIf the visitor enters `\"Admin\"`, then `prompt` for a password, if the input is an empty line or `key:Esc` -- show \"Canceled.\", if it's another string -- then show \"I don't know you\".\n\nThe password is checked as follows:\n\n- If it equals \"TheMaster\", then show \"Welcome!\",\n- Another string -- show \"Wrong password\",\n- For an empty string or cancelled input, show \"Canceled.\"\n\nThe schema:\n\n![](ifelse_task.png)\n\nPlease use nested `if` blocks. Mind the overall readability of the code.\n\nHint: passing an empty input to a prompt returns an empty string `''`. Pressing `key:ESC` during a prompt returns `null`.\n\n[demo]","solution":"```js run demo\nlet userName = prompt(\"Who's there?\", '');\n\nif (userName == 'Admin') {\n\n  let pass = prompt('Password?', '');\n\n  if (pass == 'TheMaster') {\n    alert( 'Welcome!' );\n  } else if (pass == '' || pass == null) {\n    alert( 'Canceled.' );\n  } else {\n    alert( 'Wrong password' );\n  }\n\n} else if (userName == '' || userName == null) {\n  alert( 'Canceled' );\n} else {\n  alert( \"I don't know you\" );\n}\n```\n\nNote the vertical indents inside the `if` blocks. They are technically not required, but make the code more readable.","parent":"ifelse"}},"rewrite-if-question":{"type":"Task","value":{"title":"Rewrite 'if' into '?'","slug":"rewrite-if-question","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/5-rewrite-if-question","weight":5,"libs":[],"importance":5,"content":"\nRewrite this `if` using the ternary operator `'?'`:\n\n```js\nif (a + b < 4) {\n  result = 'Below';\n} else {\n  result = 'Over';\n}\n```","solution":"```js\nresult = (a + b < 4) ? 'Below' : 'Over';\n```","parent":"ifelse"}},"rewrite-if-else-question":{"type":"Task","value":{"title":"Rewrite 'if..else' into '?'","slug":"rewrite-if-else-question","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/10-ifelse/6-rewrite-if-else-question","weight":6,"libs":[],"importance":5,"content":"\nRewrite `if..else` using multiple ternary operators `'?'`.\n\nFor readability, it's recommended to split the code into multiple lines.\n\n```js\nlet message;\n\nif (login == 'Employee') {\n  message = 'Hello';\n} else if (login == 'Director') {\n  message = 'Greetings';\n} else if (login == '') {\n  message = 'No login';\n} else {\n  message = '';\n}\n```","solution":"```js\nlet message = (login == 'Employee') ? 'Hello' :\n  (login == 'Director') ? 'Greetings' :\n  (login == '') ? 'No login' :\n  '';\n```","parent":"ifelse"}},"logical-operators":{"type":"Article","value":{"title":"Logical operators","slug":"logical-operators","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/article.md","isFolder":false,"weight":11,"content":"\nThere are three logical operators in JavaScript: `||` (OR), `&&` (AND), `!` (NOT).\n\nAlthough they are called \"logical\", they can be applied to values of any type, not only boolean. The result can also be of any type.\n\nLet's see the details.\n\n## || (OR)\n\nThe \"OR\" operator is represented with two vertical line symbols:\n\n```js\nresult = a || b;\n```\n\nIn classical programming, logical OR is meant to manipulate boolean values only. If any of its arguments are `true`, then it returns `true`, otherwise it returns `false`.\n\nIn JavaScript the operator is a little bit more tricky and powerful. But first let's see what happens with boolean values.\n\nThere are four possible logical combinations:\n\n```js run\nalert( true || true );   // true\nalert( false || true );  // true\nalert( true || false );  // true\nalert( false || false ); // false\n```\n\nAs we can see, the result is always `true` except for the case when both operands are `false`.\n\nIf an operand is not boolean, then it's converted to boolean for the evaluation.\n\nFor instance, a number `1` is treated as `true`, a number `0` -- as `false`:\n\n```js run\nif (1 || 0) { // works just like if( true || false )\n  alert( 'truthy!' );\n}\n```\n\nMost of the time, OR `||` is used in an `if` statement to test if *any* of the given conditions is correct.\n\nFor example:\n\n```js run\nlet hour = 9;\n\n*!*\nif (hour < 10 || hour > 18) {\n*/!*\n  alert( 'The office is closed.' );\n}\n```\n\nWe can pass more conditions:\n\n```js run\nlet hour = 12;\nlet isWeekend = true;\n\nif (hour < 10 || hour > 18 || isWeekend) {\n  alert( 'The office is closed.' ); // it is the weekend\n}\n```\n\n## OR seeks the first truthy value\n\nThe logic described above is somewhat classical. Now let's bring in the \"extra\" features of JavaScript.\n\nThe extended algorithm works as follows.\n\nGiven multiple OR'ed values:\n\n```js\nresult = value1 || value2 || value3;\n```\n\nThe OR `||` operator does the following:\n\n- Evaluate operands from left to right.\n- For each operand, convert it to boolean. If the result is `true`, then stop and return the original value of that operand.\n- If all other operands have been assessed (i.e. all were `false`), return the last operand.\n\nA value is returned in its original form, without the conversion.\n\nIn other words, a chain of OR `\"||\"` returns the first truthy value or the last one if no such value is found.\n\nFor instance:\n\n```js run\nalert( 1 || 0 ); // 1 (1 is truthy)\nalert( true || 'no matter what' ); // (true is truthy)\n\nalert( null || 1 ); // 1 (1 is the first truthy value)\nalert( null || 0 || 1 ); // 1 (the first truthy value)\nalert( undefined || null || 0 ); // 0 (all falsy, returns the last value)\n```\n\nThat leads to some interesting usages compared to a \"pure, classical, boolean-only OR\".\n\n1. **Getting the first truthy value from the list of variables or expressions.**\n\n    Imagine we have several variables, which can either contain the data or be `null/undefined`. And we need to choose the first one with data.\n\n    We can use OR `||` for that:\n\n    ```js run\n    let currentUser = null;\n    let defaultUser = \"John\";\n\n    *!*\n    let name = currentUser || defaultUser || \"unnamed\";\n    */!*\n\n    alert( name ); // selects \"John\" – the first truthy value\n    ```\n\n    If both `currentUser` and `defaultUser` were falsy then `\"unnamed\"` would be the result.\n2. **Short-circuit evaluation.**\n\n    Operands can be not only values, but arbitrary expressions. OR evaluates and tests them from left to right. The evaluation stops when a truthy value is reached, and the value is returned. The process is called \"a short-circuit evaluation\", because it goes as short as possible from left to right.\n\n    This is clearly seen when the expression given as the second argument has a side effect. Like a variable assignment.\n\n    If we run the example below, `x` would not get assigned:\n\n    ```js run no-beautify\n    let x;\n\n    *!*true*/!* || (x = 1);\n\n    alert(x); // undefined, because (x = 1) not evaluated\n    ```\n\n    ...And if the first argument is `false`, then `OR` goes on and evaluates the second one thus running the assignment:\n\n    ```js run no-beautify\n    let x;\n\n    *!*false*/!* || (x = 1);\n\n    alert(x); // 1\n    ```\n\n    An assignment is a simple case, other side effects can be involved.\n\n    As we can see, such a use case is a \"shorter way to do `if`\". The first operand is converted to boolean and if it's false then the second one is evaluated.\n\n    Most of time it's better to use a \"regular\" `if` to keep the code easy to understand, but sometimes that can be handy.\n\n## && (AND)\n\nThe AND operator is represented with two ampersands `&&`:\n\n```js\nresult = a && b;\n```\n\nIn classical programming AND returns `true` if both operands are truthy and `false` otherwise:\n\n```js run\nalert( true && true );   // true\nalert( false && true );  // false\nalert( true && false );  // false\nalert( false && false ); // false\n```\n\nAn example with `if`:\n\n```js run\nlet hour = 12;\nlet minute = 30;\n\nif (hour == 12 && minute == 30) {\n  alert( 'Time is 12:30' );\n}\n```\n\nJust as for OR, any value is allowed as an operand of AND:\n\n```js run\nif (1 && 0) { // evaluated as true && false\n  alert( \"won't work, because the result is falsy\" );\n}\n```\n\n\n## AND seeks the first falsy value\n\nGiven multiple AND'ed values:\n\n```js\nresult = value1 && value2 && value3;\n```\n\nThe AND `&&` operator does the following:\n\n- Evaluate operands from left to right.\n- For each operand, convert it to a boolean. If the result is `false`, stop and return the original value of that operand.\n- If all other operands have been assessed (i.e. all were truthy), return the last operand.\n\nIn other words, AND returns the first falsy value or the last value if none were found.\n\nThe rules above are similar to OR. The difference is that AND returns the first *falsy* value while OR returns the first *truthy* one.\n\nExamples:\n\n```js run\n// if the first operand is truthy,\n// AND returns the second operand:\nalert( 1 && 0 ); // 0\nalert( 1 && 5 ); // 5\n\n// if the first operand is falsy,\n// AND returns it. The second operand is ignored\nalert( null && 5 ); // null\nalert( 0 && \"no matter what\" ); // 0\n```\n\nWe can also pass several values in a row. See how the first falsy one is returned:\n\n```js run\nalert( 1 && 2 && null && 3 ); // null\n```\n\nWhen all values are truthy, the last value is returned:\n\n```js run\nalert( 1 && 2 && 3 ); // 3, the last one\n```\n\n````smart header=\"AND `&&` executes before OR `||`\"\nThe precedence of the AND `&&` operator is higher than OR `||`, so it executes before OR.\n\nIn the code below `1 && 0` is calculated first:\n\n```js run\nalert( 5 || 1 && 0 ); // 5\n```\n````\n\nJust like OR, the AND `&&` operator can sometimes replace `if`.\n\nFor instance:\n\n```js run\nlet x = 1;\n\n(x > 0) && alert( 'Greater than zero!' );\n```\n\nThe action in the right part of `&&` would execute only if the evaluation reaches it. That is: only if `(x > 0)` is true.\n\nSo we basically have an analogue for:\n\n```js run\nlet x = 1;\n\nif (x > 0) {\n  alert( 'Greater than zero!' );\n}\n```\n\nThe variant with `&&` appears to be shorter. But `if` is more obvious and tends to be a little bit more readable.\n\nSo it is recommended to use every construct for its purpose. Use `if` if we want if. And use `&&` if we want AND.\n\n## ! (NOT)\n\nThe boolean NOT operator is represented with an exclamation sign `!`.\n\nThe syntax is pretty simple:\n\n```js\nresult = !value;\n```\n\nThe operator accepts a single argument and does the following:\n\n1. Converts the operand to boolean type: `true/false`.\n2. Returns an inverse value.\n\nFor instance:\n\n```js run\nalert( !true ); // false\nalert( !0 ); // true\n```\n\nA double NOT `!!` is sometimes used for converting a value to boolean type:\n\n```js run\nalert( !!\"non-empty string\" ); // true\nalert( !!null ); // false\n```\n\nThat is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. At the end we have a plain value-to-boolean conversion.\n\nThere's a little more verbose way to do the same thing -- a built-in `Boolean` function:\n\n```js run\nalert( Boolean(\"non-empty string\") ); // true\nalert( Boolean(null) ); // false\n```","libs":[],"children":["alert-null-2-undefined","alert-or","alert-1-null-2","alert-and","alert-and-or","check-if-in-range","check-if-out-range","if-question"],"parent":"first-steps"}},"alert-null-2-undefined":{"type":"Task","value":{"title":"What's the result of OR?","slug":"alert-null-2-undefined","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/1-alert-null-2-undefined","weight":1,"libs":[],"importance":5,"content":"\nWhat the code below is going to output?\n\n```js\nalert( null || 2 || undefined );\n```","solution":"The answer is `2`, that's the first truthy value.\n\n```js run\nalert( null || 2 || undefined );\n```","parent":"logical-operators"}},"alert-or":{"type":"Task","value":{"title":"What's the result of OR'ed alerts?","slug":"alert-or","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/2-alert-or","weight":2,"libs":[],"importance":3,"content":"\nWhat the code below will output?\n\n```js\nalert( alert(1) || 2 || alert(3) );\n```","solution":"The answer: first `1`, then `2`.\n\n```js run\nalert( alert(1) || 2 || alert(3) );\n```\n\nThe call to `alert` does not return a value. Or, in other words, it returns `undefined`.\n\n1. The first OR `||` evaluates it's left operand `alert(1)`. That shows the first message with `1`.\n2. The `alert` returns `undefined`, so OR goes on to the second operand searching for a truthy value.\n3. The second operand `2` is truthy, so the execution is halted, `2` is returned and then shown by the outer alert.\n\nThere will be no `3`, because the evaluation does not reach `alert(3)`.","parent":"logical-operators"}},"alert-1-null-2":{"type":"Task","value":{"title":"What is the result of AND?","slug":"alert-1-null-2","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/3-alert-1-null-2","weight":3,"libs":[],"importance":5,"content":"\nWhat this code is going to show?\n\n```js\nalert( 1 && null && 2 );\n```","solution":"The answer: `null`, because it's the first falsy value from the list.\n\n```js run\nalert( 1 && null && 2 );\n```","parent":"logical-operators"}},"alert-and":{"type":"Task","value":{"title":"What is the result of AND'ed alerts?","slug":"alert-and","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/4-alert-and","weight":4,"libs":[],"importance":3,"content":"\nWhat will this code show?\n\n```js\nalert( alert(1) && alert(2) );\n```","solution":"The answer: `1`, and then `undefined`.\n\n```js run\nalert( alert(1) && alert(2) );\n```\n\nThe call to `alert` returns `undefined` (it just shows a message, so there's no meaningful return).\n\nBecause of that, `&&` evaluates the left operand (outputs `1`), and immediately stops, because `undefined` is a falsy value. And `&&` looks for a falsy value and returns it, so it's done.","parent":"logical-operators"}},"alert-and-or":{"type":"Task","value":{"title":"The result of OR AND OR","slug":"alert-and-or","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/5-alert-and-or","weight":5,"libs":[],"importance":5,"content":"\nWhat will be the result?\n\n```js\nalert( null || 2 && 3 || 4 );\n```","solution":"The answer: `3`.\n\n```js run\nalert( null || 2 && 3 || 4 );\n```\n\nThe precedence of AND `&&` is higher than `||`, so it executes first.\n\nThe result of `2 && 3 = 3`, so the expression becomes:\n\n```\nnull || 3 || 4\n```\n\nNow the result if the first truthy value: `3`.","parent":"logical-operators"}},"check-if-in-range":{"type":"Task","value":{"title":"Check the range between","slug":"check-if-in-range","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/6-check-if-in-range","weight":6,"libs":[],"importance":3,"content":"\nWrite an \"if\" condition to check that `age` is between `14` and `90` inclusively.\n\n\"Inclusively\" means that `age` can reach the edges `14` or `90`.","solution":"```js\nif (age >= 14 && age <= 90)\n```","parent":"logical-operators"}},"check-if-out-range":{"type":"Task","value":{"title":"Check the range outside","slug":"check-if-out-range","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/7-check-if-out-range","weight":7,"libs":[],"importance":3,"content":"\nWrite an `if` condition to check that `age` is NOT between 14 and 90 inclusively.\n\nCreate two variants: the first one using NOT `!`, the second one -- without it.","solution":"The first variant:\n\n```js\nif (!(age >= 14 && age <= 90))\n```\n\nThe second variant:\n\n```js\nif (age < 14 || age > 90)\n```","parent":"logical-operators"}},"if-question":{"type":"Task","value":{"title":"A question about \"if\"","slug":"if-question","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/11-logical-operators/8-if-question","weight":8,"libs":[],"importance":5,"content":"\nWhich of these `alert`s are going to execute?\n\nWhat will be the results of the expressions inside `if(...)`?\n\n```js\nif (-1 || 0) alert( 'first' );\nif (-1 && 0) alert( 'second' );\nif (null || -1 && 1) alert( 'third' );\n```","solution":"The answer: the first and the third will execute.\n\nDetails:\n\n```js run\n// Runs.\n// The result of -1 || 0 = -1, truthy\nif (-1 || 0) alert( 'first' );\n\n// Doesn't run\n// -1 && 0 = 0, falsy\nif (-1 && 0) alert( 'second' );\n\n// Executes\n// Operator && has a higher precedence than ||\n// so -1 && 1 executes first, giving us the chain:\n// null || -1 && 1  ->  null || 1  ->  1\nif (null || -1 && 1) alert( 'third' );\n```","parent":"logical-operators"}},"while-for":{"type":"Article","value":{"title":"Loops: while and for","slug":"while-for","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/article.md","isFolder":false,"weight":12,"content":"\nWe often have a need to perform similar actions many times in a row.\n\nFor example, when we need to output goods from a list one after another. Or just run the same code for each number from 1 to 10.\n\n*Loops* are a way to repeat the same part of code multiple times.\n\n## The \"while\" loop\n\nThe `while` loop has the following syntax:\n\n```js\nwhile (condition) {\n  // code\n  // so-called \"loop body\"\n}\n```\n\nWhile the `condition` is `true`, the `code` from the loop body is executed.\n\nFor instance, the loop below outputs `i` while `i < 3`:\n\n```js run\nlet i = 0;\nwhile (i < 3) { // shows 0, then 1, then 2\n  alert( i );\n  i++;\n}\n```\n\nA single execution of the loop body is called *an iteration*. The loop in the example above makes three iterations.\n\nIf there were no `i++` in the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and for server-side JavaScript we can kill the process.\n\nAny expression or a variable can be a loop condition, not just a comparison. They are evaluated and converted to a boolean by `while`.\n\nFor instance, the shorter way to write `while (i != 0)` could be `while (i)`:\n\n```js run\nlet i = 3;\n*!*\nwhile (i) { // when i becomes 0, the condition becomes falsy, and the loop stops\n*/!*\n  alert( i );\n  i--;\n}\n```\n\n````smart header=\"Brackets are not required for a single-line body\"\nIf the loop body has a single statement, we can omit the brackets `{…}`:\n\n```js run\nlet i = 3;\n*!*\nwhile (i) alert(i--);\n*/!*\n```\n````\n\n## The \"do..while\" loop\n\nThe condition check can be moved *below* the loop body using the `do..while` syntax:\n\n```js\ndo {\n  // loop body\n} while (condition);\n```\n\nThe loop will first execute the body, then check the condition and, while it's truthy, execute it again and again.\n\nFor example:\n\n```js run\nlet i = 0;\ndo {\n  alert( i );\n  i++;\n} while (i < 3);\n```\n\nThis form of syntax is rarely used except when you want the body of the loop to execute **at least once** regardless of the condition being truthy. Usually, the other form is preferred: `while(…) {…}`.\n\n## The \"for\" loop\n\nThe `for` loop is the most often used one.\n\nIt looks like this:\n\n```js\nfor (begin; condition; step) {\n  // ... loop body ...\n}\n```\n\nLet's learn the meaning of these parts by example. The loop below runs `alert(i)` for `i` from `0` up to (but not including) `3`:\n\n```js run\nfor (let i = 0; i < 3; i++) { // shows 0, then 1, then 2\n  alert(i);\n}\n```\n\nLet's examine the `for` statement part by part:\n\n| part  |          |                                                                            |\n|-------|----------|----------------------------------------------------------------------------|\n| begin | `i = 0`    | Executes once upon entering the loop.                                      |\n| condition | `i < 3`| Checked before every loop iteration, if fails the loop stops.              |\n| step| `i++`      | Executes after the body on each iteration, but before the condition check. |\n| body | `alert(i)`| Runs again and again while the condition is truthy                         |\n\n\nThe general loop algorithm works like this:\n```\nRun begin\n→ (if condition → run body and run step)\n→ (if condition → run body and run step)\n→ (if condition → run body and run step)\n→ ...\n```\n\nIf you are new to loops, then maybe it would help if you go back to the example and reproduce how it runs step-by-step on a piece of paper.\n\nHere's what exactly happens in our case:\n\n```js\n// for (let i = 0; i < 3; i++) alert(i)\n\n// run begin\nlet i = 0\n// if condition → run body and run step\nif (i < 3) { alert(i); i++ }\n// if condition → run body and run step\nif (i < 3) { alert(i); i++ }\n// if condition → run body and run step\nif (i < 3) { alert(i); i++ }\n// ...finish, because now i == 3\n```\n\n````smart header=\"Inline variable declaration\"\nHere the \"counter\" variable `i` is declared right in the loop. That's called an \"inline\" variable declaration. Such variables are visible only inside the loop.\n\n```js run\nfor (*!*let*/!* i = 0; i < 3; i++) {\n  alert(i); // 0, 1, 2\n}\nalert(i); // error, no such variable\n```\n\nInstead of defining a variable, we can use an existing one:\n\n```js run\nlet i = 0;\n\nfor (i = 0; i < 3; i++) { // use an existing variable\n  alert(i); // 0, 1, 2\n}\n\nalert(i); // 3, visible, because declared outside of the loop\n```\n\n````\n\n\n### Skipping parts\n\nAny part of `for` can be skipped.\n\nFor example, we can omit `begin` if we don't need to do anything at the loop start.\n\nLike here:\n\n```js run\nlet i = 0; // we have i already declared and assigned\n\nfor (; i < 3; i++) { // no need for \"begin\"\n  alert( i ); // 0, 1, 2\n}\n```\n\nWe can also remove the `step` part:\n\n```js run\nlet i = 0;\n\nfor (; i < 3;) {\n  alert( i++ );\n}\n```\n\nThe loop became identical to `while (i < 3)`.\n\nWe can actually remove everything, thus creating an infinite loop:\n\n```js\nfor (;;) {\n  // repeats without limits\n}\n```\n\nPlease note that the two `for` semicolons `;` must be present, otherwise it would be a syntax error.\n\n## Breaking the loop\n\nNormally the loop exits when the condition becomes falsy.\n\nBut we can force the exit at any moment. There's a special `break` directive for that.\n\nFor example, the loop below asks the user for a series of numbers, but \"breaks\" when no number is entered:\n\n```js\nlet sum = 0;\n\nwhile (true) {\n\n  let value = +prompt(\"Enter a number\", '');\n\n*!*\n  if (!value) break; // (*)\n*/!*\n\n  sum += value;\n\n}\nalert( 'Sum: ' + sum );\n```\n\nThe `break` directive is activated at the line `(*)` if the user enters an empty line or cancels the input. It stops the loop immediately, passing the control to the first line after the loop. Namely, `alert`.\n\nThe combination \"infinite loop + `break` as needed\" is great for situations when the condition must be checked not in the beginning/end of the loop, but in the middle, or even in several places of the body.\n\n## Continue to the next iteration [#continue]\n\nThe `continue` directive is a \"lighter version\" of `break`. It doesn't stop the whole loop. Instead it stops the current iteration and forces the loop to start a new one (if the condition allows).\n\nWe can use it if we're done on the current iteration and would like to move on to the next.\n\nThe loop below uses `continue` to output only odd values:\n\n```js run no-beautify\nfor (let i = 0; i < 10; i++) {\n\n  // if true, skip the remaining part of the body\n  *!*if (i % 2 == 0) continue;*/!*\n\n  alert(i); // 1, then 3, 5, 7, 9\n}\n```\n\nFor even values of `i` the `continue` directive stops body execution, passing the control to the next iteration of `for` (with the next number). So the `alert` is only called for odd values.\n\n````smart header=\"The directive `continue` helps to decrease nesting level\"\nA loop that shows odd values could look like this:\n\n```js\nfor (let i = 0; i < 10; i++) {\n\n  if (i % 2) {\n    alert( i );\n  }\n\n}\n```\n\nFrom a technical point of view it's identical to the example above. Surely, we can just wrap the code in the `if` block instead of `continue`.\n\nBut as a side-effect we got one more nesting level (the `alert` call inside the curly braces). If the code inside `if` is longer than a few lines, that may decrease the overall readability.\n````\n\n````warn header=\"No `break/continue` to the right side of '?'\"\nPlease note that syntax constructs that are not expressions cannot be used with the ternary operator `?`. In particular, directives such as `break/continue` are disallowed there.\n\nFor example, if we take this code:\n\n```js\nif (i > 5) {\n  alert(i);\n} else {\n  continue;\n}\n```\n\n...And rewrite it using a question mark:\n\n\n```js no-beautify\n(i > 5) ? alert(i) : *!*continue*/!*; // continue not allowed here\n```\n\n...Then it stops working. The code like this will give a syntax error:\n\n\nThat's just another reason not to use a question mark operator `?` instead of `if`.\n````\n\n## Labels for break/continue\n\nSometimes we need to break out from multiple nested loops at once.\n\nFor example, in the code below we loop over `i` and `j` prompting for coordinates `(i, j)` from `(0,0)` to `(3,3)`:\n\n```js run no-beautify\nfor (let i = 0; i < 3; i++) {\n\n  for (let j = 0; j < 3; j++) {\n\n    let input = prompt(`Value at coords (${i},${j})`, '');\n\n    // what if I want to exit from here to Done (below)?\n\n  }\n}\n\nalert('Done!');\n```\n\nWe need a way to stop the process if the user cancels the input.\n\nThe ordinary `break` after `input` would only break the inner loop. That's not sufficient. Labels come to the rescue.\n\nA *label* is an identifier with a colon before a loop:\n```js\nlabelName: for (...) {\n  ...\n}\n```\n\nThe `break <labelName>` statement in the loop breaks out to the label.\n\nLike here:\n\n```js run no-beautify\n*!*outer:*/!* for (let i = 0; i < 3; i++) {\n\n  for (let j = 0; j < 3; j++) {\n\n    let input = prompt(`Value at coords (${i},${j})`, '');\n\n    // if an empty string or canceled, then break out of both loops\n    if (!input) *!*break outer*/!*; // (*)\n\n    // do something with the value...\n  }\n}\nalert('Done!');\n```\n\nIn the code above `break outer` looks upwards for the label named `outer` and breaks out of that loop.\n\nSo the control goes straight from `(*)` to `alert('Done!')`.\n\nWe can also move the label onto a separate line:\n\n```js no-beautify\nouter:\nfor (let i = 0; i < 3; i++) { ... }\n```\n\nThe `continue` directive can also be used with a label. In this case the execution jumps to the next iteration of the labeled loop.\n\n````warn header=\"Labels are not a \\\"goto\\\"\"\nLabels do not allow us to jump into an arbitrary place of code.\n\nFor example, it is impossible to do this:\n```js\nbreak label;  // jumps to label? No.\n\nlabel: for (...)\n```\n\nThe call to a `break/continue` is only possible from inside the loop, and the label must be somewhere upwards from the directive.\n````\n\n## Summary\n\nWe covered 3 types of loops:\n\n- `while` -- The condition is checked before each iteration.\n- `do..while` -- The condition is checked after each iteration.\n- `for (;;)` -- The condition is checked before each iteration, additional settings available.\n\nTo make an \"infinite\" loop, usually the `while(true)` construct is used. Such a loop, just like any other, can be stopped with the `break` directive.\n\nIf we don't want to do anything on the current iteration and would like to forward to the next one, the `continue` directive does it.\n\n`break/continue` support labels before the loop. A label is the only way for `break/continue` to escape the nesting and go to the outer loop.","libs":[],"children":["loop-last-value","which-value-while","which-value-for","for-even","replace-for-while","repeat-until-correct","list-primes"],"parent":"first-steps"}},"loop-last-value":{"type":"Task","value":{"title":"Last loop value","slug":"loop-last-value","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/1-loop-last-value","weight":1,"libs":[],"importance":3,"content":"\nWhat is the last value alerted by this code? Why?\n\n```js\nlet i = 3;\n\nwhile (i) {\n  alert( i-- );\n}\n```","solution":"The answer: `1`.\n\n```js run\nlet i = 3;\n\nwhile (i) {\n  alert( i-- );\n}\n```\n\nEvery loop iteration decreases `i` by `1`. The check `while(i)` stops the loop when `i = 0`.\n\nHence, the steps of the loop form the following sequence (\"loop unrolled\"):\n\n```js\nlet i = 3;\n\nalert(i--); // shows 3, decreases i to 2\n\nalert(i--) // shows 2, decreases i to 1\n\nalert(i--) // shows 1, decreases i to 0\n\n// done, while(i) check stops the loop\n```","parent":"while-for"}},"which-value-while":{"type":"Task","value":{"title":"Which values shows the while?","slug":"which-value-while","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/2-which-value-while","weight":2,"libs":[],"importance":4,"content":"\nFor every loop, write down which values it shows, in your opinion. And then compare with the answer.\n\nBoth loops `alert` same values or not?\n\n1. The prefix form `++i`:\n\n    ```js\n    let i = 0;\n    while (++i < 5) alert( i );\n    ```\n2. The postfix form `i++`\n\n    ```js\n    let i = 0;\n    while (i++ < 5) alert( i );\n    ```","solution":"The task demonstrates how postfix/prefix forms can lead to different results when used in comparisons.\n\n1. **From 1 to 4**\n\n    ```js run\n    let i = 0;\n    while (++i < 5) alert( i );\n    ```\n\n    The first value is `i=1`, because `++i` first increments `i` and then returns the new value. So the first comparison is `1 < 5` and the `alert` shows `1`.\n\n    Then follow `2,3,4…` -- the values show up one after another. The comparison always uses the incremented value, because `++` is before the variable.\n\n    Finally, `i=4` is incremented to `5`, the comparison `while(5 < 5)` fails, and the loop stops. So `5` is not shown.\n2. **From 1 to 5**\n\n    ```js run\n    let i = 0;\n    while (i++ < 5) alert( i );\n    ```\n\n    The first value is again `i=1`. The postfix form of `i++` increments `i` and then returns the *old* value, so the comparison `i++ < 5` will use `i=0` (contrary to `++i < 5`).\n\n    But the `alert` call is separate. It's another statement which executes after the increment and the comparison. So it gets the current `i=1`.\n\n    Then follow `2,3,4…`\n\n    Let's stop on `i=4`. The prefix form `++i` would increment it and use `5` in the comparison. But here we have the postfix form `i++`. So it increments `i` to `5`, but returns the old value. Hence the comparison is actually `while(4 < 5)` -- true, and the control goes on to `alert`.\n\n    The value `i=5` is the last one, because on the next step `while(5 < 5)` is false.","parent":"while-for"}},"which-value-for":{"type":"Task","value":{"title":"Which values get shown by the \"for\" loop?","slug":"which-value-for","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/3-which-value-for","weight":3,"libs":[],"importance":4,"content":"\nFor each loop write down which values it is going to show. Then compare with the answer.\n\nBoth loops `alert` same values or not?\n\n1. The postfix form:\n\n    ```js\n    for (let i = 0; i < 5; i++) alert( i );\n    ```\n2. The prefix form:\n\n    ```js\n    for (let i = 0; i < 5; ++i) alert( i );\n    ```","solution":"**The answer: from `0` to `4` in both cases.**\n\n```js run\nfor (let i = 0; i < 5; ++i) alert( i );\n\nfor (let i = 0; i < 5; i++) alert( i );\n```\n\nThat can be easily deducted from the algorithm of `for`:\n\n1. Execute once `i = 0` before everything (begin).\n2. Check the condition `i < 5`\n3. If `true` -- execute the loop body `alert(i)`, and then `i++`\n\nThe increment `i++` is separated from the condition check (2). That's just another statement.\n\nThe value returned by the increment is not used here, so there's no difference between `i++` and `++i`.","parent":"while-for"}},"for-even":{"type":"Task","value":{"title":"Output even numbers in the loop","slug":"for-even","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/4-for-even","weight":4,"libs":[],"importance":5,"content":"\nUse the `for` loop to output even numbers from `2` to `10`.\n\n[demo]","solution":"```js run demo\nfor (let i = 2; i <= 10; i++) {\n  if (i % 2 == 0) {\n    alert( i );\n  }\n}\n```\n\nWe use the \"modulo\" operator `%` to get the remainder and check for the evenness here.","parent":"while-for"}},"replace-for-while":{"type":"Task","value":{"title":"Replace \"for\" with \"while\"","slug":"replace-for-while","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/5-replace-for-while","weight":5,"libs":[],"importance":5,"content":"\nRewrite the code changing the `for` loop to `while` without altering its behavior (the output should stay same).\n\n```js run\nfor (let i = 0; i < 3; i++) {\n  alert( `number ${i}!` );\n}\n```","solution":"```js run\nlet i = 0;\nwhile (i < 3) {\n  alert( `number ${i}!` );\n  i++;\n}\n```","parent":"while-for"}},"repeat-until-correct":{"type":"Task","value":{"title":"Repeat until the input is correct","slug":"repeat-until-correct","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/6-repeat-until-correct","weight":6,"libs":[],"importance":5,"content":"\nWrite a loop which prompts for a number greater than `100`. If the visitor enters another number -- ask him to input again.\n\nThe loop must ask for a number until either the visitor enters a number greater than `100` or cancels the input/enters an empty line.\n\nHere we can assume that the visitor only inputs numbers. There's no need to implement a special handling for a non-numeric input in this task.\n\n[demo]","solution":"```js run demo\nlet num;\n\ndo {\n  num = prompt(\"Enter a number greater than 100?\", 0);\n} while (num <= 100 && num);\n```\n\nThe loop `do..while` repeats while both checks are truthy:\n\n1. The check for `num <= 100` -- that is, the entered value is still not greater than `100`.\n2. The check `&& num` is false when `num` is `null` or a empty string. Then the `while` loop stops too.\n\nP.S. If `num` is `null` then `num <= 100` is `true`, so without the 2nd check the loop wouldn't stop if the user clicks CANCEL. Both checks are required.","parent":"while-for"}},"list-primes":{"type":"Task","value":{"title":"Output prime numbers","slug":"list-primes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/12-while-for/7-list-primes","weight":7,"libs":[],"importance":3,"content":"\nAn integer number greater than `1` is called a [prime](https://en.wikipedia.org/wiki/Prime_number) if it cannot be divided without a remainder by anything except `1` and itself.\n\nIn other words, `n > 1` is a prime if it can't be evenly divided by anything except `1` and `n`.\n\nFor example, `5` is a prime, because it cannot be divided without a remainder by `2`, `3` and `4`.\n\n**Write the code which outputs prime numbers in the interval from `2` to `n`.**\n\nFor `n = 10` the result will be `2,3,5,7`.\n\nP.S. The code should work for any `n`, not be hard-tuned for any fixed value.","solution":"There are many algorithms for this task.\n\nLet's use a nested loop:\n\n```js\nFor each i in the interval {\n  check if i has a divisor from 1..i\n  if yes => the value is not a prime\n  if no => the value is a prime, show it\n}\n```\n\nThe code using a label:\n\n```js run\nlet n = 10;\n\nnextPrime:\nfor (let i = 2; i <= n; i++) { // for each i...\n\n  for (let j = 2; j < i; j++) { // look for a divisor..\n    if (i % j == 0) continue nextPrime; // not a prime, go next i\n  }\n\n  alert( i ); // a prime\n}\n```\n\nThere's a lot of space to opimize it. For instance, we could look for the divisors from `2` to square root of `i`. But anyway, if we want to be really efficient for large intervals, we need change the approach and rely on advanced maths and complex algorithms like [Quadratic sieve](https://en.wikipedia.org/wiki/Quadratic_sieve), [General number field sieve](https://en.wikipedia.org/wiki/General_number_field_sieve) etc.","parent":"while-for"}},"switch":{"type":"Article","value":{"title":"The \"switch\" statement","slug":"switch","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/13-switch/article.md","isFolder":false,"weight":13,"content":"\nA `switch` statement can replace multiple `if` checks.\n\nIt gives a more descriptive way to compare a value with multiple variants.\n\n## The syntax\n\nThe `switch` has one or more `case` blocks and an optional default.\n\nIt looks like this:\n\n```js no-beautify\nswitch(x) {\n  case 'value1':  // if (x === 'value1')\n    ...\n    [break]\n\n  case 'value2':  // if (x === 'value2')\n    ...\n    [break]\n\n  default:\n    ...\n    [break]\n}\n```\n\n- The value of `x` is checked for a strict equality to the value from the first `case` (that is, `value1`) then to the second (`value2`) and so on.\n- If the equality is found, `switch` starts to execute the code starting from the corresponding `case`, until the nearest `break` (or until the end of `switch`).\n- If no case is matched then the `default` code is executed (if it exists).\n\n## An example\n\nAn example of `switch` (the executed code is highlighted):\n\n```js run\nlet a = 2 + 2;\n\nswitch (a) {\n  case 3:\n    alert( 'Too small' );\n    break;\n*!*\n  case 4:\n    alert( 'Exactly!' );\n    break;\n*/!*\n  case 5:\n    alert( 'Too large' );\n    break;\n  default:\n    alert( \"I don't know such values\" );\n}\n```\n\nHere the `switch` starts to compare `a` from the first `case` variant that is `3`. The match fails.\n\nThen `4`. That's a match, so the execution starts from `case 4` until the nearest `break`.\n\n**If there is no `break` then the execution continues with the next `case` without any checks.**\n\nAn example without `break`:\n\n```js run\nlet a = 2 + 2;\n\nswitch (a) {\n  case 3:\n    alert( 'Too small' );\n*!*\n  case 4:\n    alert( 'Exactly!' );\n  case 5:\n    alert( 'Too big' );\n  default:\n    alert( \"I don't know such values\" );\n*/!*\n}\n```\n\nIn the example above we'll see sequential execution of three `alert`s:\n\n```js\nalert( 'Exactly!' );\nalert( 'Too big' );\nalert( \"I don't know such values\" );\n```\n\n````smart header=\"Any expression can be a `switch/case` argument\"\nBoth `switch` and `case` allow arbitrary expressions.\n\nFor example:\n\n```js run\nlet a = \"1\";\nlet b = 0;\n\nswitch (+a) {\n*!*\n  case b + 1:\n    alert(\"this runs, because +a is 1, exactly equals b+1\");\n    break;\n*/!*\n\n  default:\n    alert(\"this doesn't run\");\n}\n```\nHere `+a` gives `1`, that's compared with `b + 1` in `case`, and the corresponding code is executed.\n````\n\n## Grouping of \"case\"\n\nSeveral variants of `case` which share the same code can be grouped.\n\nFor example, if we want the same code to run for `case 3` and `case 5`:\n\n```js run no-beautify\nlet a = 2 + 2;\n\nswitch (a) {\n  case 4:\n    alert('Right!');\n    break;\n\n*!*\n  case 3:                    // (*) grouped two cases\n  case 5:\n    alert('Wrong!');\n    alert(\"Why don't you take a math class?\");\n    break;\n*/!*\n\n  default:\n    alert('The result is strange. Really.');\n}\n```\n\nNow both `3` and `5` show the same message.\n\nThe ability to \"group\" cases is a side-effect of how `switch/case` works without `break`. Here the execution of `case 3` starts from the line `(*)` and goes through `case 5`, because there's no `break`.\n\n## Type matters\n\nLet's emphasize that the equality check is always strict. The values must be of the same type to match.\n\nFor example, let's consider the code:\n\n```js run\nlet arg = prompt(\"Enter a value?\")\nswitch (arg) {\n  case '0':\n  case '1':\n    alert( 'One or zero' );\n    break;\n\n  case '2':\n    alert( 'Two' );\n    break;\n\n  case 3:\n    alert( 'Never executes!' );\n    break;\n  default:\n    alert( 'An unknown value' )\n}\n```\n\n1. For `0`, `1`, the first `alert` runs.\n2. For `2` the second `alert` runs.\n3. But for `3`, the result of the `prompt` is a string `\"3\"`, which is not strictly equal `===` to the number `3`. So we've got a dead code in `case 3`! The `default` variant will execute.","libs":[],"children":["rewrite-switch-if-else","rewrite-if-switch"],"parent":"first-steps"}},"rewrite-switch-if-else":{"type":"Task","value":{"title":"Rewrite the \"switch\" into an \"if\"","slug":"rewrite-switch-if-else","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/13-switch/1-rewrite-switch-if-else","weight":1,"libs":[],"importance":5,"content":"\nWrite the code using `if..else` which would correspond to the following `switch`:\n\n```js\nswitch (browser) {\n  case 'Edge':\n    alert( \"You've got the Edge!\" );\n    break;\n\n  case 'Chrome':\n  case 'Firefox':\n  case 'Safari':\n  case 'Opera':\n    alert( 'Okay we support these browsers too' );\n    break;\n\n  default:\n    alert( 'We hope that this page looks ok!' );\n}\n```","solution":"To precisely match the functionality of `switch`, the `if` must use a strict comparison `'==='`.\n\nFor given strings though, a simple `'=='` works too.\n\n```js no-beautify\nif(browser == 'Edge') {\n  alert(\"You've got the Edge!\");\n} else if (browser == 'Chrome'\n || browser == 'Firefox'\n || browser == 'Safari'\n || browser == 'Opera') {\n  alert( 'Okay we support these browsers too' );\n} else {\n  alert( 'We hope that this page looks ok!' );\n}\n```\n\nPlease note: the construct `browser == 'Chrome' || browser == 'Firefox' …` is split into multiple lines for better readability.\n\nBut the `switch` construct is still cleaner and more descriptive.","parent":"switch"}},"rewrite-if-switch":{"type":"Task","value":{"title":"Rewrite \"if\" into \"switch\"","slug":"rewrite-if-switch","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/13-switch/2-rewrite-if-switch","weight":2,"libs":[],"importance":4,"content":"\nRewrite the code below using a single `switch` statement:\n\n```js run\nlet a = +prompt('a?', '');\n\nif (a == 0) {\n  alert( 0 );\n}\nif (a == 1) {\n  alert( 1 );\n}\n\nif (a == 2 || a == 3) {\n  alert( '2,3' );\n}\n```","solution":"The first two checks turn into two `case`. The third check is split into two cases:\n\n```js run\nlet a = +prompt('a?', '');\n\nswitch (a) {\n  case 0:\n    alert( 0 );\n    break;\n\n  case 1:\n    alert( 1 );\n    break;\n\n  case 2:\n  case 3:\n    alert( '2,3' );\n*!*\n    break;\n*/!*\n}\n```\n\nPlease note: the `break` at the bottom is not required. But we put it to make the code future-proof.\n\nIn the future, there is a chance that we'd want to add one more `case`, for example `case 4`. And if we forget to add a break before it, at the end of `case 3`, there will be an error. So that's a kind of self-insurance.","parent":"switch"}},"function-basics":{"type":"Article","value":{"title":"Functions","slug":"function-basics","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/14-function-basics/article.md","isFolder":false,"weight":14,"content":"\nQuite often we need to perform a similar action in many places of the script.\n\nFor example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.\n\nFunctions are the main \"building blocks\" of the program. They allow the code to be called many times without repetition.\n\nWe've already seen examples of built-in functions, like `alert(message)`, `prompt(message, default)` and `confirm(question)`. But we can create functions of our own as well.\n\n## Function Declaration\n\nTo create a function we can use a *function declaration*.\n\nIt looks like this:\n\n```js\nfunction showMessage() {\n  alert( 'Hello everyone!' );\n}\n```\n\nThe `function` keyword goes first, then goes the *name of the function*, then a list of *parameters* between the parentheses (empty in the example above) and finally the code of the function, also named \"the function body\", between curly braces.\n\n![](function_basics.png)\n\nOur new function can be called by its name: `showMessage()`.\n\nFor instance:\n\n```js run\nfunction showMessage() {\n  alert( 'Hello everyone!' );\n}\n\n*!*\nshowMessage();\nshowMessage();\n*/!*\n```\n\nThe call `showMessage()` executes the code of the function. Here we will see the message two times.\n\nThis example clearly demonstrates one of the main purposes of functions: to avoid code duplication.\n\nIf we ever need to change the message or the way it is shown, it's enough to modify the code in one place: the function which outputs it.\n\n## Local variables\n\nA variable declared inside a function is only visible inside that function.\n\nFor example:\n\n```js run\nfunction showMessage() {\n*!*\n  let message = \"Hello, I'm JavaScript!\"; // local variable\n*/!*\n\n  alert( message );\n}\n\nshowMessage(); // Hello, I'm JavaScript!\n\nalert( message ); // <-- Error! The variable is local to the function\n```\n\n## Outer variables\n\nA function can access an outer variable as well, for example:\n\n```js run no-beautify\nlet *!*userName*/!* = 'John';\n\nfunction showMessage() {\n  let message = 'Hello, ' + *!*userName*/!*;\n  alert(message);\n}\n\nshowMessage(); // Hello, John\n```\n\nThe function has full access to the outer variable. It can modify it as well.\n\nFor instance:\n\n```js run\nlet *!*userName*/!* = 'John';\n\nfunction showMessage() {\n  *!*userName*/!* = \"Bob\"; // (1) changed the outer variable\n\n  let message = 'Hello, ' + *!*userName*/!*;\n  alert(message);\n}\n\nalert( userName ); // *!*John*/!* before the function call\n\nshowMessage();\n\nalert( userName ); // *!*Bob*/!*, the value was modified by the function\n```\n\nThe outer variable is only used if there's no local one. So an occasional modification may happen if we forget `let`.\n\nIf a same-named variable is declared inside the function then it *shadows* the outer one. For instance, in the code below the function uses the local `userName`. The outer one is ignored:\n\n```js run\nlet userName = 'John';\n\nfunction showMessage() {\n*!*\n  let userName = \"Bob\"; // declare a local variable\n*/!*\n\n  let message = 'Hello, ' + userName; // *!*Bob*/!*\n  alert(message);\n}\n\n// the function will create and use its own userName\nshowMessage();\n\nalert( userName ); // *!*John*/!*, unchanged, the function did not access the outer variable\n```\n\n```smart header=\"Global variables\"\nVariables declared outside of any function, such as the outer `userName` in the code above, are called *global*.\n\nGlobal variables are visible from any function (unless shadowed by locals).\n\nUsually, a function declares all variables specific to its task. Global variables only store project-level data, so when it's important that these variables are accesible from anywhere. Modern code has few or no globals. Most variables reside in their functions.\n```\n\n## Parameters\n\nWe can pass arbitrary data to functions using parameters (also called *function arguments*) .\n\nIn the example below, the function has two parameters: `from` and `text`.\n\n```js run\nfunction showMessage(*!*from, text*/!*) { // arguments: from, text\n  alert(from + ': ' + text);\n}\n\n*!*\nshowMessage('Ann', 'Hello!'); // Ann: Hello! (*)\nshowMessage('Ann', \"What's up?\"); // Ann: What's up? (**)\n*/!*\n```\n\nWhen the function is called in lines `(*)` and `(**)`, the given values are copied to local variables `from` and `text`. Then the function uses them.\n\nHere's one more example: we have a variable `from` and pass it to the function. Please note: the function changes `from`, but the change is not seen outside, because a function always gets a copy of the value:\n\n\n```js run\nfunction showMessage(from, text) {\n\n*!*\n  from = '*' + from + '*'; // make \"from\" look nicer\n*/!*\n\n  alert( from + ': ' + text );\n}\n\nlet from = \"Ann\";\n\nshowMessage(from, \"Hello\"); // *Ann*: Hello\n\n// the value of \"from\" is the same, the function modified a local copy\nalert( from ); // Ann\n```\n\n## Default values\n\nIf a parameter is not provided, then its value becomes `undefined`.\n\nFor instance, the aforementioned function `showMessage(from, text)` can be called with a single argument:\n\n```js\nshowMessage(\"Ann\");\n```\n\nThat's not an error. Such a call would output `\"Ann: undefined\"`. There's no `text`, so it's assumed that `text === undefined`.\n\nIf we want to use a \"default\" `text` in this case, then we can specify it after `=`:\n\n```js run\nfunction showMessage(from, *!*text = \"no text given\"*/!*) {\n  alert( from + \": \" + text );\n}\n\nshowMessage(\"Ann\"); // Ann: no text given\n```\n\nNow if the `text` parameter is not passed, it will get the value `\"no text given\"`\n\nHere `\"no text given\"` is a string, but it can be a more complex expression, which is only evaluated and assigned if the parameter is missing. So, this is also possible:\n\n```js run\nfunction showMessage(from, text = anotherFunction()) {\n  // anotherFunction() only executed if no text given\n  // its result becomes the value of text\n}\n```\n\n\n````smart header=\"Default parameters old-style\"\nOld editions of JavaScript did not support default parameters. So there are alternative ways to support them, that you can find mostly in the old scripts.\n\nFor instance, an explicit check for being `undefined`:\n\n```js\nfunction showMessage(from, text) {\n*!*\n  if (text === undefined) {\n    text = 'no text given';\n  }\n*/!*\n\n  alert( from + \": \" + text );\n}\n```\n\n...Or the `||` operator:\n\n```js\nfunction showMessage(from, text) {\n  // if text is falsy then text gets the \"default\" value\n  text = text || 'no text given';\n  ...\n}\n```\n\n\n````\n\n\n## Returning a value\n\nA function can return a value back into the calling code as the result.\n\nThe simplest example would be a function that sums two values:\n\n```js run no-beautify\nfunction sum(a, b) {\n  *!*return*/!* a + b;\n}\n\nlet result = sum(1, 2);\nalert( result ); // 3\n```\n\nThe directive `return` can be in any place of the function. When the execution reaches it, the function stops, and the value is returned to the calling code (assigned to `result` above).\n\nThere may be many occurrences of `return` in a single function. For instance:\n\n```js run\nfunction checkAge(age) {\n  if (age > 18) {\n*!*\n    return true;\n*/!*\n  } else {\n*!*\n    return confirm('Got a permission from the parents?');\n*/!*\n  }\n}\n\nlet age = prompt('How old are you?', 18);\n\nif ( checkAge(age) ) {\n  alert( 'Access granted' );\n} else {\n  alert( 'Access denied' );\n}\n```\n\nIt is possible to use `return` without a value. That causes the function to exit immediately.\n\nFor example:\n\n```js\nfunction showMovie(age) {\n  if ( !checkAge(age) ) {\n*!*\n    return;\n*/!*\n  }\n\n  alert( \"Showing you the movie\" ); // (*)\n  // ...\n}\n```\n\nIn the code above, if `checkAge(age)` returns `false`, then `showMovie` won't proceed to the `alert`.\n\n````smart header=\"A function with an empty `return` or without it returns `undefined`\"\nIf a function does not return a value, it is the same as if it returns `undefined`:\n\n```js run\nfunction doNothing() { /* empty */ }\n\nalert( doNothing() === undefined ); // true\n```\n\nAn empty `return` is also the same as `return undefined`:\n\n```js run\nfunction doNothing() {\n  return;\n}\n\nalert( doNothing() === undefined ); // true\n```\n````\n\n````warn header=\"Never add a newline between `return` and the value\"\nFor a long expression in `return`, it might be tempting to put it on a separate line, like this:\n\n```js\nreturn\n (some + long + expression + or + whatever * f(a) + f(b))\n```\nThat doesn't work, because JavaScript assumes a semicolon after `return`. That'll work the same as:\n\n```js\nreturn*!*;*/!*\n (some + long + expression + or + whatever * f(a) + f(b))\n```\nSo, it effectively becomes an empty return. We should put the value on the same line instead.\n````\n\n## Naming a function [#function-naming]\n\nFunctions are actions. So their name is usually a verb. It should briefly, but as accurately as possible describe what the function does. So that a person who reads the code gets the right clue.\n\nIt is a widespread practice to start a function with a verbal prefix which vaguely describes the action. There must be an agreement within the team on the meaning of the prefixes.\n\nFor instance, functions that start with `\"show\"` usually show something.\n\nFunction starting with...\n\n- `\"get…\"` -- return a value,\n- `\"calc…\"` -- calculate something,\n- `\"create…\"` -- create something,\n- `\"check…\"` -- check something and return a boolean, etc.\n\nExamples of such names:\n\n```js no-beautify\nshowMessage(..)     // shows a message\ngetAge(..)          // returns the age (gets it somehow)\ncalcSum(..)         // calculates a sum and returns the result\ncreateForm(..)      // creates a form (and usually returns it)\ncheckPermission(..) // checks a permission, returns true/false\n```\n\nWith prefixes in place, a glance at a function name gives an understanding what kind of work it does and what kind of value it returns.\n\n```smart header=\"One function -- one action\"\nA function should do exactly what is suggested by its name, no more.\n\nTwo independent actions usually deserve two functions, even if they are usually called together (in that case we can make a 3rd function that calls those two).\n\nA few examples of breaking this rule:\n\n- `getAge` -- would be bad if it shows an `alert` with the age (should only get).\n- `createForm` -- would be bad if it modifies the document, adding a form to it (should only create it and return).\n- `checkPermission` -- would be bad if displays the `access granted/denied` message (should only perform the check and return the result).\n\nThese examples assume common meanings of prefixes. What they mean for you is determined by you and your team. Maybe it's pretty normal for your code to behave differently. But you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.\n```\n\n```smart header=\"Ultrashort function names\"\nFunctions that are used *very often* sometimes have ultrashort names.\n\nFor example, the [jQuery](http://jquery.com) framework defines a function `$`. The [LoDash](http://lodash.com/) library has its core function named `_`.\n\nThese are exceptions. Generally functions names should be concise, but descriptive.\n```\n\n## Functions == Comments\n\nFunctions should be short and do exactly one thing. If that thing is big, maybe it's worth it to split the function into a few smaller functions. Sometimes following this rule may not be that easy, but it's definitely a good thing.\n\nA separate function is not only easier to test and debug -- its very existence is a great comment!\n\nFor instance, compare the two functions `showPrimes(n)` below. Each one outputs [prime numbers](https://en.wikipedia.org/wiki/Prime_number) up to `n`.\n\nThe first variant uses a label:\n\n```js\nfunction showPrimes(n) {\n  nextPrime: for (let i = 2; i < n; i++) {\n\n    for (let j = 2; j < i; j++) {\n      if (i % j == 0) continue nextPrime;\n    }\n\n    alert( i ); // a prime\n  }\n}\n```\n\nThe second variant uses an additional function `isPrime(n)` to test for primality:\n\n```js\nfunction showPrimes(n) {\n\n  for (let i = 2; i < n; i++) {\n    *!*if (!isPrime(i)) continue;*/!*\n\n    alert(i);  // a prime\n  }\n}\n\nfunction isPrime(n) {\n  for (let i = 2; i < n; i++) {\n    if ( n % i == 0) return false;\n  }\n  return true;\n}\n```\n\nThe second variant is easier to understand, isn't it? Instead of the code piece we see a name of the action (`isPrime`). Sometimes people refer to such code as *self-describing*.\n\nSo, functions can be created even if we don't intend to reuse them. They structure the code and make it readable.\n\n## Summary\n\nA function declaration looks like this:\n\n```js\nfunction name(parameters, delimited, by, comma) {\n  /* code */\n}\n```\n\n- Values passed to a function as parameters are copied to its local variables.\n- A function may access outer variables. But it works only from inside out. The code outside of the function doesn't see its local variables.\n- A function can return a value. If it doesn't, then its result is `undefined`.\n\nTo make the code clean and easy to understand, it's recommended to use mainly local variables and parameters in the function, not outer variables.\n\nIt is always easier to understand a function which gets parameters, works with them and returns a result than a function which gets no parameters, but modifies outer variables as a side-effect.\n\nFunction naming:\n\n- A name should clearly describe what the function does. When we see a function call in the code, a good name instantly gives us an understanding what it does and returns.\n- A function is an action, so function names are usually verbal.\n- There exist many well-known function prefixes like `create…`, `show…`, `get…`, `check…` and so on. Use them to hint what a function does.\n\nFunctions are the main building blocks of scripts. Now we've covered the basics, so we actually can start creating and using them. But that's only the beginning of the path. We are going to return to them many times, going more deeply into their advanced features.","libs":[],"children":["if-else-required","rewrite-function-question-or","min","pow"],"parent":"first-steps"}},"if-else-required":{"type":"Task","value":{"title":"Is \"else\" required?","slug":"if-else-required","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/14-function-basics/1-if-else-required","weight":1,"libs":[],"importance":4,"content":"\nThe following function returns `true` if the parameter `age` is greater than `18`.\n\nOtherwise it asks for a confirmation and returns its result:\n\n```js\nfunction checkAge(age) {\n  if (age > 18) {\n    return true;\n*!*\n  } else {\n    // ...\n    return confirm('Did parents allow you?');\n  }\n*/!*\n}\n```\n\nWill the function work differently if `else` is removed?\n\n```js\nfunction checkAge(age) {\n  if (age > 18) {\n    return true;\n  }\n*!*\n  // ...\n  return confirm('Did parents allow you?');\n*/!*\n}\n```\n\nIs there any difference in the behavior of these two variants?","solution":"No difference.","parent":"function-basics"}},"rewrite-function-question-or":{"type":"Task","value":{"title":"Rewrite the function using '?' or '||'","slug":"rewrite-function-question-or","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/14-function-basics/2-rewrite-function-question-or","weight":2,"libs":[],"importance":4,"content":"\nThe following function returns `true` if the parameter `age` is greater than `18`.\n\nOtherwise it asks for a confirmation and returns its result.\n\n```js\nfunction checkAge(age) {\n  if (age > 18) {\n    return true;\n  } else {\n    return confirm('Do you have your parents permission to access this page?');\n  }\n}\n```\n\nRewrite it, to perform the same, but without `if`, in a single line.\n\nMake two variants of `checkAge`:\n\n1. Using a question mark operator `?`\n2. Using OR `||`","solution":"Using a question mark operator `'?'`:\n\n```js\nfunction checkAge(age) {\n  return (age > 18) ? true : confirm('Did parents allow you?');\n}\n```\n\nUsing OR `||` (the shortest variant):\n\n```js\nfunction checkAge(age) {\n  return (age > 18) || confirm('Did parents allow you?');\n}\n```\n\nNote that the parentheses around `age > 18` are not required here. They exist for better readabilty.","parent":"function-basics"}},"min":{"type":"Task","value":{"title":"Function min(a, b)","slug":"min","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/14-function-basics/3-min","weight":3,"libs":[],"importance":1,"content":"\nWrite a function `min(a,b)` which returns the least of two numbers `a` and `b`.\n\nFor instance:\n\n```js\nmin(2, 5) == 2\nmin(3, -1) == -1\nmin(1, 1) == 1\n```","solution":"A solution using `if`:\n\n```js\nfunction min(a, b) {\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n```\n\nA solution with a question mark operator `'?'`:\n\n```js\nfunction min(a, b) {\n  return a < b ? a : b;\n}\n```\n\nP.S. In the case of an equality `a == b` it does not matter what to return.","parent":"function-basics"}},"pow":{"type":"Task","value":{"title":"Function pow(x,n)","slug":"pow","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/14-function-basics/4-pow","weight":4,"libs":[],"importance":4,"content":"\nWrite a function `pow(x,n)` that returns `x` in power `n`. Or, in other words, multiplies `x` by itself `n` times and returns the result.\n\n```js\npow(3, 2) = 3 * 3 = 9\npow(3, 3) = 3 * 3 * 3 = 27\npow(1, 100) = 1 * 1 * ...* 1 = 1\n```\n\nCreate a web-page that prompts for `x` and `n`, and then shows the result of `pow(x,n)`.\n\n[demo]\n\nP.S. In this task the function should support only natural values of `n`: integers up from `1`.","solution":"```js run demo\nfunction pow(x, n) {\n  let result = x;\n\n  for (let i = 1; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n\nlet x = prompt(\"x?\", '');\nlet n = prompt(\"n?\", '');\n\nif (n < 1) {\n  alert(`Power ${n} is not supported,\n    use an integer greater than 0`);\n} else {\n  alert( pow(x, n) );\n}\n```","parent":"function-basics"}},"function-expressions-arrows":{"type":"Article","value":{"title":"Function expressions and arrows","slug":"function-expressions-arrows","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/15-function-expressions-arrows/article.md","isFolder":false,"weight":15,"content":"\nIn JavaScript, a function is not a \"magical language structure\", but a special kind of value.\n\nThe syntax that we used before is called a *Function Declaration*:\n\n```js\nfunction sayHi() {\n  alert( \"Hello\" );\n}\n```\n\nThere is another syntax for creating a function that is called a *Function Expression*.\n\nIt looks like this:\n\n```js\nlet sayHi = function() {\n  alert( \"Hello\" );\n};\n```\n\nHere, the function is created and assigned to the variable explicitly, like any other value. No matter how the function is defined, it's just a value stored in the variable `sayHi`.\n\n\nThe meaning of these code samples is the same: \"create a function and put it into the variable `sayHi`\".\n\nWe can even print out that value using `alert`:\n\n```js run\nfunction sayHi() {\n  alert( \"Hello\" );\n}\n\n*!*\nalert( sayHi ); // shows the function code\n*/!*\n```\n\nPlease note that the last line does not run the function, because there are no parentheses after `sayHi`. There are programming languages where any mention of a function name causes its execution, but JavaScript is not like that.\n\nIn JavaScript, a function is a value, so we can deal with it as a value. The code above shows its string representation, which is the source code.\n\nIt is a special value of course, in the sense that we can call it like `sayHi()`.\n\nBut it's still a value. So we can work with it like with other kinds of values.\n\nWe can copy a function to another variable:\n\n```js run no-beautify\nfunction sayHi() {   // (1) create\n  alert( \"Hello\" );\n}\n\nlet func = sayHi;    // (2) copy\n\nfunc(); // Hello     // (3) run the copy (it works)!\nsayHi(); // Hello    //     this still works too (why wouldn't it)\n```\n\nHere's what happens above in detail:\n\n1. The Function Declaration `(1)` creates the function and puts it into the variable named `sayHi`.\n2. Line `(2)` copies it into the variable `func`.\n\n    Please note again: there are no parentheses after `sayHi`. If there were, then `func = sayHi()` would write  *the result of the call* `sayHi()` into `func`, not *the function* `sayHi` itself.\n3. Now the function can be called as both `sayHi()` and `func()`.\n\nNote that we could also have used a Function Expression to declare `sayHi`, in the first line:\n\n```js\nlet sayHi = function() { ... };\n\nlet func = sayHi;\n// ...\n```\n\nEverything would work the same. Even more obvious what's going on, right?\n\n\n````smart header=\"Why there's a semicolon at the end?\"\nThere might be a question, why does Function Expression have a semicolon `;` at the end, and Function Declaration does not:\n\n```js\nfunction sayHi() {\n  // ...\n}\n\nlet sayHi = function() {\n  // ...\n}*!*;*/!*\n```\n\nThe answer is simple:\n- There's no need for `;` at the end of code blocks and syntax structures that use them like `if { ... }`, `for {  }`, `function f { }` etc.\n- A Function Expression is used inside the statement: `let sayHi = ...;`, as a value. It's not a code block. The semicolon `;` is recommended at the end of statements, no matter what is the value. So the semicolon here is not related to the Function Expression itself in any way, it just terminates the statement.\n````\n\n## Callback functions\n\nLet's look at more examples of passing functions as values and using function expressions.\n\nWe'll write a function `ask(question, yes, no)` with three parameters:\n\n`question`\n: Text of the question\n\n`yes`\n: Function to run if the answer is \"Yes\"\n\n`no`\n: Function to run if the answer is \"No\"\n\nThe function should ask the `question` and, depending on the user's answer, call `yes()` or `no()`:\n\n```js run\n*!*\nfunction ask(question, yes, no) {\n  if (confirm(question)) yes()\n  else no();\n}\n*/!*\n\nfunction showOk() {\n  alert( \"You agreed.\" );\n}\n\nfunction showCancel() {\n  alert( \"You canceled the execution.\" );\n}\n\n// usage: functions showOk, showCancel are passed as arguments to ask\nask(\"Do you agree?\", showOk, showCancel);\n```\n\nBefore we explore how we can write it in a much shorter way, let's note that in the browser (and on the server-side in some cases) such functions are quite popular. The major difference between a real-life implementation and the example above is that real-life functions use more complex ways to interact with the user than a simple `confirm`. In the browser, such a function usually draws a nice-looking question window. But that's another story.\n\n**The arguments of `ask` are called *callback functions* or just *callbacks*.**\n\nThe idea is that we pass a function and expect it to be \"called back\" later if necessary. In our case, `showOk` becomes the callback for the \"yes\" answer, and `showCancel` for the \"no\" answer.\n\nWe can use Function Expressions to write the same function much shorter:\n\n```js run no-beautify\nfunction ask(question, yes, no) {\n  if (confirm(question)) yes()\n  else no();\n}\n\n*!*\nask(\n  \"Do you agree?\",\n  function() { alert(\"You agreed.\"); },\n  function() { alert(\"You canceled the execution.\"); }\n);\n*/!*\n```\n\n\nHere, functions are declared right inside the `ask(...)` call. They have no name, and so are called *anonymous*. Such functions are not accessible outside of `ask` (because they are not assigned to variables), but that's just what we want here.\n\nSuch code appears in our scripts very naturally, it's in the spirit of JavaScript.\n\n\n```smart header=\"A function is a value representing an \\\"action\\\"\"\nRegular values like strings or numbers represent the *data*.\n\nA function can be perceived as an *action*.\n\nWe can pass it between variables and run when we want.\n```\n\n\n## Function Expression vs Function Declaration\n\nLet's formulate the key differences between Function Declarations and Expressions.\n\nFirst, the syntax: how to see what is what in the code.\n\n- *Function Declaration:* a function, declared as a separate statement, in the main code flow.\n\n    ```js\n    // Function Declaration\n    function sum(a, b) {\n      return a + b;\n    }\n    ```\n- *Function Expression:* a function, created inside an expression or inside another syntax construct. Here, the function is created at the right side of the \"assignment expression\" `=`:\n    \n    ```js\n    // Function Expression\n    let sum = function(a, b) {\n      return a + b;\n    };\n    ```\n\nThe more subtle difference is *when* a function is created by the JavaScript engine.\n\n**A Function Expression is created when the execution reaches it and is usable from then on.**\n\nOnce the execution flow passes to the right side of the assignment `let sum = function…` -- here we go, the function is created and can be used (assigned, called etc) from now on.\n\nFunction Declarations are different.\n\n**A Function Declaration is usable in the whole script/code block.**\n\nIn other words, when JavaScript *prepares* to run the script or a code block, it first looks for Function Declarations in it and creates the functions. We can think of it as an \"initialization stage\".\n\nAnd after all of the Function Declarations are processed, the execution goes on.\n\nAs a result, a function declared as a Function Declaration can be called earlier than it is defined.\n\nFor example, this works:\n\n```js run refresh untrusted\n*!*\nsayHi(\"John\"); // Hello, John\n*/!*\n\nfunction sayHi(name) {\n  alert( `Hello, ${name}` );\n}\n```\n\nThe Function Declaration `sayHi` is created when JavaScript is preparing to start the script and is visible everywhere in it.\n\n...If it was a Function Expression, then it wouldn't work:\n\n```js run refresh untrusted\n*!*\nsayHi(\"John\"); // error!\n*/!*\n\nlet sayHi = function(name) {  // (*) no magic any more\n  alert( `Hello, ${name}` );\n};\n```\n\nFunction Expressions are created when the execution reaches them. That would happen only in the line `(*)`. Too late.\n\n**When a Function Declaration is made within a code block, it is visible everywhere inside that block. But not outside of it.**\n\nSometimes that's handy to declare a local function only needed in that block alone. But that feature may also cause problems.\n\nFor instance, let's imagine that we need to declare a function `welcome()` depending on the `age` variable that we get during runtime. And then we plan to use it some time later.\n\nThe code below doesn't work:\n\n```js run\nlet age = prompt(\"What is your age?\", 18);\n\n// conditionally declare a function\nif (age < 18) {\n\n  function welcome() {\n    alert(\"Hello!\");\n  }\n\n} else {\n\n  function welcome() {\n    alert(\"Greetings!\");\n  }\n\n}\n\n// ...use it later\n*!*\nwelcome(); // Error: welcome is not defined\n*/!*\n```\n\nThat's because a Function Declaration is only visible inside the code block in which it resides.\n\nHere's another example:\n\n```js run\nlet age = 16; // take 16 as an example\n\nif (age < 18) {\n*!*\n  welcome();               // \\   (runs)\n*/!*\n                           //  |\n  function welcome() {     //  |  \n    alert(\"Hello!\");       //  |  Function Declaration is available\n  }                        //  |  everywhere in the block where it's declared\n                           //  |\n*!*\n  welcome();               // /   (runs)\n*/!*\n\n} else {\n\n  function welcome() {     //  for age = 16, this \"welcome\" is never created\n    alert(\"Greetings!\");\n  }\n}\n\n// Here we're out of curly braces,\n// so we can not see Function Declarations made inside of them.\n\n*!*\nwelcome(); // Error: welcome is not defined\n*/!*\n```\n\nWhat can we do to make `welcome` visible outside of `if`?\n\nThe correct approach would be to use a Function Expression and assign `welcome` to the variable that is declared outside of `if` and has the proper visibility.\n\nNow it works as intended:\n\n```js run\nlet age = prompt(\"What is your age?\", 18);\n\nlet welcome;\n\nif (age < 18) {\n\n  welcome = function() {\n    alert(\"Hello!\");\n  };\n\n} else {\n\n  welcome = function() {\n    alert(\"Greetings!\");\n  };\n\n}\n\n*!*\nwelcome(); // ok now\n*/!*\n```\n\nOr we could simplify it even further using a question mark operator `?`:\n\n```js run\nlet age = prompt(\"What is your age?\", 18);\n\nlet welcome = (age < 18) ?\n  function() { alert(\"Hello!\"); } :\n  function() { alert(\"Greetings!\"); };\n\n*!*\nwelcome(); // ok now\n*/!*\n```\n\n\n```smart header=\"When to choose Function Declaration versus Function Expression?\"\nAs a rule of thumb, when we need to declare a function, the first to consider is Function Declaration syntax, the one we used before. It gives more freedom in how to organize our code, because we can call such functions before they are declared.\n\nIt's also a little bit easier to look up `function f(…) {…}` in the code than `let f = function(…) {…}`. Function Declarations are more \"eye-catching\".\n\n...But if a Function Declaration does not suit us for some reason (we've seen an example above), then Function Expression should be used.\n```\n\n\n## Arrow functions [#arrow-functions]\n\nThere's one more very simple and concise syntax for creating functions, that's often better than Function Expressions. It's called \"arrow functions\", because it looks like this:\n\n\n```js\nlet func = (arg1, arg2, ...argN) => expression\n```\n\n...This creates a function `func` that has arguments `arg1..argN`, evaluates the `expression` on the right side with their use and returns its result.\n\nIn other words, it's roughly the same as:\n\n```js\nlet func = function(arg1, arg2, ...argN) {\n  return expression;\n}\n```\n\n...But much more concise.\n\nLet's see an example:\n\n```js run\nlet sum = (a, b) => a + b;\n\n/* The arrow function is a shorter form of:\n\nlet sum = function(a, b) {\n  return a + b;\n};\n*/\n\nalert( sum(1, 2) ); // 3\n\n```\n\nIf we have only one argument, then parentheses can be omitted, making that even shorter:\n\n```js run\n// same as\n// let double = function(n) { return n * 2 }\n*!*\nlet double = n => n * 2;\n*/!*\n\nalert( double(3) ); // 6\n```\n\nIf there are no arguments, parentheses should be empty (but they should be present):\n\n```js run\nlet sayHi = () => alert(\"Hello!\");\n\nsayHi();\n```\n\nArrow functions can be used in the same way as Function Expressions.\n\nFor instance, here's the rewritten example with `welcome()`:\n\n```js run\nlet age = prompt(\"What is your age?\", 18);\n\nlet welcome = (age < 18) ?\n  () => alert('Hello') :\n  () => alert(\"Greetings!\");\n\nwelcome(); // ok now\n```\n\nArrow functions may appear unfamiliar and not very readable at first, but that quickly changes as the eyes get used to the structure.\n\nThey are very convenient for simple one-line actions, when we're just too lazy to write many words.\n\n```smart header=\"Multiline arrow functions\"\n\nThe examples above took arguments from the left of `=>` and evaluated the right-side expression with them.\n\nSometimes we need something a little bit more complex, like multiple expressions or statements. It is also possible, but we should enclose them in curly braces. Then use a normal `return` within them.\n\nLike this:\n\n```js run\nlet sum = (a, b) => {  // the curly brace opens a multiline function\n  let result = a + b;\n*!*\n  return result; // if we use curly braces, use return to get results\n*/!*\n};\n\nalert( sum(1, 2) ); // 3\n```\n\n```smart header=\"More to come\"\nHere we praised arrow functions for brevity. But that's not all! Arrow functions have other interesting features. We'll return to them later in the chapter <info:arrow-functions>.\n\nFor now, we can already use them for one-line actions and callbacks.\n```\n\n## Summary\n\n- Functions are values. They can be assigned, copied or declared in any place of the code.\n- If the function is declared as a separate statement in the main code flow, that's called a \"Function Declaration\".\n- If the function is created as a part of an expression, it's called a \"Function Expression\".\n- Function Declarations are processed before the code block is executed. They are visible everywhere in the block.\n- Function Expressions are created when the execution flow reaches them.\n\n\nIn most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.\n\nSo we should use a Function Expression only when a Function Declaration is not fit for the task. We've seen a couple of examples of that in this chapter, and will see more in the future.\n\nArrow functions are handy for one-liners. They come in two flavors:\n\n1. Without curly braces: `(...args) => expression` -- the right side is an expression: the function evaluates it and returns the result.\n2. With curly braces: `(...args) => { body }` -- brackets allow us to write multiple statements inside the function, but we need an explicit `return` to return something.","libs":[],"children":["rewrite-arrow"],"parent":"first-steps"}},"rewrite-arrow":{"type":"Task","value":{"title":"Rewrite with arrow functions","slug":"rewrite-arrow","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/15-function-expressions-arrows/1-rewrite-arrow","weight":1,"libs":[],"content":"\nReplace Function Expressions with arrow functions in the code:\n\n```js run\nfunction ask(question, yes, no) {\n  if (confirm(question)) yes()\n  else no();\n}\n\nask(\n  \"Do you agree?\",\n  function() { alert(\"You agreed.\"); },\n  function() { alert(\"You canceled the execution.\"); }\n);\n```","solution":"```js run\nfunction ask(question, yes, no) {\n  if (confirm(question)) yes()\n  else no();\n}\n\nask(\n  \"Do you agree?\",\n*!*\n  () => alert(\"You agreed.\"),\n  () => alert(\"You canceled the execution.\")\n*/!*\n);\n```\n\nLooks short and clean, right?","parent":"function-expressions-arrows"}},"javascript-specials":{"type":"Article","value":{"title":"JavaScript specials","slug":"javascript-specials","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/02-first-steps/16-javascript-specials/article.md","isFolder":false,"weight":16,"content":"\nThis chapter briefly recaps the features of JavaScript that we've learned by now, paying special attention to subtle moments.\n\n## Code structure\n\nStatements are delimited with a semicolon:\n\n```js run no-beautify\nalert('Hello'); alert('World');\n```\n\nUsually, a line-break is also treated as a delimiter, so that would also work:\n\n```js run no-beautify\nalert('Hello')\nalert('World')\n```\n\nThat's called \"automatic semicolon insertion\". Sometimes it doesn't work, for instance:\n\n```js run\nalert(\"There will be an error after this message\")\n\n[1, 2].forEach(alert)\n```\n\nMost codestyle guides agree that we should put a semicolon after each statement.\n\nSemicolons are not required after code blocks `{...}` and syntax constructs with them like loops:\n\n```js\nfunction f() {\n  // no semicolon needed after function declaration\n}\n\nfor(;;) {\n  // no semicolon needed after the loop\n}\n```\n\n...But even if we can put an \"extra\" semicolon somewhere, that's not an error. It will be ignored.\n\nMore in: <info:structure>.\n\n## Strict mode\n\nTo fully enable all features of modern JavaScript, we should start scripts with `\"use strict\"`.\n\n```js\n'use strict';\n\n...\n```\n\nThe directive must be at the top of a script or at the beginning of a function.\n\nWithout `\"use strict\"`, everything still works, but some features behave in the old-fashion, \"compatible\" way. We'd generally prefer the modern behavior.\n\nSome modern features of the language (like classes that we'll study in the future) enable strict mode implicitly.\n\nMore in: <info:strict-mode>.\n\n## Variables\n\nCan be declared using:\n\n- `let`\n- `const` (constant, can't be changed)\n- `var` (old-style, will see later)\n\nA variable name can include:\n- Letters and digits, but the first character may not be a digit.\n- Characters `$` and `_` are normal, on par with letters.\n- Non-Latin alphabets and hieroglyphs are also allowed, but commonly not used.\n\nVariables are dynamically typed. They can store any value:\n\n```js\nlet x = 5;\nx = \"John\";\n```\n\nThere are 7 data types:\n\n- `number` for both floating-point and integer numbers,\n- `string` for strings,\n- `boolean` for logical values: `true/false`,\n- `null` -- a type with a single value `null`, meaning \"empty\" or \"does not exist\",\n- `undefined` -- a type with a single value `undefined`, meaning \"not assigned\",\n- `object` and `symbol` -- for complex data structures and unique identifiers, we haven't learnt them yet.\n\nThe `typeof` operator returns the type for a value, with two exceptions:\n```js\ntypeof null == \"object\" // error in the language\ntypeof function(){} == \"function\" // functions are treated specially\n```\n\nMore in: <info:variables> and <info:types>.\n\n## Interaction\n\nWe're using a browser as a working environment, so basic UI functions will be:\n\n[`prompt(question[, default])`](mdn:api/Window/prompt)\n: Ask a `question`, and return either what the visitor entered or `null` if he pressed \"cancel\".\n\n[`confirm(question)`](mdn:api/Window/confirm)\n: Ask a `question` and suggest to choose between Ok and Cancel. The choice is returned as `true/false`.\n\n[`alert(message)`](mdn:api/Window/alert)\n: Output a `message`.\n\nAll these functions are *modal*, they pause the code execution and prevent the visitor from interacting with the page until he answers.\n\nFor instance:\n\n```js run\nlet userName = prompt(\"Your name?\", \"Alice\");\nlet isTeaWanted = confirm(\"Do you want some tea?\");\n\nalert( \"Visitor: \" + userName ); // Alice\nalert( \"Tea wanted: \" + isTeaWanted ); // true\n```\n\nMore in: <info:alert-prompt-confirm>.\n\n## Operators\n\nJavaScript supports the following operators:\n\nArithmetical\n: Regular: `* + - /`, also `%` for the remainder and `**` for power of a number.\n\n    The binary plus `+` concatenates strings. And if any of the operands is a string, the other one is converted to string too:\n\n    ```js run\n    alert( '1' + 2 ); // '12', string\n    alert( 1 + '2' ); // '12', string\n    ```\n\nAssignments\n: There is a simple assignment: `a = b` and combined ones like `a *= 2`.\n\nBitwise\n: Bitwise operators work with integers on bit-level: see the [docs](mdn:/JavaScript/Reference/Operators/Bitwise_Operators) when they are needed.\n\nTernary\n: The only operator with three parameters: `cond ? resultA : resultB`. If `cond` is truthy, returns `resultA`, otherwise `resultB`.\n\nLogical operators\n: Logical AND `&&` and OR `||` perform short-circuit evaluation and then return the value where it stopped.\n\nComparisons\n: Equality check `==` for values of different types converts them to a number (except `null` and `undefined` that equal each other and nothing else), so these are equal:\n\n    ```js run\n    alert( 0 == false ); // true\n    alert( 0 == '' ); // true\n    ```\n\n    Other comparisons convert to a number as well.\n\n    The strict equality operator `===` doesn't do the conversion: different types always mean different values for it, so:\n\n    Values `null` and `undefined` are special: they equal `==` each other and don't equal anything else.\n\n    Greater/less comparisons compare strings character-by-character, other types are converted to a number.\n\nLogical operators\n: There are few others, like a comma operator.\n\nMore in: <info:operators>, <info:comparison>, <info:logical-operators>.\n\n## Loops\n\n- We covered 3 types of loops:\n\n    ```js\n    // 1\n    while (condition) {\n      ...\n    }\n\n    // 2\n    do {\n      ...\n    } while (condition);\n\n    // 3\n    for(let i = 0; i < 10; i++) {\n      ...\n    }\n    ```\n\n- The variable declared in `for(let...)` loop is visible only inside the loop. But we can also omit `let` and reuse an existing variable.\n- Directives `break/continue` allow to exit the whole loop/current iteration. Use labels to break nested loops.\n\nDetails in: <info:while-for>.\n\nLater we'll study more types of loops to deal with objects.\n\n## The \"switch\" construct\n\nThe \"switch\" construct can replace multiple `if` checks. It uses `===` (strict equality) for comparisons.\n\nFor instance:\n\n```js run\nlet age = prompt('Your age?', 18);\n\nswitch (age) {\n  case 18:\n    alert(\"Won't work\"); // the result of prompt is a string, not a number\n\n  case \"18\":\n    alert(\"This works!\");\n    break;\n\n  default:\n    alert(\"Any value not equal to one above\");\n}\n```\n\nDetails in: <info:switch>.\n\n## Functions\n\nWe covered three ways to create a function in JavaScript:\n\n1. Function Declaration: the function in the main code flow\n\n    ```js\n    function sum(a, b) {\n      let result = a + b;\n\n      return result;\n    }\n    ```\n\n2. Function Expression: the function in the context of an expression\n\n    ```js\n    let sum = function(a, b) {\n      let result = a + b;\n\n      return result;\n    }\n    ```\n\n    Function expressions can have a name, like `sum = function name(a, b)`, but that `name` is only visible inside that function.\n\n3. Arrow functions:\n\n    ```js\n    // expression at the right side\n    let sum = (a, b) => a + b;\n\n    // or multi-line syntax with { ... }, need return here:\n    let sum = (a, b) => {\n      // ...\n      return a + b;\n    }\n\n    // without arguments\n    let sayHi = () => alert(\"Hello\");\n\n    // with a single argument\n    let double = n => n * 2;\n    ```\n\n\n- Functions may have local variables: those declared inside its body. Such variables are only visible inside the function.\n- Parameters can have default values: `function sum(a = 1, b = 2) {...}`.\n- Functions always return something. If there's no `return` statement, then the result is `undefined`.\n\n\n| Function Declaration | Function Expression |\n|----------------------|---------------------|\n| visible in the whole code block | created when the execution reaches it |\n|   - | can have a name, visible only inside the function |\n\nMore: see <info:function-basics>, <info:function-expressions-arrows>.\n\n## More to come\n\nThat was a brief list of JavaScript features. As of now we've studied only basics. Further in the tutorial you'll find more specials and advanced features of JavaScript.","libs":[],"children":[],"parent":"first-steps"}},"code-quality":{"type":"Article","value":{"title":"Code quality","slug":"code-quality","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality","isFolder":true,"weight":3,"content":"\nThis chapter explains coding practices that we'll use further in the development.","libs":[],"children":["debugging-chrome","coding-style","comments","ninja-code","testing-mocha","polyfills"],"parent":"js"}},"debugging-chrome":{"type":"Article","value":{"title":"Debugging in Chrome","slug":"debugging-chrome","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/01-debugging-chrome/article.md","isFolder":false,"weight":1,"content":"\nBefore writing more complex code, let's talk about debugging.\n\nAll modern browsers and most other environments support \"debugging\" -- a special UI in developer tools that makes finding and fixing errors much easier.\n\nWe'll be using Chrome here, because it's probably the most feature-rich in this aspect.\n\n## The \"sources\" pane\n\nYour Chrome version may look a little bit different, but it still should be obvious what's there.\n\n- Open the [example page](debugging/index.html) in Chrome.\n- Turn on developer tools with `key:F12` (Mac: `key:Cmd+Opt+I`).\n- Select the `sources` pane.\n\nHere's what you should see if you are doing it for the first time:\n\n![](chrome-open-sources.png)\n\nThe toggler button <span class=\"devtools\" style=\"background-position:-168px -76px\"></span> opens the tab with files.\n\nLet's click it and select `index.html` and then `hello.js` in the tree view. Here's what should show up:\n\n![](chrome-tabs.png)\n\nHere we can see three zones:\n\n1. The **Resources zone** lists HTML, JavaScript, CSS and other files, including images that are attached to the page. Chrome extensions may appear here too.\n2. The **Source zone** shows the source code.\n3. The **Information and control zone** is for debugging, we'll explore it soon.\n\nNow you could click the same toggler <span class=\"devtools\" style=\"background-position:-200px -76px\"></span> again to hide the resources list and give the code some space.\n\n## Console\n\nIf we press `Esc`, then a console opens below. We can type commands there and press `key:Enter` to execute.\n\nAfter a statement is executed, its result is shown below.\n\nFor example, here `1+2` results in `3`, and `hello(\"debugger\")` returns nothing, so the result is `undefined`:\n\n![](chrome-sources-console.png)\n\n## Breakpoints\n\nLet's examine what's going on within the code of the [example page](debugging/index.html). In `hello.js`, click at line number `4`. Yes, right on the `4` digit, not on the code.\n\nCongratulations! You've set a breakpoint. Please also click on the number for line `8`.\n\nIt should look like this (blue is where you should click):\n\n![](chrome-sources-breakpoint.png)\n\nA *breakpoint* is a point of code where the debugger will automatically pause the JavaScript execution.\n\nWhile the code is paused, we can examine current variables, execute commands in the console etc. In other words, we can debug it.\n\nWe can always find a list of breakpoints in the right pane. That's useful when we have many breakpoints in various files. It allows to:\n- Quickly jump to the breakpoint in the code (by clicking on it in the right pane).\n- Temporarily disable the breakpoint by unchecking it.\n- Remove the breakpoint by right-clicking and selecting Remove.\n- ...And so on.\n\n```smart header=\"Conditional breakpoints\"\n*Right click* on the line number allows to create a *conditional* breakpoint. It only triggers when the given expression is truthy.\n\nThat's handy when we need to stop only for a certain variable value or for certain function parameters.\n```\n\n## Debugger command\n\nWe can also pause the code by using the `debugger` command, like this:\n\n```js\nfunction hello(name) {\n  let phrase = `Hello, ${name}!`;\n\n*!*\n  debugger;  // <-- the debugger stops here\n*/!*\n\n  say(phrase);\n}\n```\n\nThat's very convenient when we are in a code editor and don't want to switch to the browser and look up the script in developer tools to set the breakpoint.\n\n\n## Pause and look around\n\nIn our example, `hello()` is called during the page load, so the easiest way to activate the debugger is to reload the page. So let's press `key:F5` (Windows, Linux) or `key:Cmd+R` (Mac).\n\nAs the breakpoint is set, the execution pauses at the 4th line:\n\n![](chrome-sources-debugger-pause.png)\n\nPlease open the informational dropdowns to the right (labeled with arrows). They allow you to examine the current code state:\n\n1. **`Watch` -- shows current values for any expressions.**\n\n    You can click the plus `+` and input an expression. The debugger will show its value at any moment, automatically recalculating it in the process of execution.\n\n2. **`Call Stack` -- shows the nested calls chain.**\n\n    At the current moment the debugger is inside `hello()` call, called by a script in `index.html` (no function there, so it's called \"anonymous\").\n\n    If you click on a stack item, the debugger jumps to the corresponding code, and all its variables can be examined as well.\n3. **`Scope` -- current variables.**\n\n    `Local` shows local function variables. You can also see their values highlighted right over the source.\n\n    `Global` has global variables (out of any functions).\n\n    There's also `this` keyword there that we didn't study yet, but we'll do that soon.\n\n## Tracing the execution\n\nNow it's time to *trace* the script.\n\nThere are buttons for it at the top of the right pane. Let's engage them.\n\n<span class=\"devtools\" style=\"background-position:-7px -76px\"></span> -- continue the execution, hotkey `key:F8`.\n: Resumes the execution. If there are no additional breakpoints, then the execution just continues and the debugger loses control.\n\n    Here's what we can see after a click on it:\n\n    ![](chrome-sources-debugger-trace-1.png)\n\n    The execution has resumed, reached another breakpoint inside `say()` and paused there. Take a look at the \"Call stack\" at the right. It has increased by one more call. We're inside `say()` now.\n\n<span class=\"devtools\" style=\"background-position:-137px -76px\"></span> -- make a step (run the next command), but *don't go into the function*, hotkey `key:F10`.\n: If we click it now, `alert` will be shown. The important thing is that `alert` can be any function, the execution \"steps over it\", skipping the function internals.\n\n<span class=\"devtools\" style=\"background-position:-72px -76px\"></span> -- make a step, hotkey `key:F11`.\n: The same as the previous one, but \"steps into\" nested functions. Clicking this will step through all script actions one by one.\n\n<span class=\"devtools\" style=\"background-position:-104px -76px\"></span> -- continue the execution till the end of the current function, hotkey `key:Shift+F11`.\n: The execution would stop at the very last line of the current function. That's handy when we accidentally entered a nested call using <span class=\"devtools\" style=\"background-position:-72px -76px\"></span>, but it does not interest us, and we want to continue to its end as soon as possible.\n\n<span class=\"devtools\" style=\"background-position:-7px -28px\"></span> -- enable/disable all breakpoints.\n: That button does not move the execution. Just a mass on/off for breakpoints.\n\n<span class=\"devtools\" style=\"background-position:-264px -4px\"></span> -- enable/disable automatic pause in case of an error.\n: When enabled, and the developer tools is open, a script error automatically pauses the execution. Then we can analyze variables to see what went wrong. So if our script dies with an error, we can open debugger, enable this option and reload the page to see where it dies and what's the context at that moment.\n\n```smart header=\"Continue to here\"\nRight click on a line of code opens the context menu with a great option called \"Continue to here\".\n\nThat's handy when we want to move multiple steps forward, but we're too lazy to set a breakpoint.\n```\n\n## Logging\n\nTo output something to console, there's `console.log` function.\n\nFor instance, this outputs values from `0` to `4` to console:\n\n```js run\n// open console to see\nfor (let i = 0; i < 5; i++) {\n  console.log(\"value\", i);\n}\n```\n\nRegular users don't see that output, it is in the console. To see it, either open the Console tab of developer tools or press `key:Esc` while in another tab: that opens the console at the bottom.\n\nIf we have enough logging in our code, then we can see what's going on from the records, without the debugger.\n\n## Summary\n\nAs we can see, there are three main ways to pause a script:\n1. A breakpoint.\n2. The `debugger` statements.\n3. An error (if dev tools are open and the button <span class=\"devtools\" style=\"background-position:-264px -4px\"></span> is \"on\")\n\nThen we can examine variables and step on to see where the execution goes wrong.\n\nThere are many more options in developer tools than covered here. The full manual is at <https://developers.google.com/web/tools/chrome-devtools>.\n\nThe information from this chapter is enough to begin debugging, but later, especially if you do a lot of browser stuff, please go there and look through more advanced capabilities of developer tools.\n\nOh, and also you can click at various places of dev tools and just see what's showing up. That's probably the fastest route to learn dev tools. Don't forget about the right click as well!","libs":[],"children":[],"headHtml":{"type":"Buffer","data":[60,115,116,121,108,101,62,10,115,112,97,110,46,100,101,118,116,111,111,108,115,32,123,10,32,32,100,105,115,112,108,97,121,58,32,105,110,108,105,110,101,45,98,108,111,99,107,59,10,32,32,98,97,99,107,103,114,111,117,110,100,45,105,109,97,103,101,58,32,117,114,108,40,47,97,114,116,105,99,108,101,47,100,101,98,117,103,103,105,110,103,45,99,104,114,111,109,101,47,116,111,111,108,98,97,114,66,117,116,116,111,110,71,108,121,112,104,115,46,115,118,103,41,59,10,32,32,104,101,105,103,104,116,58,49,54,112,120,59,10,32,32,119,105,100,116,104,58,49,54,112,120,59,10,125,10,60,47,115,116,121,108,101,62,10]},"parent":"code-quality"}},"coding-style":{"type":"Article","value":{"title":"Coding style","slug":"coding-style","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/02-coding-style/article.md","isFolder":false,"weight":2,"content":"\nOur code must be as clean and easy to read as possible.\n\nThat is actually an art of programming -- to take a complex task and code it in a way that is both correct and human-readable.\n\nOne thing to help is the good code style.\n\n## Syntax\n\nA cheatsheet with the rules (more details below):\n\n![](code-style.png)\n<!--\n```js\nfunction pow(x, n) {\n  let result = 1;\n\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n\nlet x = prompt(\"x?\", \"\");\nlet n = prompt(\"n?\", \"\");\n\nif (n < 0) {\n  alert(`Power ${n} is not supported,\n    please enter an integer number, greater than 0`);\n} else {\n  alert( pow(x, n) );\n}\n```\n\n-->\n\nNow let's discuss the rules and reasons for them in detail.\n\nNothing is \"carved in stone\" here. Everything is optional and can be changed: these are coding rules, not religious dogmas.\n\n### Curly braces\n\nIn most JavaScript projects curly braces are written on the same line as the corresponding keyword, not on the new line, a so-called \"Egyptian\" style. There's also a space before an opening bracket.\n\nLike this:\n\n```js\nif (condition) {\n  // do this\n  // ...and that\n  // ...and that\n}\n```\n\nA single-line construct is an important edge case. Should we use brackets at all? If yes, then where?\n\nHere are the annotated variants, so you can judge about their readability on your own:\n\n<!--\n```js no-beautify\nif (n < 0) {alert(`Power ${n} is not supported`);}\n\nif (n < 0) alert(`Power ${n} is not supported`);\n\nif (n < 0)\n  alert(`Power ${n} is not supported`);\n\nif (n < 0) {\n  alert(`Power ${n} is not supported`);\n}\n```\n-->\n![](figure-bracket-style.png)\n\nAs a summary:\n- For a really short code, one line is acceptable: like `if (cond) return null`.\n- But a separate line for each statement in brackets is usually better.\n\n### Line length\n\nThe maximal line length should be limited. No one likes to eye-follow a long horizontal line. It's better to split it.\n\nThe maximal line length is agreed on the team-level. It's usually 80 or 120 characters.\n\n### Indents\n\nThere are two types of indents:\n\n- **A horizontal indent: 2(4) spaces.**\n\n    A horizontal indentation is made using either 2 or 4 spaces or the \"Tab\" symbol. Which one to choose is an old holy war. Spaces are more common nowadays.\n\n    One advantage of spaces over tabs is that spaces allow more flexible configurations of indents than the \"Tab\" symbol.\n\n    For instance, we can align the arguments with the opening bracket, like this:\n\n    ```js no-beautify\n    show(parameters,\n         aligned, // 5 spaces padding at the left  \n         one,\n         after,\n         another\n      ) {\n      // ...\n    }\n    ```\n\n- **A vertical indent: empty lines for splitting code into logical blocks.**\n\n    Even a single function can often be divided in logical blocks. In the example below, the initialization of variables, the main loop and returning the result are split vertically:\n\n    ```js\n    function pow(x, n) {\n      let result = 1;\n      //              <--\n      for (let i = 0; i < n; i++) {\n        result *= x;\n      }\n      //              <--\n      return result;\n    }\n    ```\n\n    Insert an extra newline where it helps to make the code more readable. There should not be more than nine lines of code without a vertical indentation.\n\n### A semicolon\n\nA semicolon should be present after each statement. Even if it could possibly be skipped.\n\nThere are languages where a semicolon is truly optional. It's rarely used there. But in JavaScript there are few cases when a line break is sometimes not interpreted as a semicolon. That leaves a place for programming errors.\n\nAs you become more mature as a programmer, you may choose a no-semicolon style, like [StandardJS](https://standardjs.com/), but that's only when you know JavaScript well and understand possible pitfalls.\n\n### Nesting levels\n\nThere should not be too many nesting levels.\n\nSometimes it's a good idea to use the [\"continue\"](info:while-for#continue) directive in the loop to evade extra nesting in `if(..) { ... }`:\n\nInstead of:\n\n```js\nfor (let i = 0; i < 10; i++) {\n  if (cond) {\n    ... // <- one more nesting level\n  }\n}\n```\n\nWe can write:\n\n```js\nfor (let i = 0; i < 10; i++) {\n  if (!cond) *!*continue*/!*;\n  ...  // <- no extra nesting level\n}\n```\n\nA similar thing can be done with `if/else` and `return`.\n\nFor example, two constructs below are identical.\n\nThe first one:\n\n```js\nfunction pow(x, n) {\n  if (n < 0) {\n    alert(\"Negative 'n' not supported\");\n  } else {\n    let result = 1;\n\n    for (let i = 0; i < n; i++) {\n      result *= x;\n    }\n\n    return result;\n  }  \n}\n```\n\nAnd this:\n\n```js\nfunction pow(x, n) {\n  if (n < 0) {\n    alert(\"Negative 'n' not supported\");\n    return;\n  }\n\n  let result = 1;\n\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n```\n\n...But the second one is more readable, because the \"edge case\" of `n < 0` is handled early on, and then we have the \"main\" code flow, without an additional nesting.\n\n## Functions below the code\n\nIf you are writing several \"helper\" functions and the code to use them, then there are three ways to place them.\n\n1. Functions above the code that uses them:\n\n    ```js\n    // *!*function declarations*/!*\n    function createElement() {\n      ...\n    }\n\n    function setHandler(elem) {\n      ...\n    }\n\n    function walkAround() {\n      ...\n    }\n\n    // *!*the code which uses them*/!*\n    let elem = createElement();\n    setHandler(elem);\n    walkAround();\n    ```\n2. Code first, then functions\n\n    ```js\n    // *!*the code which uses the functions*/!*\n    let elem = createElement();\n    setHandler(elem);\n    walkAround();\n\n    // --- *!*helper functions*/!* ---\n\n    function createElement() {\n      ...\n    }\n\n    function setHandler(elem) {\n      ...\n    }\n\n    function walkAround() {\n      ...\n    }\n    ```\n3. Mixed: a function is described where it's first used.\n\nMost of time, the second variant is preferred.\n\nThat's because when reading a code, we first want to know \"what it does\". If the code goes first, then it provides that information. And then maybe we won't need to read functions at all, especially if their names are adequate to what they're doing.\n\n## Style guides\n\nA style guide contains general rules about \"how to write\": which quotes to use, how many spaces to indent, where to put line breaks, etc. A lot of minor things.\n\nIn total, when all members of a team use the same style guide, the code looks uniform. No matter who of the team wrote it, it's still the same style.\n\nSurely, a team may think out a style guide themselves. But as of now, there's no need to. There are many tried, worked-out style guides, which are easy to adopt.\n\nFor instance:\n\n- [Google JavaScript Style Guide](https://google.github.io/styleguide/javascriptguide.xml)\n- [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript)\n- [Idiomatic.JS](https://github.com/rwaldron/idiomatic.js)\n- [StandardJS](https://standardjs.com/)\n- (there are more)\n\nIf you're a novice developer, then you could start with the cheatsheet above in the chapter, and later browse the style guides to pick up the common principles and maybe choose one.\n\n## Automated linters\n\nThere are tools that can check the code style automatically. They are called \"linters\".\n\nThe great thing about them is that style-checking also finds some bugs, like a typo in a variable or function name.\n\nSo it's recommended to install one, even if you don't want to stick to a \"code style\". They help to find typos -- and that's already good enough.\n\nMost well-known tools are:\n\n- [JSLint](http://www.jslint.com/) -- one of the first linters.\n- [JSHint](http://www.jshint.com/) -- more settings than JSLint.\n- [ESLint](http://eslint.org/) -- probably the newest one.\n\nAll of them can do the job. The author uses [ESLint](http://eslint.org/).\n\nMost linters are integrated with editors: just enable the plugin in the editor and configure the style.\n\nFor instance, for ESLint you should do the following:\n\n1. Install [Node.JS](https://nodejs.org/).\n2. Install ESLint with the command `npm install -g eslint` (npm is a JavaScript package installer).\n3. Create a config file named `.eslintrc` in the root of your JavaScript project (in the folder that contains all your files).\n\nHere's an example of `.eslintrc`:\n\n```js\n{\n  \"extends\": \"eslint:recommended\",\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"es6\": true\n  },\n  \"rules\": {\n    \"no-console\": 0,\n  },\n  \"indent\": 2\n}\n```\n\nHere the directive `\"extends\"` denotes that we base on the \"eslint:recommended\" set of settings, and then we specify our own.\n\nThen install/enable the plugin for your editor that integrates with ESLint. The majority of editors have it.\n\nIt is possible to download style rule sets from the web and extend them instead. See <http://eslint.org/docs/user-guide/getting-started> for more details about installation.\n\nUsing a linter has a great side-effect: linters catch typos. For instance, when an undefined variable is accessed, a linter detects it and (if integrated with an editor) highlights it. In most cases that's a mistype. So we can fix it right ahead.\n\nFor that reason even if you're not concerned about styles, using a linter is highly recommended.\n\nAlso certain IDEs support built-in linting, that also may be good, but not so tunable as ESLint.\n\n## Summary\n\nAll syntax rules from this chapter and the style guides aim to increase readability, so all of them are debatable.\n\nWhen we think about \"how to write better?\", the sole criterion is \"what makes the code more readable and easier to understand? what helps to avoid errors?\" That's the main thing to keep in mind when choosing the style or discussing which one is better.\n\nRead style guides to see the latest ideas about that and follow those that you find the best.","libs":[],"children":["style-errors"],"parent":"code-quality"}},"style-errors":{"type":"Task","value":{"title":"Bad style","slug":"style-errors","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/02-coding-style/1-style-errors","weight":1,"libs":[],"importance":4,"content":"\nWhat's wrong with the code style below?\n\n```js no-beautify\nfunction pow(x,n)\n{\n  let result=1;\n  for(let i=0;i<n;i++) {result*=x;}\n  return result;\n}\n\nlet x=prompt(\"x?\",''), n=prompt(\"n?\",'')\nif (n<=0)\n{\n  alert(`Power ${n} is not supported, please enter an integer number greater than zero`);\n}\nelse\n{\n  alert(pow(x,n))\n}\n```\n\nFix it.","solution":"You could note the following:\n\n```js no-beautify\nfunction pow(x,n)  // <- no space between arguments\n{  // <- figure bracket on a separate line\n  let result=1;   // <- no spaces to the both sides of =\n  for(let i=0;i<n;i++) {result*=x;}   // <- no spaces\n  // the contents of { ... } should be on a new line\n  return result;\n}\n\nlet x=prompt(\"x?\",''), n=prompt(\"n?\",'') // <-- technically possible,\n// but better make it 2 lines, also there's no spaces and ;\nif (n<0)  // <- no spaces inside (n < 0), and should be extra line above it\n{   // <- figure bracket on a separate line\n  // below - a long line, may be worth to split into 2 lines\n  alert(`Power ${n} is not supported, please enter an integer number greater than zero`);\n}\nelse // <- could write it on a single line like \"} else {\"\n{\n  alert(pow(x,n))  // no spaces and ;\n}\n```\n\nThe fixed variant:\n\n```js\nfunction pow(x, n) {\n  let result = 1;\n\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n\nlet x = prompt(\"x?\", \"\");\nlet n = prompt(\"n?\", \"\");\n\nif (n < 0) {\n  alert(`Power ${n} is not supported,\n    please enter an integer number greater than zero`);\n} else {\n  alert( pow(x, n) );\n}\n```","parent":"coding-style"}},"comments":{"type":"Article","value":{"title":"Comments","slug":"comments","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/03-comments/article.md","isFolder":false,"weight":3,"content":"\nAs we know from the chapter <info:structure>, comments can be single-line: starting with `//` and multiline: `/* ... */`.\n\nWe normally use them to describe how and why the code works.\n\nFrom the first sight, commenting might be obvious, but novices in programming usually get it wrong.\n\n## Bad comments\n\nNovices tend to use comments to explain \"what is going on in the code\". Like this:\n\n```js\n// This code will do this thing (...) and that thing (...)\n// ...and who knows what else...\nvery;\ncomplex;\ncode;\n```\n\nBut in good code the amount of such \"explanatory\" comments should be minimal. Seriously, code should be easy to understand without them.\n\nThere's a great rule about that: \"if the code is so unclear that it requires a comment, then maybe it should be rewritten instead\".\n\n### Recipe: factor out functions\n\nSometimes it's beneficial to replace a code piece with a function, like here:\n\n```js\nfunction showPrimes(n) {\n  nextPrime:\n  for (let i = 2; i < n; i++) {\n\n*!*\n    // check if i is a prime number\n    for (let j = 2; j < i; j++) {\n      if (i % j == 0) continue nextPrime;\n    }\n*/!*\n\n    alert(i);\n  }\n}\n```\n\nThe better variant, with a factored out function `isPrime`:\n\n\n```js\nfunction showPrimes(n) {\n\n  for (let i = 2; i < n; i++) {\n    *!*if (!isPrime(i)) continue;*/!*\n\n    alert(i);  \n  }\n}\n\nfunction isPrime(n) {\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) return false;\n  }\n\n  return true;\n}\n```\n\nNow we can understand the code easily. The function itself becomes the comment. Such code is called *self-descriptive*.\n\n### Recipe: create functions\n\nAnd if we have a long \"code sheet\" like this:\n\n```js\n// here we add whiskey\nfor(let i = 0; i < 10; i++) {\n  let drop = getWhiskey();\n  smell(drop);\n  add(drop, glass);\n}\n\n// here we add juice\nfor(let t = 0; t < 3; t++) {\n  let tomato = getTomato();\n  examine(tomato);\n  let juice = press(tomato);\n  add(juice, glass);\n}\n\n// ...\n```\n\nThen it might be a better variant to refactor it into functions like:\n\n```js\naddWhiskey(glass);\naddJuice(glass);\n\nfunction addWhiskey(container) {\n  for(let i = 0; i < 10; i++) {\n    let drop = getWhiskey();\n    //...\n  }\n}\n\nfunction addJuice(container) {\n  for(let t = 0; t < 3; t++) {\n    let tomato = getTomato();\n    //...\n  }\n}\n```\n\nOnce again, functions themselves tell what's going on. There's nothing to comment. And also the code structure is better when split. It's clear what every function does, what it takes and what it returns.\n\nIn reality, we can't totally avoid \"explanatory\" comments. There are complex algorithms. And there are smart \"tweaks\" for purposes of optimization. But generally we should try to keep the code simple and self-descriptive.\n\n## Good comments\n\nSo, explanatory comments are usually bad. Which comments are good?\n\nDescribe the architecture\n: Provide a high-level overview of components, how they interact, what's the control flow in various situations... In short -- the bird's eye view of the code. There's a special diagram language [UML](http://wikipedia.org/wiki/Unified_Modeling_Language) for high-level architecture diagrams. Definitely worth studying.\n\nDocument a function usage\n: There's a special syntax [JSDoc](http://en.wikipedia.org/wiki/JSDoc) to document a function: usage, parameters, returned value.\n\n    For instance:\n    ```js\n    /**\n     * Returns x raised to the n-th power.\n     *\n     * @param {number} x The number to raise.\n     * @param {number} n The power, must be a natural number.\n     * @return {number} x raised to the n-th power.\n     */\n    function pow(x, n) {\n      ...\n    }\n    ```\n\n    Such comments allow us to understand the purpose of the function and use it the right way without looking in its code.\n\n    By the way, many editors like [WebStorm](https://www.jetbrains.com/webstorm/) can understand them as well and use them to provide autocomplete and some automatic code-checking.\n\n    Also, there are tools like [JSDoc 3](https://github.com/jsdoc3/jsdoc) that can generate HTML-documentation from the comments. You can read more information about JSDoc at <http://usejsdoc.org/>.\n\nWhy is the task solved this way?\n: What's written is important. But what's *not* written may be even more important to understand what's going on. Why is the task solved exactly this way? The code gives no answer.\n\n    If there are many ways to solve the task, why this one? Especially when it's not the most obvious one.\n\n    Without such comments the following situation is possible:\n    1. You (or your colleague) open the code written some time ago, and see that it's \"suboptimal\".\n    2. You think: \"How stupid I was then, and how much smarter I'm now\", and rewrite using the \"more obvious and correct\" variant.\n    3. ...The urge to rewrite was good. But in the process you see that the \"more obvious\" solution is actually lacking. You even dimly remember why, because you already tried it long ago. You revert to the correct variant, but the time was wasted.\n\n    Comments that explain the solution are very important. They help to continue development the right way.\n\nAny subtle features of the code? Where they are used?\n: If the code has anything subtle and counter-intuitive, it's definitely worth commenting.\n\n## Summary\n\nAn important sign of a good developer is comments: their presence and even their absense.\n\nGood comments allow us to maintain the code well, come back to it after a delay and use it more effectively.\n\n**Comment this:**\n\n- Overall architecture, high-level view.\n- Function usage.\n- Important solutions, especially when not immediately obvious.\n\n**Avoid comments:**\n\n- That tell \"how code works\" and \"what it does\".\n- Put them only if it's impossible to make the code so simple and self-descriptive that it doesn't require those.\n\nComments are also used for auto-documenting tools like JSDoc3: they read them and generate HTML-docs (or docs in another format).","libs":[],"children":[],"parent":"code-quality"}},"ninja-code":{"type":"Article","value":{"title":"Ninja code","slug":"ninja-code","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/04-ninja-code/article.md","isFolder":false,"weight":4,"content":"\n\n```quote author=\"Confucius\"\nLearning without thought is labor lost; thought without learning is perilous.\n```\n\nProgrammer ninjas of the past used these tricks to make sharpen the mind of code maintainers.\n\nCode review gurus look for them in test tasks.\n\nNovice developers sometimes use them even better than programmer ninjas.\n\nRead them carefully and find out who you are -- a ninja, a novice, or maybe a code reviewer?\n\n\n```warn header=\"Irony detected\"\nMany try to follow ninja paths. Few succeed.\n```\n\n\n## Brevity is the soul of wit\n\nMake the code as short as possible. Show how smart you are.\n\nLet subtle language features guide you.\n\nFor instance, take a look at this ternary operator `'?'`:\n\n```js\n// taken from a well-known javascript library\ni = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n```\n\nCool, right? If you write like that, the developer who comes across this line and tries to understand what is the value of `i` is going to have a merry time. Then come to you, seeking for an answer.\n\nTell him that shorter is always better. Initiate him into the paths of ninja.\n\n## One-letter variables\n\n```quote author=\"Laozi (Tao Te Ching)\"\nThe Dao hides in wordlessness. Only the Dao is well begun and well\ncompleted.\n```\n\nAnother way to code faster is to use single-letter variable names everywhere. Like `a`, `b` or `c`.\n\nA short variable disappears in the code like a real ninja in the forest. No one will be able to find it using \"search\" of the editor. And even if someone does, he won't be able to \"decipher\" what the name `a` or `b` means.\n\n...But there's an exception. A real ninja will never use `i` as the counter in a `\"for\"` loop. Anywhere, but not here. Look around, there are many more exotic letters. For instance, `x` or `y`.\n\nAn exotic variable as a loop counter is especially cool if the loop body takes 1-2 pages (make it longer if you can). Then if someone looks deep inside the loop, he won't be able to quickly figure out that the variable named `x` is the loop counter.\n\n## Use abbreviations\n\nIf the team rules forbid the use of one-letter and vague names -- shorten them, make abbreviations.\n\nLike this:\n\n- `list` -> `lst`.\n- `userAgent` -> `ua`.\n- `browser` -> `brsr`.\n- ...etc\n\nOnly the one with truly good intuition will be able to understand such names. Try to shorten everything. Only a worthy person should be able to uphold the development of your code.\n\n## Soar high. Be abstract.\n\n```quote author=\"Laozi (Tao Te Ching)\"\nThe great square is cornerless<br>\nThe great vessel is last complete,<br>\nThe great note is rarified sound,<br>\nThe great image has no form.\n```\n\nWhile choosing a name try to use the most abstract word. Like `obj`, `data`, `value`, `item`, `elem` and so on.\n\n- **The ideal name for a variable is `data`.** Use it everywhere you can. Indeed, every variable holds *data*, right?\n\n    ...But what to do if `data` is already taken? Try `value`, it's also universal. After all, a variable eventually gets a *value*.\n\n- **Name a variable by its type: `str`, `num`...**\n\n    Give them a try. A young initiate may wonder -- are such names really useful for a ninja? Indeed, they are!\n\n    Sure, the variable name still means something. It says what's inside the variable: a string, a number or something else. But when an outsider tries to understand the code, he'll be surprised to see that there's actually no information at all! And will ultimately fail to alter your well-thought code.\n\n    The value type is easy to find out by debugging. But what's the meaning of the variable? Which string/number does it store?\n\n    There's just no way to figure out without a good meditation!\n\n- **...But what if there are no more such names?** Just add a number: `data1, item2, elem5`...\n\n## Attention test\n\nOnly a truly attentive programmer should be able to understand your code. But how to check that?\n\n**One of the ways -- use similar variable names, like `date` and `data`.**\n\nMix them where you can.\n\nA quick read of such code becomes impossible. And when there's a typo... Ummm... We're stuck for long, time to drink tea.\n\n\n## Smart synonyms\n\n```quote author=\"Confucius\"\nThe hardest thing of all is to find a black cat in a dark room, especially if there is no cat.\n```\n\nUsing *similar* names for *same* things makes life more interesting and shows your creativity to the public.\n\nFor instance, consider function prefixes. If a function shows a message on the screen -- start it with `display…`, like `displayMessage`. And then if another function shows on the screen something else, like a user name, start it with `show…` (like `showName`).\n\nInsinuate that there's a subtle difference between such functions, while there is none.\n\nMake a pact with fellow ninjas of the team: if John starts \"showing\" functions with `display...` in his code, then Peter could use `render..`, and Ann -- `paint...`. Note how much more interesting and diverse the code became.\n\n...And now the hat trick!\n\nFor two functions with important differences -- use the same prefix!\n\nFor instance, the function `printPage(page)` will use a printer. And the function `printText(text)` will put the text on-screen. Let an unfamiliar reader think well over similarly named function `printMessage`: \"Where does it put the message? To a printer or on the screen?\". To make it really shine, `printMessage(message)` should output it in the new window!\n\n## Reuse names\n\n```quote author=\"Laozi (Tao Te Ching)\"\nOnce the whole is divided, the parts<br>\nneed names.<br>\nThere are already enough names.<br>\nOne must know when to stop.\n```\n\nAdd a new variable only when absolutely necessary.\n\nInstead, reuse existing names. Just write new values into them.\n\nIn a function try to use only variables passed as parameters.\n\nThat would make it really hard to identify what's exactly in the variable *now*. And also where it comes from. A person with weak intuition would have to analyze the code line-by-line and track the changes through every code branch.\n\n**An advanced variant of the approach is to covertly (!) replace the value with something alike in the middle of a loop or a function.**\n\nFor instance:\n\n```js\nfunction ninjaFunction(elem) {\n  // 20 lines of code working with elem\n\n  elem = clone(elem);\n\n  // 20 more lines, now working with the clone of the elem!\n}\n```\n\nA fellow programmer who wants to work with `elem` in the second half of the function will be surprised... Only during the debugging, after examining the code he will find out that he's working with a clone!\n\nDeadly effective even against an experienced ninja. Seen in code regularly.\n\n## Underscores for fun\n\nPut underscores `_` and `__` before variable names. Like `_name` or `__value`. It would be great if only you knew their meaning. Or, better, add them just for fun, without particular meaning at all. Or different meanings in different places.\n\nYou kill two rabbits with one shot. First, the code becomes longer and less readable, and the second, a fellow developer may spend a long time trying to figure out what the underscores mean.\n\nA smart ninja puts underscores at one spot of code and evades them at other places. That makes the code even more fragile and increases the probability of future errors.\n\n## Show your love\n\nLet everyone see how magnificent your entities are! Names like `superElement`, `megaFrame` and `niceItem` will definitely enlighten a reader.\n\nIndeed, from one hand, something is written: `super..`, `mega..`, `nice..` But from the other hand -- that brings no details. A reader may decide to look for a hidden meaning and meditate for an hour or two.\n\n## Overlap outer variables\n\n```quote author=\"Guan Yin Zi\"\nWhen in the light, can't see anything in the darkness.<br>\nWhen in the darkness, can see everything in the light.\n```\n\nUse same names for variables inside and outside a function. As simple. No efforts required.\n\n```js\nlet *!*user*/!* = authenticateUser();\n\nfunction render() {\n  let *!*user*/!* = anotherValue();\n  ...\n  ...many lines...\n  ...\n  ... // <-- a programmer wants to work with user here and...\n  ...\n}\n```\n\nA programmer who jumps inside the `render` will probably fail to notice that there's a local `user` shadowing the outer one.\n\nThen he'll try to work with `user` assuming that it's the external variable, the result of `authenticateUser()`... The trap is sprung! Hello, debugger...\n\n\n## Side-effects everywhere!\n\nThere are functions that look like they don't change anything. Like `isReady()`, `checkPermission()`, `findTags()`... They are assumed to carry out calculations, find and return the data, without changing anything outside of them. In other words, without \"side-effects\".\n\n**A really beautiful trick is to add a \"useful\" action to them, besides the main task.**\n\nThe expression of dazed surprise on the face of your colleague when he sees a function named `is..`, `check..` or `find...` changing something -- will definitely broaden your boundaries of reason.\n\n**Another way to surprise is to return a non-standard result.**\n\nShow your original thinking! Let the call of `checkPermission` return not `true/false`, but a complex object with the results of the check.\n\nThose developers who try to write `if (checkPermission(..))`, will wonder why it doesn't work. Tell them: \"Read the docs!\". And give this article.\n\n\n## Powerful functions!\n\n```quote author=\"Laozi (Tao Te Ching)\"\nThe great Tao flows everywhere,<br>\nboth to the left and to the right.\n```\n\nDon't limit the function by what's written in its name. Be broader.\n\nFor instance, a function `validateEmail(email)` could (besides checking the email for correctness) show an error message and ask to re-enter the email.\n\nAdditional actions should not be obvious from the function name. A true ninja coder will make them not obvious from the code as well.\n\n**Joining several actions into one protects your code from reuse.**\n\nImagine, another developer wants only to check the email, and not output any message. Your function  `validateEmail(email)` that does both will not suit him. So he won't break your meditation by asking anything about it.\n\n## Summary\n\nAll \"pieces of advice\" above are from the real code... Sometimes, written by experienced developers. Maybe even more experienced than you are ;)\n\n- Follow some of them, and your code will become full of surprises.\n- Follow many of them, and your code will become truly yours, no one would want to change it.\n- Follow all, and your code will become a valuable lesson for young developers looking for enlightenment.","libs":[],"children":[],"parent":"code-quality"}},"testing-mocha":{"type":"Article","value":{"title":"Automated testing with mocha","slug":"testing-mocha","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/05-testing-mocha/article.md","isFolder":false,"weight":5,"content":"\nAutomated testing will be used in further tasks.\n\nIt's actually a part of the \"educational minimum\" of a developer.\n\n## Why we need tests?\n\nWhen we write a function, we can usually imagine what it should do: which parameters give which results.\n\nDuring development, we can check the function by running it and comparing the outcome with the expected one. For instance, we can do it in the console.\n\nIf something is wrong -- then we fix the code, run again, check the result -- and so on till it works.\n\nBut such manual \"re-runs\" are imperfect.\n\n**When testing a code by manual re-runs, it's easy to miss something.**\n\nFor instance, we're creating a function `f`. Wrote some code, testing: `f(1)` works, but `f(2)` doesn't work. We fix the code and now `f(2)` works. Looks complete? But we forgot to re-test `f(1)`. That may lead to an error.\n\nThat's very typical. When we develop something, we keep a lot of possible use cases in mind. But it's hard to expect a programmer to check all of them manually after every change. So it becomes easy to fix one thing and break another one.\n\n**Automated testing means that tests are written separately, in addition to the code. They can be executed easily and check all the main use cases.**\n\n## Behavior Driven Development (BDD)\n\nLet's use a technique named [Behavior Driven Development](http://en.wikipedia.org/wiki/Behavior-driven_development) or, in short, BDD. That approach is used among many projects. BDD is not just about testing. That's more.\n\n**BDD is three things in one: tests AND documentation AND examples.**\n\nEnough words. Let's see the example.\n\n## Development of \"pow\": the spec\n\nLet's say we want to make a function `pow(x, n)` that raises `x` to an integer power `n`. We assume that `n≥0`.\n\nThat task is just an example: there's the `**` operator in JavaScript that can do that, but here we concentrate on the development flow that can be applied to more complex tasks as well.\n\nBefore creating the code of `pow`, we can imagine what the function should do and describe it.\n\nSuch description is called a *specification* or, in short, a spec, and looks like this:\n\n```js\ndescribe(\"pow\", function() {\n\n  it(\"raises to n-th power\", function() {\n    assert.equal(pow(2, 3), 8);\n  });\n\n});\n```\n\nA spec has three main building blocks that you can see above:\n\n`describe(\"title\", function() { ... })`\n: What functionality we're describing. Uses to group \"workers\" -- the `it` blocks. In our case we're describing the function `pow`.\n\n`it(\"title\", function() { ... })`\n: In the title of `it` we *in a human-readable way* describe the particular use case, and the second argument is a function that tests it.\n\n`assert.equal(value1, value2)`\n: The code inside `it` block, if the implementation is correct, should execute without errors.\n\n    Functions `assert.*` are used to check whether `pow` works as expected. Right here we're using one of them -- `assert.equal`, it compares arguments and yields an error if they are not equal. Here it checks that the result of `pow(2, 3)` equals `8`.\n\n    There are other types of comparisons and checks that we'll see further.\n\n## The development flow\n\nThe flow of development usually looks like this:\n\n1. An initial spec is written, with tests for the most basic functionality.\n2. An initial implementation is created.\n3. To check whether it works, we run the testing framework [Mocha](http://mochajs.org/) (more details soon) that runs the spec. Errors are displayed. We make corrections until everything works.\n4. Now we have a working initial implementation with tests.\n5. We add more use cases to the spec, probably not yet supported by the implementations. Tests start to fail.\n6. Go to 3, update the implementation till tests give no errors.\n7. Repeat steps 3-6 till the functionality is ready.\n\nSo, the development is *iterative*. We write the spec, implement it, make sure tests pass, then write more tests, make sure they work etc. At the end we have both a working implementation and tests for it.\n\nIn our case, the first step is complete: we have an initial spec for `pow`. So let's make an implementation. But before that let's make a \"zero\" run of the spec, just to see that tests are working (they will all fail).\n\n## The spec in action\n\nHere in the tutorial we'll be using the following JavaScript libraries for tests:\n\n- [Mocha](http://mochajs.org/) -- the core framework: it provides common testing functions including `describe` and `it` and the main function that runs tests.\n- [Chai](http://chaijs.com) -- the library with many assertions. It allows to use a lot of different assertions, for now we need only `assert.equal`.\n- [Sinon](http://sinonjs.org/) -- a library to spy over functions, emulate built-in functions and more, we'll need it much later.\n\nThese libraries are suitable for both in-browser and server-side testing. Here we'll consider the browser variant.\n\nThe full HTML page with these frameworks and `pow` spec:\n\n```html src=\"index.html\"\n```\n\nThe page can be divided into four parts:\n\n1. The `<head>` -- add third-party libraries and styles for tests.\n2. The `<script>` with the function to test, in our case -- with the code for `pow`.\n3. The tests -- in our case an external script `test.js` that has `describe(\"pow\", ...)` from above.\n4. The HTML element `<div id=\"mocha\">` will be used by Mocha to output results.\n5. The tests are started by the command `mocha.run()`.\n\nThe result:\n\n[iframe height=250 src=\"pow-1\" border=1 edit]\n\nAs of now, the test fails, there's an error. That's logical: we have an empty function code in `pow`, so `pow(2,3)` returns `undefined` instead of `8`.\n\nFor the future, let's note that there are advanced test-runners, like [karma](https://karma-runner.github.io/) and others. So it's generally not a problem to setup many different tests.\n\n## Initial implementation\n\nLet's make a simple implementation of `pow`, for tests to pass:\n\n```js\nfunction pow() {\n  return 8; // :) we cheat!\n}\n```\n\nWow, now it works!\n\n[iframe height=250 src=\"pow-min\" border=1 edit]\n\n## Improving the spec\n\nWhat we've done is definitely a cheat. The function does not work: an attempt to calculate `pow(3,4)` would give an incorrect result, but tests pass.\n\n...But the situation is quite typical, it happens in practice. Tests pass, but the function works wrong. Our spec is imperfect. We need to add more use cases to it.\n\nLet's add one more test to see if `pow(3, 4) = 81`.\n\nWe can select one of two ways to organize the test here:\n\n1. The first variant -- add one more `assert` into the same `it`:\n\n    ```js\n    describe(\"pow\", function() {\n\n      it(\"raises to n-th power\", function() {\n        assert.equal(pow(2, 3), 8);\n    *!*\n        assert.equal(pow(3, 4), 81);\n    */!*\n      });\n\n    });\n    ```\n2. The second -- make two tests:\n\n    ```js\n    describe(\"pow\", function() {\n\n      it(\"2 raised to power 3 is 8\", function() {\n        assert.equal(pow(2, 3), 8);\n      });\n\n      it(\"3 raised to power 3 is 27\", function() {\n        assert.equal(pow(3, 3), 27);\n      });\n\n    });\n    ```\n\nThe principal difference is that when `assert` triggers an error, the `it` block immediately terminates. So, in the first variant if the first `assert` fails, then we'll never see the result of the second `assert`.\n\nMaking tests separate is useful to get more information about what's going on, so the second variant is better.\n\nAnd besides that, there's one more rule that's good to follow.\n\n**One test checks one thing.**\n\nIf we look at the test and see two independent checks in it, it's better to split it into two simpler ones.\n\nSo let's continue with the second variant.\n\nThe result:\n\n[iframe height=250 src=\"pow-2\" edit border=\"1\"]\n\nAs we could expect, the second test failed. Sure, our function always returns `8`, while the `assert` expects `27`.\n\n## Improving the implementation\n\nLet's write something more real for tests to pass:\n\n```js\nfunction pow(x, n) {\n  let result = 1;\n\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n```\n\nTo be sure that the function works well, let's test it for more values. Instead of writing `it` blocks manually, we can generate them in `for`:\n\n```js\ndescribe(\"pow\", function() {\n\n  function makeTest(x) {\n    let expected = x * x * x;\n    it(`${x} in the power 3 is ${expected}`, function() {\n      assert.equal(pow(x, 3), expected);\n    });\n  }\n\n  for (let x = 1; x <= 5; x++) {\n    makeTest(x);\n  }\n\n});\n```\n\nThe result:\n\n[iframe height=250 src=\"pow-3\" edit border=\"1\"]\n\n## Nested describe\n\nWe're going to add even more tests. But before that let's note that the helper function `makeTest` and `for` should be grouped together. We won't need `makeTest` in other tests, it's needed only in `for`: their common task is to check how `pow` raises into the given power.\n\nGrouping is done with a nested `describe`:\n\n```js\ndescribe(\"pow\", function() {\n\n*!*\n  describe(\"raises x to power n\", function() {\n*/!*\n\n    function makeTest(x) {\n      let expected = x * x * x;\n      it(`${x} in the power 3 is ${expected}`, function() {\n        assert.equal(pow(x, 3), expected);\n      });\n    }\n\n    for (let x = 1; x <= 5; x++) {\n      makeTest(x);\n    }\n\n*!*\n  });\n*/!*\n\n  // ... more tests to follow here, both describe and it can be added\n});\n```\n\nThe nested `describe` defines a new \"subgroup\" of tests. In the output we can see the titled indentation:\n\n[iframe height=250 src=\"pow-4\" edit border=\"1\"]\n\nIn the future we can add more `it` and `describe` on the top level with helper functions of their own, they won't see `makeTest`.\n\n````smart header=\"`before/after` and `beforeEach/afterEach`\"\nWe can setup `before/after` functions that execute before/after running tests, and also `beforeEach/afterEach` functions that execute before/after *every* `it`.\n\nFor instance:\n\n```js no-beautify\ndescribe(\"test\", function() {\n\n  before(() => alert(\"Testing started – before all tests\"));\n  after(() => alert(\"Testing finished – after all tests\"));\n\n  beforeEach(() => alert(\"Before a test – enter a test\"));\n  afterEach(() => alert(\"After a test – exit a test\"));\n\n  it('test 1', () => alert(1));\n  it('test 2', () => alert(2));\n\n});\n```\n\nThe running sequence will be:\n\n```\nTesting started – before all tests (before)\nBefore a test – enter a test (beforeEach)\n1\nAfter a test – exit a test   (afterEach)\nBefore a test – enter a test (beforeEach)\n2\nAfter a test – exit a test   (afterEach)\nTesting finished – after all tests (after)\n```\n\n[edit src=\"beforeafter\" title=\"Open the example in the sandbox.\"]\n\nUsually, `beforeEach/afterEach` (`before/each`) are used to perform initialization, zero out counters or do something else between the tests (or test groups).\n````\n\n## Extending the spec\n\nThe basic functionality of `pow` is complete. The first iteration of the development is done. When we're done celebrating and drinking champagne -- let's go on and improve it.\n\nAs it was said, the function `pow(x, n)` is meant to work with positive integer values `n`.\n\nTo indicate a mathematical error, JavaScript functions usually return `NaN`. Let's do the same for invalid values of `n`.\n\nLet's first add the behavior to the spec(!):\n\n```js\ndescribe(\"pow\", function() {\n\n  // ...\n\n  it(\"for negative n the result is NaN\", function() {\n*!*\n    assert.isNaN(pow(2, -1));\n*/!*\n  });\n\n  it(\"for non-integer n the result is NaN\", function() {\n*!*\n    assert.isNaN(pow(2, 1.5));    \n*/!*\n  });\n\n});\n```\n\nThe result with new tests:\n\n[iframe height=530 src=\"pow-nan\" edit border=\"1\"]\n\nThe newly added tests fail, because our implementation does not support them. That's how BDD is done: first we write failing tests, and then make an implementation for them.\n\n```smart header=\"Other assertions\"\n\nPlease note the assertion `assert.isNaN`: it checks for `NaN`.\n\nThere are other assertions in Chai as well, for instance:\n\n- `assert.equal(value1, value2)` -- checks the equality  `value1 == value2`.\n- `assert.strictEqual(value1, value2)` -- checks the strict equality `value1 === value2`.\n- `assert.notEqual`, `assert.notStrictEqual` -- inverse checks to the ones above.\n- `assert.isTrue(value)` -- checks that `value === true`\n- `assert.isFalse(value)` -- checks that `value === false`\n- ...the full list is in the [docs](http://chaijs.com/api/assert/)\n```\n\nSo we should add a couple of lines to `pow`:\n\n```js\nfunction pow(x, n) {\n*!*\n  if (n < 0) return NaN;\n  if (Math.round(n) != n) return NaN;\n*/!*\n\n  let result = 1;\n\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n```\n\nNow it works, all tests pass:\n\n[iframe height=300 src=\"pow-full\" edit border=\"1\"]\n\n[edit src=\"pow-full\" title=\"Open the full final example in the sandbox.\"]\n\n## Summary\n\nIn BDD, the spec goes first, followed by implementation. At the end we have both the spec and the code.\n\nThe spec can be used in three ways:\n\n1. **Tests** guarantee that the code works correctly.\n2. **Docs** -- the titles of `describe` and `it` tell what the function does.\n3. **Examples** -- the tests are actually working examples showing how a function can be used.\n\nWith the spec, we can safely improve, change, even rewrite the function from scratch and make sure it still works right.\n\nThat's especially important in large projects when a function is used in many places. When we change such a function, there's just no way to manually check if every place that uses it still works right.\n\nWithout tests, people have two ways:\n\n1. To perform the change, no matter what. And then our users meet bugs and report them. If we can afford that.\n2. Or people become afraid to modify such functions, if the punishment for errors is harsh. Then it becomes old, overgrown with cobwebs, no one wants to get into it, and that's not good.\n\n**Automatically tested code is contrary to that!**\n\nIf the project is covered with tests, there's just no such problem. We can run tests and see a lot of checks made in a matter of seconds.\n\n**Besides, a well-tested code has better architecture.**\n\nNaturally, that's because it's easier to change and improve it. But not only that.\n\nTo write tests, the code should be organized in such a way that every function has a clearly described task, well-defined input and output. That means a good architecture from the beginning.\n\nIn real life that's sometimes not that easy. Sometimes it's difficult to write a spec before the actual code, because it's not yet clear how it should behave. But in general writing tests makes development faster and more stable.\n\n## What now?\n\nLater in the tutorial you will meet many tasks with tests baked-in. So you'll see more practical examples.\n\nWriting tests requires good JavaScript knowledge. But we're just starting to learn it. So, to settle down everything, as of now you're not required to write tests, but you should already be able to read them even if they are a little bit more complex than in this chapter.","libs":[],"children":["pow-test-wrong"],"parent":"code-quality"}},"pow-test-wrong":{"type":"Task","value":{"title":"What's wrong in the test?","slug":"pow-test-wrong","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/05-testing-mocha/3-pow-test-wrong","weight":3,"libs":[],"importance":5,"content":"\nWhat's wrong in the test of `pow` below?\n\n```js\nit(\"Raises x to the power n\", function() {\n  let x = 5;\n\n  let result = x;\n  assert.equal(pow(x, 1), result);\n\n  result *= x;\n  assert.equal(pow(x, 2), result);\n\n  result *= x;\n  assert.equal(pow(x, 3), result);\n});\n```\n\nP.S. Syntactically the test is correct and passes.","solution":"The test demonstrates one of the temptations a developer meets when writing tests.\n\nWhat we have here is actually 3 tests, but layed out as a single function with 3 asserts.\n\nSometimes it's easier to write this way, but if an error occurs, it's much less obvious what went wrong.\n\nIf an error happens inside a complex execution flow, then we'll have to figure out the data at that point. We'll actually have to *debug the test*.\n\nIt would be much better to break the test into multiple `it` blocks with clearly written inputs and outputs.\n\nLike this:\n```js\ndescribe(\"Raises x to power n\", function() {\n  it(\"5 in the power of 1 equals 5\", function() {\n    assert.equal(pow(5, 1), 5);\n  });\n\n  it(\"5 in the power of 2 equals 25\", function() {\n    assert.equal(pow(5, 2), 25);\n  });\n\n  it(\"5 in the power of 3 equals 125\", function() {\n    assert.equal(pow(5, 3), 125);\n  });\n});\n```\n\nWe replaced the single `it` with `describe` and a group of `it` blocks. Now if something fails we would see clearly what the data was.\n\nAlso we can isolate a single test and run it in standalone mode by writing `it.only` instead of `it`:\n\n\n```js\ndescribe(\"Raises x to power n\", function() {\n  it(\"5 in the power of 1 equals 5\", function() {\n    assert.equal(pow(5, 1), 5);\n  });\n\n*!*\n  // Mocha will run only this block\n  it.only(\"5 in the power of 2 equals 25\", function() {\n    assert.equal(pow(5, 2), 25);\n  });\n*/!*\n\n  it(\"5 in the power of 3 equals 125\", function() {\n    assert.equal(pow(5, 3), 125);\n  });\n});\n```","parent":"testing-mocha"}},"polyfills":{"type":"Article","value":{"title":"Polyfills","slug":"polyfills","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/03-code-quality/06-polyfills/article.md","isFolder":false,"weight":6,"content":"\nThe JavaScript language steadily evolves. New proposals to the language appear regularly, they are analyzed and, if considered worthy, are appended to the list at <https://tc39.github.io/ecma262/> and then progress to the [specification](http://www.ecma-international.org/publications/standards/Ecma-262.htm).\n\nTeams behind JavaScript engines have their own ideas about what to implement first. They may decide to implement proposals that are in draft and postpone things that are already in the spec, because they are less interesting or just harder to do.\n\nSo it's quite common for an engine to implement only the part of the standard.\n\nA good page to see the current state of support for language features is <https://kangax.github.io/compat-table/es6/> (it's big, we have a lot to study yet).\n\n## Babel\n\nWhen we use modern features of the language, some engines may fail to support such code. Just as said, not all features are implemented everywhere.\n\nHere Babel comes to the rescue.\n\n[Babel](https://babeljs.io) is a [transpiler](https://en.wikipedia.org/wiki/Source-to-source_compiler). It rewrites modern JavaScript code into the previous standard.\n\nActually, there are two parts in Babel:\n\n1. First, the transpiler program, which rewrites the code. The developer runs it on his own computer. It rewrites the code into the older standard. And then the code is delivered to the website for users. Modern project build system like [webpack](http://webpack.github.io/) or [brunch](http://brunch.io/) provide means to run transpiler automatically on every code change, so that doesn't involve any time loss from our side.\n\n2. Second, the polyfill.\n\n    The transpiler rewrites the code, so syntax features are covered. But for new functions we need to write a special script that implements them. JavaScript is a highly dynamic language, scripts may not just add new functions, but also modify built-in ones, so that they behave according to the modern standard.\n\n    There's a term \"polyfill\" for scripts that \"fill in\" the gap and add missing implementations.\n\n    Two interesting polyfills are:\n    - [babel polyfill](https://babeljs.io/docs/usage/polyfill/) that supports a lot, but is big.\n    - [polyfill.io](http://polyfill.io) service that allows to load/construct polyfills on-demand, depending on the features we need.\n\nSo, we need to setup the transpiler and add the polyfill for old engines to support modern features.\n\nIf we orient towards modern engines and do not use features except those supported everywhere, then we don't need to use Babel.\n\n## Examples in the tutorial\n\n\n````online\nMost examples are runnable at-place, like this:\n\n```js run\nalert('Press the \"Play\" button in the upper-right corner to run');\n```\n\nExamples that use modern JS will work only if your browser supports it.\n````\n\n```offline\nAs you're reading the offline version, examples are not runnable. But they usually work :)\n```\n\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) is good for all examples, but other modern browsers are mostly fine too.\n\nNote that on production we can use Babel to translate the code into suitable for less recent browsers, so there will be no such limitation, the code will run everywhere.","libs":[],"children":[],"parent":"code-quality"}},"object-basics":{"type":"Article","value":{"title":"Objects: the basics","slug":"object-basics","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics","isFolder":true,"weight":4,"content":"","libs":[],"children":["object","garbage-collection","symbol","object-methods","object-toprimitive","constructor-new"],"parent":"js"}},"object":{"type":"Article","value":{"title":"Objects","slug":"object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/01-object/article.md","isFolder":false,"weight":1,"content":"\nAs we know from the chapter <info:types>, there are seven language types in JavaScript. Six of them are called \"primitive\", because their values contain only a single thing (be it a string or a number or whatever).\n\nIn contrast, objects are used to store keyed collections of various data and more complex entities. In JavaScript, objects penetrate almost every aspect of the language. So we must understand them first before going in-depth anywhere else.\n\nAn object can be created with figure brackets `{…}` with an optional list of *properties*. A property is a \"key: value\" pair, where `key` is a string (also called a \"property name\"), and `value` can be anything.\n\nWe can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It's easy to find a file by its name or add/remove a file.\n\n![](object.png)\n\nAn empty object (\"empty cabinet\") can be created using one of two syntaxes:\n\n```js\nlet user = new Object(); // \"object constructor\" syntax\nlet user = {};  // \"object literal\" syntax\n```\n\n![](object-user-empty.png)\n\nUsually, the figure brackets `{...}` are used. That declaration is called an *object literal*.\n\n## Literals and properties\n\nWe can immediately put some properties into `{...}` as \"key: value\" pairs:\n\n```js\nlet user = {     // an object\n  name: \"John\",  // by key \"name\" store value \"John\"\n  age: 30        // by key \"age\" store value 30\n};\n```\n\nA property has a key (also known as \"name\" or \"identifier\") before the colon `\":\"` and a value to the right of it.\n\nIn the `user` object, there are two properties:\n\n1. The first property has the name `\"name\"` and the value `\"John\"`.\n2. The second one has the name `\"age\"` and the value `30`.\n\nThe resulting `user` object can be imagined as a cabinet with two signed files labeled \"name\" and \"age\".\n\n![user object](object-user.png)\n\nWe can add, remove and read files from it any time.\n\nProperty values are accessible using the dot notation:\n\n```js\n// get fields of the object:\nalert( user.name ); // John\nalert( user.age ); // 30\n```\n\nThe value can be of any type. Let's add a boolean one:\n\n```js\nuser.isAdmin = true;\n```\n\n![user object 2](object-user-isadmin.png)\n\nTo remove a property, we can use `delete` operator:\n\n```js\ndelete user.age;\n```\n\n![user object 3](object-user-delete.png)\n\nWe can also use multiword property names, but then they must be quoted:\n\n```js\nlet user = {\n  name: \"John\",\n  age: 30,\n  \"likes birds\": true  // multiword property name must be quoted\n};\n```\n\n![](object-user-props.png)\n\n\nThe last property in the list may end with a comma:\n```js\nlet user = {\n  name: \"John\",\n  age: 30*!*,*/!*\n}\n```\nThat is called a \"trailing\" or \"hanging\" comma. Makes it easier to add/remove/move around properties, because all lines become alike.\n\n## Square brackets\n\nFor multiword properties, the dot access doesn't work:\n\n```js run\n// this would give a syntax error\nuser.likes birds = true\n```\n\nThat's because the dot requires the key to be a valid variable identifier. That is: no spaces and other limitations.\n\nThere's an alternative \"square bracket notation\" that works with any string:\n\n\n```js run\nlet user = {};\n\n// set\nuser[\"likes birds\"] = true;\n\n// get\nalert(user[\"likes birds\"]); // true\n\n// delete\ndelete user[\"likes birds\"];\n```\n\nNow everything is fine. Please note that the string inside the brackets is properly quoted (any type of quotes will do).\n\nSquare brackets also provide a way to obtain the property name as the result of any expression -- as opposed to a literal string -- like from a variable as follows:\n\n```js\nlet key = \"likes birds\";\n\n// same as user[\"likes birds\"] = true;\nuser[key] = true;\n```\n\nHere, the variable `key` may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility. The dot notation cannot be used in a similar way.\n\nFor instance:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\nlet key = prompt(\"What do you want to know about the user?\", \"name\");\n\n// access by variable\nalert( user[key] ); // John (if enter \"name\")\n```\n\n\n### Computed properties\n\nWe can use square brackets in an object literal. That's called *computed properties*.\n\nFor instance:\n\n```js run\nlet fruit = prompt(\"Which fruit to buy?\", \"apple\");\n\nlet bag = {\n*!*\n  [fruit]: 5, // the name of the property is taken from the variable fruit\n*/!*\n};\n\nalert( bag.apple ); // 5 if fruit=\"apple\"\n```\n\nThe meaning of a computed property is simple: `[fruit]` means that the property name should be taken from `fruit`.\n\nSo, if a visitor enters `\"apple\"`, `bag` will become `{apple: 5}`.\n\nEssentially, that works the same as:\n```js run\nlet fruit = prompt(\"Which fruit to buy?\", \"apple\");\nlet bag = {};\n\n// take property name from the fruit variable\nbag[fruit] = 5;\n```\n\n...But looks nicer.\n\nWe can use more complex expressions inside square brackets:\n\n```js\nlet fruit = 'apple';\nlet bag = {\n  [fruit + 'Computers']: 5 // bag.appleComputers = 5\n};\n```\n\nSquare brackets are much more powerful than the dot notation. They allow any property names and variables. But they are also more cumbersome to write.\n\nSo most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.\n\n\n\n````smart header=\"Reserved words are allowed as property names\"\nA variable cannot have a name equal to one of language-reserved words like \"for\", \"let\", \"return\" etc.\n\nBut for an object property, there's no such restriction. Any name is fine:\n\n```js run\nlet obj = {\n  for: 1,\n  let: 2,\n  return: 3\n}\n\nalert( obj.for + obj.let + obj.return );  // 6\n```\n\nBasically, any name is allowed, but there's a special one: `\"__proto__\"` that gets special treatment for historical reasons. For instance, we can't set it to a non-object value:\n\n```js run\nlet obj = {};\nobj.__proto__ = 5;\nalert(obj.__proto__); // [object Object], didn't work as intended\n```\n\nAs we see from the code, the assignment to a primitive `5` is ignored.\n\nThat can become a source of bugs and even vulnerabilies if we intent to store arbitrary key-value pairs in an object, and allow a visitor to specify the keys.\n\nIn that case the visitor may choose \"__proto__\" as the key, and the assignment logic will be ruined (as shown above).\n\nThere is a way to make objects treat `__proto__` as a regular property, which we'll cover later, but first we need to know more about objects. \nThere's also another data structure [Map](info:map-set-weakmap-weakset), that we'll learn in the chapter <info:map-set-weakmap-weakset>, which supports arbitrary keys.\n````\n\n\n## Property value shorthand\n\nIn real code we often use existing variables as values for property names.\n\nFor instance:\n\n```js run\nfunction makeUser(name, age) {\n  return {\n    name: name,\n    age: age\n    // ...other properties\n  };\n}\n\nlet user = makeUser(\"John\", 30);\nalert(user.name); // John\n```\n\nIn the example above, properties have the same names as variables. The use-case of making a property from a variable is so common, that there's a special *property value shorthand* to make it shorter.\n\nInstead of `name:name` we can just write `name`, like this:\n\n```js\nfunction makeUser(name, age) {\n*!*\n  return {\n    name, // same as name: name\n    age   // same as age: age\n    // ...\n  };\n*/!*\n}\n```\n\nWe can use both normal properties and shorthands in the same object:\n\n```js\nlet user = {\n  name,  // same as name:name\n  age: 30\n};\n```\n\n## Existence check\n\nA notable objects feature is that it's possible to access any property. There will be no error if the property doesn't exist! Accessing a non-existing property just returns `undefined`. It provides a very common way to test whether the property exists -- to get it and compare vs undefined:\n\n```js run\nlet user = {};\n\nalert( user.noSuchProperty === undefined ); // true means \"no such property\"\n```\n\nThere also exists a special operator `\"in\"` to check for the existence of a property.\n\nThe syntax is:\n```js\n\"key\" in object\n```\n\nFor instance:\n\n```js run\nlet user = { name: \"John\", age: 30 };\n\nalert( \"age\" in user ); // true, user.age exists\nalert( \"blabla\" in user ); // false, user.blabla doesn't exist\n```\n\nPlease note that on the left side of `in` there must be a *property name*. That's usually a quoted string.\n\nIf we omit quotes, that would mean a variable containing the actual name to be tested. For instance:\n\n```js run\nlet user = { age: 30 };\n\nlet key = \"age\";\nalert( *!*key*/!* in user ); // true, takes the name from key and checks for such property\n```\n\n````smart header=\"Using \\\"in\\\" for properties that store `undefined`\"\nUsually, the strict comparison `\"=== undefined\"` check works fine. But there's a special case when it fails, but `\"in\"` works correctly.\n\nIt's when an object property exists, but stores `undefined`:\n\n```js run\nlet obj = {\n  test: undefined\n};\n\nalert( obj.test ); // it's undefined, so - no such property?\n\nalert( \"test\" in obj ); // true, the property does exist!\n```\n\n\nIn the code above, the property `obj.test` technically exists. So the `in` operator works right.\n\nSituations like this happen very rarely, because `undefined` is usually not assigned. We mostly use `null` for \"unknown\" or \"empty\" values. So the `in` operator is an exotic guest in the code.\n````\n\n\n## The \"for..in\" loop\n\nTo walk over all keys of an object, there exists a special form of the loop: `for..in`. This is a completely different thing from the `for(;;)` construct that we studied before.\n\nThe syntax:\n\n```js\nfor(key in object) {\n  // executes the body for each key among object properties\n}\n```\n\nFor instance, let's output all properties of `user`:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30,\n  isAdmin: true\n};\n\nfor(let key in user) {\n  // keys\n  alert( key );  // name, age, isAdmin\n  // values for the keys\n  alert( user[key] ); // John, 30, true\n}\n```\n\nNote that all \"for\" constructs allow us to declare the looping variable inside the loop, like `let key` here.\n\nAlso, we could use another variable name here instead of `key`. For instance, `\"for(let prop in obj)\"` is also widely used.\n\n\n### Ordered like an object\n\nAre objects ordered? In other words, if we loop over an object, do we get all properties in the same order they were added? Can we rely on this?\n\nThe short answer is: \"ordered in a special fashion\": integer properties are sorted, others appear in creation order. The details follow.\n\nAs an example, let's consider an object with the phone codes:\n\n```js run\nlet codes = {\n  \"49\": \"Germany\",\n  \"41\": \"Switzerland\",\n  \"44\": \"Great Britain\",\n  // ..,\n  \"1\": \"USA\"\n};\n\n*!*\nfor(let code in codes) {\n  alert(code); // 1, 41, 44, 49\n}\n*/!*\n```\n\nThe object may be used to suggest a list of options to the user. If we're making a site mainly for German audience then we probably want `49` to be the first.\n\nBut if we run the code, we see a totally different picture:\n\n- USA (1) goes first\n- then Switzerland (41) and so on.\n\nThe phone codes go in the ascending sorted order, because they are integers. So we see `1, 41, 44, 49`.\n\n````smart header=\"Integer properties? What's that?\"\nThe \"integer property\" term here means a string that can be converted to-and-from an integer without a change.\n\nSo, \"49\" is an integer property name, because when it's transformed to an integer number and back, it's still the same. But \"+49\" and \"1.2\" are not:\n\n```js run\n// Math.trunc is a built-in function that removes the decimal part\nalert( String(Math.trunc(Number(\"49\"))) ); // \"49\", same, integer property\nalert( String(Math.trunc(Number(\"+49\"))) ); // \"49\", not same \"+49\" ⇒ not integer property\nalert( String(Math.trunc(Number(\"1.2\"))) ); // \"1\", not same \"1.2\" ⇒ not integer property\n```\n````\n\n...On the other hand, if the keys are non-integer, then they are listed in the creation order, for instance:\n\n```js run\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\nuser.age = 25; // add one more\n\n*!*\n// non-integer properties are listed in the creation order\n*/!*\nfor (let prop in user) {\n  alert( prop ); // name, surname, age\n}\n```\n\nSo, to fix the issue with the phone codes, we can \"cheat\" by making the codes non-integer. Adding a plus `\"+\"` sign before each code is enough.\n\nLike this:\n\n```js run\nlet codes = {\n  \"+49\": \"Germany\",\n  \"+41\": \"Switzerland\",\n  \"+44\": \"Great Britain\",\n  // ..,\n  \"+1\": \"USA\"\n};\n\nfor(let code in codes) {\n  alert( +code ); // 49, 41, 44, 1\n}\n```\n\nNow it works as intended.\n\n## Copying by reference\n\nOne of the fundamental differences of objects vs primitives is that they are stored and copied \"by reference\".\n\nPrimitive values: strings, numbers, booleans -- are assigned/copied \"as a whole value\".\n\nFor instance:\n\n```js\nlet message = \"Hello!\";\nlet phrase = message;\n```\n\nAs a result we have two independent variables, each one is storing the string `\"Hello!\"`.\n\n![](variable-copy-value.png)\n\nObjects are not like that.\n\n**A variable stores not the object itself, but its \"address in memory\", in other words \"a reference\" to it.**\n\nHere's the picture for the object:\n\n```js\nlet user = {\n  name: \"John\"\n};\n```\n\n![](variable-contains-reference.png)\n\nHere, the object is stored somewhere in memory. And the variable `user` has a \"reference\" to it.\n\n**When an object variable is copied -- the reference is copied, the object is not duplicated.**\n\nIf we imagine an object as a cabinet, then a variable is a key to it. Copying a variable duplicates the key, but not the cabinet itself.\n\nFor instance:\n\n```js no-beautify\nlet user = { name: \"John\" };\n\nlet admin = user; // copy the reference\n```\n\nNow we have two variables, each one with the reference to the same object:\n\n![](variable-copy-reference.png)\n\nWe can use any variable to access the cabinet and modify its contents:\n\n```js run\nlet user = { name: 'John' };\n\nlet admin = user;\n\n*!*\nadmin.name = 'Pete'; // changed by the \"admin\" reference\n*/!*\n\nalert(*!*user.name*/!*); // 'Pete', changes are seen from the \"user\" reference\n```\n\nThe example above demonstrates that there is only one object. As if we had a cabinet with two keys and used one of them (`admin`) to get into it. Then, if we later use the other key (`user`) we would see changes.\n\n### Comparison by reference\n\nThe equality `==` and strict equality `===` operators for objects work exactly the same.\n\n**Two objects are equal only if they are the same object.**\n\nFor instance, two variables reference the same object, they are equal:\n\n```js run\nlet a = {};\nlet b = a; // copy the reference\n\nalert( a == b ); // true, both variables reference the same object\nalert( a === b ); // true\n```\n\nAnd here two independent objects are not equal, even though both are empty:\n\n```js run\nlet a = {};\nlet b = {}; // two independent objects\n\nalert( a == b ); // false\n```\n\nFor comparisons like `obj1 > obj2` or for a comparison against a primitive `obj == 5`, objects are converted to primitives. We'll study how object conversions work very soon, but to tell the truth, such comparisons are necessary very rarely and usually are a result of a coding mistake.\n\n### Const object\n\nAn object declared as `const` *can* be changed.\n\nFor instance:\n\n```js run\nconst user = {\n  name: \"John\"\n};\n\n*!*\nuser.age = 25; // (*)\n*/!*\n\nalert(user.age); // 25\n```\n\nIt might seem that the line `(*)` would cause an error, but no, there's totally no problem. That's because `const` fixes the value of `user` itself. And here `user` stores the reference to the same object all the time. The line `(*)` goes *inside* the object, it doesn't reassign `user`.\n\nThe `const` would give an error if we try to set `user` to something else, for instance:\n\n```js run\nconst user = {\n  name: \"John\"\n};\n\n*!*\n// Error (can't reassign user)\n*/!*\nuser = {\n  name: \"Pete\"\n};\n```\n\n...But what if we want to make constant object properties? So that `user.age = 25` would give an error. That's possible too. We'll cover it in the chapter <info:property-descriptors>.\n\n## Cloning and merging, Object.assign\n\nSo, copying an object variable creates one more reference to the same object.\n\nBut what if we need to duplicate an object? Create an independent copy, a clone?\n\nThat's also doable, but a little bit more difficult, because there's no built-in method for that in JavaScript. Actually, that's rarely needed. Copying by reference is good most of the time.\n\nBut if we really want that, then we need to create a new object and replicate the structure of the existing one by iterating over its properties and copying them on the primitive level.\n\nLike this:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\n*!*\nlet clone = {}; // the new empty object\n\n// let's copy all user properties into it\nfor (let key in user) {\n  clone[key] = user[key];\n}\n*/!*\n\n// now clone is a fully independant clone\nclone.name = \"Pete\"; // changed the data in it\n\nalert( user.name ); // still John in the original object\n```\n\nAlso we can use the method [Object.assign](mdn:js/Object/assign) for that.\n\nThe syntax is:\n\n```js\nObject.assign(dest[, src1, src2, src3...])\n```\n\n- Arguments `dest`, and `src1, ..., srcN` (can be as many as needed) are objects.\n- It copies the properties of all objects `src1, ..., srcN` into `dest`. In other words, properties of all arguments starting from the 2nd are copied into the 1st. Then it returns `dest`.\n\nFor instance, we can use it to merge several objects into one:\n```js\nlet user = { name: \"John\" };\n\nlet permissions1 = { canView: true };\nlet permissions2 = { canEdit: true };\n\n*!*\n// copies all properties from permissions1 and permissions2 into user\nObject.assign(user, permissions1, permissions2);\n*/!*\n\n// now user = { name: \"John\", canView: true, canEdit: true }\n```\n\nIf the receiving object (`user`) already has the same named property, it will be overwritten:\n\n```js\nlet user = { name: \"John\" };\n\n// overwrite name, add isAdmin\nObject.assign(user, { name: \"Pete\", isAdmin: true });\n\n// now user = { name: \"Pete\", isAdmin: true }\n```\n\nWe also can use `Object.assign` to replace the loop for simple cloning:\n\n```js\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\n*!*\nlet clone = Object.assign({}, user);\n*/!*\n```\n\nIt copies all properties of `user` into the empty object and returns it. Actually, the same as the loop, but shorter.\n\nUntil now we assumed that all properties of `user` are primitive. But properties can be references to other objects. What to do with them?\n\nLike this:\n```js run\nlet user = {\n  name: \"John\",\n  sizes: {\n    height: 182,\n    width: 50\n  }\n};\n\nalert( user.sizes.height ); // 182\n```\n\nNow it's not enough to copy `clone.sizes = user.sizes`, because the `user.sizes` is an object, it will be copied by reference. So `clone` and `user` will share the same sizes:\n\nLike this:\n```js run\nlet user = {\n  name: \"John\",\n  sizes: {\n    height: 182,\n    width: 50\n  }\n};\n\nlet clone = Object.assign({}, user);\n\nalert( user.sizes === clone.sizes ); // true, same object\n\n// user and clone share sizes\nuser.sizes.width++;       // change a property from one place\nalert(clone.sizes.width); // 51, see the result from the other one\n```\n\nTo fix that, we should use the cloning loop that examines each value of `user[key]` and, if it's an object, then replicate its structure as well. That is called a \"deep cloning\".\n\nThere's a standard algorithm for deep cloning that handles the case above and more complex cases, called the [Structured cloning algorithm](https://w3c.github.io/html/infrastructure.html#internal-structured-cloning-algorithm). In order not to reinvent the wheel, we can use a working implementation of it from the JavaScript library [lodash](https://lodash.com), the method is called [_.cloneDeep(obj)](https://lodash.com/docs#cloneDeep).\n\n\n\n## Summary\n\nObjects are associative arrays with several special features.\n\nThey store properties (key-value pairs), where:\n- Property keys must be strings or symbols (usually strings).\n- Values can be of any type.\n\nTo access a property, we can use:\n- The dot notation: `obj.property`.\n- Square brackets notation `obj[\"property\"]`. Square brackets allow to take the key from a variable, like `obj[varWithKey]`.\n\nAdditional operators:\n- To delete a property: `delete obj.prop`.\n- To check if a property with the given key exists: `\"key\" in obj`.\n- To iterate over an object: `for(let key in obj)` loop.\n\nObjects are assigned and copied by reference. In other words, a variable stores not the \"object value\", but a \"reference\" (address in memory) for the value. So copying such a variable or passing it as a function argument copies that reference, not the object. All operations via copied references (like adding/removing properties) are performed on the same single object.\n\nTo make a \"real copy\" (a clone) we can use `Object.assign` or  [_.cloneDeep(obj)](https://lodash.com/docs#cloneDeep).\n\nWhat we've studied in this chapter is called a \"plain object\", or just `Object`.\n\nThere are many other kinds of objects in JavaScript:\n\n- `Array` to store ordered data collections,\n- `Date` to store the information about the date and time,\n- `Error` to store the information about an error.\n- ...And so on.\n\nThey have their special features that we'll study later. Sometimes people say something like \"Array type\" or \"Date type\", but formally they are not types of their own, but belong to a single \"object\" data type. And they extend it in various ways.\n\nObjects in JavaScript are very powerful. Here we've just scratched the surface of a topic that is really huge. We'll be closely working with objects and learning more about them in further parts of the tutorial.","libs":[],"children":["hello-object","is-empty","const-object","sum-object","multiply-numeric"],"parent":"object-basics"}},"hello-object":{"type":"Task","value":{"title":"Hello, object","slug":"hello-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/01-object/2-hello-object","weight":2,"libs":[],"importance":5,"content":"\nWrite the code, one line for each action:\n\n1. Create an empty object `user`.\n2. Add the property `name` with the value `John`.\n3. Add the property `surname` with the value `Smith`.\n4. Change the value of the `name` to `Pete`.\n5. Remove the property `name` from the object.","solution":"```js\nlet user = {};\nuser.name = \"John\";\nuser.surname = \"Smith\";\nuser.name = \"Pete\";\ndelete user.name;\n```","parent":"object"}},"is-empty":{"type":"Task","value":{"title":"Check for emptiness","slug":"is-empty","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/01-object/3-is-empty","weight":3,"libs":[],"importance":5,"content":"\nWrite the function `isEmpty(obj)` which returns `true` if the object has no properties, `false` otherwise.\n\nShould work like that:\n\n```js\nlet schedule = {};\n\nalert( isEmpty(schedule) ); // true\n\nschedule[\"8:30\"] = \"get up\";\n\nalert( isEmpty(schedule) ); // false\n```","solution":"Just loop over the object and `return false` immediately if there's at least one property.\n\n```js\nfunction isEmpty(obj) {\n  for (let key in obj) {\n    return false;\n  }\n  return true;\n}\n```","parent":"object"}},"const-object":{"type":"Task","value":{"title":"Constant objects?","slug":"const-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/01-object/4-const-object","weight":4,"libs":[],"importance":5,"content":"\nIs it possible to change an object declared with `const`, how do you think?\n\n```js\nconst user = {\n  name: \"John\"\n};\n\n*!*\n// does it work?\nuser.name = \"Pete\";\n*/!*\n```","solution":"Sure, it works, no problem.\n\nThe `const` only protects the variable itself from changing. \n\nIn other words, `user` stores a reference to the object. And it can't be changed. But the content of the object can.\n\n```js run\nconst user = {\n  name: \"John\"\n};\n\n*!*\n// works\nuser.name = \"Pete\";\n*/!*\n\n// error\nuser = 123;\n```","parent":"object"}},"sum-object":{"type":"Task","value":{"title":"Sum object properties","slug":"sum-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/01-object/5-sum-object","weight":5,"libs":[],"importance":5,"content":"\nWe have an object storing salaries of our team:\n\n```js\nlet salaries = {\n  John: 100,\n  Ann: 160,\n  Pete: 130\n}\n```\n\nWrite the code to sum all salaries and store in the variable `sum`. Should be `390` in the example above.\n\nIf `salaries` is empty, then the result must be `0`.","solution":"```js run\nlet salaries = {\n  John: 100,\n  Ann: 160,\n  Pete: 130\n};\n\nlet sum = 0;\nfor (let key in salaries) {\n  sum += salaries[key];\n}\n\nalert(sum); // 390\n```","parent":"object"}},"multiply-numeric":{"type":"Task","value":{"title":"Multiply numeric properties by 2","slug":"multiply-numeric","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/01-object/8-multiply-numeric","weight":8,"libs":[],"importance":3,"content":"\nCreate a function `multiplyNumeric(obj)` that multiplies all numeric properties of `obj` by `2`.\n\nFor instance:\n\n```js\n// before the call\nlet menu = {\n  width: 200,\n  height: 300,\n  title: \"My menu\"\n};\n\nmultiplyNumeric(menu);\n\n// after the call\nmenu = {\n  width: 400,\n  height: 600,\n  title: \"My menu\"\n};\n```\n\nPlease note that `multiplyNumeric` does not need to return anything. It should modify the object in-place.\n\nP.S. Use `typeof` to check for a number here.","solution":"","parent":"object"}},"garbage-collection":{"type":"Article","value":{"title":"Garbage collection","slug":"garbage-collection","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/02-garbage-collection/article.md","isFolder":false,"weight":2,"content":"\nMemory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions... All that takes memory.\n\nWhat happens when something is not needed any more? How does the JavaScript engine discover it and clean it up?\n\n## Reachability\n\nThe main concept of memory management in JavaScript is *reachability*.\n\nSimply put, \"reachable\" values are those that are accessible or usable somehow. They are guaranteed to be stored in memory.\n\n1. There's a base set of inherently reachable values, that cannot be deleted for obvious reasons.\n\n    For instance:\n\n    - Local variables and parameters of the current function.\n    - Variables and parameters for other functions on the current chain of nested calls.\n    - Global variables.\n    - (there are some other, internal ones as well)\n\n    These values are called *roots*.\n\n2. Any other value is considered reachable if it's reachable from a root by a reference or by a chain of references.\n\n    For instance, if there's an object in a local variable, and that object has a property referencing another object, that object is considered reachable. And those that it references are also reachable. Detailed examples to follow.\n\nThere's a background process in the JavaScript engine that is called [garbage collector](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)). It monitors all objects and removes those that have become unreachable.\n\n## A simple example\n\nHere's the simplest example:\n\n```js\n// user has a reference to the object\nlet user = {\n  name: \"John\"\n};\n```\n\n![](memory-user-john.png)\n\nHere the arrow depicts an object reference. The global variable `\"user\"` references the object `{name: \"John\"}` (we'll call it John for brevity). The `\"name\"` property of John stores a primitive, so it's painted inside the object.\n\nIf the value of `user` is overwritten, the reference is lost:\n\n```js\nuser = null;\n```\n\n![](memory-user-john-lost.png)\n\nNow John becomes unreachable. There's no way to access it, no references to it. Garbage collector will junk the data and free the memory.\n\n## Two references\n\nNow let's imagine we copied the reference from `user` to `admin`:\n\n```js\n// user has a reference to the object\nlet user = {\n  name: \"John\"\n};\n\n*!*\nlet admin = user;\n*/!*\n```\n\n![](memory-user-john-admin.png)\n\nNow if we do the same:\n```js\nuser = null;\n```\n\n...Then the object is still reachable via `admin` global variable, so it's in memory. If we overwrite `admin` too, then it can be removed.\n\n## Interlinked objects\n\nNow a more complex example. The family:\n\n```js\nfunction marry(man, woman) {\n  woman.husband = man;\n  man.wife = woman;\n\n  return {\n    father: man,\n    mother: woman\n  }\n}\n\nlet family = marry({\n  name: \"John\"\n}, {\n  name: \"Ann\"\n});\n```\n\nFunction `marry` \"marries\" two objects by giving them references to each other and returns a new object that contains them both.\n\nThe resulting memory structure:\n\n![](family.png)\n\nAs of now, all objects are reachable.\n\nNow let's remove two references:\n\n```js\ndelete family.father;\ndelete family.mother.husband;\n```\n\n![](family-delete-refs.png)\n\nIt's not enough to delete only one of these two references, because all objects would still be reachable.\n\nBut if we delete both, then we can see that John has no incoming reference any more:\n\n![](family-no-father.png)\n\nOutgoing references do not matter. Only incoming ones can make an object reachable. So, John is now unreachable and will be removed from the memory with all its data that also became unaccessible.\n\nAfter garbage collection:\n\n![](family-no-father-2.png)\n\n## Unreachable island\n\nIt is possible that the whole island of interlinked objects becomes unreachable and is removed from the memory.\n\nThe source object is the same as above. Then:\n\n```js\nfamily = null;\n```\n\nThe in-memory picture becomes:\n\n![](family-no-family.png)\n\nThis example demonstrates how important the concept of reachability is.\n\nIt's obvious that John and Ann are still linked, both have incoming references. But that's not enough.\n\nThe former `\"family\"` object has been unlinked from the root, there's no reference to it any more, so the whole island becomes unreachable and will be removed.\n\n## Internal algorithms\n\nThe basic garbage collection algorithm is called \"mark-and-sweep\".\n\nThe following \"garbage collection\" steps are regularly performed:\n\n- The garbage collector takes roots and \"marks\" (remembers) them.\n- Then it visits and \"marks\" all references from them.\n- Then it visits marked objects and marks *their* references. All visited objects are remembered, so as not to visit the same object twice in the future.\n- ...And so on until there are unvisited references (reachable from the roots).\n- All objects except marked ones are removed.\n\nFor instance, let our object structure look like this:\n\n![](garbage-collection-1.png)\n\nWe can clearly see an \"unreachable island\" to the right side. Now let's see how \"mark-and-sweep\" garbage collector deals with it.\n\nThe first step marks the roots:\n\n![](garbage-collection-2.png)\n\nThen their references are marked:\n\n![](garbage-collection-3.png)\n\n...And their references, while possible:\n\n![](garbage-collection-4.png)\n\nNow the objects that could not be visited in the process are considered unreachable and will be removed:\n\n![](garbage-collection-5.png)\n\nThat's the concept of how garbage collection works.\n\nJavaScript engines apply many optimizations to make it run faster and not affect the execution.\n\nSome of the optimizations:\n\n- **Generational collection** -- objects are split into two sets: \"new ones\" and \"old ones\". Many  objects appear, do their job and die fast, they can be cleaned up aggressively. Those that survive for long enough, become \"old\" and are examined less often.\n- **Incremental collection** -- if there are many objects, and we try to walk and mark the whole object set at once, it may take some time and introduce visible delays in the execution. So the engine tries to split the garbage collection into pieces. Then the pieces are executed one by one, separately. That requires some extra bookkeeping between them to track changes, but we have many tiny delays instead of a big one.\n- **Idle-time collection** -- the garbage collector tries to run only while the CPU is idle, to reduce the possible effect on the execution.\n\nThere are other optimizations and flavours of garbage collection algorithms. As much as I'd like to describe them here, I have to hold off, because different engines implement different tweaks and techniques. And, what's even more important, things change as engines develop, so going deeper \"in advance\", without a real need is probably not worth that. Unless, of course, it is a matter of pure interest, then there will be some links for you below.\n\n## Summary\n\nThe main things to know:\n\n- Garbage collection is performed automatically. We cannot force or prevent it.\n- Objects are retained in memory while they are reachable.\n- Being referenced is not the same as being reachable (from a root): a pack of interlinked objects can become unreachable as a whole.\n\nModern engines implement advanced algorithms of garbage collection.\n\nA general book \"The Garbage Collection Handbook: The Art of Automatic Memory Management\" (R. Jones et al) covers some of them.\n\nIf you are familiar with low-level programming, the more detailed information about V8 garbage collector is in the article [A tour of V8: Garbage Collection](http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection).\n\n[V8 blog](http://v8project.blogspot.com/) also publishes articles about changes in memory management from time to time. Naturally, to learn the garbage collection, you'd better prepare by learning about V8 internals in general and read the blog of [Vyacheslav Egorov](http://mrale.ph) who worked as one of V8 engineers. I'm saying: \"V8\", because it is best covered with articles in the internet. For other engines, many approaches are similar, but garbage collection differs in many aspects.\n\nIn-depth knowledge of engines is good when you need low-level optimizations. It would be wise to plan that as the next step after you're familiar with the language.","libs":[],"children":[],"parent":"object-basics"}},"symbol":{"type":"Article","value":{"title":"Symbol type","slug":"symbol","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/03-symbol/article.md","isFolder":false,"weight":3,"content":"\nBy specification, object property keys may be either of string type, or of symbol type. Not numbers, not booleans, only strings or symbols, these two types.\n\nTill now we've only seen strings. Now let's see the advantages that symbols can give us.\n\n## Symbols\n\n\"Symbol\" value represents a unique identifier.\n\nA value of this type can be created using `Symbol()`:\n\n```js\n// id is a new symbol\nlet id = Symbol();\n```\n\nWe can also give symbol a description (also called a symbol name), mostly useful for debugging purposes:\n\n```js\n// id is a symbol with the description \"id\"\nlet id = Symbol(\"id\");\n```\n\nSymbols are guaranteed to be unique. Even if we create many symbols with the same description, they are different values. The description is just a label that doesn't affect anything.\n\nFor instance, here are two symbols with the same description -- they are not equal:\n\n```js run\nlet id1 = Symbol(\"id\");\nlet id2 = Symbol(\"id\");\n\n*!*\nalert(id1 == id2); // false\n*/!*\n```\n\nIf you are familiar with Ruby or another language that also has some sort of \"symbols\" -- please don't be misguided. JavaScript symbols are different.\n\n````warn header=\"Symbols don't auto-convert to a string\"\nMost values in JavaScript support implicit conversion to a string. For instance, we can `alert` almost any value, and it will work. Symbols are special. They don't auto-convert.\n\nFor instance, this `alert` will show an error:\n\n```js run\nlet id = Symbol(\"id\");\n*!*\nalert(id); // TypeError: Cannot convert a Symbol value to a string\n*/!*\n```\n\nIf we really want to show a symbol, we need to call `.toString()` on it, like here:\n```js run\nlet id = Symbol(\"id\");\n*!*\nalert(id.toString()); // Symbol(id), now it works\n*/!*\n```\n\nThat's a \"language guard\" against messing up, because strings and symbols are fundamentally different and should not occasionally convert one into another.\n````\n\n## \"Hidden\" properties\n\nSymbols allow us to create \"hidden\" properties of an object, that no other part of code can occasionally access or overwrite.\n\nFor instance, if we want to store an \"identifier\" for the object `user`, we can use a symbol as a key for it:\n\n```js run\nlet user = { name: \"John\" };\nlet id = Symbol(\"id\");\n\nuser[id] = \"ID Value\";\nalert( user[id] ); // we can access the data using the symbol as the key\n```\n\nWhat's the benefit over using `Symbol(\"id\")` over a string `\"id\"`?\n\nLet's make the example a bit deeper to see that.\n\nImagine that another script wants to have its own \"id\" property inside `user`, for its own purposes. That may be another JavaScript library, so the scripts are completely unaware of each other.\n\nThen that script can create its own `Symbol(\"id\")`, like this:\n\n```js\n// ...\nlet id = Symbol(\"id\");\n\nuser[id] = \"Their id value\";\n```\n\nThere will be no conflict, because symbols are always different, even if they have the same name.\n\nNow note that if we used a string `\"id\"` instead of a symbol for the same purpose, then there *would* be a conflict:\n\n```js run\nlet user = { name: \"John\" };\n\n// our script uses \"id\" property\nuser.id = \"ID Value\";\n\n// ...if later another script the uses \"id\" for its purposes...\n\nuser.id = \"Their id value\"\n// boom! overwritten! it did not mean to harm the colleague, but did it!\n```\n\n### Symbols in a literal\n\nIf we want to use a symbol in an object literal, we need square brackets.\n\nLike this:\n\n```js\nlet id = Symbol(\"id\");\n\nlet user = {\n  name: \"John\",\n*!*\n  [id]: 123 // not just \"id: 123\"\n*/!*\n};\n```\nThat's because we need the value from the variable `id` as the key, not the string \"id\".\n\n### Symbols are skipped by for..in\n\nSymbolic properties do not participate in `for..in` loop.\n\nFor instance:\n\n```js run\nlet id = Symbol(\"id\");\nlet user = {\n  name: \"John\",\n  age: 30,\n  [id]: 123\n};\n\n*!*\nfor (let key in user) alert(key); // name, age (no symbols)\n*/!*\n\n// the direct access by the symbol works\nalert( \"Direct: \" + user[id] );\n```\n\nThat's a part of the general \"hiding\" concept. If another script or a library loops over our object, it won't unexpectedly access a symbolic property.\n\nIn contrast, [Object.assign](mdn:js/Object/assign) copies both string and symbol properties:\n\n```js run\nlet id = Symbol(\"id\");\nlet user = {\n  [id]: 123\n};\n\nlet clone = Object.assign({}, user);\n\nalert( clone[id] ); // 123\n```\n\nThere's no paradox here. That's by design. The idea is that when we clone an object or merge objects, we usually want *all* properties to be copied (including symbols like `id`).\n\n````smart header=\"Property keys of other types are coerced to strings\"\nWe can only use strings or symbols as keys in objects. Other types are converted to strings.\n\nFor instance, a number `0` becomes a string `\"0\"` when used as a property key:\n\n```js run\nlet obj = {\n  0: \"test\" // same as \"0\": \"test\"\n};\n\n// both alerts access the same property (the number 0 is converted to string \"0\")\nalert( obj[\"0\"] ); // test\nalert( obj[0] ); // test (same property)\n```\n````\n\n## Global symbols\n\nAs we've seen, usually all symbols are different, even if they have the same names. But sometimes we want same-named symbols to be same entities.\n\nFor instance, different parts of our application want to access symbol `\"id\"` meaning exactly the same property.\n\nTo achieve that, there exists a *global symbol registry*. We can create symbols in it and access them later, and it guarantees that repeated accesses by the same name return exactly the same symbol.\n\nIn order to create or read a symbol in the registry, use `Symbol.for(key)`.\n\nThat call checks the global registry, and if there's a symbol described as `key`, then returns it, otherwise creates a new symbol `Symbol(key)` and stores it in the registry by the given `key`.\n\nFor instance:\n\n```js run\n// read from the global registry\nlet id = Symbol.for(\"id\"); // if the symbol did not exist, it is created\n\n// read it again\nlet idAgain = Symbol.for(\"id\");\n\n// the same symbol\nalert( id === idAgain ); // true\n```\n\nSymbols inside the registry are called *global symbols*. If we want an application-wide symbol, accessible everywhere in the code -- that's what they are for.\n\n```smart header=\"That sounds like Ruby\"\nIn some programming languages, like Ruby, there's a single symbol per name.\n\nIn JavaScript, as we can see, that's right for global symbols.\n```\n\n### Symbol.keyFor\n\nFor global symbols, not only `Symbol.for(key)` returns a symbol by name, but there's a reverse call: `Symbol.keyFor(sym)`, that does the reverse: returns a name by a global symbol.\n\nFor instance:\n\n```js run\nlet sym = Symbol.for(\"name\");\nlet sym2 = Symbol.for(\"id\");\n\n// get name from symbol\nalert( Symbol.keyFor(sym) ); // name\nalert( Symbol.keyFor(sym2) ); // id\n```\n\nThe `Symbol.keyFor` internally uses the global symbol registry to look up the key for the symbol. So it doesn't work for non-global symbols. If the symbol is not global, it won't be able to find it and return `undefined`.\n\nFor instance:\n\n```js run\nalert( Symbol.keyFor(Symbol.for(\"name\")) ); // name, global symbol\n\nalert( Symbol.keyFor(Symbol(\"name2\")) ); // undefined, the argument isn't a global symbol\n```\n\n## System symbols\n\nThere exist many \"system\" symbols that JavaScript uses internally, and we can use them to fine-tune various aspects of our objects.\n\nThey are listed in the specification in the [Well-known symbols](https://tc39.github.io/ecma262/#sec-well-known-symbols) table:\n\n- `Symbol.hasInstance`\n- `Symbol.isConcatSpreadable`\n- `Symbol.iterator`\n- `Symbol.toPrimitive`\n- ...and so on.\n\nFor instance, `Symbol.toPrimitive` allows us to describe object to primitive conversion. We'll see its use very soon.\n\nOther symbols will also become familiar when we study the corresponding language features.\n\n## Summary\n\n`Symbol` is a primitive type for unique identifiers.\n\nSymbols are created with `Symbol()` call with an optional description.\n\nSymbols are always different values, even if they have the same name. If we want same-named symbols to be equal, then we should use the global registry: `Symbol.for(key)` returns (creates if needed) a global symbol with `key` as the name. Multiple calls of `Symbol.for` return exactly the same symbol.\n\nSymbols have two main use cases:\n\n1. \"Hidden\" object properties.\n    If we want to add a property into an object that \"belongs\" to another script or a library, we can create a symbol and use it as a property key. A symbolic property does not appear in `for..in`, so it won't be occasionally listed. Also it won't be accessed directly, because another script does not have our symbol, so it will not occasionally intervene into its actions.\n\n    So we can \"covertly\" hide something into objects that we need, but others should not see, using symbolic properties.\n\n2. There are many system symbols used by JavaScript which are accessible as `Symbol.*`. We can use them to alter some built-in behaviors. For instance, later in the tutorial we'll use `Symbol.iterator` for [iterables](info:iterable), `Symbol.toPrimitive` to setup [object-to-primitive conversion](info:object-toprimitive) and so on.\n\nTechnically, symbols are not 100% hidden. There is a built-in method [Object.getOwnPropertySymbols(obj)](mdn:js/Object/getOwnPropertySymbols) that allows us to get all symbols. Also there is a method named [Reflect.ownKeys(obj)](mdn:js/Reflect/ownKeys) that returns *all* keys of an object including symbolic ones. So they are not really hidden. But most libraries, built-in methods and syntax constructs adhere to a common agreement that they are. And the one who explicitly calls the aforementioned methods probably understands well what he's doing.","libs":[],"children":[],"parent":"object-basics"}},"object-methods":{"type":"Article","value":{"title":"Object methods, \"this\"","slug":"object-methods","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/04-object-methods/article.md","isFolder":false,"weight":4,"content":"\nObjects are usually created to represent entities of the real world, like users, orders and so on:\n\n```js\nlet user = {\n  name: \"John\",\n  age: 30\n};\n```\n\nAnd, in the real world, a user can *act*: select something from the shopping cart, login, logout etc.\n\nActions are represented in JavaScript by functions in properties.\n\n## Method examples\n\nFor the start, let's teach the `user` to say hello:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\n*!*\nuser.sayHi = function() {\n  alert(\"Hello!\");\n};\n*/!*\n\nuser.sayHi(); // Hello!\n```\n\nHere we've just used a Function Expression to create the function and assign it to the property `user.sayHi` of the object.\n\nThen we can call it. The user can now speak!\n\nA function that is the property of an object is called its *method*.\n\nSo, here we've got a method `sayHi` of the object `user`.\n\nOf course, we could use a pre-declared function as a method, like this:\n\n```js run\nlet user = {\n  // ...\n};\n\n*!*\n// first, declare\nfunction sayHi() {\n  alert(\"Hello!\");\n};\n\n// then add as a method\nuser.sayHi = sayHi;\n*/!*\n\nuser.sayHi(); // Hello!\n```\n\n```smart header=\"Object-oriented programming\"\nWhen we write our code using objects to represent entities, that's called an [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming), in short: \"OOP\".\n\nOOP is a big thing, an interesting science of its own. How to choose the right entities? How to organize the interaction between them? That's architecture, and there are great books on that topic, like \"Design Patterns: Elements of Reusable Object-Oriented Software\" by E.Gamma, R.Helm, R.Johnson, J.Vissides or \"Object-Oriented Analysis and Design with Applications\" by G.Booch, and more. We'll scratch the surface of that topic later in the chapter <info:object-oriented-programming>.\n```\n### Method shorthand\n\nThere exists a shorter syntax for methods in an object literal:\n\n```js\n// these objects do the same\n\nlet user = {\n  sayHi: function() {\n    alert(\"Hello\");\n  }\n};\n\n// method shorthand looks better, right?\nlet user = {\n*!*\n  sayHi() { // same as \"sayHi: function()\"\n*/!*\n    alert(\"Hello\");\n  }\n};\n```\n\nAs demonstrated, we can omit `\"function\"` and just write `sayHi()`.\n\nTo tell the truth, the notations are not fully identical. There are subtle differences related to object inheritance (to be covered later), but for now they do not matter. In almost all cases the shorter syntax is preferred.\n\n## \"this\" in methods\n\nIt's common that an object method needs to access the information stored in the object to do its job.\n\nFor instance, the code inside `user.sayHi()` may need the name of the `user`.\n\n**To access the object, a method can use the `this` keyword.**\n\nThe value of `this` is the object \"before dot\", the one used to call the method.\n\nFor instance:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30,\n\n  sayHi() {\n*!*\n    alert(this.name);\n*/!*\n  }\n\n};\n\nuser.sayHi(); // John\n```\n\nHere during the execution of `user.sayHi()`, the value of `this` will be `user`.\n\nTechnically, it's also possible to access the object without `this`, by referencing it via the outer variable:\n\n```js\nlet user = {\n  name: \"John\",\n  age: 30,\n\n  sayHi() {\n*!*\n    alert(user.name); // \"user\" instead of \"this\"\n*/!*\n  }\n\n};\n```\n\n...But such code is unreliable. If we decide to copy `user` to another variable, e.g. `admin = user` and overwrite `user` with something else, then it will access the wrong object.\n\nThat's demonstrated below:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30,\n\n  sayHi() {\n*!*\n    alert( user.name ); // leads to an error\n*/!*\n  }\n\n};\n\n\nlet admin = user;\nuser = null; // overwrite to make things obvious\n\nadmin.sayHi(); // Whoops! inside sayHi(), the old name is used! error!\n```\n\nIf we used `this.name` instead of `user.name` inside the `alert`, then the code would work.\n\n## \"this\" is not bound\n\nIn JavaScript, \"this\" keyword behaves unlike most other programming languages. First, it can be used in any function.\n\nThere's no syntax error in the code like that:\n\n```js\nfunction sayHi() {\n  alert( *!*this*/!*.name );\n}\n```\n\nThe value of `this` is evaluated during the run-time. And it can be anything.\n\nFor instance, the same function may have different \"this\" when called from different objects:\n\n```js run\nlet user = { name: \"John\" };\nlet admin = { name: \"Admin\" };\n\nfunction sayHi() {\n  alert( this.name );\n}\n\n*!*\n// use the same functions in two objects\nuser.f = sayHi;\nadmin.f = sayHi;\n*/!*\n\n// these calls have different this\n// \"this\" inside the function is the object \"before the dot\"\nuser.f(); // John  (this == user)\nadmin.f(); // Admin  (this == admin)\n\nadmin['f'](); // Admin (dot or square brackets access the method – doesn't matter)\n```\n\nActually, we can call the function without an object at all:\n\n```js run\nfunction sayHi() {\n  alert(this);\n}\n\nsayHi(); // undefined\n```\n\nIn this case `this` is `undefined` in strict mode. If we try to access `this.name`, there will be an error.\n\nIn non-strict mode (if one forgets `use strict`) the value of `this` in such case will be the *global object* (`window` in a browser, we'll get to it later). This is a historical behavior that `\"use strict\"` fixes.\n\nPlease note that usually a call of a function that uses `this` without an object is not normal, but rather a programming mistake. If a function has `this`, then it is usually meant to be called in the context of an object.\n\n```smart header=\"The consequences of unbound `this`\"\nIf you come from another programming language, then you are probably used to the idea of a \"bound `this`\", where methods defined in an object always have `this` referencing that object.\n\nIn JavaScript `this` is \"free\", its value is evaluated at call-time and does not depend on where the method was declared, but rather on what's the object \"before the dot\".\n\nThe concept of run-time evaluated `this` has both pluses and minuses. On the one hand, a function can be reused for different objects. On the other hand, greater flexibility opens a place for mistakes.\n\nHere our position is not to judge whether this language design decision is good or bad. We'll understand how to work with it, how to get benefits and evade problems.\n```\n\n## Internals: Reference Type\n\n```warn header=\"In-depth language feature\"\nThis section covers an advanced topic, to understand certain edge-cases better.\n\nIf you want to go on faster, it can be skipped or postponed.\n```\n\nAn intricate method call can lose `this`, for instance:\n\n```js run\nlet user = {\n  name: \"John\",\n  hi() { alert(this.name); },\n  bye() { alert(\"Bye\"); }\n};\n\nuser.hi(); // John (the simple call works)\n\n*!*\n// now let's call user.hi or user.bye depending on the name\n(user.name == \"John\" ? user.hi : user.bye)(); // Error!\n*/!*\n```\n\nOn the last line there is a ternary operator that chooses either `user.hi` or `user.bye`. In this case the result is `user.hi`.\n\nThe method is immediately called with parentheses `()`. But it doesn't work right!\n\nYou can see that the call results in an error, cause the value of `\"this\"` inside the call becomes `undefined`.\n\nThis works (object dot method):\n```js\nuser.hi();\n```\n\nThis doesn't (evaluated method):\n```js\n(user.name == \"John\" ? user.hi : user.bye)(); // Error!\n```\n\nWhy? If we want to understand why it happens, let's get under the hood of how `obj.method()` call works.\n\nLooking closely, we may notice two operations in `obj.method()` statement:\n\n1. First, the dot `'.'` retrieves the property `obj.method`.\n2. Then parentheses `()` execute it.\n\nSo, how does the information about `this` gets passed from the first part to the second one?\n\nIf we put these operations on separate lines, then `this` will be lost for sure:\n\n```js run\nlet user = {\n  name: \"John\",\n  hi() { alert(this.name); }\n}\n\n*!*\n// split getting and calling the method in two lines\nlet hi = user.hi;\nhi(); // Error, because this is undefined\n*/!*\n```\n\nHere `hi = user.hi` puts the function into the variable, and then on the last line it is completely standalone, and so there's no `this`.\n\n**To make `user.hi()` calls work, JavaScript uses a trick -- the dot `'.'` returns not a function, but a value of the special [Reference Type](https://tc39.github.io/ecma262/#sec-reference-specification-type).**\n\nThe Reference Type is a \"specification type\". We can't explicitly use it, but it is used internally by the language.\n\nThe value of Reference Type is a three-value combination `(base, name, strict)`, where:\n\n- `base` is the object.\n- `name` is the property.\n- `strict` is true if `use strict` is in effect.\n\nThe result of a property access `user.hi` is not a function, but a value of Reference Type. For `user.hi` in strict mode it is:\n\n```js\n// Reference Type value\n(user, \"hi\", true)\n```\n\nWhen parentheses `()` are called on the Reference Type, they receive the full information about the object and it's method, and can set the right `this` (`=user` in this case).\n\nAny other operation like assignment `hi = user.hi` discards the reference type as a whole, takes the value of `user.hi` (a function) and passes it on. So any further operation \"loses\" `this`.\n\nSo, as the result, the value of `this` is only passed the right way if the function is called directly using a dot `obj.method()` or square brackets `obj[method]()` syntax (they do the same here).\n\n## Arrow functions have no \"this\"\n\nArrow functions are special: they don't have their \"own\" `this`. If we reference `this` from such a function, it's taken from the outer \"normal\" function.\n\nFor instance, here `arrow()` uses `this` from the outer `user.sayHi()` method:\n\n```js run\nlet user = {\n  firstName: \"Ilya\",\n  sayHi() {\n    let arrow = () => alert(this.firstName);\n    arrow();\n  }\n};\n\nuser.sayHi(); // Ilya\n```\n\nThat's a special feature of arrow functions, it's useful when we actually do not want to have a separate `this`, but rather to take it from the outer context. Later in the chapter <info:arrow-functions> we'll go more deeply into arrow functions.\n\n\n## Summary\n\n- Functions that are stored in object properties are called \"methods\".\n- Methods allow objects to \"act\" like `object.doSomething()`.\n- Methods can reference the object as `this`.\n\nThe value of `this` is defined at run-time.\n- When a function is declared, it may use `this`, but that `this` has no value until the function is called.\n- That function can be copied between objects.\n- When a function is called in the \"method\" syntax: `object.method()`, the value of `this` during the call is `object`.\n\nPlease note that arrow functions are special: they have no `this`. When `this` is accessed inside an arrow function, it is taken from outside.","libs":[],"children":["check-syntax","why-this","object-property-this","calculator","chain-calls"],"parent":"object-basics"}},"check-syntax":{"type":"Task","value":{"title":"Syntax check","slug":"check-syntax","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/04-object-methods/2-check-syntax","weight":2,"libs":[],"importance":2,"content":"\nWhat is the result of this code?\n\n\n```js no-beautify\nlet user = {\n  name: \"John\",\n  go: function() { alert(this.name) }\n}\n\n(user.go)()\n```\n\nP.S. There's a pitfall :)","solution":"**Error**!\n\nTry it:\n\n```js run\nlet user = {\n  name: \"John\",\n  go: function() { alert(this.name) }\n}\n\n(user.go)() // error!\n```\n\nThe error message in most browsers does not give understanding what went wrong.\n\n**The error appears because a semicolon is missing after `user = {...}`.**\n\nJavaScript does not assume a semicolon before a bracket `(user.go)()`, so it reads the code like:\n\n```js no-beautify\nlet user = { go:... }(user.go)()\n```\n\nThen we can also see that such a joint expression is syntactically a call of the object `{ go: ... }` as a function with the argument `(user.go)`. And that also happens on the same line with `let user`, so the `user` object has not yet even been defined, hence the error. \n\nIf we insert the semicolon, all is fine:\n\n```js run\nlet user = {\n  name: \"John\",\n  go: function() { alert(this.name) }\n}*!*;*/!*\n\n(user.go)() // John\n```\n\nPlease note that brackets around `(user.go)` do nothing here. Usually they setup the order of operations, but here the dot `.` works first anyway, so there's no effect. Only the semicolon thing matters.","parent":"object-methods"}},"why-this":{"type":"Task","value":{"title":"Explain the value of \"this\"","slug":"why-this","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/04-object-methods/3-why-this","weight":3,"libs":[],"importance":3,"content":"\nIn the code below we intend to call `user.go()` method 4 times in a row.\n\nBut calls `(1)` and `(2)` works differently from `(3)` and `(4)`. Why?\n\n```js run no-beautify\nlet obj, method;\n\nobj = {\n  go: function() { alert(this); }\n};\n\nobj.go();               // (1) [object Object]\n\n(obj.go)();             // (2) [object Object]\n\n(method = obj.go)();    // (3) undefined\n\n(obj.go || obj.stop)(); // (4) undefined\n```","solution":"Here's the explanations.\n\n1. That's a regular object method call.\n\n2. The same, brackets do not change the order of operations here, the dot is first anyway.\n\n3. Here we have a more complex call `(expression).method()`. The call works as if it were split into two lines:\n\n    ```js no-beautify\n    f = obj.go; // calculate the expression\n    f();        // call what we have\n    ```\n\n    Here `f()` is executed as a function, without `this`.\n\n4. The similar thing as `(3)`, to the left of the dot `.` we have an expression.\n\nTo explain the behavior of `(3)` and `(4)` we need to recall that property accessors (dot or square brackets) return a value of the Reference Type.  \n\nAny operation on it except a method call (like assignment `=` or `||`) turns it into an ordinary value, which does not carry the information allowing to set `this`.","parent":"object-methods"}},"object-property-this":{"type":"Task","value":{"title":"Using \"this\" in object literal","slug":"object-property-this","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/04-object-methods/4-object-property-this","weight":4,"libs":[],"importance":5,"content":"\nHere the function `makeUser` returns an object.\n\nWhat is the result of accessing its `ref`? Why?\n\n```js\nfunction makeUser() {\n  return {\n    name: \"John\",\n    ref: this\n  };\n};\n\nlet user = makeUser();\n\nalert( user.ref.name ); // What's the result?\n```","solution":"**Answer: an error.**\n\nTry it:\n```js run\nfunction makeUser() {\n  return {\n    name: \"John\",\n    ref: this\n  };\n};\n\nlet user = makeUser();\n\nalert( user.ref.name ); // Error: Cannot read property 'name' of undefined\n```\n\nThat's because rules that set `this` do not look at object literals. \n\nHere the value of `this` inside `makeUser()` is `undefined`, because it is called as a function, not as a method.\n\nAnd the object literal itself has no effect on `this`. The value of `this` is one for the whole function, code blocks and object literals do not affect it.\n\nSo `ref: this` actually takes current `this` of the function.\n\nHere's the opposite case:\n\n```js run\nfunction makeUser() {\n  return {\n    name: \"John\",\n*!*\n    ref() {\n      return this;\n    }\n*/!*\n  };\n};\n\nlet user = makeUser();\n\nalert( user.ref().name ); // John\n```\n\nNow it works, because `user.ref()` is a method. And the value of `this` is set to the object before dot `.`.","parent":"object-methods"}},"calculator":{"type":"Task","value":{"title":"Create a calculator","slug":"calculator","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/04-object-methods/7-calculator","weight":7,"libs":[],"importance":5,"content":"\nCreate an object `calculator` with three methods:\n\n- `read()` prompts for two values and saves them as object properties.\n- `sum()` returns the sum of saved values.\n- `mul()` multiplies saved values and returns the result.\n\n```js\nlet calculator = {\n  // ... your code ...\n};\n\ncalculator.read();\nalert( calculator.sum() );\nalert( calculator.mul() );\n```\n\n[demo]","solution":"```js run demo\nlet calculator = {\n  sum() {\n    return this.a + this.b;\n  },\n\n  mul() {\n    return this.a * this.b;\n  },\n\n  read() {\n    this.a = +prompt('a?', 0);\n    this.b = +prompt('b?', 0);\n  }\n};\n\ncalculator.read();\nalert( calculator.sum() );\nalert( calculator.mul() );\n```","parent":"object-methods"}},"chain-calls":{"type":"Task","value":{"title":"Chaining","slug":"chain-calls","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/04-object-methods/8-chain-calls","weight":8,"libs":[],"importance":2,"content":"\nThere's a `ladder` object that allows to go up and down:\n\n```js\nlet ladder = {\n  step: 0,\n  up() { \n    this.step++;\n  },\n  down() { \n    this.step--;\n  },\n  showStep: function() { // shows the current step\n    alert( this.step );\n  }\n};\n```\n\nNow, if we need to make several calls in sequence, can do it like this:\n\n```js\nladder.up();\nladder.up();\nladder.down();\nladder.showStep(); // 1\n```\n\nModify the code of `up` and `down` to make the calls chainable, like this:\n\n```js\nladder.up().up().down().showStep(); // 1\n```\n\nSuch approach is widely used across JavaScript libraries.","solution":"The solution is to return the object itself from every call.\n\n```js run\nlet ladder = {\n  step: 0,\n  up() {\n    this.step++;\n*!*\n    return this;\n*/!*\n  },\n  down() {\n    this.step--;\n*!*\n    return this;\n*/!*\n  },\n  showStep() {\n    alert( this.step );\n*!*\n    return this;\n*/!*\n  }\n}\n\nladder.up().up().down().up().down().showStep(); // 1\n```\n\nWe also can write a single call per line. For long chains it's more readable:\n\n```js \nladder\n  .up()\n  .up()\n  .down()\n  .up()\n  .down()\n  .showStep(); // 1\n```","parent":"object-methods"}},"object-toprimitive":{"type":"Article","value":{"title":"Object to primitive conversion","slug":"object-toprimitive","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/05-object-toprimitive/article.md","isFolder":false,"weight":5,"content":"\nWhat happens when objects are added `obj1 + obj2`, subtracted `obj1 - obj2` or printed using `alert(obj)`?\n\nThere are special methods in objects that do the conversion.\n\nIn the chapter <info:type-conversions> we've seen the rules for numeric, string and boolean conversions of primitives. But we left a gap for objects. Now, as we know about methods and symbols it becomes possible to close it.\n\nFor objects, there's no to-boolean conversion, because all objects are `true` in a boolean context. So there are only string and numeric conversions.\n\nThe numeric conversion happens when we subtract objects or apply mathematical functions. For instance, `Date` objects (to be covered in the chapter <info:date>) can be subtracted, and the result of `date1 - date2` is the time difference between two dates.\n\nAs for the string conversion -- it usually happens when we output an object like `alert(obj)` and in similar contexts.\n\n## ToPrimitive\n\nWhen an object is used in the context where a primitive is required, for instance, in an `alert` or mathematical operations, it's converted to a primitive value using the `ToPrimitive` algorithm ([specification](https://tc39.github.io/ecma262/#sec-toprimitive)).\n\nThat algorithm allows us to customize the conversion using a special object method.\n\nDepending on the context, the conversion has a so-called \"hint\".\n\nThere are three variants:\n\n`\"string\"`\n: When an operation expects a string, for object-to-string conversions, like `alert`:\n\n    ```js\n    // output\n    alert(obj);\n\n    // using object as a property key\n    anotherObj[obj] = 123;\n    ```\n\n`\"number\"`\n: When an operation expects a number, for object-to-number conversions, like maths:\n\n    ```js\n    // explicit conversion\n    let num = Number(obj);\n\n    // maths (except binary plus)\n    let n = +obj; // unary plus\n    let delta = date1 - date2;\n\n    // less/greater comparison\n    let greater = user1 > user2;\n    ```\n\n`\"default\"`\n: Occurs in rare cases when the operator is \"not sure\" what type to expect.\n\n    For instance, binary plus `+` can work both with strings (concatenates them) and numbers (adds them), so both strings and numbers would do. Or when an object is compared using `==` with a string, number or a symbol.\n\n    ```js\n    // binary plus\n    let total = car1 + car2;\n\n    // obj == string/number/symbol\n    if (user == 1) { ... };\n    ```\n\n    The greater/less operator `<>` can work with both strings and numbers too. Still, it uses \"number\" hint, not \"default\". That's for historical reasons.\n\n    In practice, all built-in objects except for one case (`Date` object, we'll learn it later) implement `\"default\"` conversion the same way as `\"number\"`. And probably we should do the same.\n\nPlease note -- there are only three hints. It's that simple. There is no \"boolean\" hint (all objects are `true` in boolean context) or anything else. And if we treat `\"default\"` and `\"number\"` the same, like most built-ins do, then there are only two conversions.\n\n**To do the conversion, JavaScript tries to find and call three object methods:**\n\n1. Call `obj[Symbol.toPrimitive](hint)` if the method exists,\n2. Otherwise if hint is `\"string\"`\n    - try `obj.toString()` and `obj.valueOf()`, whatever exists.\n3. Otherwise if hint is `\"number\"` or `\"default\"`\n    - try `obj.valueOf()` and `obj.toString()`, whatever exists.\n\n## Symbol.toPrimitive\n\nLet's start from the first method. There's a built-in symbol named `Symbol.toPrimitive` that should be used to name the conversion method, like this:\n\n```js\nobj[Symbol.toPrimitive] = function(hint) {\n  // return a primitive value\n  // hint = one of \"string\", \"number\", \"default\"\n}\n```\n\nFor instance, here `user` object implements it:\n\n```js run\nlet user = {\n  name: \"John\",\n  money: 1000,\n\n  [Symbol.toPrimitive](hint) {\n    alert(`hint: ${hint}`);\n    return hint == \"string\" ? `{name: \"${this.name}\"}` : this.money;\n  }\n};\n\n// conversions demo:\nalert(user); // hint: string -> {name: \"John\"}\nalert(+user); // hint: number -> 1000\nalert(user + 500); // hint: default -> 1500\n```\n\nAs we can see from the code, `user` becomes a self-descriptive string or a money amount depending on the conversion. The single method `user[Symbol.toPrimitive]` handles all conversion cases.\n\n\n## toString/valueOf\n\nMethods `toString` and `valueOf` come from ancient times. They are not symbols (symbols did not exist that long ago), but rather \"regular\" string-named methods. They provide an alternative \"old-style\" way to implement the conversion.\n\nIf there's no `Symbol.toPrimitive` then JavaScript tries to find them and try in the order:\n\n- `toString -> valueOf` for \"string\" hint.\n- `valueOf -> toString` otherwise.\n\nFor instance, here `user` does the same as above using a combination of `toString` and `valueOf`:\n\n```js run\nlet user = {\n  name: \"John\",\n  money: 1000,\n\n  // for hint=\"string\"\n  toString() {\n    return `{name: \"${this.name}\"}`;\n  },\n\n  // for hint=\"number\" or \"default\"\n  valueOf() {\n    return this.money;\n  }\n\n};\n\nalert(user); // toString -> {name: \"John\"}\nalert(+user); // valueOf -> 1000\nalert(user + 500); // valueOf -> 1500\n```\n\nOften we want a single \"catch-all\" place to handle all primitive conversions. In this case we can implement `toString` only, like this:\n\n```js run\nlet user = {\n  name: \"John\",\n\n  toString() {\n    return this.name;\n  }\n};\n\nalert(user); // toString -> John\nalert(user + 500); // toString -> John500\n```\n\nIn the absence of `Symbol.toPrimitive` and `valueOf`, `toString` will handle all primitive conversions.\n\n\n## ToPrimitive and ToString/ToNumber\n\nThe important thing to know about all primitive-conversion methods is that they do not necessarily return the \"hinted\" primitive.\n\nThere is no control whether `toString()` returns exactly a string, or whether `Symbol.toPrimitive` method returns a number for a hint \"number\".\n\n**The only mandatory thing: these methods must return a primitive.**\n\nAn operation that initiated the conversion gets that primitive, and then continues to work with it, applying further conversions if necessary.\n\nFor instance:\n\n- Mathematical operations (except binary plus) perform `ToNumber` conversion:\n\n    ```js run\n    let obj = {\n      toString() { // toString handles all conversions in the absence of other methods\n        return \"2\";\n      }\n    };\n\n    alert(obj * 2); // 4, ToPrimitive gives \"2\", then it becomes 2\n    ```\n\n- Binary plus checks the primitive -- if it's a string, then it does concatenation, otherwise it performs `ToNumber` and works with numbers.\n\n    String example:\n    ```js run\n    let obj = {\n      toString() {\n        return \"2\";\n      }\n    };\n\n    alert(obj + 2); // 22 (ToPrimitive returned string => concatenation)\n    ```\n\n    Number example:\n    ```js run\n    let obj = {\n      toString() {\n        return true;\n      }\n    };\n\n    alert(obj + 2); // 3 (ToPrimitive returned boolean, not string => ToNumber)\n    ```\n\n```smart header=\"Historical notes\"\nFor historical reasons, methods `toString` or `valueOf` *should* return a primitive: if any of them returns an object, then there's no error, but that object is ignored (like if the method didn't exist).\n\nIn contrast, `Symbol.toPrimitive` *must* return a primitive, otherwise, there will be an error.\n```\n\n## Summary\n\nThe object-to-primitive conversion is called automatically by many built-in functions and operators that expect a primitive as a value.\n\nThere are 3 types (hints) of it:\n- `\"string\"` (for `alert` and other string conversions)\n- `\"number\"` (for maths)\n- `\"default\"` (few operators)\n\nThe specification describes explicitly which operator uses which hint. There are very few operators that \"don't know what to expect\" and use the `\"default\"` hint. Usually for built-in objects `\"default\"` hint is handled the same way as `\"number\"`, so in practice the last two are often merged together.\n\nThe conversion algorithm is:\n\n1. Call `obj[Symbol.toPrimitive](hint)` if the method exists,\n2. Otherwise if hint is `\"string\"`\n    - try `obj.toString()` and `obj.valueOf()`, whatever exists.\n3. Otherwise if hint is `\"number\"` or `\"default\"`\n    - try `obj.valueOf()` and `obj.toString()`, whatever exists.\n\nIn practice, it's often enough to implement only `obj.toString()` as a \"catch-all\" method for all conversions that return a \"human-readable\" representation of an object, for logging or debugging purposes.","libs":[],"children":[],"parent":"object-basics"}},"constructor-new":{"type":"Article","value":{"title":"Constructor, operator \"new\"","slug":"constructor-new","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/06-constructor-new/article.md","isFolder":false,"weight":6,"content":"\nThe regular `{...}` syntax allows to create one object. But often we need to create many similar objects, like multiple users or menu items and so on.\n\nThat can be done using constructor functions and the `\"new\"` operator.\n\n## Constructor function\n\nConstructor functions technically are regular functions. There are two conventions though:\n\n1. They are named with capital letter first.\n2. They should be executed only with `\"new\"` operator.\n\nFor instance:\n\n```js run\nfunction User(name) {\n  this.name = name;\n  this.isAdmin = false;\n}\n\n*!*\nlet user = new User(\"Jack\");\n*/!*\n\nalert(user.name); // Jack\nalert(user.isAdmin); // false\n```\n\nWhen a function is executed as `new User(...)`, it does the following steps:\n\n1. A new empty object is created and assigned to `this`.\n2. The function body executes. Usually it modifies `this`, adds new properties to it.\n3. The value of `this` is returned.\n\nIn other words, `new User(...)` does something like:\n\n```js\nfunction User(name) {\n*!*\n  // this = {};  (implicitly)\n*/!*\n\n  // add properties to this\n  this.name = name;\n  this.isAdmin = false;\n\n*!*\n  // return this;  (implicitly)\n*/!*\n}\n```\n\nSo the result of `new User(\"Jack\")` is the same object as:\n\n```js\nlet user = {\n  name: \"Jack\",\n  isAdmin: false\n};\n```\n\nNow if we want to create other users, we can call `new User(\"Ann\")`, `new User(\"Alice\")` and so on. Much shorter than using literals every time, and also easy to read.\n\nThat's the main purpose of constructors -- to implement reusable object creation code.\n\nLet's note once again -- technically, any function can be used as a constructor. That is: any function can be run with `new`, and it will execute the algorithm above. The \"capital letter first\" is a common agreement, to make it clear that a function is to be run with `new`.\n\n````smart header=\"new function() { ... }\"\nIf we have many lines of code all about creation of a single complex object, we can wrap them in constructor function, like this:\n\n```js\nlet user = new function() {\n  this.name = \"John\";\n  this.isAdmin = false;\n\n  // ...other code for user creation\n  // maybe complex logic and statements\n  // local variables etc\n};\n```\n\nThe constructor can't be called again, because it is not saved anywhere, just created and called. So this trick aims to encapsulate the code that constructs the single object, without future reuse.\n````\n\n## Dual-syntax constructors: new.target\n\nInside a function, we can check whether it was called with `new` or without it, using a special `new.target` property.\n\nIt is empty for regular calls and equals the function if called with `new`:\n\n```js run\nfunction User() {\n  alert(new.target);\n}\n\n// without new:\nUser(); // undefined\n\n// with new:\nnew User(); // function User { ... }\n```\n\nThat can be used to allow both `new` and regular syntax to work the same:\n\n```js run\nfunction User(name) {\n  if (!new.target) { // if you run me without new\n    return new User(name); // ...I will add new for you\n  }\n\n  this.name = name;\n}\n\nlet john = User(\"John\"); // redirects call to new User\nalert(john.name); // John\n```\n\nThis approach is sometimes used in libraries to make the syntax more flexible. Probably not a good thing to use everywhere though, because omitting `new` makes it a bit less obvious what's going on. With `new` we all know that the new object is being created, that's a good thing.\n\n## Return from constructors\n\nUsually, constructors do not have a `return` statement. Their task is to write all necessary stuff into `this`, and it automatically becomes the result.\n\nBut if there is a `return` statement, then the rule is simple:\n\n- If `return` is called with object, then it is returned instead of `this`.\n- If `return` is called with a primitive, it's ignored.\n\nIn other words, `return` with an object returns that object, in all other cases `this` is returned.\n\nFor instance, here `return` overrides `this` by returning an object:\n\n```js run\nfunction BigUser() {\n\n  this.name = \"John\";\n\n  return { name: \"Godzilla\" };  // <-- returns an object\n}\n\nalert( new BigUser().name );  // Godzilla, got that object ^^\n```\n\nAnd here's an example with an empty `return` (or we could place a primitive after it, doesn't matter):\n\n```js run\nfunction SmallUser() {\n\n  this.name = \"John\";\n\n  return; // finishes the execution, returns this\n\n  // ...\n\n}\n\nalert( new SmallUser().name );  // John\n```\n\nUsually constructors don't have a `return` statement. Here we mention the special behavior with returning objects mainly for the sake of completeness.\n\n````smart header=\"Omitting parentheses\"\nBy the way, we can omit parentheses after `new`, if it has no arguments:\n\n```js\nlet user = new User; // <-- no parentheses\n// same as\nlet user = new User();\n```\n\nOmitting parentheses here is not considered a \"good style\", but the syntax is permitted by specification.\n````\n\n## Methods in constructor\n\nUsing constructor functions to create objects gives a great deal of flexibility. The constructor function may have parameters that define how to construct the object, and what to put in it.\n\nOf course, we can add to `this` not only properties, but methods as well.\n\nFor instance, `new User(name)` below creates an object with the given `name` and the method `sayHi`:\n\n```js run\nfunction User(name) {\n  this.name = name;\n\n  this.sayHi = function() {\n    alert( \"My name is: \" + this.name );\n  };\n}\n\n*!*\nlet john = new User(\"John\");\n\njohn.sayHi(); // My name is: John\n*/!*\n\n/*\njohn = {\n   name: \"John\",\n   sayHi: function() { ... }\n}\n*/\n```\n\n## Summary\n\n- Constructor functions or, briefly, constructors, are regular functions, but there's a common agreement to name them with capital letter first.\n- Constructor functions should only be called using `new`. Such a call implies a creation of empty `this` at the start and returning the populated one at the end.\n\nWe can use constructor functions to make multiple similar objects.\n\nJavaScript provides constructor functions for many built-in language objects: like `Date` for dates, `Set` for sets and others that we plan to study.\n\n```smart header=\"Objects, we'll be back!\"\nIn this chapter we only cover the basics about objects and constructors. They are essential for learning more about data types and functions in the next chapters.\n\nAfter we learn that, in the chapter <info:object-oriented-programming> we return to objects and cover them in-depth, including inheritance and classes.\n```","libs":[],"children":["two-functions-one-object","calculator-constructor","accumulator","calculator-extendable"],"parent":"object-basics"}},"two-functions-one-object":{"type":"Task","value":{"title":"Two functions – one object","slug":"two-functions-one-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/06-constructor-new/1-two-functions-one-object","weight":1,"libs":[],"importance":2,"content":"\nIs it possible to create functions `A` and `B` such as `new A()==new B()`?\n\n```js no-beautify\nfunction A() { ... }\nfunction B() { ... }\n\nlet a = new A;\nlet b = new B;\n\nalert( a == b ); // true\n```\n\nIf it is, then provide an example of their code.","solution":"Yes, it's possible.\n\nIf a function returns an object then `new` returns it instead of `this`.\n\nSo thay can, for instance, return the same externally defined object `obj`:\n\n```js run no-beautify\nlet obj = {};\n\nfunction A() { return obj; }\nfunction B() { return obj; }\n\nalert( new A() == new B() ); // true\n```","parent":"constructor-new"}},"calculator-constructor":{"type":"Task","value":{"title":"Create new Calculator","slug":"calculator-constructor","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/06-constructor-new/2-calculator-constructor","weight":2,"libs":[],"importance":5,"content":"\nCreate a constructor function `Calculator` that creates objects with 3 methods:\n\n- `read()` asks for two values using `prompt` and remembers them in object properties.\n- `sum()` returns the sum of these properties.\n- `mul()` returns the multiplication product of these properties.\n\nFor instance:\n\n```js\nlet calculator = new Calculator();\ncalculator.read();\n\nalert( \"Sum=\" + calculator.sum() );\nalert( \"Mul=\" + calculator.mul() );\n```\n\n[demo]","solution":"```js run demo\nfunction Calculator() {\n\n  this.read = function() {\n    this.a = +prompt('a?', 0);\n    this.b = +prompt('b?', 0);\n  };\n\n  this.sum = function() {\n    return this.a + this.b;\n  };\n\n  this.mul = function() {\n    return this.a * this.b;\n  };\n}\n\nlet calculator = new Calculator();\ncalculator.read();\n\nalert( \"Sum=\" + calculator.sum() );\nalert( \"Mul=\" + calculator.mul() );\n```","parent":"constructor-new"}},"accumulator":{"type":"Task","value":{"title":"Create new Accumulator","slug":"accumulator","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/06-constructor-new/3-accumulator","weight":3,"libs":[],"importance":5,"content":"\nCreate a constructor function `Accumulator(startingValue)`.\n\nObject that it creates should:\n\n- Store the \"current value\" in the property `value`. The starting value is set to the argument of the constructor `startingValue`.\n- The `read()` method should use `prompt` to read a new number and add it to `value`.\n\nIn other words, the `value` property is the sum of all user-entered values with the initial value  `startingValue`.\n\nHere's the demo of the code:\n\n```js\nlet accumulator = new Accumulator(1); // initial value 1\naccumulator.read(); // adds the user-entered value\naccumulator.read(); // adds the user-entered value\nalert(accumulator.value); // shows the sum of these values\n```\n\n[demo]","solution":"```js run demo\nfunction Accumulator(startingValue) {\n  this.value = startingValue;\n\n  this.read = function() {\n    this.value += +prompt('How much to add?', 0);\n  };\n\n}\n\nlet accumulator = new Accumulator(1);\naccumulator.read();\naccumulator.read();\nalert(accumulator.value);\n```","parent":"constructor-new"}},"calculator-extendable":{"type":"Task","value":{"title":"Create an extendable calculator","slug":"calculator-extendable","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/04-object-basics/06-constructor-new/4-calculator-extendable","weight":4,"libs":[],"importance":5,"content":"\nCreate a constructor function `Calculator` that creates \"extendable\" calculator objects.\n\nThe task consists of two parts.\n\n1. First, implement the method `calculate(str)` that takes a string like `\"1 + 2\"` in the format \"NUMBER operator NUMBER\" (space-delimited) and returns the result. Should understand plus `+` and minus `-`.\n\n    Usage example:\n\n    ```js\n    let calc = new Calculator;\n\n    alert( calc.calculate(\"3 + 7\") ); // 10\n    ```\n2. Then add the method `addOperator(name, func)` that teaches the calculator a new operation. It takes the operator `name` and the two-argument function `func(a,b)` that implements it.\n\n    For instance, let's add the multiplication `*`, division `/` and power `**`:\n\n    ```js\n    let powerCalc = new Calculator;\n    powerCalc.addMethod(\"*\", (a, b) => a * b);\n    powerCalc.addMethod(\"/\", (a, b) => a / b);\n    powerCalc.addMethod(\"**\", (a, b) => a ** b);\n\n    let result = powerCalc.calculate(\"2 ** 3\");\n    alert( result ); // 8\n    ```\n\n- No brackets or complex expressions in this task.\n- The numbers and the operator are delimited with exactly one space.\n- There may be error handling if you'd like to add it.","solution":"- Please note how methods are stored. They are simply added to the internal object.\n- All tests and numeric conversions are done in the `calculate` method. In future it may be extended to support more complex expressions.","parent":"constructor-new"}},"data-types":{"type":"Article","value":{"title":"Data types","slug":"data-types","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types","isFolder":true,"weight":5,"content":"\nMore data structures and more in-depth study of the types.","libs":[],"children":["primitives-methods","number","string","array","array-methods","iterable","map-set-weakmap-weakset","keys-values-entries","destructuring-assignment","date","json"],"parent":"js"}},"primitives-methods":{"type":"Article","value":{"title":"Methods of primitives","slug":"primitives-methods","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/01-primitives-methods/article.md","isFolder":false,"weight":1,"content":"\nJavaScript allows us to work with primitives (strings, numbers etc) as if they were objects.\n\nThey also provide methods to call and such. We will study those soon, but first we'll see how it works, because, of course, primitives are not objects (and here we will make it even more clear).\n\nLet's look at the key distinction between primitives and objects.\n\nA primitive\n\nAn object\n: Is capable of storing multiple values as properties.\nCan be created with `{}`, for instance: `{name: \"John\", age: 30}`. There are other kinds of objects in JavaScript, e.g. functions are objects.\n\nOne of the best things about objects is that we can store a function as one of its properties:\n\n```js run\nlet john = {\n  name: \"John\",\n  sayHi: function() {\n    alert(\"Hi buddy!\");\n  }\n};\n\njohn.sayHi(); // Hi buddy!\n```\n\nSo here we've made an object `john` with the method `sayHi`.\n\nMany built-in objects already exist, such as those that work with dates, errors, HTML elements etc. They have different properties and methods.\n\nBut, these features come with a cost!\n\nObjects are \"heavier\" than primitives. They require additional resources to support the internal machinery. But as properties and methods are very useful in programming, JavaScript engines try to optimize them to reduce the additional burden.\n\n## A primitive as an object\n\nHere's the paradox faced by the creator of JavaScript:\n\n- There are many things one would want to do with a primitive like a string or a number. It would be great to access them as methods.\n- Primitives must be as fast and lightweight as possible.\n\nThe solution looks a little bit awkward, but here it is:\n\n1. Primitives are still primitive. A single value, as desired.\n2. The language allows access to methods and properties of strings, numbers, booleans and symbols.\n3. When this happens, a special \"object wrapper\" is created that provides the extra functionality, and then is destroyed.\n\nThe \"object wrappers\" are different for each primitive type and are called: `String`, `Number`, `Boolean` and `Symbol`. Thus, they provide different sets of methods.\n\nFor instance, there exists a method [str.toUpperCase()](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) that returns a capitalized string.\n\nHere's how it works:\n\n```js run\nlet str = \"Hello\";\n\nalert( str.toUpperCase() ); // HELLO\n```\n\nSimple, right? Here's what actually happens in `str.toUpperCase()`:\n\n1. The string `str` is a primitive. So in the moment of accessing its property, a special object is created that knows the value of the string, and has useful methods, like `toUpperCase()`.\n2. That method runs and returns a new string (shown by `alert`).\n3. The special object is destroyed, leaving the primitive `str` alone.\n\nSo primitives can provide methods, but they still remain lightweight.\n\nThe JavaScript engine highly optimizes this process. It may even skip the creation of the extra object at all. But it must still adhere to the specification and behave as if it creates one.\n\nA number has methods of its own, for instance, [toFixed(n)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) rounds the number to the given precision:\n\n```js run\nlet n = 1.23456;\n\nalert( n.toFixed(2) ); // 1.23\n```\n\nWe'll see more specific methods in chapters <info:number> and <info:string>.\n\n\n````warn header=\"Constructors `String/Number/Boolean` are for internal use only\"\nSome languages like Java allow us to create \"wrapper objects\" for primitives explicitly using a syntax like `new Number(1)` or `new Boolean(false)`.\n\nIn JavaScript, that's also possible for historical reasons, but highly **unrecommended**. Things will go crazy in several places.\n\nFor instance:\n\n```js run\nalert( typeof 1 ); // \"number\"\n\nalert( typeof new Number(1) ); // \"object\"!\n```\n\nAnd because what follows, `zero`, is an object, the alert will show up:\n\n```js run\nlet zero = new Number(0);\n\nif (zero) { // zero is true, because it's an object\n  alert( \"zero is truthy?!?\" );\n}\n```\n\nOn the other hand, using the same functions `String/Number/Boolean` without `new` is a totally sane and useful thing. They convert a value to the corresponding type: to a string, a number, or a boolean (primitive).\n\nFor example, this is entirely valid:\n```js\nlet num = Number(\"123\"); // convert a string to number\n```\n````\n\n\n````warn header=\"null/undefined have no methods\"\nThe special primitives `null` and `undefined` are exceptions. They have no corresponding \"wrapper objects\" and provide no methods. In a sense, they are \"the most primitive\".\n\nAn attempt to access a property of such value would give the error:\n\n```js run\nalert(null.test); // error\n````\n\n## Summary\n\n- Primitives except `null` and `undefined` provide many helpful methods. We will study those in the upcoming chapters.\n- Formally, these methods work via temporary objects, but JavaScript engines are well tuned to optimize that internally, so they are not expensive to call.","libs":[],"children":["string-new-property"],"parent":"data-types"}},"string-new-property":{"type":"Task","value":{"title":"Can I add a string property?","slug":"string-new-property","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/01-primitives-methods/1-string-new-property","weight":1,"libs":[],"importance":5,"content":"\n\nConsider the following code:\n\n```js\nlet str = \"Hello\";\n\nstr.test = 5;\n\nalert(str.test);\n```\n\nHow do you think, will it work? What will be shown?","solution":"Try running it:\n\n```js run\nlet str = \"Hello\";\n\nstr.test = 5; // (*)\n\nalert(str.test); \n```\n\nThere may be two kinds of result:\n1. `undefined`\n2. An error.\n\nWhy? Let's replay what's happening at line `(*)`:\n\n1. When a property of `str` is accessed, a \"wrapper object\" is created.\n2. The operation with the property is carried out on it. So, the object gets the `test` property.\n3. The operation finishes and the \"wrapper object\" disappears.\n\nSo, on the last line, `str` has no trace of the property. A new wrapper object for every object operation on a string.\n\nSome browsers though may decide to further limit the programmer and disallow to assign properties to primitives at all. That's why in practice we can also see errors at line `(*)`. It's a little bit farther from the specification though.\n\n**This example clearly shows that primitives are not objects.**\n\nThey just can not store data. \n\nAll property/method operations are performed with the help of temporary objects.","parent":"primitives-methods"}},"number":{"type":"Article","value":{"title":"Numbers","slug":"number","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/article.md","isFolder":false,"weight":2,"content":"\nAll numbers in JavaScript are stored in 64-bit format [IEEE-754](http://en.wikipedia.org/wiki/IEEE_754-1985), also known as \"double precision\".\n\nLet's recap and expand upon what we currently know about them.\n\n## More ways to write a number\n\nImagine we need to write 1 billion. The obvious way is:\n\n```js\nlet billion = 1000000000;\n```\n\nBut in real life we usually avoid writing a long string of zeroes as it's easy to mistype. Also, we are lazy. We will usually write something like `\"1bn\"` for a billion or `\"7.3bn\"` for 7 billion 300 million. The same is true for most large numbers.\n\nIn JavaScript, we shorten a number by appending the letter `\"e\"` to the number and specifying the zeroes count:\n\n```js run\nlet billion = 1e9;  // 1 billion, literally: 1 and 9 zeroes\n\nalert( 7.3e9 );  // 7.3 billions (7,300,000,000)\n```\n\nIn other words, `\"e\"` multiplies the number by `1` with the given zeroes count.\n\n```js\n1e3 = 1 * 1000\n1.23e6 = 1.23 * 1000000 \n```\n\n\nNow let's write something very small. Say, 1 microsecond (one millionth of a second): \n\n```js\nlet ms = 0.000001;\n```\n\nJust like before, using `\"e\"` can help. If we'd like to avoid writing the zeroes explicitly, we could say:\n\n```js\nlet ms = 1e-6; // six zeroes to the left from 1 \n```\n\nIf we count the zeroes in `0.000001`, there are 6 of them. So naturally it's `1e-6`.  \n\nIn other words, a negative number after `\"e\"` means a division by 1 with the given number of zeroes:\n\n```js\n// -3 divides by 1 with 3 zeroes\n1e-3 = 1 / 1000 (=0.001)\n\n// -6 divides by 1 with 6 zeroes\n1.23e-6 = 1.23 / 1000000 (=0.00000123)\n```\n\n### Hex, binary and octal numbers\n\n[Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) numbers are widely used in JavaScript to represent colors, encode characters, and for many other things. So naturally, there exists a shorter way to write them: `0x` and then the number.\n\nFor instance:\n\n```js run\nalert( 0xff ); // 255\nalert( 0xFF ); // 255 (the same, case doesn't matter)\n```\n\nBinary and octal numeral systems are rarely used, but also supported using the `0b` and `0o` prefixes:\n\n\n```js run\nlet a = 0b11111111; // binary form of 255\nlet b = 0o377; // octal form of 255\n\nalert( a == b ); // true, the same number 255 at both sides\n```\n\nThere are only 3 numeral systems with such support. For other numeral systems, we should use the function `parseInt` (which we will see later in this chapter).\n\n## toString(base)\n\nThe method `num.toString(base)` returns a string representation of `num` in the numeral system with the given `base`.\n\nFor example:\n```js run\nlet num = 255;\n\nalert( num.toString(16) );  // ff\nalert( num.toString(2) );   // 11111111\n```\n\nThe `base` can vary from `2` to `36`. By default it's `10`.\n\nCommon use cases for this are:\n\n- **base=16** is used for hex colors, character encodings etc, digits can be `0..9` or `A..F`.\n- **base=2** is mostly for debugging bitwise operations, digits can be `0` or `1`.\n- **base=36** is the maximum, digits can be `0..9` or `A..Z`. The whole latin alphabet is used to represent a number. A funny, but useful case for `36` is when we need to turn a long numeric identifier into something shorter, for example to make a short url. Can simply represent it in the numeral system with base `36`:\n\n    ```js run\n    alert( 123456..toString(36) ); // 2n9c\n    ```\n\n```warn header=\"Two dots to call a method\"\nPlease note that two dots in `123456..toString(36)` is not a typo. If we want to call a method directly on a number, like `toString` in the example above, then we need to place two dots `..` after it.\n\nIf we placed a single dot: `123456.toString(36)`, then there would be an error, because JavaScript syntax implies the decimal part after the first dot. And if we place one more dot, then JavaScript knows that the decimal part is empty and now goes the method.\n\nAlso could write `(123456).toString(36)`.\n```\n\n## Rounding\n\nOne of the most used operations when working with numbers is rounding.\n\nThere are several built-in functions for rounding:\n\n`Math.floor`\n: Rounds down: `3.1` becomes `3`, and `-1.1` becomes `-2`.\n\n`Math.ceil`\n: Rounds up: `3.1` becomes `4`, and `-1.1` becomes `-1`.\n\n`Math.round`\n: Rounds to the nearest integer: `3.1` becomes `3`, `3.6` becomes `4` and `-1.1` becomes `-1`.\n\n`Math.trunc` (not supported by Internet Explorer)\n: Removes anything after the decimal point without rounding: `3.1` becomes `3`, `-1.1` becomes `-1`.\n\nHere's the table to summarize the differences between them:\n\n|   | `Math.floor` | `Math.ceil` | `Math.round` | `Math.trunc` |\n|---|---------|--------|---------|---------|\n|`3.1`|  `3`    |   `4`  |    `3`  |   `3`   |\n|`3.6`|  `3`    |   `4`  |    `4`  |   `3`   |\n|`-1.1`|  `-2`    |   `-1`  |    `-1`  |   `-1`   |\n|`-1.6`|  `-2`    |   `-1`  |    `-2`  |   `-1`   |\n\n\nThese functions cover all of the possible ways to deal with the decimal part of a number. But what if we'd like to round the number to `n-th` digit after the decimal?\n\nFor instance, we have `1.2345` and want to round it to 2 digits, getting only `1.23`.\n\nThere are two ways to do so:\n\n1. Multiply-and-divide.\n\n    For example, to round the number to the 2nd digit after the decimal, we can multiply the number by `100`, call the rounding function and then divide it back.\n    ```js run\n    let num = 1.23456;\n\n    alert( Math.floor(num * 100) / 100 ); // 1.23456 -> 123.456 -> 123 -> 1.23\n    ```\n\n2. The method [toFixed(n)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) rounds the number to `n` digits after the point and returns a string representation of the result.\n        \n    ```js run\n    let num = 12.34;\n    alert( num.toFixed(1) ); // \"12.3\"\n    ```\n\n    This rounds up or down to the nearest value, similar to `Math.round`:\n\n    ```js run\n    let num = 12.36;\n    alert( num.toFixed(1) ); // \"12.4\"\n    ```\n\n    Please note that result of `toFixed` is a string. If the decimal part is shorter than required, zeroes are appended to the end:\n\n    ```js run\n    let num = 12.34;\n    alert( num.toFixed(5) ); // \"12.34000\", added zeroes to make exactly 5 digits \n    ```\n\n    We can convert it to a number using the unary plus or a `Number()` call: `+num.toFixed(5)`.\n\n## Imprecise calculations\n\nInternally, a number is represented in 64-bit format [IEEE-754](http://en.wikipedia.org/wiki/IEEE_754-1985), so there are exactly 64 bits to store a number: 52 of them are used to store the digits, 11 of them store the position of the decimal point (they are zero for integer numbers), and 1 bit is for the sign.\n\nIf a number is too big, it would overflow the 64-bit storage, potentially giving an infinity:\n\n```js run\nalert( 1e500 ); // Infinity \n```\n\nWhat may be a little less obvious, but happens quite often, is the loss of precision.\n\nConsider this (falsy!) test:\n\n```js run\nalert( 0.1 + 0.2 == 0.3 ); // *!*false*/!*\n```\n\nThat's right, if we check whether the sum of `0.1` and `0.2` is `0.3`, we get `false`. \n\nStrange! What is it then if not `0.3`?\n\n```js run\nalert( 0.1 + 0.2 ); // 0.30000000000000004\n```\n\nOuch! There are more consequences than an incorrect comparison here. Imagine you're making an e-shopping site and the visitor puts `$0.10` and `$0.20` goods into his chart. The order total will be `$0.30000000000000004`. That would surprise anyone.\n\nBut why does this happen?\n\nA number is stored in memory in its binary form, a sequence of ones and zeroes. But fractions like `0.1`, `0.2` that look simple in the decimal numeric system are actually unending fractions in their binary form.\n\nIn other words, what is `0.1`? It is one divided by ten `1/10`, one-tenth. In decimal numeral system such numbers are easily representable. Compare it to one-third: `1/3`. It becomes an endless fraction `0.33333(3)`. \n\nSo, division by powers `10` is guaranteed to work well in the decimal system, but division by `3` is not. For the same reason, in the binary numeral system, the division by powers of `2` is guaranteed to work, but `1/10` becomes an endless binary fraction.\n\nThere's just no way to store *exactly 0.1* or *exactly 0.2* using the binary system, just like there is no way to store one-third as a decimal fraction.\n\nThe numeric format IEEE-754 solves this by rounding to the nearest possible number. These rounding rules normally don't allow us to see that \"tiny precision loss\", so the number shows up as `0.3`. But beware, the loss still exists.\n\nWe can see this in action:\n```js run\nalert( 0.1.toFixed(20) ); // 0.10000000000000000555\n```\n\nAnd when we sum two numbers, their \"precision losses\" add up.\n\nThat's why `0.1 + 0.2` is not exactly `0.3`.\n\n```smart header=\"Not only JavaScript\"\nThe same issue exists in many other programming languages.\n\nPHP, Java, C, Perl, Ruby give exactly the same result, because they are based on the same numeric format. \n```\n\nCan we work around the problem? Sure, there're a number of ways:\n\n1. We can round the result with the help of a method [toFixed(n)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed):\n\n    ```js run\n    let sum = 0.1 + 0.2;\n    alert( sum.toFixed(2) ); // 0.30\n    ```\n\n    Please note that `toFixed` always returns a string. It ensures that it has 2 digits after the decimal point. That's actually convenient if we have an e-shopping and need to show `$0.30`. For other cases, we can use the unary plus to coerce it into a number:\n\n    ```js run\n    let sum = 0.1 + 0.2;\n    alert( +sum.toFixed(2) ); // 0.3\n    ```\n\n2. We can temporarily turn numbers into integers for the maths and then revert it back. It works like this:\n\n    ```js run\n    alert( (0.1 * 10 + 0.2 * 10) / 10 ); // 0.3\n    ```\n\n    This works because when we do `0.1 * 10 = 1` and `0.2 * 10 = 2` then both numbers become integers, and there's no precision loss. \n\n3. If we were dealing with a shop, then the most radical solution would be to store all prices in cents and use no fractions at all. But what if we apply a discount of 30%? In practice, totally evading fractions is rarely feasible, so the solutions above help avoid this pitfall.\n\n````smart header=\"The funny thing\"\nTry running this:\n\n```js run\n// Hello! I'm a self-increasing number! \nalert( 9999999999999999 ); // shows 10000000000000000\n```\n\nThis suffers from the same issue: a loss of precision. There are 64 bits for the number, 52 of them can be used to store digits, but that's not enough. So the least significant digits disappear.\n\nJavaScript doesn't trigger an error in such events. It does its best to fit the number into the desired format, but unfortunately, this format is not big enough.\n````\n\n```smart header=\"Two zeroes\"\nAnother funny consequence of the internal representation of numbers is the existence of two zeroes: `0` and `-0`.\n\nThat's because a sign is represented by a single bit, so every number can be positive or negative, including a zero. \n\nIn most cases the distinction is unnoticeable, because operators are suited to treat them as the same.\n```\n\n\n\n## Tests: isFinite and isNaN\n\nRemember these two special numeric values?\n\n- `Infinite` (and `-Infinite`) is a special numeric value that is greater (less) than anything.\n- `NaN` represents an error.\n\nThey belong to the type `number`, but are not \"normal\" numbers, so there are special functions to check for them:\n\n\n- `isNaN(value)` converts its argument to a number and then tests it for being `NaN`:\n\n    ```js run\n    alert( isNaN(NaN) ); // true\n    alert( isNaN(\"str\") ); // true\n    ```\n\n    But do we need this function? Can't we just use the comparison `=== NaN`? Sorry, but the answer is no. The value `NaN` is unique in that it does not equal anything, including itself:\n\n    ```js run\n    alert( NaN === NaN ); // false\n    ```\n\n- `isFinite(value)` converts its argument to a number and returns `true` if it's a regular number, not `NaN/Infinity/-Infinity`:\n\n    ```js run\n    alert( isFinite(\"15\") ); // true\n    alert( isFinite(\"str\") ); // false, because a special value: NaN\n    alert( isFinite(Infinity) ); // false, because a special value: Infinity\n    ```\n\nSometimes `isFinite` is used to validate whether a string value is a regular number:\n\n\n```js run\nlet num = +prompt(\"Enter a number\", '');\n\n// will be true unless you enter Infinity, -Infinity or not a number\nalert( isFinite(num) );\n```\n\nPlease note that an empty or a space-only string is treated as `0` in all numeric functions including `isFinite`.  \n\n```smart header=\"Compare with `Object.is`\"\n\nThere is a special built-in method [Object.is](mdn:js/Object/is) that compares values like `===`, but is more reliable for two edge cases:\n\n1. It works with `NaN`: `Object.is(NaN, NaN) === true`, that's a good thing. \n2. Values `0` and `-0` are different: `Object.is(0, -0) === false`, it rarely matters, but these values technically are different.\n\nIn all other cases, `Object.is(a, b)` is the same as `a === b`. \n\nThis way of comparison is often used in JavaScript specification. When an internal algorithm needs to compare two values for being exactly the same, it uses `Object.is` (internally called [SameValue](https://tc39.github.io/ecma262/#sec-samevalue)).\n```\n\n\n## parseInt and parseFloat\n\nNumeric conversion using a plus `+` or `Number()` is strict. If a value is not exactly a number, it fails:\n\n```js run\nalert( +\"100px\" ); // NaN\n```\n\nThe sole exception is spaces at the beginning or at the end of the string, as they are ignored.\n\nBut in real life we often have values in units, like `\"100px\"` or `\"12pt\"` in CSS. Also in many countries the currency symbol goes after the amount, so we have `\"19€\"` and would like to extract a numeric value out of that.\n\nThat's what `parseInt` and `parseFloat` are for.\n\nThey \"read\" a number from a string until they can. In case of an error, the gathered number is returned. The function `parseInt` returns an integer, whilst `parseFloat` will return a floating-point number:\n\n```js run\nalert( parseInt('100px') ); // 100\nalert( parseFloat('12.5em') ); // 12.5\n\nalert( parseInt('12.3') ); // 12, only the integer part is returned\nalert( parseFloat('12.3.4') ); // 12.3, the second point stops the reading\n```\n\nThere are situations when `parseInt/parseFloat` will return `NaN`. It happens when no digits could be read:\n\n```js run\nalert( parseInt('a123') ); // NaN, the first symbol stops the process\n```\n\n````smart header=\"The second argument of `parseInt(str, radix)`\"\nThe `parseInt()` function has an optional second parameter. It specifies the base of the numeral system, so `parseInt` can also parse strings of hex numbers, binary numbers and so on:\n\n```js run\nalert( parseInt('0xff', 16) ); // 255\nalert( parseInt('ff', 16) ); // 255, without 0x also works\n\nalert( parseInt('2n9c', 36) ); // 123456\n```\n````\n\n## Other math functions\n\nJavaScript has a built-in [Math](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math) object which contains a small library of mathematical functions and constants.\n\nA few examples:\n\n`Math.random()`\n: Returns a random number from 0 to 1 (not including 1)\n\n    ```js run\n    alert( Math.random() ); // 0.1234567894322\n    alert( Math.random() ); // 0.5435252343232\n    alert( Math.random() ); // ... (any random numbers)\n    ```\n\n`Math.max(a, b, c...)` / `Math.min(a, b, c...)`\n: Returns the greatest/smallest from the arbitrary number of arguments.\n\n    ```js run\n    alert( Math.max(3, 5, -10, 0, 1) ); // 5\n    alert( Math.min(1, 2) ); // 1\n    ```\n\n`Math.pow(n, power)`\n: Returns `n` raised the given power\n\n    ```js run\n    alert( Math.pow(2, 10) ); // 2 in power 10 = 1024\n    ```\n\nThere are more functions and constants in `Math` object, including trigonometry, which you can find in the [docs for the Math](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math) object.\n\n## Summary\n\nTo write big numbers:\n\n- Append `\"e\"` with the zeroes count to the number. Like: `123e6` is `123` with 6 zeroes.\n- A negative number after `\"e\"` causes the number to be divided by 1 with given zeroes. That's for one-millionth or such.\n\nFor different numeral systems:\n\n- Can write numbers directly in hex (`0x`), octal (`0o`) and binary (`0b`) systems\n- `parseInt(str, base)` parses an integer from any numeral system with base: `2 ≤ base ≤ 36`.\n- `num.toString(base)` converts a number to a string in the numeral system with the given `base`.\n\nFor converting values like `12pt` and `100px` to a number:\n\n- Use `parseInt/parseFloat` for the \"soft\" conversion, which reads a number from a string and then returns the value they could read before the error. \n\nFor fractions:\n\n- Round using `Math.floor`, `Math.ceil`, `Math.trunc`, `Math.round` or `num.toFixed(precision)`.\n- Make sure to remember there's a loss of precision when working with fractions.\n\nMore mathematical functions:\n\n- See the [Math](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math) object when you need them. The library is very small, but can cover basic needs.","libs":[],"children":["sum-interface","why-rounded-down","repeat-until-number","endless-loop-error","random-min-max","random-int-min-max"],"parent":"data-types"}},"sum-interface":{"type":"Task","value":{"title":"Sum numbers from the visitor","slug":"sum-interface","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/1-sum-interface","weight":1,"libs":[],"importance":5,"content":"\nCreate a script that prompts the visitor to enter two numbers and then shows their sum.\n\n[demo]\n\nP.S. There is a gotcha with types.","solution":"```js run demo\nlet a = +prompt(\"The first number?\", \"\");\nlet b = +prompt(\"The second number?\", \"\");\n\nalert( a + b );\n```\n\nNote the unary plus `+` before `prompt`. It immediately converts the value to a number.\n\nOtherwise, `a` and `b` would be string their sum would be their concatenation, that is: `\"1\" + \"2\" = \"12\"`.","parent":"number"}},"why-rounded-down":{"type":"Task","value":{"title":"Why 6.35.toFixed(1) == 6.3?","slug":"why-rounded-down","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/2-why-rounded-down","weight":2,"libs":[],"importance":4,"content":"\nAccording to the documentation `Math.round` and `toFixed` both round to the nearest number: `0..4` lead down while `5..9` lead up.\n\nFor instance:\n\n```js run\nalert( 1.35.toFixed(1) ); // 1.4\n```\n\nIn the similar example below, why is `6.35` rounded to `6.3`, not `6.4`?\n\n```js run\nalert( 6.35.toFixed(1) ); // 6.3\n```\n\nHow to round `6.35` the right way?","solution":"Internally the decimal fraction `6.35` is an endless binary. As always in such cases, it is stored with a precision loss.\n\nLet's see:\n\n```js run\nalert( 6.35.toFixed(20) ); // 6.34999999999999964473\n```\n\nThe precision loss can cause both increase and decrease of a number. In this particular case the number becomes a tiny bit less, that's why it rounded down.\n\nAnd what's for `1.35`?\n\n```js run\nalert( 1.35.toFixed(20) ); // 1.35000000000000008882\n```\n\nHere the precision loss made the number a little bit greater, so it rounded up.\n\n**How can we fix the problem with `6.35` if we want it to be rounded the right way?**\n\nWe should bring it closer to an integer prior to rounding:\n\n```js run\nalert( (6.35 * 10).toFixed(20) ); // 63.50000000000000000000\n```\n\nNote that `63.5` has no precision loss at all. That's because the decimal part `0.5` is actually `1/2`. Fractions divided by powers of `2` are exactly represented in the binary system, now we can round it:\n\n\n```js run\nalert( Math.round(6.35 * 10) / 10); // 6.35 -> 63.5 -> 64(rounded) -> 6.4\n```","parent":"number"}},"repeat-until-number":{"type":"Task","value":{"title":"Repeat until the input is a number","slug":"repeat-until-number","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/3-repeat-until-number","weight":3,"libs":[],"importance":5,"content":"\nCreate a function `readNumber` which prompts for a number until the visitor enters a valid numeric value.\n\nThe resulting value must be returned as a number.\n\nThe visitor can also stop the process by entering an empty line or pressing \"CANCEL\". In that case, the function should return `null`.\n\n[demo]","solution":"```js run demo\nfunction readNumber() {\n  let num;\n\n  do {\n    num = prompt(\"Enter a number please?\", 0);\n  } while ( !isFinite(num) );\n\n  if (num === null || num === '') return null;\n  \n  return +num;\n}\n\nalert(`Read: ${readNumber()}`);\n```\n\nThe solution is a little bit more intricate that it could be because we need to handle `null`/empty lines.\n\nSo we actually accept the input until it is a \"regular number\". Both `null` (cancel) and empty line also fit that condition, because in numeric form they are `0`.\n\nAfter we stopped, we need to treat `null` and empty line specially (return `null`), because converting them to a number would return `0`.","parent":"number"}},"endless-loop-error":{"type":"Task","value":{"title":"An occasional infinite loop","slug":"endless-loop-error","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/4-endless-loop-error","weight":4,"libs":[],"importance":4,"content":"\nThis loop is infinite. It never ends. Why?\n\n```js\nlet i = 0;\nwhile (i != 10) {\n  i += 0.2;\n}\n```","solution":"That's because `i` would never equal `10`.\n\nRun it to see the *real* values of `i`:\n\n```js run\nlet i = 0;\nwhile (i < 11) {\n  i += 0.2;\n  if (i > 9.8 && i < 10.2) alert( i );\n}\n```\n\nNone of them is exactly `10`.\n\nSuch things happen because of the precision losses when adding fractions like `0.2`.\n\nConclusion: evade equality checks when working with decimal fractions.","parent":"number"}},"random-min-max":{"type":"Task","value":{"title":"A random number from min to max","slug":"random-min-max","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/8-random-min-max","weight":8,"libs":[],"importance":2,"content":"\nThe built-in function `Math.random()` creates a random value from `0` to `1` (not including `1`).\n\nWrite the function `random(min, max)` to generate a random floating-point number from `min` to `max` (not including `max`).\n\nExamples of its work:\n\n```js\nalert( random(1, 5) ); // 1.2345623452\nalert( random(1, 5) ); // 3.7894332423\nalert( random(1, 5) ); // 4.3435234525\n```","solution":"We need to \"map\" all values from the interval 0..1 into values from `min` to `max`.\n\nThat can be done in two stages:\n\n1. If we multiply a random number from 0..1 by `max-min`, then it the interval of possible values increases `0..1` to `0..max-min`.\n2. Now if we add `min`, the possible interval becomes from `min` to `max`.\n\nThe function:\n\n```js run\nfunction random(min, max) {\n  return min + Math.random() * (max - min);\n}\n\nalert( random(1, 5) ); \nalert( random(1, 5) ); \nalert( random(1, 5) ); \n```","parent":"number"}},"random-int-min-max":{"type":"Task","value":{"title":"A random integer from min to max","slug":"random-int-min-max","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/02-number/9-random-int-min-max","weight":9,"libs":[],"importance":2,"content":"\nCreate a function `randomInteger(min, max)` that generates a random *integer* number from `min` to `max` including both `min` and `max` as possible values.\n\nAny number from the interval `min..max` must appear with the same probability.\n\n\nExamples of its work:\n\n```js\nalert( random(1, 5) ); // 1\nalert( random(1, 5) ); // 3\nalert( random(1, 5) ); // 5\n```\n\nYou can use the solution of the [previous task](info:task/random-min-max) as the base.","solution":"# The simple but wrong solution\n\nThe simplest, but wrong solution would be to generate a value from `min` to `max` and round it:\n\n```js run\nfunction randomInteger(min, max) {\n  let rand = min + Math.random() * (max - min); \n  return Math.round(rand);\n}\n\nalert( randomInteger(1, 3) );\n```\n\nThe function works, but it is incorrect. The probability to get edge values `min` and `max` is two times less than any other.\n\nIf you run the example above many times, you would easily see that `2` appears the most often.\n\nThat happens because `Math.round()` gets random numbers from the interval `1..3` and rounds them as follows:\n\n```js no-beautify\nvalues from 1    ... to 1.4999999999  become 1\nvalues from 1.5  ... to 2.4999999999  become 2\nvalues from 2.5  ... to 2.9999999999  become 3\n```\n\nNow we can clearly see that `1` gets twice less values than `2`. And the same with `3`.\n\n# The correct solution\n\nThere are many correct solutions to the task. One of them is to adjust interval borders. To ensure the same intervals, we can generate values from `0.5 to 3.5`, thus adding the required probabilities to the edges:\n\n```js run\n*!*\nfunction randomInteger(min, max) {\n  // now rand is from  (min-0.5) to (max+0.5)\n  let rand = min - 0.5 + Math.random() * (max - min + 1);\n  return Math.round(rand);\n}\n*/!*\n\nalert( randomInteger(1, 3) );\n```\n\nAn alternative way could be to use `Math.floor` for a random number from `min` to `max+1`:\n\n```js run\n*!*\nfunction randomInteger(min, max) {\n  // here rand is from min to (max+1)\n  let rand = min + Math.random() * (max + 1 - min);\n  return Math.floor(rand);\n}\n*/!*\n\nalert( randomInteger(1, 3) );\n```\n\nNow all intervals are mapped this way:\n\n```js no-beautify\nvalues from 1  ... to 1.9999999999  become 1\nvalues from 2  ... to 2.9999999999  become 2\nvalues from 3  ... to 3.9999999999  become 3\n```\n\nAll intervals have the same length, making the final distribution uniform.","parent":"number"}},"string":{"type":"Article","value":{"title":"Strings","slug":"string","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/03-string/article.md","isFolder":false,"weight":3,"content":"\nIn JavaScript, the textual data is stored as strings. There is no separate type for a single character.\n\nThe internal format for strings is always [UTF-16](https://en.wikipedia.org/wiki/UTF-16), it is not tied to the page encoding.\n\n## Quotes\n\nLet's recall the kinds of quotes.\n\nStrings can be enclosed within either single quotes, double quotes or backticks:\n\n```js\nlet single = 'single-quoted';\nlet double = \"double-quoted\";\n\nlet backticks = `backticks`;\n```\n\nSingle and double quotes are essentially the same. Backticks, however, allow us to embed any expression into the string, including function calls:\n\n```js run\nfunction sum(a, b) {\n  return a + b;\n}\n\nalert(`1 + 2 = ${sum(1, 2)}.`); // 1 + 2 = 3.\n```\n\nAnother advantage of using backticks is that they allow a string to span multiple lines:\n\n```js run\nlet guestList = `Guests:\n * John\n * Pete\n * Mary\n`;\n\nalert(guestList); // a list of guests, multiple lines\n```\n\nIf we try to use single or double quotes in the same way, there will be an error:\n```js run\nlet guestList = \"Guests:  // Error: Unexpected token ILLEGAL\n  * John\";\n```\n\nSingle and double quotes come from ancient times of language creation when the need for multiline strings was not taken into account. Backticks appeared much later and thus are more versatile.\n\nBackticks also allow us to specify a \"template function\" before the first backtick. The syntax is: <code>func&#96;string&#96;</code>. The function `func` is called automatically, receives the string and embedded expressions and can process them. You can read more about it in the [docs](mdn:/JavaScript/Reference/Template_literals#Tagged_template_literals). This is called \"tagged templates\". This feature makes it easier to wrap strings into custom templating or other functionality, but it is rarely used.\n\n\n## Special characters\n\nIt is still possible to create multiline strings with single quotes by using a so-called \"newline character\", written as `\\n`, which denotes a line break:\n\n```js run\nlet guestList = \"Guests:\\n * John\\n * Pete\\n * Mary\";\n\nalert(guestList); // a multiline list of guests\n```\n\nFor example, these two lines describe the same:\n\n```js run\nalert( \"Hello\\nWorld\" ); // two lines using a \"newline symbol\"\n\n// two lines using a normal newline and backticks\nalert( `Hello\nWorld` );\n```\n\nThere are other, less common \"special\" characters as well. Here's the list:\n\n| Character | Description |\n|-----------|-------------|\n|`\\b`|Backspace|\n|`\\f`|Form feed|\n|`\\n`|New line|\n|`\\r`|Carriage return|\n|`\\t`|Tab|\n|`\\uNNNN`|A unicode symbol with the hex code `NNNN`, for instance `\\u00A9` -- is a unicode for the copyright symbol `©`. It must be exactly 4 hex digits. |\n|`\\u{NNNNNNNN}`|Some rare characters are encoded with two unicode symbols, taking up to 4 bytes. This long unicode requires braces around it.|\n\nExamples with unicode:\n\n```js run\nalert( \"\\u00A9\" ); // ©\nalert( \"\\u{20331}\" ); // 佫, a rare chinese hieroglyph (long unicode)\nalert( \"\\u{1F60D}\" ); // 😍, a smiling face symbol (another long unicode)\n```\n\nAll special characters start with a backslash character `\\`. It is also called an \"escape character\".\n\nWe would also use it if we want to insert a quote into the string.\n\nFor instance:\n\n```js run\nalert( 'I*!*\\'*/!*m the Walrus!' ); // *!*I'm*/!* the Walrus!\n```\n\nAs you can see, we have to prepend the inner quote by the backslash `\\'`, because otherwise it would indicate the string end.\n\nOf course, that refers only to the quotes that are same as the enclosing ones. So, as a more elegant solution, we could switch to double quotes or backticks instead:\n\n```js run\nalert( `I'm the Walrus!` ); // I'm the Walrus!\n```\n\nNote that the backslash `\\` serves for the correct reading of the string by JavaScript, then disappears. The in-memory string has no `\\`. You can clearly see that in `alert` from the examples above.\n\nBut what if we need to show an actual backslash `\\` within the string?\n\nThat's possible, but we need to double it like `\\\\`:\n\n```js run\nalert( `The backslash: \\\\` ); // The backslash: \\\n```\n\n## String length\n\n\nThe `length` property has the string length:\n\n```js run\nalert( `My\\n`.length ); // 3\n```\n\nNote that `\\n` is a single \"special\" character, so the length is indeed `3`.\n\n```warn header=\"`length` is a property\"\nPeople with a background in some other languages sometimes mistype by calling `str.length()` instead of just `str.length`. That doesn't work.\n\nPlease note that `str.length` is a numeric property, not a function. There is no need to add brackets after it.\n```\n\n## Accessing characters\n\nTo get a character at position `pos`, use square brackets `[pos]` or call the method [str.charAt(pos)](mdn:js/String/charAt). The first character starts from the zero position:\n\n```js run\nlet str = `Hello`;\n\n// the first character\nalert( str[0] ); // H\nalert( str.charAt(0) ); // H\n\n// the last character\nalert( str[str.length - 1] ); // o\n```\n\nThe square brackets are a modern way of getting a character, while `charAt` exists mostly for historical reasons.\n\nThe only difference between them is that if no character is found, `[]` returns `undefined`, and `charAt` returns an empty string:\n\n```js run\nlet str = `Hello`;\n\nalert( str[1000] ); // undefined\nalert( str.charAt(1000) ); // '' (an empty string)\n```\n\nWe can also iterate over characters using `for..of`:\n\n```js run\nfor (let char of \"Hello\") {\n  alert(char); // H,e,l,l,o (char becomes \"H\", then \"e\", then \"l\" etc)\n}\n```\n\n## Strings are immutable\n\nStrings can't be changed in JavaScript. It is impossible to change a character.\n\nLet's try it to show that it doesn't work:\n\n```js run\nlet str = 'Hi';\n\nstr[0] = 'h'; // error\nalert( str[0] ); // doesn't work\n```\n\nThe usual workaround is to create a whole new string and assign it to `str` instead of the old one.\n\nFor instance:\n\n```js run\nlet str = 'Hi';\n\nstr = 'h' + str[1];  // replace the string\n\nalert( str ); // hi\n```\n\nIn the following sections we'll see more examples of this.\n\n## Changing the case\n\nMethods [toLowerCase()](mdn:js/String/toLowerCase) and [toUpperCase()](mdn:js/String/toUpperCase) change the case:\n\n```js run\nalert( 'Interface'.toUpperCase() ); // INTERFACE\nalert( 'Interface'.toLowerCase() ); // interface\n```\n\nOr, if we want a single character lowercased:\n\n```js\nalert( 'Interface'[0].toLowerCase() ); // 'i'\n```\n\n## Searching for a substring\n\nThere are multiple ways to look for a substring within a string.\n\n### str.indexOf\n\nThe first method is [str.indexOf(substr, pos)](mdn:js/String/indexOf).\n\nIt looks for the `substr` in `str`, starting from the given position `pos`, and returns the position where the match was found or `-1` if nothing can be found.\n\nFor instance:\n\n```js run\nlet str = 'Widget with id';\n\nalert( str.indexOf('Widget') ); // 0, because 'Widget' is found at the beginning\nalert( str.indexOf('widget') ); // -1, not found, the search is case-sensitive\n\nalert( str.indexOf(\"id\") ); // 1, \"id\" is found at the position 1 (..idget with id)\n```\n\nThe optional second parameter allows us to search starting from the given position.\n\nFor instance, the first occurrence of `\"id\"` is at position `1`. To look for the next occurrence, let's start the search from position `2`:\n\n```js run\nlet str = 'Widget with id';\n\nalert( str.indexOf('id', 2) ) // 12\n```\n\n\nIf we're interested in all occurrences, we can run `indexOf` in a loop. Every new call is made with the position after the previous match:\n\n\n```js run\nlet str = 'As sly as a fox, as strong as an ox';\n\nlet target = 'as'; // let's look for it\n\nlet pos = 0;\nwhile (true) {\n  let foundPos = str.indexOf(target, pos);\n  if (foundPos == -1) break;\n\n  alert( `Found at ${foundPos}` );\n  pos = foundPos + 1; // continue the search from the next position\n}\n```\n\nThe same algorithm can be layed out shorter:\n\n```js run\nlet str = \"As sly as a fox, as strong as an ox\";\nlet target = \"as\";\n\n*!*\nlet pos = -1;\nwhile ((pos = str.indexOf(target, pos + 1)) != -1) {\n  alert( pos );\n}\n*/!*\n```\n\n```smart header=\"`str.lastIndexOf(pos)`\"\nThere is also a similar method [str.lastIndexOf(pos)](mdn:js/String/lastIndexOf) that searches from the end of a string to its beginning.\n\nIt would list the occurrences in the reverse order.\n```\n\nThere is a slight inconvenience with `indexOf` in the `if` test. We can't put it in the `if` like this:\n\n```js run\nlet str = \"Widget with id\";\n\nif (str.indexOf(\"Widget\")) {\n    alert(\"We found it\"); // doesn't work!\n}\n```\n\nThe `alert` in the example above doesn't show because `str.indexOf(\"Widget\")` returns `0` (meaning that it found the match at the starting position). Right, but `if` considers `0` to be `false`.\n\nSo, we should actually check for `-1`, like this:\n\n```js run\nlet str = \"Widget with id\";\n\n*!*\nif (str.indexOf(\"Widget\") != -1) {\n*/!*\n    alert(\"We found it\"); // works now!\n}\n```\n\n````smart header=\"The bitwise NOT trick\"\nOne of the old tricks used here is the [bitwise NOT](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT) `~` operator. It converts the number to a 32-bit integer (removes the decimal part if exists) and then reverses all bits in its binary representation.\n\nFor 32-bit integers the call `~n` means exactly the same as `-(n+1)` (due to IEEE-754 format).\n\nFor instance:\n\n```js run\nalert( ~2 ); // -3, the same as -(2+1)\nalert( ~1 ); // -2, the same as -(1+1)\nalert( ~0 ); // -1, the same as -(0+1)\n*!*\nalert( ~-1 ); // 0, the same as -(-1+1)\n*/!*\n```\n\nAs we can see, `~n` is zero only if `n == -1`.\n\nSo, the test `if ( ~str.indexOf(\"...\") )` is truthy that the result of `indexOf` is not `-1`. In other words, when there is a match.\n\nPeople use it to shorten `indexOf` checks:\n\n```js run\nlet str = \"Widget\";\n\nif (~str.indexOf(\"Widget\")) {\n  alert( 'Found it!' ); // works\n}\n```\n\nIt is usually not recommended to use language features in a non-obvious way, but this particular trick is widely used in old code, so we should understand it.\n\nJust remember: `if (~str.indexOf(...))` reads as \"if found\".\n````\n\n### includes, startsWith, endsWith\n\nThe more modern method [str.includes(substr, pos)](mdn:js/String/includes) returns `true/false` depending on whether `str` contains `substr` within.\n\nIt's the right choice if we need to test for the match, but don't need its position:\n\n```js run\nalert( \"Widget with id\".includes(\"Widget\") ); // true\n\nalert( \"Hello\".includes(\"Bye\") ); // false\n```\n\nThe optional second argument of `str.includes` is the position to start searching from:\n\n```js run\nalert( \"Midget\".includes(\"id\") ); // true\nalert( \"Midget\".includes(\"id\", 3) ); // false, from position 3 there is no \"id\"\n```\n\nThe methods [str.startsWith](mdn:js/String/startsWith) and [str.endsWith](mdn:js/String/endsWith) do exactly what they say:\n\n```js run\nalert( \"Widget\".startsWith(\"Wid\") ); // true, \"Widget\" starts with \"Wid\"\nalert( \"Widget\".endsWith(\"get\") );   // true, \"Widget\" ends with \"get\"\n```\n\n## Getting a substring\n\nThere are 3 methods in JavaScript to get a substring: `substring`, `substr` and `slice`.\n\n`str.slice(start [, end])`\n: Returns the part of the string from `start` to (but not including) `end`.\n\n    For instance:\n\n    ```js run\n    let str = \"stringify\";\n    alert( str.slice(0, 5) ); // 'strin', the substring from 0 to 5 (not including 5)\n    alert( str.slice(0, 1) ); // 's', from 0 to 1, but not including 1, so only character at 0\n    ```\n\n    If there is no second argument, then `slice` goes till the end of the string:\n\n    ```js run\n    let str = \"st*!*ringify*/!*\";\n    alert( str.slice(2) ); // ringify, from the 2nd position till the end\n    ```\n\n    Negative values for `start/end` are also possible. They mean the position is counted from the string end:\n\n    ```js run\n    let str = \"strin*!*gif*/!*y\";\n\n    // start at the 4th position from the right, end at the 1st from the right\n    alert( str.slice(-4, -1) ); // gif\n    ```\n\n\n`str.substring(start [, end])`\n: Returns the part of the string *between* `start` and `end`.\n\n    This is almost the same as `slice`, but it allows `start` to be greater than `end`.\n\n    For instance:\n\n\n    ```js run\n    let str = \"st*!*ring*/!*ify\";\n\n    // these are same for substring\n    alert( str.substring(2, 6) ); // \"ring\"\n    alert( str.substring(6, 2) ); // \"ring\"\n\n    // ...but not for slice:\n    alert( str.slice(2, 6) ); // \"ring\" (the same)\n    alert( str.slice(6, 2) ); // \"\" (an empty string)\n\n    ```\n\n    Negative arguments are (unlike slice) not supported, they are treated as `0`.\n\n\n`str.substr(start [, length])`\n: Returns the part of the string from `start`, with the given `length`.\n\n    In contrast with the previous methods, this one allows us to specify the `length` instead of the ending position:\n\n    ```js run\n    let str = \"st*!*ring*/!*ify\";\n    alert( str.substr(2, 4) ); // ring, from the 2nd position get 4 characters\n    ```\n\n    The first argument may be negative, to count from the end:\n\n    ```js run\n    let str = \"strin*!*gi*/!*fy\";\n    alert( str.substr(-4, 2) ); // gi, from the 4th position get 2 characters\n    ```\n\nLet's recap these methods to avoid any confusion:\n\n| method | selects... | negatives |\n|--------|-----------|-----------|\n| `slice(start, end)` | from `start` to `end` (not including `end`) | allows negatives |\n| `substring(start, end)` | between `start` and `end` | negative values mean `0` |\n| `substr(start, length)` | from `start` get `length` characters | allows negative `start` |\n\n\n```smart header=\"Which one to choose?\"\nAll of them can do the job. Formally, `substr` has a minor drawback: it is described not in the core JavaScript specification, but in Annex B, which covers browser-only features that exist mainly for historical reasons. So, non-browser environments may fail to support it. But in practice it works everywhere.\n\nThe author finds himself using `slice` almost all the time.\n```\n\n## Comparing strings\n\nAs we know from the chapter <info:comparison>, strings are compared character-by-character in alphabetical order.\n\nAlthough, there are some oddities.\n\n1. A lowercase letter is always greater than the uppercase:\n\n    ```js run\n    alert( 'a' > 'Z' ); // true\n    ```\n\n2. Letters with diacritical marks are \"out of order\":\n\n    ```js run\n    alert( 'Österreich' > 'Zealand' ); // true\n    ```\n\n    This may lead to strange results if we sort these country names. Usually people would expect `Zealand` to come after `Österreich` in the list.\n\nTo understand what happens, let's review the internal representation of strings in JavaScript.\n\nAll strings are encoded using [UTF-16](https://en.wikipedia.org/wiki/UTF-16). That is: each character has a corresponding numeric code. There are special methods that allow to get the character for the code and back.\n\n`str.codePointAt(pos)`\n: Returns the code for the character at position `pos`:\n\n    ```js run\n    // different case letters have different codes\n    alert( \"z\".codePointAt(0) ); // 122\n    alert( \"Z\".codePointAt(0) ); // 90\n    ```\n\n`String.fromCodePoint(code)`\n: Creates a character by its numeric `code`\n\n    ```js run\n    alert( String.fromCodePoint(90) ); // Z\n    ```\n\n    We can also add unicode characters by their codes using `\\u` followed by the hex code:\n\n    ```js run\n    // 90 is 5a in hexadecimal system\n    alert( '\\u005a' ); // Z\n    ```\n\nNow let's see the characters with codes `65..220` (the latin alphabet and a little bit extra) by making a string of them:\n\n```js run\nlet str = '';\n\nfor (let i = 65; i <= 220; i++) {\n  str += String.fromCodePoint(i);\n}\nalert( str );\n// ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\n// ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜ\n```\n\nSee? Capital characters go first, then a few special ones, then lowercase characters.\n\nNow it becomes obvious why `a > Z`.\n\nThe characters are compared by their numeric code. The greater code means that the character is greater. The code for `a` (97) is greater than the code for `Z` (90).\n\n- All lowercase letters go after uppercase letters because their codes are greater.\n- Some letters like `Ö` stand apart from the main alphabet. Here, it's code is greater than anything from `a` to `z`.\n\n\n### Correct comparisons\n\nThe \"right\" algorithm to do string comparisons is more complex than it may seem, because alphabets are different for different languages. The same-looking letter may be located differently in different alphabets.\n\nSo, the browser needs to know the language to compare.\n\nLuckily, all modern browsers (IE10- requires the additional library [Intl.JS](https://github.com/andyearnshaw/Intl.js/)) support the internationalization standard [ECMA 402](http://www.ecma-international.org/ecma-402/1.0/ECMA-402.pdf).\n\nIt provides a special method to compare strings in different languages, following their rules.\n\nThe call [str.localeCompare(str2)](mdn:js/String/localeCompare):\n\n- Returns `1` if `str` is greater than `str2` according to the language rules.\n- Returns `-1` if `str` is less than `str2`.\n- Returns `0` if they are equal.\n\nFor instance:\n\n```js run\nalert( 'Österreich'.localeCompare('Zealand') ); // -1\n```\n\nThis method actually has two additional arguments specified in [the documentation](mdn:js/String/localeCompare), which allows it to specify the language (by default taken from the environment) and setup additional rules like case sensitivity or should `\"a\"` and `\"á\"` be treated as the same etc.\n\n## Internals, Unicode\n\n```warn header=\"Advanced knowledge\"\nThe section goes deeper into string internals. This knowledge will be useful for you if you plan to deal with emoji, rare mathematical of hieroglyphs characters or other rare symbols.\n\nYou can skip the section if you don't plan to support them.\n```\n\n### Surrogate pairs\n\nMost symbols have a 2-byte code. Letters in most european languages, numbers, and even most hieroglyphs, have a 2-byte representation.\n\nBut 2 bytes only allow 65536 combinations and that's not enough for every possible symbol. So rare symbols are encoded with a pair of 2-byte characters called \"a surrogate pair\".\n\nThe length of such symbols is `2`:\n\n```js run\nalert( '𝒳'.length ); // 2, MATHEMATICAL SCRIPT CAPITAL X\nalert( '😂'.length ); // 2, FACE WITH TEARS OF JOY\nalert( '𩷶'.length ); // 2, a rare chinese hieroglyph\n```\n\nNote that surrogate pairs did not exist at the time when JavaScript was created, and thus are not correctly processed by the language!\n\nWe actually have a single symbol in each of the strings above, but the `length` shows a length of `2`.\n\n`String.fromCodePoint` and `str.codePointAt` are few rare methods that deal with surrogate pairs right. They recently appeared in the language. Before them, there were only [String.fromCharCode](mdn:js/String/fromCharCode) and [str.charCodeAt](mdn:js/String/charCodeAt). These methods are actually the same as `fromCodePoint/codePointAt`, but don't work with surrogate pairs.\n\nBut, for instance, getting a symbol can be tricky, because surrogate pairs are treated as two characters:\n\n```js run\nalert( '𝒳'[0] ); // strange symbols...\nalert( '𝒳'[1] ); // ...pieces of the surrogate pair\n```\n\nNote that pieces of the surrogate pair have no meaning without each other. So the alerts in the example above actually display garbage.\n\nTechnically, surrogate pairs are also detectable by their codes: if a character has the code in the interval of `0xd800..0xdbff`, then it is the first part of the surrogate pair. The next character (second part) must have the code in interval `0xdc00..0xdfff`. These intervals are reserved exclusively for surrogate pairs by the standard.\n\nIn the case above:\n\n```js run\n// charCodeAt is not surrogate-pair aware, so it gives codes for parts\n\nalert( '𝒳'.charCodeAt(0).toString(16) ); // d835, between 0xd800 and 0xdbff\nalert( '𝒳'.charCodeAt(1).toString(16) ); // dcb3, between 0xdc00 and 0xdfff\n```\n\nYou will find more ways to deal with surrogate pairs later in the chapter <info:iterable>. There are probably special libraries for that too, but nothing famous enough to suggest here.\n\n### Diacritical marks and normalization\n\nIn many languages there are symbols that are composed of the base character with a mark above/under it.\n\nFor instance, the letter `a` can be the base character for: `àáâäãåā`. Most common \"composite\" character have their own code in the UTF-16 table. But not all of them, because there are too many possible combinations.\n\nTo support arbitrary compositions, UTF-16 allows us to use several unicode characters. The base character and one or many \"mark\" characters that \"decorate\" it.\n\nFor instance, if we have `S` followed by the special \"dot above\" character (code `\\u0307`), it is shown as Ṡ.\n\n```js run\nalert( 'S\\u0307' ); // Ṡ\n```\n\nIf we need an additional mark above the letter (or below it) -- no problem, just add the necessary mark character.\n\nFor instance, if we append a character \"dot below\" (code `\\u0323`), then we'll have \"S with dots above and below\": `Ṩ`.\n\nFor example:\n\n```js run\nalert( 'S\\u0307\\u0323' ); // Ṩ\n```\n\nThis provides great flexibility, but also an interesting problem: two characters may visually look the same, but be represented with different unicode compositions.\n\nFor instance:\n\n```js run\nalert( 'S\\u0307\\u0323' ); // Ṩ, S + dot above + dot below\nalert( 'S\\u0323\\u0307' ); // Ṩ, S + dot below + dot above\n\nalert( 'S\\u0307\\u0323' == 'S\\u0323\\u0307' ); // false\n```\n\nTo solve this, there exists a \"unicode normalization\" algorithm that brings each string to the single \"normal\" form.\n\nIt is implemented by [str.normalize()](mdn:js/String/normalize).\n\n```js run\nalert( \"S\\u0307\\u0323\".normalize() == \"S\\u0323\\u0307\".normalize() ); // true\n```\n\nIt's funny that in our situation `normalize()` actually brings together a sequence of 3 characters to one: `\\u1e68` (S with two dots).\n\n```js run\nalert( \"S\\u0307\\u0323\".normalize().length ); // 1\n\nalert( \"S\\u0307\\u0323\".normalize() == \"\\u1e68\" ); // true\n```\n\nIn reality, this is not always the case. The reason being that the symbol `Ṩ` is \"common enough\", so UTF-16 creators included it in the main table and gave it the code.\n\nIf you want to learn more about normalization rules and variants -- they are described in the appendix of the Unicode standard: [Unicode Normalization Forms](http://www.unicode.org/reports/tr15/), but for most practical purposes the information from this section is enough.\n\n\n## Summary\n\n- There are 3 types of quotes. Backticks allow a string to span multiple lines and embed expressions.\n- Strings in JavaScript are encoded using UTF-16.\n- We can use special characters like `\\n` and insert letters by their unicode using `\\u...`.\n- To get a character, use: `[]`.\n- To get a substring, use: `slice` or `substring`.\n- To lowercase/uppercase a string, use: `toLowerCase/toUpperCase`.\n- To look for a substring, use: `indexOf`, or `includes/startsWith/endsWith` for simple checks.\n- To compare strings according to the language, use: `localeCompare`, otherwise they are compared by character codes.\n\nThere are several other helpful methods in strings:\n\n- `str.trim()` -- removes (\"trims\") spaces from the beginning and end of the string.\n- `str.repeat(n)` -- repeats the string `n` times.\n- ...and more. See the [manual](mdn:js/String) for details.\n\nStrings also have methods for doing search/replace with regular expressions. But that topic deserves a separate chapter, so we'll return to that later.","libs":[],"children":["ucfirst","check-spam","truncate","extract-currency"],"parent":"data-types"}},"ucfirst":{"type":"Task","value":{"title":"Uppercast the first character","slug":"ucfirst","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/03-string/1-ucfirst","weight":1,"libs":[],"importance":5,"content":"\nWrite a function `ucFirst(str)` that returns the string `str` with the uppercased first character, for instance:\n\n```js\nucFirst(\"john\") == \"John\";\n```","solution":"We can't \"replace\" the first character, because strings in JavaScript are immutable.\n\nBut we can make a new string based on the existing one, with the uppercased first character:\n\n```js\nlet newStr = str[0].toUpperCase() + str.slice(1);\n```\n\nThere's a small problem though. If `str` is empty, then `str[0]` is undefined, so we'll get an error.\n\nThere are two variants here:\n\n1. Use `str.charAt(0)`, as it always returns a string (maybe empty).\n2. Add a test for an empty string.\n\nHere's the 2nd variant:\n\n```js run\nfunction ucFirst(str) {\n  if (!str) return str;\n\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nalert( ucFirst(\"john\") ); // John\n```","parent":"string"}},"check-spam":{"type":"Task","value":{"title":"Check for spam","slug":"check-spam","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/03-string/2-check-spam","weight":2,"libs":[],"importance":5,"content":"\nWrite a function `checkSpam(str)` that returns `true` if `str` contains 'viagra' or 'XXX', otherwise `false.\n\nThe function must be case-insensitive:\n\n```js\ncheckSpam('buy ViAgRA now') == true\ncheckSpam('free xxxxx') == true\ncheckSpam(\"innocent rabbit\") == false\n```","solution":"To make the search case-insensitive, let's bring the stirng to lower case and then search:\n\n```js run\nfunction checkSpam(str) {\n  let lowerStr = str.toLowerCase();\n\n  return lowerStr.includes('viagra') || lowerStr.includes('xxx');\n}\n\nalert( checkSpam('buy ViAgRA now') );\nalert( checkSpam('free xxxxx') );\nalert( checkSpam(\"innocent rabbit\") );\n```","parent":"string"}},"truncate":{"type":"Task","value":{"title":"Truncate the text","slug":"truncate","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/03-string/3-truncate","weight":3,"libs":[],"importance":5,"content":"\nCreate a function `truncate(str, maxlength)` that checks the length of the `str` and, if it exceeds `maxlength` -- replaces the end of `str` with the ellipsis character `\"…\"`, to make its length equal to `maxlength`.\n\nThe result of the function should be the truncated (if needed) string.\n\nFor instance:\n\n```js\ntruncate(\"What I'd like to tell on this topic is:\", 20) = \"What I'd like to te…\"\n\ntruncate(\"Hi everyone!\", 20) = \"Hi everyone!\"\n```","solution":"The maximal length must be `maxlength`, so we need to cut it a little shorter, to give space for the ellipsis.\n\nNote that there is actually a single unicode character for an ellipsis. That's not three dots.\n\n```js run\nfunction truncate(str, maxlength) {\n  return (str.length > maxlength) ? \n    str.slice(0, maxlength - 1) + '…' : str;\n}\n```","parent":"string"}},"extract-currency":{"type":"Task","value":{"title":"Extract the money","slug":"extract-currency","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/03-string/4-extract-currency","weight":4,"libs":[],"importance":4,"content":"\nWe have a cost in the form `\"$120\"`. That is: the dollar sign goes first, and then the number.\n\nCreate a function `extractCurrencyValue(str)` that would extract the numeric value from such string and return it. \n\nThe example:\n\n```js\nalert( extractCurrencyValue('$120') === 120 ); // true\n```","solution":"","parent":"string"}},"array":{"type":"Article","value":{"title":"Arrays","slug":"array","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/04-array/article.md","isFolder":false,"weight":4,"content":"\nObjects allow to store keyed collections of values. That's fine.\n\nBut quite often we find that we need an *ordered collection*, where we have a 1st, a 2nd, a 3rd element and so on. For example, we need that to store a list of something: users, goods, HTML elements etc. \n\nIt is not convenient to use an object here, because it provides no methods to manage the order of elements. We can’t insert a new property “between” the existing ones. Objects are just not meant for such use.\n\nThere exists a special data structure named `Array`, to store ordered collections. \n\n## Declaration\n\nThere are two syntaxes for creating an empty array:\n\n```js\nlet arr = new Array();\nlet arr = [];\n```\n\nAlmost all the time, the second syntax is used. We can supply initial elements in the brackets:\n\n```js\nlet fruits = [\"Apple\", \"Orange\", \"Plum\"];\n```\n\nArray elements are numbered, starting with zero.\n\nWe can get an element by its number in square brackets:\n\n```js run\nlet fruits = [\"Apple\", \"Orange\", \"Plum\"];\n\nalert( fruits[0] ); // Apple\nalert( fruits[1] ); // Orange\nalert( fruits[2] ); // Plum\n```\n\nWe can replace an element:\n\n```js\nfruits[2] = 'Pear'; // now [\"Apple\", \"Orange\", \"Pear\"]\n```\n\n...Or add a new one to the array:\n\n```js\nfruits[3] = 'Lemon'; // now [\"Apple\", \"Orange\", \"Pear\", \"Lemon\"]\n```\n\nThe total count of the elements in the array is its `length`:\n\n```js run\nlet fruits = [\"Apple\", \"Orange\", \"Plum\"];\n\nalert( fruits.length ); // 3\n```\n\nWe can also use `alert` to show the whole array.\n\n```js run\nlet fruits = [\"Apple\", \"Orange\", \"Plum\"];\n\nalert( fruits ); // Apple,Orange,Plum\n```\n\nAn array can store elements of any type.\n\nFor instance:\n\n```js run no-beautify\n// mix of values\nlet arr = [ 'Apple', { name: 'John' }, true, function() { alert('hello'); } ];\n\n// get the object at index 1 and then show its name\nalert( arr[1].name ); // John\n\n// get the function at index 3 and run it\narr[3](); // hello\n```\n\n\n````smart header=\"Trailing comma\"\nAn array, just like an object, may end with a comma:\n```js \nlet fruits = [\n  \"Apple\", \n  \"Orange\", \n  \"Plum\"*!*,*/!*\n];\n```\n\nThe \"trailing comma\" style makes it easier to insert/remove items, because all lines become alike.\n````\n\n\n## Methods pop/push, shift/unshift\n\nA [queue](https://en.wikipedia.org/wiki/Queue_(abstract_data_type)) is one of most common uses of an array. In computer science, this means an ordered collection of elements which supports two operations:\n\n- `push` appends an element to the end.\n- `shift` get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st.\n\n![](queue.png)\n\nArrays support both operations.\n\nIn practice we meet it very often. For example, a queue of messages that need to be shown on-screen.\n\nThere's another use case for arrays -- the data structure named [stack](https://en.wikipedia.org/wiki/Stack_(abstract_data_type)). \n\nIt supports two operations:\n\n- `push` adds an element to the end.\n- `pop` takes an element from the end.\n\nSo new elements are added or taken always from the \"end\".\n\nA stack is usually illustrated as a pack of cards: new cards are added to the top or taken from the top:\n\n![](stack.png)\n\nFor stacks, the latest pushed item is received first, that's also called LIFO (Last-In-First-Out) principle. For queues, we have FIFO (First-In-First-Out).\n\nArrays in JavaScript can work both as a queue and as a stack. They allow to add/remove elements both to/from the beginning or the end. \n\nIn computer science the data structure that allows it is called [deque](https://en.wikipedia.org/wiki/Double-ended_queue).\n\n**Methods that work with the end of the array:**\n\n`pop`\n: Extracts the last element of the array and returns it:\n\n    ```js run\n    let fruits = [\"Apple\", \"Orange\", \"Pear\"];\n\n    alert( fruits.pop() ); // remove \"Pear\" and alert it\n\n    alert( fruits ); // Apple, Orange\n    ```\n\n`push`\n: Append the element to the end of the array:\n\n    ```js run\n    let fruits = [\"Apple\", \"Orange\"];\n\n    fruits.push(\"Pear\");\n\n    alert( fruits ); // Apple, Orange, Pear\n    ```\n\n    The call `fruits.push(...)` is equal to `fruits[fruits.length] = ...`.\n\n**Methods that work with the beginning of the array:**\n\n`shift`\n: Extracts the first element of the array and returns it:\n\n    ```js\n    let fruits = [\"Apple\", \"Orange\", \"Pear\"];\n\n    alert( fruits.shift() ); // remove Apple and alert it\n\n    alert( fruits ); // Orange, Pear\n    ```\n\n`unshift`\n: Add the element to the beginning of the array:\n\n    ```js\n    let fruits = [\"Orange\", \"Pear\"];\n\n    fruits.unshift('Apple');\n\n    alert( fruits ); // Apple, Orange, Pear\n    ```\n\nMethods `push` and `unshift` can add multiple elements at once:\n\n```js run\nlet fruits = [\"Apple\"];\n\nfruits.push(\"Orange\", \"Peach\");\nfruits.unshift(\"Pineapple\", \"Lemon\");\n\n// [\"Pineapple\", \"Lemon\", \"Apple\", \"Orange\", \"Peach\"]\nalert( fruits );\n```\n\n## Internals\n\nAn array is a special kind of object. The square brackets used to access a property `arr[0]` actually come from the object syntax. Numbers are used as keys. \n\nThey extend objects providing special methods to work with ordered collections of data and also the `length` property. But at the core it's still an object.\n\nRemember, there are only 7 basic types in JavaScript. Array is an object and thus behaves like an object. \n\nFor instance, it is copied by reference:\n\n```js run\nlet fruits = [\"Banana\"]\n\nlet arr = fruits; // copy by reference (two variables reference the same array)\n\nalert( arr === fruits ); // true\n \narr.push(\"Pear\"); // modify the array by reference\n\nalert( fruits ); // Banana, Pear - 2 items now\n```\n\n...But what makes arrays really  special is their internal representation. The engine tries to store its elements in the contiguous memory area, one after another, just as depicted on the illustrations in this chapter, and there are other optimizations as well, to make arrays work really fast.\n\nBut they all break if we quit working with an array as with an \"ordered collection\" and start working with it as if it were a regular object.\n\nFor instance, technically we can do this:\n\n```js\nlet fruits = []; // make an array\n\nfruits[99999] = 5; // assign a property with the index far greater than its length\n\nfruits.age = 25; // create a property with an arbitrary name\n```\n\nThat's possible, because arrays are objects at their base. We can add any properties to them.\n\nBut the engine will see that we're working with the array as with a regular object. Array-specific optimizations are not suited for such cases and will be turned off, their benefits disappear.\n\nThe ways to misuse an array:\n\n- Add a non-numeric property like `arr.test = 5`. \n- Make holes, like: add `arr[0]` and then `arr[1000]` (and nothing between them).\n- Fill the array in the reverse order, like `arr[1000]`, `arr[999]` and so on.\n\nPlease think of arrays as special structures to work with the *ordered data*. They provide special methods for that. Arrays are carefully tuned inside JavaScript engines to work with contiguous ordered data, please use them this way. And if you need arbitrary keys, chances are high that you actually require a regular object `{}`.\n\n## Performance\n\nMethods `push/pop` run fast, while `shift/unshift` are slow.\n\n![](array-speed.png)\n\nWhy is it faster to work with the end of an array than with its beginning? Let's see what happens during the execution:\n\n```js\nfruits.shift(); // take 1 element from the start\n```\n\nIt's not enough to take and remove the element with the number `0`. Other elements need to be renumbered as well.\n\nThe `shift` operation must do 3 things:\n\n1. Remove the element with the index `0`.\n2. Move all elements to the left, renumber them from the index `1` to `0`, from `2` to `1` and so on.\n3. Update the `length` property.\n\n![](array-shift.png)\n\n**The more elements in the array, the more time to move them, more in-memory operations.**\n\nThe similar thing happens with `unshift`: to add an element to the beginning of the array, we need first to move existing elements to the right, increasing their indexes.\n\nAnd what's with `push/pop`? They do not need to move anything. To extract an element from the end, the `pop` method cleans the index and shortens `length`.\n\nThe actions for the `pop` operation:\n\n```js\nfruits.pop(); // take 1 element from the end\n```\n\n![](array-pop.png)\n\n**The `pop` method does not need to move anything, because other elements keep their indexes. That's why it's blazingly fast.**\n\nThe similar thing with the `push` method.\n\n## Loops\n\nOne of the oldest ways to cycle array items is the `for` loop over indexes:\n\n```js run\nlet arr = [\"Apple\", \"Orange\", \"Pear\"];\n\n*!*\nfor (let i = 0; i < arr.length; i++) {\n*/!*\n  alert( arr[i] );\n}\n```\n\nBut for arrays there is another form of loop, `for..of`:\n\n```js run\nlet fruits = [\"Apple\", \"Orange\", \"Plum\"];\n\n// iterates over array elements\nfor (let fruit of fruits) {\n  alert( fruit ); \n}\n```\n\nThe `for..of` doesn't give access to the number of the current element, just its value, but in most cases that's enough. And it's shorter.\n\nTechnically, because arrays are objects, it is also possible to use `for..in`:\n\n```js run\nlet arr = [\"Apple\", \"Orange\", \"Pear\"];\n\n*!*\nfor (let key in arr) {\n*/!*\n  alert( arr[key] ); // Apple, Orange, Pear\n}\n```\n\nBut that's actually a bad idea. There are potential problems with it:\n\n1. The loop `for..in` iterates over *all properties*, not only the numeric ones.\n\n    There are so-called \"array-like\" objects in the browser and in other environments, that *look like arrays*. That is, they have `length` and indexes properties, but they may also have other non-numeric properties and methods, which we usually don't need. The `for..in` loop will list them though. So if we need to work with array-like objects, then these \"extra\" properties can become a problem.\n\n2. The `for..in` loop is optimized for generic objects, not arrays, and thus is 10-100 times slower. Of course, it's still very fast. The speedup may matter only in bottlenecks or just irrelevant. But still we should be aware of the difference.\n\nGenerally, we shouldn't use `for..in` for arrays.\n\n\n## A word about \"length\"\n\nThe `length` property automatically updates when we modify the array. To be precise, it is actually not the count of values in the array, but the greatest numeric index plus one.\n\nFor instance, a single element with a large index gives a big length:\n\n```js run\nlet fruits = [];\nfruits[123] = \"Apple\";\n\nalert( fruits.length ); // 124\n```\n\nNote that we usually don't use arrays like that. \n\nAnother interesting thing about the `length` property is that it's writable.\n\nIf we increase it manually, nothing interesting happens. But if we decrease it, the array is truncated. The process is irreversible, here's the example:\n\n```js run\nlet arr = [1, 2, 3, 4, 5];\n\narr.length = 2; // truncate to 2 elements\nalert( arr ); // [1, 2]\n\narr.length = 5; // return length back\nalert( arr[3] ); // undefined: the values do not return\n```\n\nSo, the simplest way to clear the array is: `arr.length = 0;`.\n\n\n## new Array() [#new-array]\n\nThere is one more syntax to create an array:\n\n```js\nlet arr = *!*new Array*/!*(\"Apple\", \"Pear\", \"etc\");\n```\n\nIt's rarely used, because square brackets `[]` are shorter. Also there's a tricky feature with it.\n\nIf `new Array` is called with a single argument which is a number, then it creates an array *without items, but with the given length*.\n\nLet's see how one can shoot himself in the foot:\n\n```js run\nlet arr = new Array(2); // will it create an array of [2] ?\n\nalert( arr[0] ); // undefined! no elements.\n\nalert( arr.length ); // length 2\n```\n\nIn the code above, `new Array(number)` has all elements `undefined`.\n\nTo evade such surprises, we usually use square brackets, unless we really know what we're doing.\n\n## Multidimensional arrays\n\nArrays can have items that are also arrays. We can use it for multidimensional arrays, to store matrices:\n\n```js run\nlet matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nalert( matrix[1][1] ); // the central element\n```\n\n## toString\n\nArrays have their own implementation of `toString` method that returns a comma-separated list of elements.\n\nFor instance:\n\n\n```js run\nlet arr = [1, 2, 3];\n\nalert( arr ); // 1,2,3\nalert( String(arr) === '1,2,3' ); // true\n```\n\nAlso, let's try this:\n\n```js run\nalert( [] + 1 ); // \"1\"\nalert( [1] + 1 ); // \"11\"\nalert( [1,2] + 1 ); // \"1,21\"\n```\n\nArrays do not have `Symbol.toPrimitive`, neither a viable `valueOf`, they implement only `toString` conversion, so here `[]` becomes an empty string, `[1]` becomes `\"1\"` and `[1,2]` becomes `\"1,2\"`.\n\nWhen the binary plus `\"+\"` operator adds something to a string, it converts it to a string as well, so the next step looks like this:\n\n```js run\nalert( \"\" + 1 ); // \"1\"\nalert( \"1\" + 1 ); // \"11\"\nalert( \"1,2\" + 1 ); // \"1,21\"\n```\n\n## Summary\n\nArray is a special kind of objects, suited to store and manage ordered data items.\n\n- The declaration:\n\n    ```js\n    // square brackets (usual)\n    let arr = [item1, item2...];\n\n    // new Array (exceptionally rare)\n    let arr = new Array(item1, item2...);\n    ```\n\n    The call to `new Array(number)` creates an array with the given length, but without elements.\n\n- The `length` property is the array length or, to be precise, its last numeric index plus one. It is auto-adjusted by array methods. \n- If we shorten `length` manually, the array is truncated.\n\nWe can use an array as a deque with the following operations:\n\n- `push(...items)` adds `items` to the end.\n- `pop()` removes the element from the end and returns it.\n- `shift()` removes the element from the beginning and returns it.\n- `unshift(...items)` adds items to the beginning.\n\nTo loop over the elements of the array:\n  - `for (let i=0; i<arr.length; i++)` -- works fastest, old-browser-compatible.\n  - `for (let item of arr)` -- the modern syntax for items only,\n  - `for (let i in arr)` -- never use.\n\nWe will return to arrays and study more methods to add, remove, extract elements and sort arrays in the chapter <info:array-methods>.","libs":[],"children":["item-value","create-array","call-array-this","array-input-sum","maximal-subarray"],"parent":"data-types"}},"item-value":{"type":"Task","value":{"title":"Is array copied?","slug":"item-value","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/04-array/1-item-value","weight":1,"libs":[],"importance":3,"content":"\nWhat is this code going to show?\n\n```js\nlet fruits = [\"Apples\", \"Pear\", \"Orange\"];\n\n// push a new value into the \"copy\"\nlet shoppingCart = fruits;\nshoppingCart.push(\"Banana\");\n\n// what's in fruits?\nalert( fruits.length ); // ?\n```","solution":"The result is `4`:\n\n\n```js run\nlet fruits = [\"Apples\", \"Pear\", \"Orange\"];\n\nlet shoppingCart = fruits;\n\nshoppingCart.push(\"Banana\");\n\n*!*\nalert( fruits.length ); // 4\n*/!*\n```\n\nThat's because arrays are objects. So both `shoppingCart` and `fruits` are the references to the same array.","parent":"array"}},"maximal-subarray":{"type":"Task","value":{"title":"A maximal subarray","slug":"maximal-subarray","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/04-array/10-maximal-subarray","weight":10,"libs":[],"importance":2,"content":"\nThe input is an array of numbers, e.g. `arr = [1, -2, 3, 4, -9, 6]`.\n\nThe task is: find the contiguous subarray of `arr` with the maximal sum of items.\n\nWrite the function `getMaxSubSum(arr)` that will find return that sum.\n\nFor instance: \n\n```js\ngetMaxSubSum([-1, *!*2, 3*/!*, -9]) = 5 (the sum of highlighted items)\ngetMaxSubSum([*!*2, -1, 2, 3*/!*, -9]) = 6\ngetMaxSubSum([-1, 2, 3, -9, *!*11*/!*]) = 11\ngetMaxSubSum([-2, -1, *!*1, 2*/!*]) = 3\ngetMaxSubSum([*!*100*/!*, -9, 2, -3, 5]) = 100\ngetMaxSubSum([*!*1, 2, 3*/!*]) = 6 (take all)\n```\n\nIf all items are negative, it means that we take none (the subarray is empty), so the sum is zero:\n\n```js\ngetMaxSubSum([-1, -2, -3]) = 0\n```\n\nPlease try to think of a fast solution: [O(n<sup>2</sup>)](https://en.wikipedia.org/wiki/Big_O_notation) or even O(n) if you can.","solution":"# The slow solution\n\nWe can calculate all possible subsums.\n\nThe simplest way is to take every element and calculate sums of all subarrays starting from it.\n\nFor instance, for `[-1, 2, 3, -9, 11]`:\n\n```js no-beautify\n// Starting from -1:\n-1\n-1 + 2\n-1 + 2 + 3\n-1 + 2 + 3 + (-9)\n-1 + 2 + 3 + (-9) + 11\n\n// Starting from 2:\n2\n2 + 3\n2 + 3 + (-9)\n2 + 3 + (-9) + 11\n\n// Starting from 3:\n3\n3 + (-9)\n3 + (-9) + 11\n\n// Starting from -9\n-9\n-9 + 11\n\n// Starting from -11\n-11\n```\n\nThe code is actually a nested loop: the external loop over array elements, and the internal counts subsums starting with the current element.\n\n```js run\nfunction getMaxSubSum(arr) {\n  let maxSum = 0; // if we take no elements, zero will be returned\n\n  for (let i = 0; i < arr.length; i++) {\n    let sumFixedStart = 0;\n    for (let j = i; j < arr.length; j++) {\n      sumFixedStart += arr[j];\n      maxSum = Math.max(maxSum, sumFixedStart);\n    }\n  }\n\n  return maxSum;\n}\n\nalert( getMaxSubSum([-1, 2, 3, -9]) ); // 5\nalert( getMaxSubSum([-1, 2, 3, -9, 11]) ); // 11\nalert( getMaxSubSum([-2, -1, 1, 2]) ); // 3\nalert( getMaxSubSum([1, 2, 3]) ); // 6\nalert( getMaxSubSum([100, -9, 2, -3, 5]) ); // 100\n```\n\nThe solution has a time complexety of [O(n<sup>2</sup>)](https://en.wikipedia.org/wiki/Big_O_notation). In other words, if we increase the array size 2 times, the algorithm will work 4 times longer.\n\nFor big arrays (1000, 10000 or more items) such algorithms can lead to a seroius sluggishness.\n\n# Fast solution\n\nLet's walk the array and keep the current partial sum of elements in the variable `s`. If `s` becomes negative at some point, then assign `s=0`. The maximum of all such `s` will be the answer.\n\nIf the description is too vague, please see the code, it's short enough:\n\n```js run\nfunction getMaxSubSum(arr) {\n  let maxSum = 0;\n  let partialSum = 0;\n\n  for (let item of arr) { // for each item of arr\n    partialSum += item; // add it to partialSum\n    maxSum = Math.max(maxSum, partialSum); // remember the maximum\n    if (partialSum < 0) partialSum = 0; // zero if negative\n  }\n\n  return maxSum;\n}\n\nalert( getMaxSubSum([-1, 2, 3, -9]) ); // 5\nalert( getMaxSubSum([-1, 2, 3, -9, 11]) ); // 11\nalert( getMaxSubSum([-2, -1, 1, 2]) ); // 3\nalert( getMaxSubSum([100, -9, 2, -3, 5]) ); // 100\nalert( getMaxSubSum([1, 2, 3]) ); // 6\nalert( getMaxSubSum([-1, -2, -3]) ); // 0\n```\n\nThe algorithm requires exactly 1 array pass, so the time complexity is O(n).\n\nYou can find more detail information about the algorithm here: [Maximum subarray problem](http://en.wikipedia.org/wiki/Maximum_subarray_problem). If it's still not obvious why that works, then please trace the algorithm on the examples above, see how it works, that's better than any words.","parent":"array"}},"create-array":{"type":"Task","value":{"title":"Array operations.","slug":"create-array","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/04-array/2-create-array","weight":2,"libs":[],"importance":5,"content":"\nLet's try 5 array operations.\n\n1. Create an array `styles` with items \"Jazz\" and \"Blues\".\n2. Append \"Rock-n-Roll\" to the end.\n3. Replace the value in the middle by \"Classics\". Your code for finding the middle value should work for any arrays with odd length.\n4. Strip off the first value of the array and show it.\n5. Prepend `Rap` and `Reggae` to the array.\n\nThe array in the process:\n\n```js no-beautify\nJazz, Blues\nJazz, Bues, Rock-n-Roll\nJazz, Classics, Rock-n-Roll\nClassics, Rock-n-Roll\nRap, Reggae, Classics, Rock-n-Roll\n```","solution":"```js run\nlet styles = [\"Jazz\", \"Blues\"];\nstyles.push(\"Rock-n-Roll\");\nstyles[Math.floor((styles.length - 1) / 2)] = \"Classics\";\nalert( styles.shift() );\nstyles.unshift(\"Rap\", \"Reggie\");\n```","parent":"array"}},"call-array-this":{"type":"Task","value":{"title":"Calling in an array context","slug":"call-array-this","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/04-array/3-call-array-this","weight":3,"libs":[],"importance":5,"content":"\nWhat is the result? Why?\n\n```js\nlet arr = [\"a\", \"b\"];\n\narr.push(function() {\n  alert( this );\n})\n\narr[2](); // ?\n```","solution":"The call `arr[2]()` is syntactically the good old `obj[method]()`, in the role of `obj` we have `arr`, and in the role of `method` we have `2`.\n\nSo we have a call of the function `arr[2]` as an object method. Naturally, it receives `this` referencing the object `arr` and outputs the array:\n\n```js run\nlet arr = [\"a\", \"b\"];\n\narr.push(function() {\n  alert( this );\n})\n\narr[2](); // \"a\",\"b\",function\n```\n\nThe array has 3 values: initially it had two, plus the function.","parent":"array"}},"array-input-sum":{"type":"Task","value":{"title":"Sum input numbers","slug":"array-input-sum","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/04-array/5-array-input-sum","weight":5,"libs":[],"importance":4,"content":"\nWrite the function `sumInput()` that:\n\n- Asks the user for values using `prompt` and stores the values in the array.\n- Finishes asking when the user enters a non-numeric value, an empty string, or presses \"Cancel\".\n- Calculates and returns the sum of array items.\n\nP.S. A zero `0` is a valid number, please don't stop the input on zero.\n\n[demo]","solution":"Please note the subtle, but important detail of the solution. We don't convert `value` to number instantly after `prompt`, because after `value = +value` we would not be able to tell an empty string (stop sign) from the zero (valid number). We do it later instead.\n\n\n```js run demo\nfunction sumInput() {\n \n  let numbers = [];\n\n  while (true) {\n\n    let value = prompt(\"A number please?\", 0);\n\n    // should we cancel?\n    if (value === \"\" || value === null || !isFinite(value)) break;\n\n    numbers.push(+value);\n  }\n\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number;\n  }\n  return sum;\n}\n\nalert( sumInput() ); \n```","parent":"array"}},"array-methods":{"type":"Article","value":{"title":"Array methods","slug":"array-methods","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/article.md","isFolder":false,"weight":5,"content":"\nArrays provide a lot of methods. To make things easier, in this chapter they are split into groups.\n\n## Add/remove items\n\nWe already know methods that add and remove items from the beginning or the end:\n\n- `arr.push(...items)` -- adds items to the end,\n- `arr.pop()` -- extracts an item from the end,\n- `arr.shift()` -- extracts an item from the beginning,\n- `arr.unshift(...items)` -- adds items to the beginning.\n\nHere are few others.\n\n### splice\n\nHow to delete an element from the array?\n\nThe arrays are objects, so we can try to use `delete`:\n\n```js run\nlet arr = [\"I\", \"go\", \"home\"];\n\ndelete arr[1]; // remove \"go\"\n\nalert( arr[1] ); // undefined\n\n// now arr = [\"I\",  , \"home\"];\nalert( arr.length ); // 3\n```\n\nThe element was removed, but the array still has 3 elements, we can see that `arr.length == 3`.\n\nThat's natural, because `delete obj.key` removes a value by the `key`. It's all it does. Fine for objects. But for arrays we usually want the rest of elements to shift and occupy the freed place. We expect to have a shorter array now.\n\nSo, special methods should be used.\n\nThe [arr.splice(str)](mdn:js/Array/splice) method is a swiss army knife for arrays. It can do everything: add, remove and insert elements.\n\nThe syntax is:\n\n```js\narr.splice(index[, deleteCount, elem1, ..., elemN])\n```\n\nIt starts from the position `index`: removes `deleteCount` elements and then inserts `elem1, ..., elemN` at their place. Returns the array of removed elements.\n\nThis method is easy to grasp by examples.\n\nLet's start with the deletion:\n\n```js run\nlet arr = [\"I\", \"study\", \"JavaScript\"];\n\n*!*\narr.splice(1, 1); // from index 1 remove 1 element\n*/!*\n\nalert( arr ); // [\"I\", \"JavaScript\"]\n```\n\nEasy, right? Starting from the index `1` it removed `1` element.\n\nIn the next example we remove 3 elements and replace them with the other two:\n\n```js run\nlet arr = [*!*\"I\", \"study\", \"JavaScript\",*/!* \"right\", \"now\"];\n\n// remove 3 first elements and replace them with another\narr.splice(0, 3, \"Let's\", \"dance\");\n\nalert( arr ) // now [*!*\"Let's\", \"dance\"*/!*, \"right\", \"now\"]\n```\n\nHere we can see that `splice` returns the array of removed elements:\n\n```js run\nlet arr = [*!*\"I\", \"study\",*/!* \"JavaScript\", \"right\", \"now\"];\n\n// remove 2 first elements\nlet removed = arr.splice(0, 2);\n\nalert( removed ); // \"I\", \"study\" <-- array of removed elements\n```\n\nThe `splice` method is also able to insert the elements without any removals. For that we need to set `deleteCount` to `0`:\n\n```js run\nlet arr = [\"I\", \"study\", \"JavaScript\"];\n\n// from index 2\n// delete 0\n// then insert \"complex\" and \"language\"\narr.splice(2, 0, \"complex\", \"language\");\n\nalert( arr ); // \"I\", \"study\", \"complex\", \"language\", \"JavaScript\"\n```\n\n````smart header=\"Negative indexes allowed\"\nHere and in other array methods, negative indexes are allowed. They specify the position from the end of the array, like here:\n\n```js run\nlet arr = [1, 2, 5];\n\n// from index -1 (one step from the end)\n// delete 0 elements,\n// then insert 3 and 4\narr.splice(-1, 0, 3, 4);\n\nalert( arr ); // 1,2,3,4,5\n```\n````\n\n### slice\n\nThe method [arr.slice](mdn:js/Array/slice) is much simpler than similar-looking `arr.splice`.\n\nThe syntax is:\n\n```js\narr.slice(start, end)\n```\n\nIt returns a new array where it copies all items start index `\"start\"` to `\"end\"` (not including `\"end\"`). Both `start` and `end` can be negative, in that case position from array end is assumed.\n\nIt works like `str.slice`, but makes subarrays instead of substrings.\n\nFor instance:\n\n```js run\nlet str = \"test\";\nlet arr = [\"t\", \"e\", \"s\", \"t\"];\n\nalert( str.slice(1, 3) ); // es\nalert( arr.slice(1, 3) ); // e,s\n\nalert( str.slice(-2) ); // st\nalert( arr.slice(-2) ); // s,t\n```\n\n### concat\n\nThe method [arr.concat](mdn:js/Array/concat) joins the array with other arrays and/or items.\n\nThe syntax is:\n\n```js\narr.concat(arg1, arg2...)\n```\n\nIt accepts any number of arguments -- either arrays or values.\n\nThe result is a new array containing items from `arr`, then `arg1`, `arg2` etc.\n\nIf an argument is an array or has `Symbol.isConcatSpreadable` property, then all its elements are copied. Otherwise, the argument itself is copied.\n\nFor instance:\n\n```js run\nlet arr = [1, 2];\n\n// merge arr with [3,4]\nalert( arr.concat([3, 4])); // 1,2,3,4\n\n// merge arr with [3,4] and [5,6]\nalert( arr.concat([3, 4], [5, 6])); // 1,2,3,4,5,6\n\n// merge arr with [3,4], then add values 5 and 6\nalert( arr.concat([3, 4], 5, 6)); // 1,2,3,4,5,6\n```\n\nNormally, it only copies elements from arrays (\"spreads\" them). Other objects, even if they look like arrays, added as a whole:\n\n```js run\nlet arr = [1, 2];\n\nlet arrayLike = {\n  0: \"something\",\n  length: 1\n};\n\nalert( arr.concat(arrayLike) ); // 1,2,[object Object]\n//[1, 2, arrayLike]\n```\n\n...But if an array-like object has `Symbol.isConcatSpreadable` property, then its elements are added instead:\n\n```js run\nlet arr = [1, 2];\n\nlet arrayLike = {\n  0: \"something\",\n  1: \"else\",\n*!*\n  [Symbol.isConcatSpreadable]: true,\n*/!*\n  length: 2\n};\n\nalert( arr.concat(arrayLike) ); // 1,2,something,else\n```\n\n## Searching in array\n\nThese are methods to search for something in an array.\n\n### indexOf/lastIndexOf and includes\n\nThe methods [arr.indexOf](mdn:js/Array/indexOf), [arr.lastIndexOf](mdn:js/Array/lastIndexOf) and [arr.includes](mdn:js/Array/includes) have the same syntax and do essentially the same as their string counterparts, but operate on items instead of characters:\n\n- `arr.indexOf(item, from)` looks for `item` starting from index `from`, and returns the index where it was found, otherwise `-1`.\n- `arr.lastIndexOf(item, from)` -- same, but looks from right to left.\n- `arr.includes(item, from)` -- looks for `item` starting from index `from`, returns `true` if found.\n\nFor instance:\n\n```js run\nlet arr = [1, 0, false];\n\nalert( arr.indexOf(0) ); // 1\nalert( arr.indexOf(false) ); // 2\nalert( arr.indexOf(null) ); // -1\n\nalert( arr.includes(1) ); // true\n```\n\nNote that the methods use `===` comparison. So, if we look for `false`, it finds exactly `false` and not the zero.\n\nIf we want to check for inclusion, and don't want to know the exact index, then `arr.includes` is preferred.\n\nAlso, a very minor difference of `includes` is that it correctly handles `NaN`, unlike `indexOf/lastIndexOf`:\n\n```js run\nconst arr = [NaN];\nalert( arr.indexOf(NaN) ); // -1 (should be 0, but === equality doesn't work for NaN)\nalert( arr.includes(NaN) );// true (correct)\n```\n\n### find and findIndex\n\nImagine we have an array of objects. How do we find an object with the specific condition?\n\nHere the [arr.find](mdn:js/Array/find) method comes in handy.\n\nThe syntax is:\n```js\nlet result = arr.find(function(item, index, array) {\n  // should return true if the item is what we are looking for\n});\n```\n\nThe function is called repetitively for each element of the array:\n\n- `item` is the element.\n- `index` is its index.\n- `array` is the array itself.\n\nIf it returns `true`, the search is stopped, the `item` is returned. If nothing found, `undefined` is returned.\n\nFor example, we have an array of users, each with the fields `id` and `name`. Let's find the one with `id == 1`:\n\n```js run\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\n\nlet user = users.find(item => item.id == 1);\n\nalert(user.name); // John\n```\n\nIn real life arrays of objects is a common thing, so the `find` method is very useful.\n\nNote that in the example we provide to `find` a single-argument function `item => item.id == 1`. Other parameters of `find` are rarely used.\n\nThe [arr.findIndex](mdn:js/Array/findIndex) method is essentially the same, but it returns the index where the element was found instead of the element itself.\n\n### filter\n\nThe `find` method looks for a single (first) element that makes the function return `true`.\n\nIf there may be many, we can use [arr.filter(fn)](mdn:js/Array/filter).\n\nThe syntax is roughly the same as `find`, but it returns an array of matching elements:\n\n```js\nlet results = arr.filter(function(item, index, array) {\n  // should return true if the item passes the filter\n});\n```\n\nFor instance:\n\n```js run\nlet users = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Pete\"},\n  {id: 3, name: \"Mary\"}\n];\n\n// returns array of the first two users\nlet someUsers = users.filter(item => item.id < 3);\n\nalert(someUsers.length); // 2\n```\n\n## Transform an array\n\nThis section is about the methods transforming or reordering the array.\n\n\n### map\n\nThe [arr.map](mdn:js/Array/map) method is one of the most useful and often used.\n\nThe syntax is:\n\n```js\nlet result = arr.map(function(item, index, array) {\n  // returns the new value instead of item\n})\n```\n\nIt calls the function for each element of the array and returns the array of results.\n\nFor instance, here we transform each element into its length:\n\n```js run\nlet lengths = [\"Bilbo\", \"Gandalf\", \"Nazgul\"].map(item => item.length)\nalert(lengths); // 5,7,6\n```\n\n### sort(fn)\n\nThe method [arr.sort](mdn:js/Array/sort) sorts the array *in place*.\n\nFor instance:\n\n```js run\nlet arr = [ 1, 2, 15 ];\n\n// the method reorders the content of arr (and returns it)\narr.sort();\n\nalert( arr );  // *!*1, 15, 2*/!*\n```\n\nDid you notice anything strange in the outcome?\n\nThe order became `1, 15, 2`. Incorrect. But why?\n\n**The items are sorted as strings by default.**\n\nLiterally, all elements are converted to strings and then compared. So, the lexicographic ordering is applied and indeed `\"2\" > \"15\"`.\n\nTo use our own sorting order, we need to supply a function of two arguments as the argument of `arr.sort()`.\n\nThe function should work like this:\n```js\nfunction compare(a, b) {\n  if (a > b) return 1;\n  if (a == b) return 0;\n  if (a < b) return -1;\n}\n```\n\nFor instance:\n\n```js run\nfunction compareNumeric(a, b) {\n  if (a > b) return 1;\n  if (a == b) return 0;\n  if (a < b) return -1;\n}\n\nlet arr = [ 1, 2, 15 ];\n\n*!*\narr.sort(compareNumeric);\n*/!*\n\nalert(arr);  // *!*1, 2, 15*/!*\n```\n\nNow it works as intended.\n\nLet's step aside and think what's happening. The `arr` can be array of anything, right? It may contain numbers or strings or html elements or whatever. We have a set of *something*. To sort it, we need an *ordering function* that knows how to compare its elements. The default is a string order.\n\nThe `arr.sort(fn)` method has a built-in implementation of sorting algorithm. We don't need to care how it exactly works (an optimized [quicksort](https://en.wikipedia.org/wiki/Quicksort) most of the time). It will walk the array, compare its elements using the provided function and reorder them, all we need is to provide the `fn` which does the comparison.\n\nBy the way, if we ever want to know which elements are compared -- nothing prevents from alerting them:\n\n```js run\n[1, -2, 15, 2, 0, 8].sort(function(a, b) {\n  alert( a + \" <> \" + b );\n});\n```\n\nThe algorithm may compare an element multiple times in the process, but it tries to make as few comparisons as possible.\n\n\n````smart header=\"A comparison function may return any number\"\nActually, a comparison function is only required to return a positive number to say \"greater\" and a negative number to say \"less\".\n\nThat allows to write shorter functions:\n\n```js run\nlet arr = [ 1, 2, 15 ];\n\narr.sort(function(a, b) { return a - b; });\n\nalert(arr);  // *!*1, 2, 15*/!*\n```\n````\n\n````smart header=\"Arrow functions for the best\"\nRemember [arrow functions](info:function-expression#arrow-functions)? We can use them here for neater sorting:\n\n```js\narr.sort( (a, b) => a - b );\n```\n\nThis works exactly the same as the other, longer, version above.\n````\n\n### reverse\n\nThe method [arr.reverse](mdn:js/Array/reverse) reverses the order of elements in `arr`.\n\nFor instance:\n\n```js run\nlet arr = [1, 2, 3, 4, 5];\narr.reverse();\n\nalert( arr ); // 5,4,3,2,1\n```\n\nIt also returns the array `arr` after the reversal.\n\n### split and join\n\nHere's the situation from the real life. We are writing a messaging app, and the person enters the comma-delimited list of receivers: `John, Pete, Mary`. But for us an array of names would be much more comfortable than a single string. How to get it?\n\nThe [str.split(delim)](mdn:js/String/split) method does exactly that. It splits the string into an array by the given delimiter `delim`.\n\nIn the example below, we split by a comma followed by space:\n\n```js run\nlet names = 'Bilbo, Gandalf, Nazgul';\n\nlet arr = names.split(', ');\n\nfor (let name of arr) {\n  alert( `A message to ${name}.` ); // A message to Bilbo  (and other names)\n}\n```\n\nThe `split` method has an optional second numeric argument -- a limit on the array length. If it is provided, then the extra elements are ignored. In practice it is rarely used though:\n\n```js run\nlet arr = 'Bilbo, Gandalf, Nazgul, Saruman'.split(', ', 2);\n\nalert(arr); // Bilbo, Gandalf\n```\n\n````smart header=\"Split into letters\"\nThe call to `split(s)` with an empty `s` would split the string into an array of letters:\n\n```js run\nlet str = \"test\";\n\nalert( str.split('') ); // t,e,s,t\n```\n````\n\nThe call [arr.join(str)](mdn:js/Array/join) does the reverse to `split`. It creates a string of `arr` items glued by `str` between them.\n\nFor instance:\n\n```js run\nlet arr = ['Bilbo', 'Gandalf', 'Nazgul'];\n\nlet str = arr.join(';');\n\nalert( str ); // Bilbo;Gandalf;Nazgul\n```\n\n### reduce/reduceRight\n\nWhen we need to iterate over an array -- we can use `forEach`.\n\nWhen we need to iterate and return the data for each element -- we can use `map`.\n\nThe methods [arr.reduce](mdn:js/Array/reduce) and [arr.reduceRight](mdn:js/Array/reduceRight) also belong to that breed, but are a little bit more intricate. They are used to calculate a single value based on the array.\n\nThe syntax is:\n\n```js\nlet value = arr.reduce(function(previousValue, item, index, arr) {\n  // ...\n}, initial);\n```\n\nThe function is applied to the elements. You may notice the familiar arguments, starting from the 2nd:\n\n- `item` -- is the current array item.\n- `index` -- is its position.\n- `arr` -- is the array.\n\nSo far, like `forEach/map`. But there's one more argument:\n\n- `previousValue` -- is the result of the previous function call, `initial` for the first call.\n\nThe easiest way to grasp that is by example.\n\nHere we get a sum of array in one line:\n\n```js run\nlet arr = [1, 2, 3, 4, 5];\n\nlet result = arr.reduce((sum, current) => sum + current, 0);\n\nalert(result); // 15\n```\n\nHere we used the most common variant of `reduce` which uses only 2 arguments.\n\nLet's see the details of what's going on.\n\n1. On the first run, `sum` is the initial value (the last argument of `reduce`), equals `0`, and `current` is the first array element, equals `1`. So the result is `1`.\n2. On the second run, `sum = 1`, we add the second array element (`2`) to it and return.\n3. On the 3rd run, `sum = 3` and we add one more element to it, and so on...\n\nThe calculation flow:\n\n![](reduce.png)\n\nOr in the form of a table, where each row represents is a function call on the next array element:\n\n|   |`sum`|`current`|`result`|\n|---|-----|---------|---------|\n|the first call|`0`|`1`|`1`|\n|the second call|`1`|`2`|`3`|\n|the third call|`3`|`3`|`6`|\n|the fourth call|`6`|`4`|`10`|\n|the fifth call|`10`|`5`|`15`|\n\n\nAs we can see, the result of the previous call becomes the first argument of the next one.\n\nWe also can omit the initial value:\n\n```js run\nlet arr = [1, 2, 3, 4, 5];\n\n// removed initial value from reduce (no 0)\nlet result = arr.reduce((sum, current) => sum + current);\n\nalert( result ); // 15\n```\n\nThe result is the same. That's because if there's no initial, then `reduce` takes the first element of the array as the initial value and starts the iteration from the 2nd element.\n\nThe calculation table is the same as above, minus the first row.\n\nBut such use requires an extreme care. If the array is empty, then `reduce` call without initial value gives an error.\n\nHere's an example:\n\n```js run\nlet arr = [];\n\n// Error: Reduce of empty array with no initial value\n// if the initial value existed, reduce would return it for the empty arr.\narr.reduce((sum, current) => sum + current);\n```\n\n\nSo it's advised to always specify the initial value.\n\nThe method [arr.reduceRight](mdn:js/Array/reduceRight) does the same, but goes from right to left.\n\n\n## Iterate: forEach\n\nThe [arr.forEach](mdn:js/Array/forEach) method allows to run a function for every element of the array.\n\nThe syntax:\n```js\narr.forEach(function(item, index, array) {\n  // ... do something with item\n});\n```\n\nFor instance, this shows each element of the array:\n\n```js run\n// for each element call alert\n[\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach(alert);\n```\n\nAnd this code is more elaborate about their positions in the target array:\n\n```js run\n[\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach((item, index, array) => {\n  alert(`${item} is at index ${index} in ${array}`);\n});\n```\n\nThe result of the function (if it returns any) is thrown away and ignored.\n\n## Array.isArray\n\nArrays do not form a separate language type. They are based on objects.\n\nSo `typeof` does not help to distinguish a plain object from an array:\n\n```js run\nalert(typeof {}); // object\nalert(typeof []); // same\n```\n\n...But arrays are used so often that there's a special method for that: [Array.isArray(value)](mdn:js/Array/isArray). It returns `true` if the `value` is an array, and `false` otherwise.\n\n```js run\nalert(Array.isArray({})); // false\n\nalert(Array.isArray([])); // true\n```\n\n## Most methods support \"thisArg\"\n\nAlmost all array methods that call functions -- like `find`, `filter`, `map`, with a notable exception of `sort`, accept an optional additional parameter `thisArg`.\n\nThat parameter is not explained in the sections above, because it's rarely used. But for completeness we have to cover it.\n\nHere's the full syntax of these methods:\n\n```js\narr.find(func, thisArg);\narr.filter(func, thisArg);\narr.map(func, thisArg);\n// ...\n// thisArg is the optional last argument\n```\n\nThe value of `thisArg` parameter becomes `this` for `func`.\n\nFor instance, here we use an object method as a filter and `thisArg` comes in handy:\n\n```js run\nlet user = {\n  age: 18,\n  younger(otherUser) {\n    return otherUser.age < this.age;\n  }\n};\n\nlet users = [\n  {age: 12},\n  {age: 16},\n  {age: 32}\n];\n\n*!*\n// find all users younger than user\nlet youngerUsers = users.filter(user.younger, user);\n*/!*\n\nalert(youngerUsers.length); // 2\n```\n\nIn the call above, we use `user.younger` as a filter and also provide `user` as the context for it. If we didn't provide the context, `users.filter(user.younger)` would call `user.younger` as a standalone function, with `this=undefined`. That would mean an instant error.\n\n## Summary\n\nA cheatsheet of array methods:\n\n- To add/remove elements:\n  - `push(...items)` -- adds items to the end,\n  - `pop()` -- extracts an item from the end,\n  - `shift()` -- extracts an item from the beginning,\n  - `unshift(...items)` -- adds items to the beginning.\n  - `splice(pos, deleteCount, ...items)` -- at index `pos` delete `deleteCount` elements and insert `items`.\n  - `slice(start, end)` -- creates a new array, copies elements from position `start` till `end` (not inclusive) into it.\n  - `concat(...items)` -- returns a new array: copies all members of the current one and adds `items` to it. If any of `items` is an array, then its elements are taken.\n\n- To search among elements:\n  - `indexOf/lastIndexOf(item, pos)` -- look for `item` starting from position `pos`, return the index or `-1` if not found.\n  - `includes(value)` -- returns `true` if the array has `value`, otherwise `false`.\n  - `find/filter(func)` -- filter elements through the function, return first/all values that make it return `true`.\n  - `findIndex` is like `find`, but returns the index instead of a value.\n\n- To transform the array:\n  - `map(func)` -- creates a new array from results of calling `func` for every element.\n  - `sort(func)` -- sorts the array in-place, then returns it.\n  - `reverse()` -- reverses the array in-place, then returns it.\n  - `split/join` -- convert a string to array and back.\n  - `reduce(func, initial)` -- calculate a single value over the array by calling `func` for each element and passing an intermediate result between the calls.\n\n- To iterate over elements:\n  - `forEach(func)` -- calls `func` for every element, does not return anything.\n\n- Additionally:\n  - `Array.isArray(arr)` checks `arr` for being an array.\n\nPlease note that methods `sort`, `reverse` and `splice` modify the array itself.\n\nThese methods are the most used ones, they cover 99% of use cases. But there are few others:\n\n- [arr.some(fn)](mdn:js/Array/some)/[arr.every(fn)](mdn:js/Array/every) checks the array.\n\n  The function `fn` is called on each element of the array similar to `map`. If any/all results are `true`, returns `true`, otherwise `false`.\n\n- [arr.fill(value, start, end)](mdn:js/Array/fill) -- fills the array with repeating `value` from index `start` to `end`.\n\n- [arr.copyWithin(target, start, end)](mdn:js/Array/copyWithin) -- copies its elements from position `start` till position `end` into *itself*, at position `target` (overwrites existing).\n\nFor the full list, see the [manual](mdn:js/Array).\n\nFrom the first sight it may seem that there are so many methods, quite difficult to remember. But actually that's much easier than it seems.\n\nLook through the cheatsheet just to be aware of them. Then solve the tasks of this chapter to practice, so that you have experience with array methods.\n\nAfterwards whenever you need to do something with an array, and you don't know how -- come here, look at the cheatsheet and find the right method. Examples will help you to write it correctly. Soon you'll automatically remember the methods, without specific efforts from your side.","libs":[],"children":["camelcase","filter-range","filter-range-in-place","sort-back","copy-sort-array","array-get-names","map-objects","sort-objects","shuffle","average-age","array-unique"],"parent":"data-types"}},"camelcase":{"type":"Task","value":{"title":"Translate border-left-width to borderLeftWidth","slug":"camelcase","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/1-camelcase","weight":1,"libs":[],"importance":5,"content":"\nWrite the function `camelize(str)` that changes dash-separated words like \"my-short-string\" into camel-cased \"myShortString\".\n\nThat is: removes all dashes, each word after dash becomes uppercased.\n\nExamples:\n\n```js\ncamelize(\"background-color\") == 'backgroundColor';\ncamelize(\"list-style-image\") == 'listStyleImage';\ncamelize(\"-webkit-transition\") == 'WebkitTransition';\n```\n\nP.S. Hint: use `split` to split the string into an array, transform it and `join` back.","solution":"","parent":"array-methods"}},"average-age":{"type":"Task","value":{"title":"Get average age","slug":"average-age","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/10-average-age","weight":10,"libs":[],"importance":4,"content":"\nWrite the function `getAverageAge(users)` that gets an array of objects with property `age` and gets the average.\n\nThe formula for the average is `(age1 + age2 + ... + ageN) / N`.\n\nFor instance:\n\n```js no-beautify\nlet john = { name: \"John\", age: 25 };\nlet pete = { name: \"Pete\", age: 30 };\nlet mary = { name: \"Mary\", age: 29 };\n\nlet arr = [ john, pete, mary ];\n\nalert( getAverageAge(arr) ); // (25 + 30 + 29) / 3 = 28\n```","solution":"```js run\nfunction getAverageAge(users) {\n  return users.reduce((prev, user) => prev + user.age, 0) / users.length;\n}\n\nlet john = { name: \"John\", age: 25 };\nlet pete = { name: \"Pete\", age: 30 };\nlet mary = { name: \"Mary\", age: 29 };\n\nlet arr = [ john, pete, mary ];\n\nalert( getAverageAge(arr) ); // 28\n```","parent":"array-methods"}},"array-unique":{"type":"Task","value":{"title":"Filter unique array members","slug":"array-unique","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/11-array-unique","weight":11,"libs":[],"importance":4,"content":"\nLet `arr` be an array.\n\nCreate a function `unique(arr)` that should return an array with unique items of `arr`.\n\nFor instance:\n\n```js\nfunction unique(arr) {\n  /* your code */\n}\n\nlet strings = [\"Hare\", \"Krishna\", \"Hare\", \"Krishna\",\n  \"Krishna\", \"Krishna\", \"Hare\", \"Hare\", \":-O\"\n];\n\nalert( unique(strings) ); // Hare, Krishna, :-O\n```","solution":"Let's walk the array items:\n- For each item we'll check if the resulting array already has that item.\n- If it is so, then ignore, otherwise add to results.\n\n```js run\nfunction unique(arr) {\n  let result = [];\n\n  for (let str of arr) {\n    if (!result.includes(str)) {\n      result.push(str);\n    }\n  }\n\n  return result;\n}\n\nlet strings = [\"Hare\", \"Krishna\", \"Hare\", \"Krishna\",\n  \"Krishna\", \"Krishna\", \"Hare\", \"Hare\", \":-O\"\n];\n\nalert( unique(strings) ); // Hare, Krishna, :-O\n```\n\nThe code works, but there's a potential performance problem in it.\n\nThe method `result.includes(str)` internally walks the array `result` and compares each element against `str` to find the match.\n\nSo if there are `100` elements in `result` and no one matches `str`, then it will walk the whole `result` and do exactly `100` comparisons. And if `result` is large, like `10000`, then there would be `10000` comparisons.\n\nThat's not a problem by itself, because JavaScript engines are very fast, so walk `10000` array is a matter of microseconds.\n\nBut we do such test for each element of `arr`, in the `for` loop.\n\nSo if `arr.length` is `10000` we'll have something like `10000*10000` = 100 millions of comparisons. That's a lot.\n\nSo the solution is only good for small arrays.\n\nFurther in the chapter <info:map-set-weakmap-weakset> we'll see how to optimize it.","parent":"array-methods"}},"filter-range":{"type":"Task","value":{"title":"Filter range","slug":"filter-range","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/2-filter-range","weight":2,"libs":[],"importance":4,"content":"\nWrite a function `filterRange(arr, a, b)` that gets an array `arr`, looks for elements between `a` and `b` in it and returns an array of them. \n\nThe function should not modify the array. It should return the new array.\n\nFor instance:\n\n```js\nlet arr = [5, 3, 8, 1];\n\nlet filtered = filterRange(arr, 1, 4); \n\nalert( filtered ); // 3,1 (matching values)\n\nalert( arr ); // 5,3,8,1 (not modified)\n```","solution":"","parent":"array-methods"}},"filter-range-in-place":{"type":"Task","value":{"title":"Filter range \"in place\"","slug":"filter-range-in-place","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/3-filter-range-in-place","weight":3,"libs":[],"importance":4,"content":"\nWrite a function `filterRangeInPlace(arr, a, b)` that gets an array `arr` and removes from it all values except those that are between `a` and `b`. The test is: `a ≤ arr[i] ≤ b`.\n\nThe function should only modify the array. It should not return anything.\n\nFor instance:\n```js\nlet arr = [5, 3, 8, 1];\n\nfilterRangeInPlace(arr, 1, 4); // removed the numbers except from 1 to 4\n\nalert( arr ); // [3, 1]\n```","solution":"","parent":"array-methods"}},"sort-back":{"type":"Task","value":{"title":"Sort in the reverse order","slug":"sort-back","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/4-sort-back","weight":4,"libs":[],"importance":4,"content":"\n```js\nlet arr = [5, 2, 1, -10, 8];\n\n// ... your code to sort it in the reverse order\n\nalert( arr ); // 8, 5, 2, 1, -10\n```","solution":"```js run\nlet arr = [5, 2, 1, -10, 8];\n\narr.sort((a, b) => b - a);\n\nalert( arr );\n```","parent":"array-methods"}},"copy-sort-array":{"type":"Task","value":{"title":"Copy and sort array","slug":"copy-sort-array","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/5-copy-sort-array","weight":5,"libs":[],"importance":5,"content":"\nWe have an array of strings `arr`. We'd like to have a sorted copy of it, but keep `arr` unmodified.\n\nCreate a function `copySorted(arr)` that returns such a copy.\n\n```js\nlet arr = [\"HTML\", \"JavaScript\", \"CSS\"];\n\nlet sorted = copySorted(arr);\n\nalert( sorted ); // CSS, HTML, JavaScript\nalert( arr ); // HTML, JavaScript, CSS (no changes)\n```","solution":"We can use `slice()` to make a copy and run the sort on it:\n\n```js run\nfunction copySorted(arr) {\n  return arr.slice().sort();\n}\n\nlet arr = [\"HTML\", \"JavaScript\", \"CSS\"];\n\n*!*\nlet sorted = copySorted(arr);\n*/!*\n\nalert( sorted );\nalert( arr );\n```","parent":"array-methods"}},"array-get-names":{"type":"Task","value":{"title":"Map to names","slug":"array-get-names","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/6-array-get-names","weight":6,"libs":[],"importance":5,"content":"\nYou have an array of `user` objects, each one has `user.name`. Write the code that converts it into an array of names.\n\nFor instance:\n\n```js no-beautify\nlet john = { name: \"John\", age: 25 };\nlet pete = { name: \"Pete\", age: 30 };\nlet mary = { name: \"Mary\", age: 28 };\n\nlet users = [ john, pete, mary ];\n\nlet names = /* ... your code */\n\nalert( names ); // John, Pete, Mary\n```","solution":"```js run\n\nlet john = { name: \"John\", age: 25 };\nlet pete = { name: \"Pete\", age: 30 };\nlet mary = { name: \"Mary\", age: 28 };\n\nlet users = [ john, pete, mary ];\n\nlet names = users.map(item => item.name);\n\nalert( names ); // John, Pete, Mary\n```","parent":"array-methods"}},"map-objects":{"type":"Task","value":{"title":"Map to objects","slug":"map-objects","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/7-map-objects","weight":7,"libs":[],"importance":5,"content":"\nYou have an array of `user` objects, each one has `name`, `surname` and `id`.\n\nWrite the code to create another array from it, of objects with `id` and `fullName`, where `fullName` is generated from `name` and `surname`.\n\nFor instance:\n\n```js no-beautify\nlet john = { name: \"John\", surname: \"Smith\", id: 1 };\nlet pete = { name: \"Pete\", surname: \"Hunt\", id: 2 };\nlet mary = { name: \"Mary\", surname: \"Key\", id: 3 };\n\nlet users = [ john, pete, mary ];\n\n*!*\nlet usersMapped = /* ... your code ... */\n*/!*\n\n/*\nusersMapped = [\n  { fullName: \"John Smith\", id: 1 },\n  { fullName: \"Pete Hunt\", id: 2 },\n  { fullName: \"Mary Key\", id: 3 }\n]\n*/\n\nalert( usersMapped[0].id ) // 1\nalert( usersMapped[0].fullName ) // John Smith\n```\n\nSo, actually you need to map one array of objects to another. Try using `=>` here. There's a small catch.","solution":"```js run no-beautify\nlet john = { name: \"John\", surname: \"Smith\", id: 1 };\nlet pete = { name: \"Pete\", surname: \"Hunt\", id: 2 };\nlet mary = { name: \"Mary\", surname: \"Key\", id: 3 };\n\nlet users = [ john, pete, mary ];\n\n*!*\nlet usersMapped = users.map(user => ({\n  fullName: `${user.name} ${user.surname}`,\n  id: user.id\n}));\n*/!*\n\n/*\nusersMapped = [\n  { fullName: \"John Smith\", id: 1 },\n  { fullName: \"Pete Hunt\", id: 2 },\n  { fullName: \"Mary Key\", id: 3 }\n]\n*/\n\nalert( usersMapped[0].id ); // 1\nalert( usersMapped[0].fullName ); // John Smith\n```\n\nPlease note that in for the arrow functions we need to use additional brackets. \n\nWe can't write like this:\n```js\nlet usersMapped = users.map(user => *!*{*/!*\n  fullName: `${user.name} ${user.surname}`,\n  id: user.id\n});\n```\n\nAs we remember, there are two arrow functions: without body `value => expr` and with body `value => {...}`.\n\nHere JavaScript would treat `{` as the start of function body, not the start of the object. The workaround is to wrap them in the \"normal\" brackets:\n\n```js\nlet usersMapped = users.map(user => *!*({*/!*\n  fullName: `${user.name} ${user.surname}`,\n  id: user.id\n}));\n```\n\nNow fine.","parent":"array-methods"}},"sort-objects":{"type":"Task","value":{"title":"Sort objects","slug":"sort-objects","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/8-sort-objects","weight":8,"libs":[],"importance":5,"content":"\nWrite the function `sortByName(users)` that gets an array of objects with property `name` and sorts it.\n\nFor instance:\n\n```js no-beautify\nlet john = { name: \"John\", age: 25 };\nlet pete = { name: \"Pete\", age: 30 };\nlet mary = { name: \"Mary\", age: 28 };\n\nlet arr = [ john, pete, mary ];\n\nsortByName(arr);\n\n// now: [john, mary, pete]\nalert(arr[1].name); // Mary\n```","solution":"```js run no-beautify\nfunction sortByName(arr) {\n  arr.sort((a, b) => a.name > b.name);\n}\n\nlet john = { name: \"John\", age: 25 };\nlet pete = { name: \"Pete\", age: 30 };\nlet mary = { name: \"Mary\", age: 28 };\n\nlet arr = [ john, pete, mary ];\n\nsortByName(arr);\n\n// now sorted is: [john, mary, pete]\nalert(arr[1].name); // Mary\n```","parent":"array-methods"}},"shuffle":{"type":"Task","value":{"title":"Shuffle an array","slug":"shuffle","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/05-array-methods/9-shuffle","weight":9,"libs":[],"importance":3,"content":"\nWrite the function `shuffle(array)` that shuffles (randomly reorders) elements of the array.\n\nMultiple runs of `shuffle` may lead to different orders of elements. For instance:\n\n```js\nlet arr = [1, 2, 3];\n\nshuffle(arr);\n// arr = [3, 2, 1]\n\nshuffle(arr);\n// arr = [2, 1, 3]\n\nshuffle(arr);\n// arr = [3, 1, 2]\n// ...\n```\n\nAll element orders should have an equal probability. For instance, `[1,2,3]` can be reordered as `[1,2,3]` or `[1,3,2]` or `[3,1,2]` etc, with equal probability of each case.","solution":"The simple solution could be:\n\n```js run\n*!*\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n*/!*\n\nlet arr = [1, 2, 3];\nshuffle(arr);\nalert(arr);\n```\n\nThat somewhat works, because `Math.random() - 0.5` is a random number that may be positive or negative, so the sorting function reorders elements randomly.\n\nBut because the sorting function is not meant to be used this way, not all permutations have the same probability.\n\nFor instance, consider the code below. It runs `shuffle` 1000000 times and counts appearances of all possible results:\n\n```js run\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\n// counts of appearances for all possible permutations\nlet count = {\n  '123': 0,\n  '132': 0,\n  '213': 0,\n  '231': 0,\n  '321': 0,\n  '312': 0\n};\n\nfor (let i = 0; i < 1000000; i++) {\n  let array = [1, 2, 3];\n  shuffle(array);\n  count[array.join('')]++;\n}\n\n// show counts of all possible permutations\nfor (let key in count) {\n  alert(`${key}: ${count[key]}`);\n}\n```\n\nAn example result (for V8, July 2017):\n\n```js\n123: 250706\n132: 124425\n213: 249618\n231: 124880\n312: 125148\n321: 125223\n```\n\nWe can see the bias clearly: `123` and `213` appear much more often than others.\n\nThe result of the code may vary between JavaScript engines, but we can already see that the approach is unreliable.\n\nWhy it doesn't work? Generally speaking, `sort` is a \"black box\": we throw an array and a comparison function into it and expect the array to be sorted. But due to the utter randomness of the comparison the black box goes mad, and how exactly it goes mad depends on the concrete implementation that differs between engines.\n\nThere are other good ways to do the task. For instance, there's a great algorithm called [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle). The idea is to walk the array in the reverse order and swap each element with a random one before it:\n\n```js\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n    [array[i], array[j]] = [array[j], array[i]]; // swap elements\n  }\n}\n```\n\nLet's test it the same way:\n\n```js run\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n// counts of appearances for all possible permutations\nlet count = {\n  '123': 0,\n  '132': 0,\n  '213': 0,\n  '231': 0,\n  '321': 0,\n  '312': 0\n};\n\nfor (let i = 0; i < 1000000; i++) {\n  let array = [1, 2, 3];\n  shuffle(array);\n  count[array.join('')]++;\n}\n\n// show counts of all possible permutations\nfor (let key in count) {\n  alert(`${key}: ${count[key]}`);\n}\n```\n\nThe example output:\n\n```js\n123: 166693\n132: 166647\n213: 166628\n231: 167517\n312: 166199\n321: 166316\n```\n\nLooks good now: all permutations appear with the same probability.\n\nAlso, performance-wise the Fisher-Yates algorithm is much better, there's no \"sorting\" overhead.","parent":"array-methods"}},"iterable":{"type":"Article","value":{"title":"Iterables","slug":"iterable","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/06-iterable/article.md","isFolder":false,"weight":6,"content":"\n*Iterable* objects is a generalization of arrays. That's a concept that allows to make any object useable in a `for..of` loop.\n\nArrays by themselves are iterable. But not only arrays. Strings are iterable too, and many other built-in objects as well.\n\nIterables are widely used by the core JavaScript. As we'll see many built-in operators and methods rely on them.\n\n## Symbol.iterator\n\nWe can easily grasp the concept of iterables by making one of our own.\n\nFor instance, we have an object, that is not an array, but looks suitable for `for..of`.\n\nLike a `range` object that represents an interval of numbers:\n\n```js\nlet range = {\n  from: 1,\n  to: 5\n};\n\n// We want the for..of to work:\n// for(let num of range) ... num=1,2,3,4,5\n```\n\nTo make the `range` iterable (and thus let `for..of` work) we need to add a method to the object named `Symbol.iterator` (a special built-in symbol just for that).\n\n- When `for..of` starts, it calls that method (or errors if not found).\n- The method must return an *iterator* -- an object with the method `next`.\n- When `for..of` wants the next value, it calls `next()` on that object.\n- The result of `next()` must have the form `{done: Boolean, value: any}`, where `done=true`  means that the iteration is finished, otherwise `value` must be the new value.\n\nHere's the full implementation for `range`:\n\n```js run\nlet range = {\n  from: 1,\n  to: 5\n};\n\n// 1. call to for..of initially calls this\nrange[Symbol.iterator] = function() {\n\n  // 2. ...it returns the iterator:\n  return {\n    current: this.from,\n    last: this.to,      \n\n    // 3. next() is called on each iteration by the for..of loop\n    next() {\n      // 4. it should return the value as an object {done:.., value :...}\n      if (this.current <= this.last) {\n        return { done: false, value: this.current++ };\n      } else {\n        return { done: true };\n      }\n    }\n  };\n};\n\n// now it works!\nfor (let num of range) {\n  alert(num); // 1, then 2, 3, 4, 5\n}\n```\n\nThere is an important separation of concerns in this code:\n\n- The `range` itself does not have the `next()` method.\n- Instead, another object, a so-called \"iterator\" is created by the call to `range[Symbol.iterator]()`, and it handles the iteration.\n\nSo, the iterator object is separate from the object it iterates over.\n\nTechnically, we may merge them and use `range` itself as the iterator to make the code simpler.\n\nLike this:\n\n```js run\nlet range = {\n  from: 1,\n  to: 5,\n\n  [Symbol.iterator]() {\n    this.current = this.from;\n    return this;\n  },\n\n  next() {\n    if (this.current <= this.to) {\n      return { done: false, value: this.current++ };\n    } else {\n      return { done: true };\n    }\n  }\n};\n\nfor (let num of range) {\n  alert(num); // 1, then 2, 3, 4, 5\n}\n```\n\nNow `range[Symbol.iterator]()` returns the `range` object itself:  it has the necessary `next()` method and remembers the current iteration progress in `this.current`. Sometimes that's fine too. The downside is that now it's impossible to have two `for..of` loops running over the object simultaneously: they'll share the iteration state, because there's only one iterator -- the object itself.\n\n```smart header=\"Infinite iterators\"\nInfinite iterators are also doable. For instance, the `range` becomes infinite for `range.to = Infinity`. Or we can make an iterable object that generates an infinite sequence of pseudorandom numbers. Also can be useful.\n\nThere are no limitations on `next`, it can return more and more values, that's normal.\n\nOf course, the `for..of` loop over such an iterable would be endless. But we can always stop it using `break`.\n```\n\n\n## String is iterable\n\nArrays and strings are most widely used built-in iterables.\n\nFor a string, `for..of` loops over its characters:\n\n```js run\nfor (let char of \"test\") {\n  alert( char ); // t, then e, then s, then t\n}\n```\n\nAnd it works right with surrogate pairs!\n\n```js run\nlet str = '𝒳😂';\nfor (let char of str) {\n    alert( char ); // 𝒳, and then 😂\n}\n```\n\n## Calling an iterator explicitly\n\nNormally, internals of iterables are hidden from the external code. There's a `for..of` loop, that works, that's all it needs to know.\n\nBut to understand things a little bit deeper let's see how to create an iterator explicitly.\n\nWe'll iterate over a string the same way as `for..of`, but with direct calls. This code gets a string iterator and calls it \"manually\":\n\n```js run\nlet str = \"Hello\";\n\n// does the same as\n// for (let char of str) alert(char);\n\nlet iterator = str[Symbol.iterator]();\n\nwhile (true) {\n  let result = iterator.next();\n  if (result.done) break;\n  alert(result.value); // outputs characters one by one\n}\n```\n\nThat is rarely needed, but gives us more control over the process than `for..of`. For instance, we can split the iteration process: iterate a bit, then stop, do something else, and then resume later.\n\n## Iterables and array-likes [#array-like]\n\nThere are two official terms that look similar, but are very different. Please make sure you understand them well to avoid the confusion.\n\n- *Iterables* are objects that implement the `Symbol.iterator` method, as described above.\n- *Array-likes* are objects that have indexes and `length`, so they look like arrays.\n\nNaturally, these properties can combine. For instance, strings are both iterable (`for..of` works on them) and array-like (they have numeric indexes and `length`).\n\nBut an iterable may be not array-like. And vice versa an array-like may be not iterable.\n\nFor example, the `range` in the example above is iterable, but not array-like, because it does not have indexed properties and `length`.\n\nAnd here's the object that is array-like, but not iterable:\n\n```js run\nlet arrayLike = { // has indexes and length => array-like\n  0: \"Hello\",\n  1: \"World\",\n  length: 2\n};\n\n*!*\n// Error (no Symbol.iterator)\nfor (let item of arrayLike) {}\n*/!*\n```\n\nWhat do they have in common? Both iterables and array-likes are usually *not arrays*, they don't have `push`, `pop` etc. That's rather inconvenient if we have such an object and want to work with it as with an array.\n\n## Array.from\n\nThere's a universal method [Array.from](mdn:js/Array/from) that brings them together. It takes an iterable or array-like value and makes a \"real\" `Array` from it. Then we can call array methods on it.\n\nFor instance:\n\n```js run\nlet arrayLike = {\n  0: \"Hello\",\n  1: \"World\",\n  length: 2\n};\n\n*!*\nlet arr = Array.from(arrayLike); // (*)\n*/!*\nalert(arr.pop()); // World (method works)\n```\n\n`Array.from` at the line `(*)` takes the object, examines it for being an iterable or array-like, then makes a new array and copies there all items.\n\nThe same happens for an iterable:\n\n```js\n// assuming that range is taken from the example above\nlet arr = Array.from(range);\nalert(arr); // 1,2,3,4,5 (array toString conversion works)\n```\n\nThe full syntax for `Array.from` allows to provide an optional \"mapping\" function:\n```js\nArray.from(obj[, mapFn, thisArg])\n```\n\nThe second argument `mapFn` should be the function to apply to each element before adding to the array, and `thisArg` allows to set `this` for it.\n\nFor instance:\n\n```js\n// assuming that range is taken from the example above\n\n// square each number\nlet arr = Array.from(range, num => num * num);\n\nalert(arr); // 1,4,9,16,25\n```\n\nHere we use `Array.from` to turn a string into an array of characters:\n\n```js run\nlet str = '𝒳😂';\n\n// splits str into array of characters\nlet chars = Array.from(str);\n\nalert(chars[0]); // 𝒳\nalert(chars[1]); // 😂\nalert(chars.length); // 2\n```\n\nUnlike `str.split`, it relies on the iterable nature of the string and so, just like `for..of`, correctly works with surrogate pairs.\n\nTechnically here it does the same as:\n\n```js run\nlet str = '𝒳😂';\n\nlet chars = []; // Array.from internally does the same loop\nfor (let char of str) {\n  chars.push(char);\n}\n\nalert(chars);\n```\n\n...But is shorter.    \n\nWe can even build surrogate-aware `slice` on it:\n\n```js run\nfunction slice(str, start, end) {\n  return Array.from(str).slice(start, end).join('');\n}\n\nlet str = '𝒳😂𩷶';\n\nalert( slice(str, 1, 3) ); // 😂𩷶\n\n// native method does not support surrogate pairs\nalert( str.slice(1, 3) ); // garbage (two pieces from different surrogate pairs)\n```\n\n\n## Summary\n\nObjects that can be used in `for..of` are called *iterable*.\n\n- Technically, iterables must implement the method named `Symbol.iterator`.\n    - The result of `obj[Symbol.iterator]` is called an *iterator*. It handles the further iteration process.\n    - An iterator must have the method named `next()` that returns an object `{done: Boolean, value: any}`, here `done:true` denotes the iteration end, otherwise the `value` is the next value.\n- The `Symbol.iterator` method is called automatically by `for..of`, but we also can do it directly.\n- Built-in iterables like strings or arrays, also implement `Symbol.iterator`.\n- String iterator knows about surrogate pairs.\n\n\nObjects that have indexed properties and `length` are called *array-like*. Such objects may also have other properties and methods, but lack the built-in methods of arrays.\n\nIf we look inside the specification -- we'll see that most built-in methods assume that they work with iterables or array-likes instead of \"real\" arrays, because that's more abstract.\n\n`Array.from(obj[, mapFn, thisArg])` makes a real `Array` of an iterable or array-like `obj`, and we can then use array methods on it. The optional arguments `mapFn` and `thisArg` allow us to apply a function to each item.","libs":[],"children":[],"parent":"data-types"}},"map-set-weakmap-weakset":{"type":"Article","value":{"title":"Map, Set, WeakMap and WeakSet","slug":"map-set-weakmap-weakset","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/07-map-set-weakmap-weakset/article.md","isFolder":false,"weight":7,"content":"\nNow we've learned about the following complex data structures:\n\n- Objects for storing keyed collections.\n- Arrays for storing ordered collections.\n\nBut that's not enough for real life. That's why `Map` and `Set` also exist.\n\n## Map\n\n[Map](mdn:js/Map) is a collection of keyed data items, just like an `Object`. But the main difference is that `Map` allows keys of any type.\n\nThe main methods are:\n\n- `new Map()` -- creates the map.\n- `map.set(key, value)` -- stores the value by the key.\n- `map.get(key)` -- returns the value by the key, `undefined` if `key` doesn't exist in map.\n- `map.has(key)` -- returns `true` if the `key` exists, `false` otherwise.\n- `map.delete(key)` -- removes the value by the key.\n- `map.clear()` -- clears the map\n- `map.size` -- returns the current element count.\n\nFor instance:\n\n```js run\nlet map = new Map();\n\nmap.set('1', 'str1');   // a string key\nmap.set(1, 'num1');     // a numeric key\nmap.set(true, 'bool1'); // a boolean key\n\n// remember the regular Object? it would convert keys to string\n// Map keeps the type, so these two are different:\nalert( map.get(1)   ); // 'num1'\nalert( map.get('1') ); // 'str1'\n\nalert( map.size ); // 3\n```\n\nAs we can see, unlike objects, keys are not converted to strings. Any type of key is possible.\n\n**Map can also use objects as keys.**\n\nFor instance:\n```js run\nlet john = { name: \"John\" };\n\n// for every user, let's store his visits count\nlet visitsCountMap = new Map();\n\n// john is the key for the map\nvisitsCountMap.set(john, 123);\n\nalert( visitsCountMap.get(john) ); // 123\n```\n\nUsing objects as keys is one of most notable and important `Map` features. For string keys, `Object` can be fine, but it would be difficult to replace the `Map` with a regular `Object` in the example above.\n\nIn the old times, before `Map` existed, people added unique identifiers to objects for that:\n\n```js run\n// we add the id field\nlet john = { name: \"John\", *!*id: 1*/!* };\n\nlet visitsCounts = {};\n\n// now store the value by id\nvisitsCounts[john.id] = 123;\n\nalert( visitsCounts[john.id] ); // 123\n```\n\n...But `Map` is much more elegant.\n\n\n```smart header=\"How `Map` compares keys\"\nTo test values for equivalence, `Map` uses the algorithm [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero). It is roughly the same as strict equality `===`, but the difference is that `NaN` is considered equal to `NaN`. So `NaN` can be used as the key as well.\n\nThis algorithm can't be changed or customized.\n```\n\n\n````smart header=\"Chaining\"\n\nEvery `map.set` call returns the map itself, so we can \"chain\" the calls:\n\n```js\nmap.set('1', 'str1')\n  .set(1, 'num1')\n  .set(true, 'bool1');\n```\n````\n\n## Map from Object\n\nWhen a `Map` is created, we can pass an array (or another iterable) with key-value pairs, like this:\n\n```js\n// array of [key, value] pairs\nlet map = new Map([\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\n```\n\nThere is a built-in method [Object.entries(obj)](mdn:js/Object/entries) that returns an array of key/value pairs for an object exactly in that format.\n\nSo we can initialize a map from an object like this:\n\n```js\nlet map = new Map(Object.entries({\n  name: \"John\",\n  age: 30\n}));\n```\n\nHere, `Object.entries` returns the array of key/value pairs: `[ [\"name\",\"John\"], [\"age\", 30] ]`. That's what `Map` needs.\n\n## Iteration over Map\n\nFor looping over a `map`, there are 3 methods:\n\n- `map.keys()` -- returns an iterable for keys,\n- `map.values()` -- returns an iterable for values,\n- `map.entries()` -- returns an iterable for entries `[key, value]`, it's used by default in `for..of`.\n\nFor instance:\n\n```js run\nlet recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\n\n// iterate over keys (vegetables)\nfor (let vegetable of recipeMap.keys()) {\n  alert(vegetable); // cucumber, tomatoes, onion\n}\n\n// iterate over values (amounts)\nfor (let amount of recipeMap.values()) {\n  alert(amount); // 500, 350, 50\n}\n\n// iterate over [key, value] entries\nfor (let entry of recipeMap) { // the same as of recipeMap.entries()\n  alert(entry); // cucumber,500 (and so on)\n}\n```\n\n```smart header=\"The insertion order is used\"\nThe iteration goes in the same order as the values were inserted. `Map` preserves this order, unlike a regular `Object`.\n```\n\nBesides that, `Map` has a built-in `forEach` method, similar to `Array`:\n\n```js\nrecipeMap.forEach( (value, key, map) => {\n  alert(`${key}: ${value}`); // cucumber: 500 etc\n});\n```\n\n\n## Set\n\nA `Set` is a collection of values, where each value may occur only once.\n\nIts main methods are:\n\n- `new Set(iterable)` -- creates the set, optionally from an array of values (any iterable will do).\n- `set.add(value)` -- adds a value, returns the set itself.\n- `set.delete(value)` -- removes the value, returns `true` if `value` existed at the moment of the call, otherwise `false`.\n- `set.has(value)` -- returns `true` if the value exists in the set, otherwise `false`.\n- `set.clear()` -- removes everything from the set.\n- `set.size` -- is the elements count.\n\nFor example, we have visitors coming, and we'd like to remember everyone. But repeated visits should not lead to duplicates. A visitor must be \"counted\" only once.\n\n`Set` is just the right thing for that:\n\n```js run\nlet set = new Set();\n\nlet john = { name: \"John\" };\nlet pete = { name: \"Pete\" };\nlet mary = { name: \"Mary\" };\n\n// visits, some users come multiple times\nset.add(john);\nset.add(pete);\nset.add(mary);\nset.add(john);\nset.add(mary);\n\n// set keeps only unique values\nalert( set.size ); // 3\n\nfor (let user of set) {\n  alert(user.name); // John (then Pete and Mary)\n}\n```\n\nThe alternative to `Set` could be an array of users, and the code to check for duplicates on every insertion using [arr.find](mdn:js/Array/find). But the performance would be much worse, because this method walks through the whole array checking every element. `Set` is much better optimized internally for uniqueness checks.\n\n## Iteration over Set\n\nWe can loop over a set either with `for..of` or using `forEach`:\n\n```js run\nlet set = new Set([\"oranges\", \"apples\", \"bananas\"]);\n\nfor (let value of set) alert(value);\n\n// the same with forEach:\nset.forEach((value, valueAgain, set) => {\n  alert(value);\n});\n```\n\nNote the funny thing. The `forEach` function in the `Set` has 3 arguments: a value, then *again a value*, and then the target object. Indeed, the same value appears in the arguments twice.\n\nThat's for compatibility with `Map` where `forEach` has three arguments.\n\nThe same methods `Map` has for iterators are also supported:\n\n- `set.keys()` -- returns an iterable object for values,\n- `set.values()` -- same as `set.keys`, for compatibility with `Map`,\n- `set.entries()` -- returns an iterable object for entries `[value, value]`, exists for compatibility with `Map`.\n\n## WeakMap and WeakSet\n\n`WeakSet` is a special kind of `Set` that does not prevent JavaScript from removing its items from memory. `WeakMap` is the same thing for `Map`.\n\nAs we know from the chapter <info:garbage-collection>, JavaScript engine stores a value in memory while it is reachable (and can potentially be used).\n\nFor instance:\n```js\nlet john = { name: \"John\" };\n\n// the object can be accessed, john is the reference to it\n\n// overwrite the reference\njohn = null;\n\n*!*\n// the object will be removed from memory\n*/!*\n```\n\nUsually, properties of an object or elements of an array or another data structure are considered reachable and kept in memory while that data structure is in memory.\n\nIn a regular `Map`, it does not matter if we store an object as a key or as a value. It's kept in memory even if there are no more references to it.\n\nFor instance:\n```js\nlet john = { name: \"John\" };\n\nlet map = new Map();\nmap.set(john, \"...\");\n\njohn = null; // overwrite the reference\n\n*!*\n// john is stored inside the map\n// we can get it by using map.keys()\n*/!*\n```\n\n\nWith the exception of `WeakMap/WeakSet`.\n\n**`WeakMap/WeakSet` does not prevent the object removal from the memory.**\n\nLet's start with `WeakMap`.\n\nThe first difference from `Map` is that its keys must be  objects, not primitive values:\n\n```js run\nlet weakMap = new WeakMap();\n\nlet obj = {};\n\nweakMap.set(obj, \"ok\"); // works fine (object key)\n\n*!*\nweakMap.set(\"test\", \"Whoops\"); // Error, because \"test\" is a primitive\n*/!*\n```\n\nNow, if we use an object as the key in it, and there are no other references to that object -- it will be removed from memory (and from the map) automatically.\n\n```js\nlet john = { name: \"John\" };\n\nlet weakMap = new WeakMap();\nweakMap.set(john, \"...\");\n\njohn = null; // overwrite the reference\n\n// john is removed from memory!\n```\n\nCompare it with the regular `Map` example above. Now if `john` only exists as the key of `WeakMap` -- it is to be automatically deleted.\n\n...And `WeakMap` does not support methods `keys()`, `values()`, `entries()`, we can not iterate over it. So there's really no way to receive all keys or values from it.\n\n`WeakMap` has only the following methods:\n\n- `weakMap.get(key)`\n- `weakMap.set(key, value)`\n- `weakMap.delete(key, value)`\n- `weakMap.has(key)`\n\nWhy such a limitation? That's for technical reasons. If the object has lost all other references (like `john` in the code above), then it is to be deleted automatically. But technically it's not exactly specified *when the cleanup happens*.\n\nThe JavaScript engine decides that. It may choose to perform the memory cleanup immediately or to wait and do the cleaning later when more deletions happen. So, technically the current element count of the `WeakMap` is not known. The engine may have cleaned it up or not, or did it partially. For that reason, methods that access `WeakMap` as a whole are not supported.\n\nNow where do we need such thing?\n\nThe idea of `WeakMap` is that we can store something for an object that exists only while the object exists. But we do not force the object to live by the mere fact that we store something for it.\n\n```js\nweakMap.put(john, \"secret documents\");\n// if john dies, secret documents will be destroyed\n```\n\nThat's useful for situations when we have a main storage for the objects somewhere and need to keep additional information that is only relevant while the object lives.\n\nLet's look at an example.\n\nFor instance, we have code that keeps a visit count for each user. The information is stored in a map: a user is the key and the visit count is the value. When a user leaves, we don't want to store his visit count anymore.\n\nOne way would be to keep track of leaving users and clean up the storage manually:\n\n```js run\nlet john = { name: \"John\" };\n\n// map: user => visits count\nlet visitsCountMap = new Map();\n\n// john is the key for the map\nvisitsCountMap.set(john, 123);\n\n// now john leaves us, we don't need him anymore\njohn = null;\n\n*!*\n// but it's still in the map, we need to clean it!\n*/!*\nalert( visitsCountMap.size ); // 1\n// it's also in the memory, because Map uses it as the key\n```\n\nAnother way would be to use `WeakMap`:\n\n```js\nlet john = { name: \"John\" };\n\nlet visitsCountMap = new WeakMap();\n\nvisitsCountMap.set(john, 123);\n\n// now john leaves us, we don't need him anymore\njohn = null;\n\n// there are no references except WeakMap,\n// so the object is removed both from the memory and from visitsCountMap automatically\n```\n\nWith a regular `Map`, cleaning up after a user has left becomes a tedious task: we not only need to remove the user from its main storage (be it a variable or an array), but also need to clean up the additional stores like `visitsCountMap`. And it can become cumbersome in more complex cases when users are managed in one place of the code and the additional structure is at another place and is getting no information about removals.\n\n`WeakMap` can make things simpler, because it is cleaned up automatically. The information in it like visits count in the example above lives only while the key object exists.\n\n`WeakSet` behaves similarly:\n\n- It is analogous to `Set`, but we may only add objects to `WeakSet` (not primitives).\n- An object exists in the set while it has reachable from somewhere else.\n- Like `Set`, it supports `add`, `has` and `delete`, but not `size`, `keys()` and no iterations.\n\nFor instance, we can use it to keep track of whether an item is checked:\n\n```js\nlet messages = [\n    {text: \"Hello\", from: \"John\"},\n    {text: \"How goes?\", from: \"John\"},\n    {text: \"See you soon\", from: \"Alice\"}\n];\n\n// fill it with array elements (3 items)\nlet unreadSet = new WeakSet(messages);\n\n// we can use unreadSet to see whether a message is unread\nalert(unreadSet.has(messages[1])); // true\n// remove it from the set after reading\nunreadSet.delete(messages[1]); // true\n\n// and when we shift our messages history, the set is cleaned up automatically\nmessages.shift();\n// no need to clean unreadSet, it now has 2 items\n// unfortunately, there's no method to get the exact count of items, so can't show it\n```\n\nThe most notable limitation of `WeakMap` and `WeakSet` is the absence of iterations, and inability to get all current content. That may appear inconvenient, but actually does not prevent `WeakMap/WeakSet` from doing their main job -- be an \"additional\" storage of data for objects which are stored/managed at another place.\n\n## Summary\n\n- `Map` -- is a collection of keyed values.\n\n    The differences from a regular `Object`:\n\n    - Any keys, objects can be keys.\n    - Iterates in the insertion order.\n    - Additional convenient methods, the `size` property.\n\n- `Set` -- is a collection of unique values.\n\n    - Unlike an array, does not allow to reorder elements.\n    - Keeps the insertion order.\n\n- `WeakMap` -- a variant of `Map` that allows only objects as keys and removes them once they become inaccessible by other means.\n\n    - It does not support operations on the structure as a whole: no `size`, no `clear()`, no iterations.\n\n- `WeakSet` -- is a variant of `Set` that only stores objects and removes them once they become inaccessible by other means.\n\n    - Also does not support `size/clear()` and iterations.\n\n`WeakMap` and `WeakSet` are used as \"secondary\" data structures in addition to the \"main\" object storage. Once the object is removed from the main storage, so it only stays in `WeakMap/WeakSet`, they clean up automatically.","libs":[],"children":["array-unique-map","filter-anagrams","iterable-keys","recipients-read","recipients-when-read"],"parent":"data-types"}},"array-unique-map":{"type":"Task","value":{"title":"Filter unique array members","slug":"array-unique-map","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/07-map-set-weakmap-weakset/01-array-unique-map","weight":1,"libs":[],"importance":5,"content":"\nLet `arr` be an array.\n\nCreate a function `unique(arr)` that should return an array with unique items of `arr`.\n\nFor instance:\n\n```js\nfunction unique(arr) {\n  /* your code */\n}\n\nlet values = [\"Hare\", \"Krishna\", \"Hare\", \"Krishna\",\n  \"Krishna\", \"Krishna\", \"Hare\", \"Hare\", \":-O\"\n];\n\nalert( unique(values) ); // Hare, Krishna, :-O\n```\n\nP.S. Here strings are used, but can be values of any type.\n\nP.P.S. Use `Set` to store unique values.","solution":"","parent":"map-set-weakmap-weakset"}},"filter-anagrams":{"type":"Task","value":{"title":"Filter anagrams","slug":"filter-anagrams","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/07-map-set-weakmap-weakset/02-filter-anagrams","weight":2,"libs":[],"importance":4,"content":"\n[Anagrams](https://en.wikipedia.org/wiki/Anagram) are words that have the same number of same letters, but in different order.\n\nFor instance:\n\n```\nnap - pan\near - are - era\ncheaters - hectares - teachers\n```\n\nWrite a function `aclean(arr)` that returns an array cleaned from anagrams.\n\nFor instance:\n\n```js\nlet arr = [\"nap\", \"teachers\", \"cheaters\", \"PAN\", \"ear\", \"era\", \"hectares\"];\n\nalert( aclean(arr) ); // \"nap,teachers,ear\" or \"PAN,cheaters,era\"\n```\n\nFrom every anagram group should remain only one word, no matter which one.","solution":"To find all anagrams, let's split every word to letters and sort them. When letter-sorted, all anagrams are same.\n\nFor instance:\n\n```\nnap, pan -> anp\near, era, are -> aer\ncheaters, hectares, teachers -> aceehrst\n...\n```\n\nWe'll use the letter-sorted variants as map keys to store only one value per each key:\n\n```js run\nfunction aclean(arr) {\n  let map = new Map();\n\n  for (let word of arr) {\n    // split the word by letters, sort them and join back\n*!*\n    let sorted = word.toLowerCase().split('').sort().join(''); // (*)\n*/!*\n    map.set(sorted, word);\n  }\n\n  return Array.from(map.values());\n}\n\nlet arr = [\"nap\", \"teachers\", \"cheaters\", \"PAN\", \"ear\", \"era\", \"hectares\"];\n\nalert( aclean(arr) );\n```\n\nLetter-sorting is done by the chain of calls in the line `(*)`.\n\nFor convenience let's split it into multiple lines:\n\n```js\nlet sorted = arr[i] // PAN\n  .toLowerCase() // pan\n  .split('') // ['p','a','n']\n  .sort() // ['a','n','p']\n  .join(''); // anp\n```\n\nTwo different words `'PAN'` and `'nap'` receive the same letter-sorted form `'anp'`.\n\nThe next line put the word into the map:\n\n```js\nmap.set(sorted, word);\n```\n\nIf we ever meet a word the same letter-sorted form again, then it would overwrite the previous value with the same key in the map. So we'll always have at maximum one word per letter-form.\n\nAt the end `Array.from(map.values())` takes an iterable over map values (we don't need keys in the result) and returns an array of them.\n\nHere we could also use a plain object instead of the `Map`, because keys are strings.\n\nThat's how the solution can look:\n\n```js run\nfunction aclean(arr) {\n  let obj = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    let sorted = arr[i].toLowerCase().split(\"\").sort().join(\"\");\n    obj[sorted] = arr[i];\n  }\n\n  return Array.from(Object.values(obj));\n}\n\nlet arr = [\"nap\", \"teachers\", \"cheaters\", \"PAN\", \"ear\", \"era\", \"hectares\"];\n\nalert( aclean(arr) );\n```","parent":"map-set-weakmap-weakset"}},"iterable-keys":{"type":"Task","value":{"title":"Iterable keys","slug":"iterable-keys","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/07-map-set-weakmap-weakset/03-iterable-keys","weight":3,"libs":[],"importance":5,"content":"\nWe want to get an array of `map.keys()` and go on working with it (apart from the map itself).\n\nBut there's a problem:\n\n```js run\nlet map = new Map();\n\nmap.set(\"name\", \"John\");\n\nlet keys = map.keys();\n\n*!*\n// Error: numbers.push is not a function\nkeys.push(\"more\");\n*/!*\n```\n\nWhy? How can we fix the code to make `keys.push` work?","solution":"That's because `map.keys()` returns an iterable, but not an array.\n\nWe can convert it into an array using `Array.from`:\n\n\n```js run\nlet map = new Map();\n\nmap.set(\"name\", \"John\");\n\n*!*\nlet keys = Array.from(map.keys());\n*/!*\n\nkeys.push(\"more\");\n\nalert(keys); // name, more\n```","parent":"map-set-weakmap-weakset"}},"recipients-read":{"type":"Task","value":{"title":"Store \"unread\" flags","slug":"recipients-read","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/07-map-set-weakmap-weakset/04-recipients-read","weight":4,"libs":[],"importance":5,"content":"\nThere's an array of messages:\n\n```js\nlet messages = [\n    {text: \"Hello\", from: \"John\"},\n    {text: \"How goes?\", from: \"John\"},\n    {text: \"See you soon\", from: \"Alice\"}\n];\n```\n\nYour code can access it, but the messages are managed by someone else's code. New messages are added, old ones are removed regularly by that code, and you don't know the exact moments when it happens.\n\nNow, which data structure you could use to store information whether the message \"have been read\"? The structure must be well-suited to give the answer \"was it read?\" for the given message object.\n\nP.S. When a message is removed from `messages`, it should disappear from your structure as well.\n\nP.P.S. We shouldn't modify message objects directly. If they are managed by someone else's code, then adding extra properties to them may have bad consequences.","solution":"The sane choice here is a `WeakSet`:\n\n```js\nlet messages = [\n    {text: \"Hello\", from: \"John\"},\n    {text: \"How goes?\", from: \"John\"},\n    {text: \"See you soon\", from: \"Alice\"}\n];\n\nlet readMessages = new WeakSet();\n\n// two messages have been read\nreadMessages.add(messages[0]);\nreadMessages.add(messages[1]);\n// readMessages has 2 elements\n\n// ...let's read the first message again!\nreadMessages.add(messages[0]);\n// readMessages still has 2 unique elements\n\n// answer: was the message[0] read?\nalert(\"Read message 0: \" + readMessages.has(messages[0])); // true\n\nmessages.shift();\n// now readMessages has 1 element (technically memory may be cleaned later)\n```\n\nThe `WeakSet` allows to store a set of messages and easily check for the existance of a message in it.\n\nIt cleans up itself automatically. The tradeoff is that we can't iterate over it. We can't get \"all read messages\" directly. But we can do it by iterating over all messages and filtering those that are in the set.\n\nP.S. Adding a property of our own to each message may be dangerous if messages are managed by someone else's code, but we can make it a symbol to evade conflicts.\n\nLike this:\n```js\n// the symbolic property is only known to our code\nlet isRead = Symbol(\"isRead\");\nmessages[0][isRead] = true;\n```\n\nNow even if someone else's code uses `for..in` loop for message properties, our secret flag won't appear.","parent":"map-set-weakmap-weakset"}},"recipients-when-read":{"type":"Task","value":{"title":"Store read dates","slug":"recipients-when-read","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/07-map-set-weakmap-weakset/05-recipients-when-read","weight":5,"libs":[],"importance":5,"content":"\nThere's an array of messages as in the [previous task](info:task/recipients-read). The situation is similar.\n\n```js\nlet messages = [\n    {text: \"Hello\", from: \"John\"},\n    {text: \"How goes?\", from: \"John\"},\n    {text: \"See you soon\", from: \"Alice\"}\n];\n```\n\nThe question now is: which data structure you'd suggest to store the information: \"when the message was read?\".\n\nIn the previous task we only needed to store the \"yes/no\" fact. Now we need to store the date and it, once again, should disappear if the message is gone.","solution":"To store a date, we can use `WeakMap`:\n\n```js\nlet messages = [\n    {text: \"Hello\", from: \"John\"},\n    {text: \"How goes?\", from: \"John\"},\n    {text: \"See you soon\", from: \"Alice\"}\n];\n\nlet readMap = new WeakMap();\n\nreadMap.set(messages[0], new Date(2017, 1, 1));\n// Date object we'll study later\n```","parent":"map-set-weakmap-weakset"}},"keys-values-entries":{"type":"Article","value":{"title":"Object.keys, values, entries","slug":"keys-values-entries","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/08-keys-values-entries/article.md","isFolder":false,"weight":8,"content":"\nLet's step away from the individual data structures and talk about the iterations over them. \n\nIn the previous chapter we saw methods `map.keys()`, `map.values()`, `map.entries()`.\n\nThese methods are generic, there is a common agreement to use them for data structures. If we ever create a data structure of our own, we should implement them too. \n\nThey are supported for:\n\n- `Map`\n- `Set`\n- `Array` (except `arr.values()`)\n\nPlain objects also support similar methods, but the syntax is a bit different.\n\n## Object.keys, values, entries\n\nFor plain objects, the following methods are available:\n\n- [Object.keys(obj)](mdn:js/Object/keys) -- returns an array of keys.\n- [Object.values(obj)](mdn:js/Object/values) -- returns an array of values.\n- [Object.entries(obj)](mdn:js/Object/entries) -- returns an array of `[key, value]` pairs.\n\n...But please note the distinctions (compared to map for example):\n\n|             | Map              | Object       |\n|-------------|------------------|--------------|\n| Call syntax | `map.keys()`  | `Object.keys(obj)`, but not `obj.keys()` |\n| Returns     | iterable    | \"real\" Array                     |\n\nThe first difference is that we have to call `Object.keys(obj)`, and not `obj.keys()`.\n\nWhy so? The main reason is flexibility. Remember, objects are a base of all complex structures in JavaScript. So we may have an object of our own like `order` that implements its own `order.values()` method. And we still can call `Object.values(order)` on it.\n\nThe second difference is that `Object.*` methods return \"real\" array objects, not just an iterable. That's mainly for historical reasons.\n\nFor instance:\n\n```js\nlet user = {\n  name: \"John\",\n  age: 30\n};\n```\n\n- `Object.keys(user) = [name, age]`\n- `Object.values(user) = [\"John\", 30]`\n- `Object.entries(user) = [ [\"name\",\"John\"], [\"age\",30] ]`\n\nHere's an example of using `Object.values` to loop over property values:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\n// loop over values\nfor (let value of Object.values(user)) {\n  alert(value); // John, then 30\n}\n```\n\n## Object.keys/values/entries ignore symbolic properties\n\nJust like a `for..in` loop, these methods ignore properties that use `Symbol(...)` as keys.\n\nUsually that's convenient. But if we want symbolic keys too, then there's a separate method [Object.getOwnPropertySymbols](mdn:js/Object/getOwnPropertySymbols) that returns an array of only symbolic keys. Also, the method [Reflect.ownKeys(obj)](mdn:js/Reflect/ownKeys) returns *all* keys.","libs":[],"children":["sum-salaries","count-properties"],"parent":"data-types"}},"sum-salaries":{"type":"Task","value":{"title":"Sum the properties","slug":"sum-salaries","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/08-keys-values-entries/01-sum-salaries","weight":1,"libs":[],"importance":5,"content":"\nThere is a `salaries` object with arbitrary number of salaries. \n\nWrite the function `sumSalaries(salaries)` that returns the sum of all salaries using `Object.values` and the `for..of` loop.\n\nIf `salaries` is empty, then the result must be `0`.\n\nFor instance:\n\n```js\nlet salaries = {\n  \"John\": 100,\n  \"Pete\": 300,\n  \"Mary\": 250\n};\n\nalert( sumSalaries(salaries) ); // 650\n```","solution":"","parent":"keys-values-entries"}},"count-properties":{"type":"Task","value":{"title":"Count properties","slug":"count-properties","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/08-keys-values-entries/02-count-properties","weight":2,"libs":[],"importance":5,"content":"\nWrite a function `count(obj)` that returns the number of properties in the object:\n\n```js\nlet user = {\n  name: 'John',\n  age: 30\n};\n\nalert( count(user) ); // 2\n```\n\nTry to make the code as short as possible.\n\nP.S. Ignore symbolic properties, count only \"regular\" ones.","solution":"","parent":"keys-values-entries"}},"destructuring-assignment":{"type":"Article","value":{"title":"Destructuring assignment","slug":"destructuring-assignment","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/09-destructuring-assignment/article.md","isFolder":false,"weight":9,"content":"\nThe two most used data structures in JavaScript are `Object` and `Array`.\n\nObjects allow us to pack many pieces of information into a single entity and arrays allow us to store ordered collections. So we can make an object or an array and handle it as a single entity, or maybe pass it to a function call.\n\n*Destructuring assignment* is a special syntax that allows us to \"unpack\" arrays or objects into a bunch of variables, as sometimes they are more convenient. Destructuring also works great with complex functions that have a lot of parameters, default values, and soon we'll see how these are handled too.\n\n## Array destructuring\n\nAn example of how the array is destructured into variables:\n\n```js\n// we have an array with the name and surname\nlet arr = [\"Ilya\", \"Kantor\"]\n\n*!*\n// destructuring assignment\nlet [firstName, surname] = arr;\n*/!*\n\nalert(firstName); // Ilya\nalert(surname);  // Kantor\n```\n\nNow we can work with variables instead of array members.\n\nIt looks great when combined with `split` or other array-returning methods:\n\n```js\nlet [firstName, surname] = \"Ilya Kantor\".split(' ');\n```\n\n````smart header=\"\\\"Destructuring\\\" does not mean \\\"destructive\\\"\"\nIt's called \"destructuring assignment\", because it \"destructurizes\" by copying items into variables. But the array itself is not modified.\n\nIt's just a shorter way to write:\n```js\n// let [firstName, surname] = arr;\nlet firstName = arr[0];\nlet surname = arr[1];\n```\n````\n\n````smart header=\"Ignore first elements\"\nUnwanted elements of the array can also be thrown away via an extra comma:\n\n```js run\n*!*\n// first and second elements are not needed\nlet [, , title] = [\"Julius\", \"Caesar\", \"Consul\", \"of the Roman Republic\"];\n*/!*\n\nalert( title ); // Consul\n```\n\nIn the code above, although the first and second elements of the array are skipped, the third one is assigned to `title`, and the rest are also skipped.\n````\n\n````smart header=\"Works with any iterable on the right-side\"\n\n...Actually, we can use it with any iterable, not only arrays:\n\n```js\nlet [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"]\nlet [one, two, three] = new Set([1, 2, 3]);\n```\n\n````\n\n\n````smart header=\"Assign to anything at the left-side\"\n\nWe can use any \"assignables\" at the left side.\n\nFor instance, an object property:\n```js run\nlet user = {};\n[user.name, user.surname] = \"Ilya Kantor\".split(' ');\n\nalert(user.name); // Ilya\n```\n\n````\n\n````smart header=\"Looping with .entries()\"\n\nIn the previous chapter we saw the [Object.entries(obj)](mdn:js/Object/entries) method.\n\nWe can use it with destructuring to loop over keys-and-values of an object:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30\n};\n\n// loop over keys-and-values\n*!*\nfor (let [key, value] of Object.entries(user)) {\n*/!*\n  alert(`${key}:${value}`); // name:John, then age:30\n}\n```\n\n...And the same for a map:\n\n```js run\nlet user = new Map();\nuser.set(\"name\", \"John\");\nuser.set(\"age\", \"30\");\n\n*!*\nfor (let [key, value] of user.entries()) {\n*/!*\n  alert(`${key}:${value}`); // name:John, then age:30\n}\n```\n````\n### The rest '...'\n\nIf we want not just to get first values, but also to gather all that follows -- we can add one more parameter that gets \"the rest\" using three dots `\"...\"`:\n\n```js run\nlet [name1, name2, *!*...rest*/!*] = [\"Julius\", \"Caesar\", *!*\"Consul\", \"of the Roman Republic\"*/!*];\n\nalert(name1); // Julius\nalert(name2); // Caesar\n\n*!*\nalert(rest[0]); // Consul\nalert(rest[1]); // of the Roman Republic\nalert(rest.length); // 2\n*/!*\n```\n\nThe value of `rest` is the array of the remaining array elements. We can use any other variable name in place of `rest`, just make sure it has three dots before it and goes last in the destructuring assignment.\n\n### Default values\n\nIf there are fewer values in the array than variables in the assignment, there will be no error. Absent values are considered undefined:\n\n```js run\n*!*\nlet [firstName, surname] = [];\n*/!*\n\nalert(firstName); // undefined\n```\n\nIf we want a \"default\" value to replace the missing one, we can provide it using `=`:\n\n```js run\n*!*\n// default values\nlet [name = \"Guest\", surname = \"Anonymous\"] = [\"Julius\"];\n*/!*\n\nalert(name);    // Julius (from array)\nalert(surname); // Anonymous (default used)\n```\n\nDefault values can be more complex expressions or even function calls. They are evaluated only if the value is not provided.\n\nFor instance, here we use the `prompt` function for two defaults. But it will run only for the missing one:\n\n```js run\n// runs only prompt for surname\nlet [name = prompt('name?'), surname = prompt('surname?')] = [\"Julius\"];\n\nalert(name);    // Julius (from array)\nalert(surname); // whatever prompt gets\n```\n\n\n\n## Object destructuring\n\nThe destructuring assignment also works with objects.\n\nThe basic syntax is:\n\n```js\nlet {var1, var2} = {var1:…, var2…}\n```\n\nWe have an existing object at the right side, that we want to split into variables. The left side contains a \"pattern\" for corresponding properties. In the simple case, that's a list of variable names in `{...}`.\n\nFor instance:\n\n```js run\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n\n*!*\nlet {title, width, height} = options;\n*/!*\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\n```\n\nProperties `options.title`, `options.width` and `options.height` are assigned to the corresponding variables. The order does not matter. This works too:\n\n```js\n// changed the order of properties in let {...}\nlet {height, width, title} = { title: \"Menu\", height: 200, width: 100 }\n```\n\nThe pattern on the left side may be more complex and specify the mapping between properties and variables.\n\nIf we want to assign a property to a variable with another name, for instance, `options.width` to go into the variable named `w`, then we can set it using a colon:\n\n```js run\nlet options = {\n  title: \"Menu\",\n  width: 100,\n  height: 200\n};\n\n*!*\n// { sourceProperty: targetVariable }\nlet {width: w, height: h, title} = options;\n*/!*\n\n// width -> w\n// height -> h\n// title -> title\n\nalert(title);  // Menu\nalert(w);      // 100\nalert(h);      // 200\n```\n\nThe colon shows \"what : goes where\". In the example above the property `width` goes to `w`, property `height` goes to `h`, and `title` is assigned to the same name.\n\nFor potentially missing properties we can set default values using `\"=\"`, like this:\n\n```js run\nlet options = {\n  title: \"Menu\"\n};\n\n*!*\nlet {width = 100, height = 200, title} = options;\n*/!*\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\n```\n\nJust like with arrays or function parameters, default values can be any expressions or even function calls. They will be evaluated if the value is not provided.\n\nThe code below asks for width, but not the title.\n\n```js run\nlet options = {\n  title: \"Menu\"\n};\n\n*!*\nlet {width = prompt(\"width?\"), title = prompt(\"title?\")} = options;\n*/!*\n\nalert(title);  // Menu\nalert(width);  // (whatever you the result of prompt is)\n```\n\nWe also can combine both the colon and equality:\n\n```js run\nlet options = {\n  title: \"Menu\"\n};\n\n*!*\nlet {width: w = 100, height: h = 200, title} = options;\n*/!*\n\nalert(title);  // Menu\nalert(w);      // 100\nalert(h);      // 200\n```\n\n### The rest operator\n\nWhat if the object has more properties than we have variables? Can we take some and then assign the \"rest\" somewhere?\n\nThe specification for using the rest operator (three dots) here is almost in the standard, but most browsers do not support it yet.\n\nIt looks like this:\n\n```js run\nlet options = {\n  title: \"Menu\",\n  height: 200,\n  width: 100\n};\n\n*!*\nlet {title, ...rest} = options;\n*/!*\n\n// now title=\"Menu\", rest={height: 200, width: 100}\nalert(rest.height);  // 200\nalert(rest.width);   // 100\n```\n\n\n\n````smart header=\"Gotcha without `let`\"\nIn the examples above variables were declared right before the assignment: `let {…} = {…}`. Of course, we could use existing variables too. But there's a catch.\n\nThis won't work:\n```js run\nlet title, width, height;\n\n// error in this line\n{title, width, height} = {title: \"Menu\", width: 200, height: 100};\n```\n\nThe problem is that JavaScript treats `{...}` in the main code flow (not inside another expression) as a code block. Such code blocks can be used to group statements, like this:\n\n```js run\n{\n  // a code block\n  let message = \"Hello\";\n  // ...\n  alert( message );\n}\n```\n\nTo show JavaScript that it's not a code block, we can wrap the whole assignment in brackets `(...)`:\n\n```js run\nlet title, width, height;\n\n// okay now\n*!*(*/!*{title, width, height} = {title: \"Menu\", width: 200, height: 100}*!*)*/!*;\n\nalert( title ); // Menu\n```\n\n````\n\n## Nested destructuring\n\nIf an object or an array contain other objects and arrays, we can use more complex left-side patterns to extract deeper portions.\n\nIn the code below `options` has another object in the property `size` and an array in the property `items`. The pattern at the left side of the assignment has the same structure:\n\n```js run\nlet options = {\n  size: {\n    width: 100,\n    height: 200\n  },\n  items: [\"Cake\", \"Donut\"],\n  extra: true    // something extra that we will not destruct\n};\n\n// destructuring assignment on multiple lines for clarity\nlet {\n  size: { // put size here\n    width,\n    height\n  },\n  items: [item1, item2], // assign items here\n  title = \"Menu\" // not present in the object (default value is used)\n} = options;\n\nalert(title);  // Menu\nalert(width);  // 100\nalert(height); // 200\nalert(item1);  // Cake\nalert(item2);  // Donut\n```\n\nThe whole `options` object except `extra` that was not mentioned, is assigned to corresponding variables.\n\n![](destructuring-complex.png)\n\nFinally, we have `width`, `height`, `item1`, `item2` and `title` from the default value.\n\nThat often happens with destructuring assignments. We have a complex object with many properties and want to extract only what we need.\n\nEven here it happens:\n```js\n// take size as a whole into a variable, ignore the rest\nlet { size } = options;\n```\n\n## Smart function parameters\n\nThere are times when a function may have many parameters, most of which are optional. That's especially true for user interfaces. Imagine a function that creates a menu. It may have a width, a height, a title, items list and so on.\n\nHere's a bad way to write such function:\n\n```js\nfunction showMenu(title = \"Untitled\", width = 200, height = 100, items = []) {\n  // ...\n}\n```\n\nIn real-life the problem is how to remember the order of arguments. Usually IDEs try to help us, especially if the code is well-documented, but still... Another problem is how to call a function when most parameters are ok by default.\n\nLike this?\n\n```js\nshowMenu(\"My Menu\", undefined, undefined, [\"Item1\", \"Item2\"])\n```\n\nThat's ugly. And becomes unreadable when we deal with more parameters.\n\nDestructuring comes to the rescue!\n\nWe can pass parameters as an object, and the function immediately destructurizes them into variables:\n\n```js run\n// we pass object to function\nlet options = {\n  title: \"My menu\",\n  items: [\"Item1\", \"Item2\"]\n};\n\n// ...and it immediately expands it to variables\nfunction showMenu(*!*{title = \"Untitled\", width = 200, height = 100, items = []}*/!*) {\n  // title, items – taken from options,\n  // width, height – defaults used\n  alert( `${title} ${width} ${height}` ); // My Menu 200 100\n  alert( items ); // Item1, Item2\n}\n\nshowMenu(options);\n```\n\nWe can also use more complex destructuring with nested objects and colon mappings:\n\n```js run\nlet options = {\n  title: \"My menu\",\n  items: [\"Item1\", \"Item2\"]\n};\n\n*!*\nfunction showMenu({\n  title = \"Untitled\",\n  width: w = 100,  // width goes to w\n  height: h = 200, // height goes to h\n  items: [item1, item2] // items first element goes to item1, second to item2\n}) {\n*/!*\n  alert( `${title} ${w} ${h}` ); // My Menu 100 200\n  alert( item1 ); // Item1\n  alert( item2 ); // Item2\n}\n\nshowMenu(options);\n```\n\nThe syntax is the same as for a destructuring assignment:\n```js\nfunction({\n  incomingProperty: parameterName = defaultValue\n  ...\n})\n```\n\nPlease note that such destructuring assumes that `showMenu()` does have an argument. If we want all values by default, then we should specify an empty object:\n\n```js\nshowMenu({});\n\n\nshowMenu(); // this would give an error\n```\n\nWe can fix this by making `{}` the default value for the whole destructuring thing:\n\n\n```js run\n// simplified parameters a bit for clarity\nfunction showMenu(*!*{ title = \"Menu\", width = 100, height = 200 } = {}*/!*) {\n  alert( `${title} ${width} ${height}` );\n}\n\nshowMenu(); // Menu 100 200\n```\n\nIn the code above, the whole arguments object is `{}` by default, so there's always something to destructurize.\n\n## Summary\n\n- Destructuring assignment allows for instantly mapping an object or array onto many variables.\n- The object syntax:\n    ```js\n    let {prop : varName = default, ...} = object\n    ```\n\n    This means that property `prop` should go into the variable `varName` and, if no such property exists, then `default` value should be used.\n\n- The array syntax:\n\n    ```js\n    let [item1 = default, item2, ...rest] = array\n    ```\n\n    The first item goes to `item1`, the second goes into `item2`, all the rest makes the array `rest`.\n\n- For more complex cases, the left side must have the same structure as the right one.","libs":[],"children":["destruct-user","max-salary"],"parent":"data-types"}},"destruct-user":{"type":"Task","value":{"title":"Destructuring assignment","slug":"destruct-user","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/09-destructuring-assignment/1-destruct-user","weight":1,"libs":[],"importance":5,"content":"\nWe have an object:\n\n```js\nlet user = {\n  name: \"John\",\n  years: 30\n};\n```\n\nWrite the destructuring assignment that reads:\n\n- `name` property into the variable `name`.\n- `years` property into the variable `age`.\n- `isAdmin` property into the variable `isAdmin` (false if absent)\n\nThe values after the assignment should be:\n\n```js\nlet user = { name: \"John\", years: 30 };\n\n// your code to the left side:\n// ... = user\n\nalert( name ); // John\nalert( age ); // 30\nalert( isAdmin ); // false\n```","solution":"```js run\nlet user = {\n  name: \"John\",\n  years: 30\n};\n\nlet {name, years: age, isAdmin = false} = user;\n\nalert( name ); // John\nalert( age ); // 30\nalert( isAdmin ); // false\n```","parent":"destructuring-assignment"}},"max-salary":{"type":"Task","value":{"title":"The maximal salary","slug":"max-salary","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/09-destructuring-assignment/6-max-salary","weight":6,"libs":[],"importance":5,"content":"\nThere is a `salaries` object:\n\n```js\nlet salaries = {\n  \"John\": 100,\n  \"Pete\": 300,\n  \"Mary\": 250\n};\n```\n\nCreate the function `topSalary(salaries)` that returns the name of the top-paid person.\n\n- If `salaries` is empty, it should return `null`.\n- If there are multiple top-paid persons, return any of them.\n\nP.S. Use `Object.entries` and destructuring to iterate over key/value pairs.","solution":"","parent":"destructuring-assignment"}},"date":{"type":"Article","value":{"title":"Date and time","slug":"date","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/article.md","isFolder":false,"weight":10,"content":"\nLet's meet a new built-in object: [Date](mdn:js/Date). It stores the date, time and provides methods for date/time management.\n\nFor instance, we can use it to store creation/modification times, or to measure time, or just to print out the current date.\n\n## Creation\n\nTo create a new `Date` object call `new Date()` with one of the following arguments:\n\n`new Date()`\n: Without arguments -- create a `Date` object for the current date and time:\n\n    ```js run\n    let now = new Date();\n    alert( now ); // shows current date/time\n    ```\n\n`new Date(milliseconds)`\n: Create a `Date` object with the time equal to number of milliseconds (1/1000 of a second) passed after the Jan 1st of 1970 UTC+0.\n\n    ```js run\n    // 0 means 01.01.1970 UTC+0\n    let Jan01_1970 = new Date(0);\n    alert( Jan01_1970 );\n\n    // now add 24 hours, get 02.01.1970 UTC+0\n    let Jan02_1970 = new Date(24 * 3600 * 1000);\n    alert( Jan02_1970 );\n    ```\n\n    The number of milliseconds that has passed since the beginning of 1970 is called a *timestamp*.\n\n    It's a lightweight numeric representation of a date. We can always create a date from a timestamp using `new Date(timestamp)` and convert the existing `Date` object to a timestamp using the `date.getTime()` method (see below).\n\n`new Date(datestring)`\n: If there is a single argument, and it's a string, then it is parsed with the `Date.parse` algorithm (see below).\n\n\n    ```js run\n    let date = new Date(\"2017-01-26\");\n    alert(date); // Thu Jan 26 2017 ...\n    ```\n\n`new Date(year, month, date, hours, minutes, seconds, ms)`\n: Create the date with the given components in the local time zone. Only two first arguments are obligatory.\n\n    Note:\n\n    - The `year` must have 4 digits: `2013` is okay, `98` is not.\n    - The `month` count starts with `0` (Jan), up to `11` (Dec).\n    - The `date` parameter is actually the day of month, if absent then `1` is assumed.\n    - If `hours/minutes/seconds/ms` is absent, they are assumed to be equal `0`.\n\n    For instance:\n\n    ```js\n    new Date(2011, 0, 1, 0, 0, 0, 0); // // 1 Jan 2011, 00:00:00\n    new Date(2011, 0, 1); // the same, hours etc are 0 by default\n    ```\n\n    The minimal precision is 1 ms (1/1000 sec):\n\n    ```js run\n    let date = new Date(2011, 0, 1, 2, 3, 4, 567);\n    alert( date ); // 1.01.2011, 02:03:04.567\n    ```\n\n## Access date components\n\nThere are many methods to access the year, month and so on from the `Date` object. But they can be easily remembered when categorized.\n\n[getFullYear()](mdn:js/Date/getFullYear)\n: Get the year (4 digits)\n\n[getMonth()](mdn:js/Date/getMonth)\n: Get the month, **from 0 to 11**.\n\n[getDate()](mdn:js/Date/getDate)\n: Get the day of month, from 1 to 31, the name of the method does look a little bit strange.\n\n[getHours()](mdn:js/Date/getHours), [getMinutes()](mdn:js/Date/getMinutes), [getSeconds()](mdn:js/Date/getSeconds), [getMilliseconds()](mdn:js/Date/getMilliseconds)\n: Get the corresponding time components.\n\n```warn header=\"Not `getYear()`, but `getFullYear()`\"\nMany JavaScript engines implement a non-standard method `getYear()`. This method is deprecated. It returns 2-digit year sometimes. Please never use it. There is `getFullYear()` for the year.\n```\n\nAdditionally, we can get a day of week:\n\n[getDay()](mdn:js/Date/getDay)\n: Get the day of week, from `0` (Sunday) to `6` (Saturday). The first day is always Sunday, in some countries that's not so, but can't be changed.\n\n**All the methods above return the components relative to the local time zone.**\n\nThere are also their UTC-counterparts, that return day, month, year and so on for the time zone UTC+0: [getUTCFullYear()](mdn:js/Date/getUTCFullYear), [getUTCMonth()](mdn:js/Date/getUTCMonth), [getUTCDay()](mdn:js/Date/getUTCDay). Just insert the `\"UTC\"` right after `\"get\"`.\n\nIf your local time zone is shifted relative to UTC, then the code below shows different hours:\n\n```js run\n// current date\nlet date = new Date();\n\n// the hour in your current time zone\nalert( date.getHours() );\n\n// the hour in UTC+0 time zone (London time without daylight savings)\nalert( date.getUTCHours() );\n```\n\nBesides the given methods, there are two special ones, that do not have a UTC-variant:\n\n[getTime()](mdn:js/Date/getTime)\n: Returns the timestamp for the date -- a number of milliseconds passed from the January 1st of 1970 UTC+0.\n\n[getTimezoneOffset()](mdn:js/Date/getTimezoneOffset)\n: Returns the difference between the local time zone and UTC, in minutes:\n\n    ```js run\n    // if you are in timezone UTC-1, outputs 60\n    // if you are in timezone UTC+3, outputs -180\n    alert( new Date().getTimezoneOffset() );\n\n    ```\n\n## Setting date components\n\nThe following methods allow to set date/time components:\n\n- [`setFullYear(year [, month, date])`](mdn:js/Date/setFullYear)\n- [`setMonth(month [, date])`](mdn:js/Date/setMonth)\n- [`setDate(date)`](mdn:js/Date/setDate)\n- [`setHours(hour [, min, sec, ms])`](mdn:js/Date/setHours)\n- [`setMinutes(min [, sec, ms])`](mdn:js/Date/setMinutes)\n- [`setSeconds(sec [, ms])`](mdn:js/Date/setSeconds)\n- [`setMilliseconds(ms)`](mdn:js/Date/setMilliseconds)\n- [`setTime(milliseconds)`](mdn:js/Date/setTime) (sets the whole date by milliseconds since 01.01.1970 UTC)\n\nEvery one of them except `setTime()` has a UTC-variant, for instance: `setUTCHours()`.\n\nAs we can see, some methods can set multiple components at once, for example `setHours`. The components that are not mentioned are not modified.\n\nFor instance:\n\n```js run\nlet today = new Date();\n\ntoday.setHours(0);\nalert(today); // still today, but the hour is changed to 0\n\ntoday.setHours(0, 0, 0, 0);\nalert(today); // still today, now 00:00:00 sharp.\n```\n\n## Autocorrection\n\nThe *autocorrection* is a very handy feature of `Date` objects. We can set out-of-range values, and it will auto-adjust itself.\n\nFor instance:\n\n```js run\nlet date = new Date(2013, 0, *!*32*/!*); // 32 Jan 2013 ?!?\nalert(date); // ...is 1st Feb 2013!\n```\n\nOut-of-range date components are distributed automatically.\n\nLet's say we need to increase the date \"28 Feb 2016\" by 2 days. It may be \"2 Mar\" or \"1 Mar\" in case of a leap-year. We don't need to think about it. Just add 2 days. The `Date` object will do the rest:\n\n```js run\nlet date = new Date(2016, 1, 28);\n*!*\ndate.setDate(date.getDate() + 2);\n*/!*\n\nalert( date ); // 1 Mar 2016\n```\n\nThat feature is often used to get the date after the given period of time. For instance, let's get the date for \"70 seconds after now\":\n\n```js run\nlet date = new Date();\ndate.setSeconds(date.getSeconds() + 70);\n\nalert( date ); // shows the correct date\n```\n\nWe can also set zero or even negative values. For example:\n\n```js run\nlet date = new Date(2016, 0, 2); // 2 Jan 2016\n\ndate.setDate(1); // set day 1 of month\nalert( date );\n\ndate.setDate(0); // min day is 1, so the last day of the previous month is assumed\nalert( date ); // 31 Dec 2015\n```\n\n## Date to number, date diff\n\nWhen a `Date` object is converted to number, it becomes the timestamp same as `date.getTime()`:\n\n```js run\nlet date = new Date();\nalert(+date); // the number of milliseconds, same as date.getTime()\n```\n\nThe important side effect: dates can be subtracted, the result is their difference in ms.\n\nThat can be used for time measurements:\n\n```js run\nlet start = new Date(); // start counting\n\n// do the job\nfor (let i = 0; i < 100000; i++) {\n  let doSomething = i * i * i;\n}\n\nlet end = new Date(); // done\n\nalert( `The loop took ${end - start} ms` );\n```\n\n## Date.now()\n\nIf we only want to measure the difference, we don't need the `Date` object.\n\nThere's a special method `Date.now()` that returns the current timestamp.\n\nIt is semantically equivalent to `new Date().getTime()`, but it doesn't create an intermediate `Date` object. So it's faster and doesn't put pressure on garbage collection.\n\nIt is used mostly for convenience or when performance matters, like in games in JavaScript or other specialized applications.\n\nSo this is probably better:\n\n```js run\n*!*\nlet start = Date.now(); // milliseconds count from 1 Jan 1970\n*/!*\n\n// do the job\nfor (let i = 0; i < 100000; i++) {\n  let doSomething = i * i * i;\n}\n\n*!*\nlet end = Date.now(); // done\n*/!*\n\nalert( `The loop took ${end - start} ms` ); // subtract numbers, not dates\n```\n\n## Benchmarking\n\nIf we want a reliable benchmark of CPU-hungry function, we should be careful.\n\nFor instance, let's measure two functions that calculate the difference between two dates: which one is faster?\n\n```js\n// we have date1 and date2, which function faster returns their difference in ms?\nfunction diffSubtract(date1, date2) {\n  return date2 - date1;\n}\n\n// or\nfunction diffGetTime(date1, date2) {\n  return date2.getTime() - date1.getTime();\n}\n```\n\nThese two do exactly the same thing, but one of them uses an explicit `date.getTime()` to get the date in ms, and the other one relies on a date-to-number transform. Their result is always the same.\n\nSo, which one is faster?\n\nThe first idea may be to run them many times in a row and measure the time difference. For our case, functions are very simple, so we have to do it around 100000 times.\n\nLet's measure:\n\n```js run\nfunction diffSubtract(date1, date2) {\n  return date2 - date1;\n}\n\nfunction diffGetTime(date1, date2) {\n  return date2.getTime() - date1.getTime();\n}\n\nfunction bench(f) {\n  let date1 = new Date(0);\n  let date2 = new Date();\n\n  let start = Date.now();\n  for (let i = 0; i < 100000; i++) f(date1, date2);\n  return Date.now() - start;\n}\n\nalert( 'Time of diffSubtract: ' + bench(diffSubtract) + 'ms' );\nalert( 'Time of diffGetTime: ' + bench(diffGetTime) + 'ms' );\n```\n\nWow! Using `getTime()` is so much faster! That's because there's no type conversion, it is much easier for engines to optimize.\n\nOkay, we have something. But that's not a good benchmark yet.\n\nImagine that at the time of running `bench(diffSubtract)` CPU was doing something in parallel, and it was taking resources. And by the time of running `bench(diffGetTime)` the work has finished.\n\nA pretty real scenario for a modern multi-process OS.\n\nAs a result, the first benchmark will have less CPU resources than the second. That may lead to wrong results.\n\n**For more reliable benchmarking, the whole pack of benchmarks should be rerun multiple times.**\n\nHere's the code example:\n\n```js run\nfunction diffSubtract(date1, date2) {\n  return date2 - date1;\n}\n\nfunction diffGetTime(date1, date2) {\n  return date2.getTime() - date1.getTime();\n}\n\nfunction bench(f) {\n  let date1 = new Date(0);\n  let date2 = new Date();\n\n  let start = Date.now();\n  for (let i = 0; i < 100000; i++) f(date1, date2);\n  return Date.now() - start;\n}\n\nlet time1 = 0;\nlet time2 = 0;\n\n*!*\n// run bench(upperSlice) and bench(upperLoop) each 10 times alternating\nfor (let i = 0; i < 10; i++) {\n  time1 += bench(diffSubtract);\n  time2 += bench(diffGetTime);\n}\n*/!*\n\nalert( 'Total time for diffSubtract: ' + time1 );\nalert( 'Total time for diffGetTime: ' + time2 );\n```\n\nModern JavaScript engines start applying advanced optimizations only to \"hot code\" that executes many times (no need to optimize rarely executed things). So, in the example above, first executions are not well-optimized. We may want to add a heat-up run:\n\n```js\n// added for \"heating up\" prior to the main loop\nbench(diffSubtract);\nbench(diffGetTime);\n\n// now benchmark\nfor (let i = 0; i < 10; i++) {\n  time1 += bench(diffSubtract);\n  time2 += bench(diffGetTime);\n}\n```\n\n```warn header=\"Be careful doing microbenchmarking\"\nModern JavaScript engines perform many optimizations. They may tweak results of \"artificial tests\" compared to \"normal usage\", especially when we benchmark something very small. So if you seriously want to understand performance, then please study how the JavaScript engine works. And then you probably won't need microbenchmarks at all.\n\nThe great pack of articles about V8 can be found at <http://mrale.ph>.\n```\n\n## Date.parse from a string\n\nThe method [Date.parse(str)](mdn:js/Date/parse) can read a date from a string.\n\nThe string format should be: `YYYY-MM-DDTHH:mm:ss.sssZ`, where:\n\n- `YYYY-MM-DD` -- is the date: year-month-day.\n- The character `\"T\"` is used as the delimiter.\n- `HH:mm:ss.sss` -- is the time: hours, minutes, seconds and milliseconds.\n- The optional `'Z'` part denotes the time zone in the format `+-hh:mm`. A single letter `Z` that would mean UTC+0.\n\nShorter variants are also possible, like `YYYY-MM-DD` or `YYYY-MM` or even `YYYY`.\n\nThe call to `Date.parse(str)` parses the string in the given format and returns the timestamp (number of milliseconds from 1 Jan 1970 UTC+0). If the format is invalid, returns `NaN`.\n\nFor instance:\n\n```js run\nlet ms = Date.parse('2012-01-26T13:51:50.417-07:00');\n\nalert(ms); // 1327611110417  (timestamp)\n```\n\nWe can instantly create a `new Date` object from the timestamp:\n\n```js run\nlet date = new Date( Date.parse('2012-01-26T13:51:50.417-07:00') );\n\nalert(date);  \n```\n\n## Summary\n\n- Date and time in JavaScript are represented with the [Date](mdn:js/Date) object. We can't create \"only date\" or \"only time\": `Date` objects always carry both.\n- Months are counted from zero (yes, January is a zero month).\n- Days of week in `getDay()` are also counted from zero (that's Sunday).\n- `Date` auto-corrects itself when out-of-range components are set. Good for adding/subtracting days/months/hours.\n- Dates can be subtracted, giving their difference in milliseconds. That's because a `Date` becomes the timestamp when converted to a number.\n- Use `Date.now()` to get the current timestamp fast.\n\nNote that unlike many other systems, timestamps in JavaScript are in milliseconds, not in seconds.\n\nAlso, sometimes we need more precise time measurements. JavaScript itself does not have a way to measure time in microseconds (1 millionth of a second), but most environments provide it. For instance, browser has [performance.now()](mdn:api/Performance/now) that gives the number of milliseconds from the start of page loading with microsecond precision (3 digits after the point):\n\n```js run\nalert(`Loading started ${performance.now()}ms ago`);\n// Something like: \"Loading started 34731.26000000001ms ago\"\n// .26 is microseconds (260 microseconds)\n// more than 3 digits after the decimal point are precision errors, but only the first 3 are correct\n```\n\nNode.JS has `microtime` module and other ways. Technically, any device and environment allows to get more precision, it's just not in `Date`.","libs":[],"children":["new-date","get-week-day","weekday","get-date-ago","last-day-of-month","get-seconds-today","get-seconds-to-tomorrow","format-date-relative"],"parent":"data-types"}},"new-date":{"type":"Task","value":{"title":"Create a date","slug":"new-date","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/1-new-date","weight":1,"libs":[],"importance":5,"content":"\nCreate a `Date` object for the date: Feb 20, 2012, 3:12am. The time zone is local.\n\nShow it using `alert`.","solution":"The `new Date` constructor uses the local time zone by default. So the only important thing to remember is that months start from zero.\n\nSo February has number 1.\n\n```js run\nlet d = new Date(2012, 1, 20, 3, 12);\nalert( d );\n```","parent":"date"}},"get-week-day":{"type":"Task","value":{"title":"Show a weekday","slug":"get-week-day","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/2-get-week-day","weight":2,"libs":[],"importance":5,"content":"\nWrite a function `getWeekDay(date)` to show the weekday in short format: 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'.\n\nFor instance:\n\n```js no-beautify\nlet date = new Date(2012, 0, 3);  // 3 Jan 2012\nalert( getWeekDay(date) );        // should output \"TU\"\n```","solution":"The method `date.getDay()` returns the number of the weekday, starting from sunday.\n\nLet's make an array of weekdays, so that we can get the proper day name by its number:\n\n```js run\nfunction getWeekDay(date) {\n  let days = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\n\n  return days[date.getDay()];\n}\n\nlet date = new Date(2014, 0, 3); // 3 Jan 2014\nalert( getWeekDay(date) ); // FR\n```","parent":"date"}},"weekday":{"type":"Task","value":{"title":"European weekday","slug":"weekday","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/3-weekday","weight":3,"libs":[],"importance":5,"content":"\nEuropean countries have days of week starting with Monday (number 1), then Tuesday (number 2) and till Sunday (number 7). Write a function `getLocalDay(date)` that returns the \"European\" day of week for `date`.\n\n```js no-beautify\nlet date = new Date(2012, 0, 3);  // 3 Jan 2012\nalert( getLocalDay(date) );       // tuesday, should show 2\n```","solution":"```js run\nfunction getLocalDay(date) {\n\n  let day = date.getDay();\n\n  if (day == 0) { // 0 becomes 7\n    day = 7;\n  }\n\n  return day;\n}\n\nalert( getLocalDay(new Date(2012, 0, 3)) ); // 2\n```","parent":"date"}},"get-date-ago":{"type":"Task","value":{"title":"Which day of month was many days ago?","slug":"get-date-ago","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/4-get-date-ago","weight":4,"libs":[],"importance":4,"content":"\nCreate a function `getDateAgo(date, days)` to return the day of month `days` ago from the `date`.\n\nFor instance, if today is 20th, then `getDateAgo(new Date(), 1)` should be 19th and `getDateAgo(new Date(), 2)` should be 18th.\n\nShould also work over months/years reliably:\n\n```js\nlet date = new Date(2015, 0, 2);\n\nalert( getDateAgo(date, 1) ); // 1, (1 Jan 2015)\nalert( getDateAgo(date, 2) ); // 31, (31 Dec 2014)\nalert( getDateAgo(date, 365) ); // 2, (2 Jan 2014)\n```\n\nP.S. The function should not modify the given `date`.","solution":"The idea is simple: to substract given number of days from `date`:\n\n```js\nfunction getDateAgo(date, days) {\n  date.setDate(date.getDate() - days);\n  return date.getDate();\n}\n```\n\n...But the function should not change `date`. That's an important thing, because the outer code which gives us the date does not expect it to change.\n\nTo implement it let's clone the date, like this:\n\n```js run\nfunction getDateAgo(date, days) {\n  let dateCopy = new Date(date);\n\n  dateCopy.setDate(date.getDate() - days);\n  return dateCopy.getDate();\n}\n\nlet date = new Date(2015, 0, 2);\n\nalert( getDateAgo(date, 1) ); // 1, (1 Jan 2015)\nalert( getDateAgo(date, 2) ); // 31, (31 Dec 2014)\nalert( getDateAgo(date, 365) ); // 2, (2 Jan 2014)\n```","parent":"date"}},"last-day-of-month":{"type":"Task","value":{"title":"Last day of month?","slug":"last-day-of-month","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/5-last-day-of-month","weight":5,"libs":[],"importance":5,"content":"\nWrite a function `getLastDayOfMonth(year, month)` that returns the last day of month. Sometimes it is 30th, 31st or even 28/29th for Feb.\n\nParameters:\n\n- `year` -- four-digits year, for instance 2012.\n- `month` -- month, from 0 to 11.\n\nFor instance, `getLastDayOfMonth(2012, 1) = 29` (leap year, Feb).","solution":"Let's create a date using the next month, but pass zero as the day:\n```js run\nfunction getLastDayOfMonth(year, month) {\n  let date = new Date(year, month + 1, 0);\n  return date.getDate();\n}\n\nalert( getLastDayOfMonth(2012, 0) ); // 31\nalert( getLastDayOfMonth(2012, 1) ); // 29\nalert( getLastDayOfMonth(2013, 1) ); // 28\n```\n\nNormally, dates start from 1, but technically we can pass any number, the date will autoadjust itself. So when we pass 0, then it means \"one day before 1st day of the month\", in other words: \"the last day of the previous month\".","parent":"date"}},"get-seconds-today":{"type":"Task","value":{"title":"How many seconds has passed today?","slug":"get-seconds-today","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/6-get-seconds-today","weight":6,"libs":[],"importance":5,"content":"\nWrite a function `getSecondsToday()` that returns the number of seconds from the beginning of today.\n\nFor instance, if now `10:00 am`, and there was no daylight savings shift, then:\n\n```js\ngetSecondsToday() == 36000 // (3600 * 10)\n```\n\nThe function should work in any day. That is, it should not have a hard-coded value of \"today\".","solution":"To get the number of seconds, we can generate a date using the current day and time 00:00:00, then substract it from \"now\".\n\nThe difference is the number of milliseconds from the beginning of the day, that we should divide by 1000 to get seconds:\n\n```js run\nfunction getSecondsToday() {\n  let now = new Date();\n\n  // create an object using the current day/month/year\n  let today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n  let diff = now - today; // ms difference\n  return Math.round(diff / 1000); // make seconds\n}\n\nalert( getSecondsToday() );\n```\n\nAn alternative solution would be to get hours/minutes/seconds and convert them to seconds:\n\n```js run\nfunction getSecondsToday() {\n  let d = new Date();\n  return d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds();\n};\n```","parent":"date"}},"get-seconds-to-tomorrow":{"type":"Task","value":{"title":"How many seconds till tomorrow?","slug":"get-seconds-to-tomorrow","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/7-get-seconds-to-tomorrow","weight":7,"libs":[],"importance":5,"content":"\nCreate a function `getSecondsToTomorrow()` that returns the number of seconds till tomorrow.\n\nFor instance, if now is `23:00`, then:\n\n```js\ngetSecondsToTomorrow() == 3600\n```\n\nP.S. The function should work at any day, the \"today\" is not hardcoded.","solution":"To get the number of milliseconds till tomorrow, we can from \"tomorrow 00:00:00\" substract the current date.\n\nFirst, we generate that \"tomorrow\", and then do it:\n\n```js run\nfunction getSecondsToTomorrow() {\n  let now = new Date();\n\n  // tomorrow date\n  let tomorrow = new Date(now.getFullYear(), now.getMonth(), *!*now.getDate()+1*/!*);\n\n  let diff = tomorrow - now; // difference in ms\n  return Math.round(diff / 1000); // convert to seconds\n}\n```\n\nAlternative solution:\n\n```js run\nfunction getSecondsToTomorrow() {\n  let now = new Date();\n  let hour = now.getHours();\n  let minutes = now.getMinutes();\n  let seconds = now.getSeconds();\n  let totalSecondsToday = (hour * 60 + minutes) * 60 + seconds;\n  let totalSecondsInADay = 86400;\n\n  return totalSecondsInADay - totalSecondsToday;\n}\n```\n\nPlease note that many countries have Daylight Savings Time (DST), so there may be days with 23 or 25 hours. We may want to treat such days separately.","parent":"date"}},"format-date-relative":{"type":"Task","value":{"title":"Format the relative date","slug":"format-date-relative","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/10-date/8-format-date-relative","weight":8,"libs":[],"importance":4,"content":"\nWrite a function `formatDate(date)` that should format `date` as follows:\n\n- If since `date` passed less than 1 second, then `\"right now\"`.\n- Otherwise, if since `date` passed less than 1 minute, then `\"n sec. ago\"`.\n- Otherwise, if less than an hour, then `\"m min. ago\"`.\n- Otherwise, the full date in the format `\"DD.MM.YY HH:mm\"`. That is: `\"day.month.year hours:minutes\"`, all in 2-digit format, e.g. `31.12.16 10:00`.\n\nFor instance:\n\n```js\nalert( formatDate(new Date(new Date - 1)) ); // \"right now\"\n\nalert( formatDate(new Date(new Date - 30 * 1000)) ); // \"30 sec. ago\"\n\nalert( formatDate(new Date(new Date - 5 * 60 * 1000)) ); // \"5 min. ago\"\n\n// yesterday's date like 31.12.2016, 20:00\nalert( formatDate(new Date(new Date - 86400 * 1000)) );\n```","solution":"To get the time from `date` till now -- let's substract the dates.\n\n```js run\nfunction formatDate(date) {\n  let diff = new Date() - date; // the difference in milliseconds\n\n  if (diff < 1000) { // less than 1 second\n    return 'right now';\n  }\n\n  let sec = Math.floor(diff / 1000); // convert diff to seconds\n\n  if (sec < 60) {\n    return sec + ' sec. ago';\n  }\n\n  let min = Math.floor(diff / 60000); // convert diff to minutes\n  if (min < 60) {\n    return min + ' min. ago';\n  }\n\n  // format the date\n  // add leading zeroes to single-digit day/month/hours/minutes\n  let d = date;\n  d = [\n    '0' + d.getDate(),\n    '0' + (d.getMonth() + 1),\n    '' + d.getFullYear(),\n    '0' + d.getHours(),\n    '0' + d.getMinutes()\n  ].map(component => component.slice(-2)); // take last 2 digits of every component\n\n  // join the components into date\n  return d.slice(0, 3).join('.') + ' ' + d.slice(3).join(':');\n}\n\nalert( formatDate(new Date(new Date - 1)) ); // \"right now\"\n\nalert( formatDate(new Date(new Date - 30 * 1000)) ); // \"30 sec. ago\"\n\nalert( formatDate(new Date(new Date - 5 * 60 * 1000)) ); // \"5 min. ago\"\n\n// yesterday's date like 31.12.2016, 20:00\nalert( formatDate(new Date(new Date - 86400 * 1000)) );\n```\n\nAlternative solution:\n\n```js run\nfunction formatDate(date) {\n  let dayOfMonth = date.getDate();\n  let month = date.getMonth() + 1;\n  let year = date.getFullYear();\n  let hour = date.getHours();\n  let minutes = date.getMinutes();\n  let diffMs = new Date() - date;\n  let diffSec = Math.round(diffMs / 1000);\n  let diffMin = diffSec / 60;\n  let diffHour = diffMin / 60;\n      \n  // formatting\n  year = year.toString().slice(-2);\n  month = month < 10 ? '0' + month : month;\n  dayOfMonth = dayOfMonth < 10 ? '0' + dayOfMonth : dayOfMonth;\n      \n  if (diffSec < 1) {\n    return 'right now';  \n  } else if (diffMin < 1) {\n    return `${diffSec} sec. ago`\n  } else if (diffHour < 1) {\n    return `${diffMin} min. ago`\n  } else {\n    return `${dayOfMonth}.${month}.${year} ${hour}:${minutes}`\n  }\n}\n```","parent":"date"}},"json":{"type":"Article","value":{"title":"JSON methods, toJSON","slug":"json","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/11-json/article.md","isFolder":false,"weight":11,"content":"\nLet's say we have a complex object, and we'd like to convert it into a string, to send it over a network, or just to output it for logging purposes.\n\nNaturally, such a string should include all important properties.\n\nWe could implement the conversion like this:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 30,\n\n*!*\n  toString() {\n    return `{name: \"${this.name}\", age: ${this.age}}`;\n  }\n*/!*\n};\n\nalert(user); // {name: \"John\", age: 30}\n```\n\n...But in the process of development, new properties are added, old properties are renamed and removed. Updating such `toString` every time can become a pain. We could try to loop over properties in it, but what if the object is complex and has nested objects in properties? We'd need to implement their conversion as well. And, if we're sending the object over a network, then we also need to supply the code to \"read\" our object on the receiving side.\n\nLuckily, there's no need to write the code to handle all this. The task has been solved already.\n\n## JSON.stringify\n\nThe [JSON](http://en.wikipedia.org/wiki/JSON) (JavaScript Object Notation) is a general format to represent values and objects. It is described as in [RFC 4627](http://tools.ietf.org/html/rfc4627) standard. Initially it was made for JavaScript, but many other languages have libraries to handle it as well.  So it's easy to use JSON for data exchange when the client uses JavaScript and the server is written on Ruby/PHP/Java/Whatever.\n\nJavaScript provides methods:\n\n- `JSON.stringify` to convert objects into JSON.\n- `JSON.parse` to convert JSON back into an object.\n\nFor instance, here we `JSON.stringify` a student:\n```js run\nlet student = {\n  name: 'John',\n  age: 30,\n  isAdmin: false,\n  courses: ['html', 'css', 'js'],\n  wife: null\n};\n\n*!*\nlet json = JSON.stringify(student);\n*/!*\n\nalert(typeof json); // we've got a string!\n\nalert(json);\n*!*\n/* JSON-encoded object:\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isAdmin\": false,\n  \"courses\": [\"html\", \"css\", \"js\"],\n  \"wife\": null\n}\n*/\n*/!*\n```\n\nThe method `JSON.stringify(student)` takes the object and converts it into a string.\n\nThe resulting `json` string is a called *JSON-encoded* or *serialized* or *stringified* or *marshalled* object. We are ready to send it over the wire or put into plain data store.\n\n\nPlease note that JSON-encoded object has several important differences from the object literal:\n\n- Strings use double quotes. No single quotes or backticks in JSON. So `'John'` becomes `\"John\"`.\n- Object property names are double-quoted also. That's obligatory. So `age:30` becomes `\"age\":30`.\n\n`JSON.stringify` can be applied to primitives as well.\n\nNatively supported JSON types are:\n\n- Objects `{ ... }`\n- Arrays `[ ... ]`\n- Primitives:\n    - strings,\n    - numbers,\n    - boolean values `true/false`,\n    - `null`.\n\nFor instance:\n\n```js run\n// a number in JSON is just a number\nalert( JSON.stringify(1) ) // 1\n\n// a string in JSON is still a string, but double-quoted\nalert( JSON.stringify('test') ) // \"test\"\n\nalert( JSON.stringify(true) ); // true\n\nalert( JSON.stringify([1, 2, 3]) ); // [1,2,3]\n```\n\nJSON is data-only cross-language specification, so some JavaScript-specific object properties are skipped by `JSON.stringify`.\n\nNamely:\n\n- Function properties (methods).\n- Symbolic properties.\n- Properties that store `undefined`.\n\n```js run\nlet user = {\n  sayHi() { // ignored\n    alert(\"Hello\");\n  },\n  [Symbol(\"id\")]: 123, // ignored\n  something: undefined // ignored\n};\n\nalert( JSON.stringify(user) ); // {} (empty object)\n```\n\nUsually that's fine. If that's not what we want, then soon we'll see how to customize the process.\n\nThe great thing is that nested objects are supported and converted automatically.\n\nFor instance:\n\n```js run\nlet meetup = {\n  title: \"Conference\",\n*!*\n  room: {\n    number: 23,\n    participants: [\"john\", \"ann\"]\n  }\n*/!*\n};\n\nalert( JSON.stringify(meetup) );\n/* The whole structure is stringified:\n{\n  \"title\":\"Conference\",\n  \"room\":{\"number\":23,\"participants\":[\"john\",\"ann\"]},\n}\n*/\n```\n\nThe important limitation: there must be no circular references.\n\nFor instance:\n\n```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  participants: [\"john\", \"ann\"]\n};\n\nmeetup.place = room;       // meetup references room\nroom.occupiedBy = meetup; // room references meetup\n\n*!*\nJSON.stringify(meetup); // Error: Converting circular structure to JSON\n*/!*\n```\n\nHere, the conversion fails, because of circular reference: `room.occupiedBy` references `meetup`, and `meetup.place` references `room`:\n\n![](json-meetup.png)\n\n\n## Excluding and transforming: replacer\n\nThe full syntax of `JSON.stringify` is:\n\n```js\nlet json = JSON.stringify(value[, replacer, space])\n```\n\nvalue\n: A value to encode.\n\nreplacer\n: Array of properties to encode or a mapping function `function(key, value)`.\n\nspace\n: Amount of space to use for formatting\n\nMost of time, `JSON.stringify` is used with first argument only. But if we need to fine-tune the replacement process, like to filter out circular references, we can use the second argument of `JSON.stringify`.\n\nIf we pass an array of properties to it, only these properties will be encoded.\n\nFor instance:\n\n```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room // meetup references room\n};\n\nroom.occupiedBy = meetup; // room references meetup\n\nalert( JSON.stringify(meetup, *!*['title', 'participants']*/!*) );\n// {\"title\":\"Conference\",\"participants\":[{},{}]}\n```\n\nHere we are probably too strict. The property list is applied to the whole object structure. So participants are empty, because `name` is not in the list.\n\nLet's include every property except `room.occupiedBy` that would cause the circular reference:\n\n```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room // meetup references room\n};\n\nroom.occupiedBy = meetup; // room references meetup\n\nalert( JSON.stringify(meetup, *!*['title', 'participants', 'place', 'name', 'number']*/!*) );\n/*\n{\n  \"title\":\"Conference\",\n  \"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\n  \"place\":{\"number\":23}\n}\n*/\n```\n\nNow everything except `occupiedBy` is serialized. But the list of properties is quite long.\n\nFortunately, we can use a function instead of an array as the `replacer`.\n\nThe function will be called for every `(key,value)` pair and should return the \"replaced\" value, which will be used instead of the original one.\n\nIn our case, we can return `value` \"as is\" for everything except `occupiedBy`. To ignore `occupiedBy`, the code below returns `undefined`:\n\n```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  participants: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room // meetup references room\n};\n\nroom.occupiedBy = meetup; // room references meetup\n\nalert( JSON.stringify(meetup, function replacer(key, value) {\n  alert(`${key}: ${value}`); // to see what replacer gets\n  return (key == 'occupiedBy') ? undefined : value;\n}));\n\n/* key:value pairs that come to replacer:\n:             [object Object]\ntitle:        Conference\nparticipants: [object Object],[object Object]\n0:            [object Object]\nname:         John\n1:            [object Object]\nname:         Alice\nplace:        [object Object]\nnumber:       23\n*/\n```\n\nPlease note that `replacer` function gets every key/value pair including nested objects and array items. It is applied recursively. The value of `this` inside `replacer` is the object that contains the current property.\n\nThe first call is special. It is made using a special \"wrapper object\": `{\"\": meetup}`. In other words, the first `(key,value)` pair has an empty key, and the value is the target object as a whole. That's why the first line is `\":[object Object]\"` in the example above.\n\nThe idea is to provide as much power for `replacer` as possible: it has a chance to analyze and replace/skip the whole object if necessary.\n\n\n## Formatting: spacer\n\nThe third argument of `JSON.stringify(value, replacer, spaces)` is the number of spaces to use for pretty formatting.\n\nPreviously, all stringified objects had no indents and extra spaces. That's fine if we want to send an object over a network. The `spacer` argument is used exclusively for a nice output.\n\nHere `spacer = 2` tells JavaScript to show nested objects on multiple lines, with indentation of 2 spaces inside an object:\n\n```js run\nlet user = {\n  name: \"John\",\n  age: 25,\n  roles: {\n    isAdmin: false,\n    isEditor: true\n  }\n};\n\nalert(JSON.stringify(user, null, 2));\n/* two-space indents:\n{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"roles\": {\n    \"isAdmin\": false,\n    \"isEditor\": true\n  }\n}\n*/\n\n/* for JSON.stringify(user, null, 4) the result would be more indented:\n{\n    \"name\": \"John\",\n    \"age\": 25,\n    \"roles\": {\n        \"isAdmin\": false,\n        \"isEditor\": true\n    }\n}\n*/\n```\n\nThe `spaces` parameter is used solely for logging and nice-output purposes.\n\n## Custom \"toJSON\"\n\nLike `toString` for a string conversion, an object may provide method `toJSON` for to-JSON conversion. `JSON.stringify` automatically calls it if available.\n\nFor instance:\n\n```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  date: new Date(Date.UTC(2017, 0, 1)),\n  room\n};\n\nalert( JSON.stringify(meetup) );\n/*\n  {\n    \"title\":\"Conference\",\n*!*\n    \"date\":\"2017-01-01T00:00:00.000Z\",  // (1)\n*/!*\n    \"room\": {\"number\":23}               // (2)\n  }\n*/\n```\n\nHere we can see that `date` `(1)` became a string. That's because all dates have a built-in `toJSON` method which returns such kind of string.\n\nNow let's add a custom `toJSON` for our object `room`:\n\n```js run\nlet room = {\n  number: 23,\n*!*\n  toJSON() {\n    return this.number;\n  }\n*/!*\n};\n\nlet meetup = {\n  title: \"Conference\",\n  room\n};\n\n*!*\nalert( JSON.stringify(room) ); // 23\n*/!*\n\nalert( JSON.stringify(meetup) );\n/*\n  {\n    \"title\":\"Conference\",\n*!*\n    \"room\": 23\n*/!*\n  }\n*/\n```\n\nAs we can see, `toJSON` is used both for the direct call `JSON.stringify(room)` and for the nested object.\n\n\n## JSON.parse\n\nTo decode a JSON-string, we need another method named [JSON.parse](mdn:js/JSON/parse).\n\nThe syntax:\n```js\nlet value = JSON.parse(str[, reviver]);\n```\n\nstr\n: JSON-string to parse.\n\nreviver\n: Optional function(key,value) that will be called for each `(key,value)` pair and can transform the value.\n\nFor instance:\n\n```js run\n// stringified array\nlet numbers = \"[0, 1, 2, 3]\";\n\nnumbers = JSON.parse(numbers);\n\nalert( numbers[1] ); // 1\n```\n\nOr for nested objects:\n\n```js run\nlet user = '{ \"name\": \"John\", \"age\": 35, \"isAdmin\": false, \"friends\": [0,1,2,3] }';\n\nuser = JSON.parse(user);\n\nalert( user.friends[1] ); // 1\n```\n\nThe JSON may be as complex as necessary, objects and arrays can include other objects and arrays. But they must obey the format.\n\nHere are typical mistakes in hand-written JSON (sometimes we have to write it for debugging purposes):\n\n```js\nlet json = `{\n  *!*name*/!*: \"John\",                     // mistake: property name without quotes\n  \"surname\": *!*'Smith'*/!*,               // mistake: single quotes in value (must be double)\n  *!*'isAdmin'*/!*: false                  // mistake: single quotes in key (must be double)\n  \"birthday\": *!*new Date(2000, 2, 3)*/!*, // mistake: no \"new\" is allowed, only bare values\n  \"friends\": [0,1,2,3]              // here all fine\n}`;\n```\n\nBesides, JSON does not support comments. Adding a comment to JSON makes it invalid.\n\nThere's another format named [JSON5](http://json5.org/), which allows unquoted keys, comments etc. But this is a standalone library, not in the specification of the language.\n\nThe regular JSON is that strict not because its developers are lazy, but to allow easy, reliable and very fast implementations of the parsing algorithm.\n\n## Using reviver\n\nImagine, we got a stringified `meetup` object from the server.\n\nIt looks like this:\n\n```js\n// title: (meetup title), date: (meetup date)\nlet str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}';\n```\n\n...And now we need to *deserialize* it, to turn back into JavaScript object.\n\nLet's do it by calling `JSON.parse`:\n\n```js run\nlet str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}';\n\nlet meetup = JSON.parse(str);\n\n*!*\nalert( meetup.date.getDate() ); // Error!\n*/!*\n```\n\nWhoops! An error!\n\nThe value of `meetup.date` is a string, not a `Date` object. How could `JSON.parse` know that it should transform that string into a `Date`?\n\nLet's pass to `JSON.parse` the reviving function that returns all values \"as is\", but `date` will become a `Date`:\n\n```js run\nlet str = '{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}';\n\n*!*\nlet meetup = JSON.parse(str, function(key, value) {\n  if (key == 'date') return new Date(value);\n  return value;\n});\n*/!*\n\nalert( meetup.date.getDate() ); // now works!\n```\n\nBy the way, that works for nested objects as well:\n\n```js run\nlet schedule = `{\n  \"meetups\": [\n    {\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"},\n    {\"title\":\"Birthday\",\"date\":\"2017-04-18T12:00:00.000Z\"}\n  ]\n}`;\n\nschedule = JSON.parse(schedule, function(key, value) {\n  if (key == 'date') return new Date(value);\n  return value;\n});\n\n*!*\nalert( schedule.meetups[1].date.getDate() ); // works!\n*/!*\n```\n\n\n\n## Summary\n\n- JSON is a data format that has its own independent standard and libraries for most programming languages.\n- JSON supports plain objects, arrays, strings, numbers, booleans and `null`.\n- JavaScript provides methods [JSON.stringify](mdn:js/JSON/stringify) to serialize into JSON and [JSON.parse](mdn:js/JSON/parse) to read from JSON.\n- Both methods support transformer functions for smart reading/writing.\n- If an object has `toJSON`, then it is called by `JSON.stringify`.","libs":[],"children":["serialize-object","serialize-event-circular"],"parent":"data-types"}},"serialize-object":{"type":"Task","value":{"title":"Turn the object into JSON and back","slug":"serialize-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/11-json/1-serialize-object","weight":1,"libs":[],"importance":5,"content":"\nTurn the `user` into JSON and then read it back into another variable.\n\n```js\nlet user = {\n  name: \"John Smith\",\n  age: 35\n};\n```","solution":"```js\nlet user = {\n  name: \"John Smith\",\n  age: 35\n};\n\n*!*\nlet user2 = JSON.parse(JSON.stringify(user));\n*/!*\n```","parent":"json"}},"serialize-event-circular":{"type":"Task","value":{"title":"Exclude backreferences","slug":"serialize-event-circular","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/05-data-types/11-json/2-serialize-event-circular","weight":2,"libs":[],"importance":5,"content":"\nIn simple cases of circular references, we can exclude an offending property from serialization by its name.\n\nBut sometimes there are many backreferences. And names may be used both in circular references and normal properties.\n\nWrite `replacer` function to stringify everything, but remove properties that reference `meetup`:\n\n```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  occupiedBy: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room\n};\n\n*!*\n// circular references \nroom.occupiedBy = meetup;\nmeetup.self = meetup;\n*/!*\n\nalert( JSON.stringify(meetup, function replacer(key, value) {\n  /* your code */\n}));\n\n/* result should be:\n{\n  \"title\":\"Conference\",\n  \"occupiedBy\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\n  \"place\":{\"number\":23}\n}\n*/\n```","solution":"```js run\nlet room = {\n  number: 23\n};\n\nlet meetup = {\n  title: \"Conference\",\n  occupiedBy: [{name: \"John\"}, {name: \"Alice\"}],\n  place: room\n};\n\nroom.occupiedBy = meetup;\nmeetup.self = meetup;\n\nalert( JSON.stringify(meetup, function replacer(key, value) {\n  return (key != \"\" && value == meetup) ? undefined : value;\n}));\n\n/* \n{\n  \"title\":\"Conference\",\n  \"occupiedBy\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\n  \"place\":{\"number\":23}\n}\n*/\n```\n\nHere we also need to test `key==\"\"` to exclude the first call where it is normal that `value` is `meetup`.","parent":"json"}},"advanced-functions":{"type":"Article","value":{"title":"Advanced working with functions","slug":"advanced-functions","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions","isFolder":true,"weight":6,"content":"","libs":[],"children":["recursion","rest-parameters-spread-operator","closure","var","global-object","function-object","new-function","settimeout-setinterval","call-apply-decorators","bind","currying-partials","arrow-functions"],"parent":"js"}},"recursion":{"type":"Article","value":{"title":"Recursion and stack","slug":"recursion","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/01-recursion/article.md","isFolder":false,"weight":1,"content":"\nLet's return to functions and study them more in-depth.\n\nOur first topic will be *recursion*.\n\nIf you are not new to programming, then it is probably familiar and you could skip this chapter.\n\nRecursion is a programming pattern that is useful in situations when a task can be naturally split into several tasks of the same kind, but simpler. Or when a task can be simplified into an easy action plus a simpler variant of the same task. Or, as we'll see soon, to deal with certain data structures.\n\nWhen a function solves a task, in the process it can call many other functions. A partial case of this is when a function calls *itself*. That's called *recursion*.\n\n## Two ways of thinking\n\nFor something simple to start with -- let's write a function `pow(x, n)` that raises `x` to a natural power of `n`. In other words, multiplies `x` by itself `n` times.\n\n```js\npow(2, 2) = 4\npow(2, 3) = 8\npow(2, 4) = 16\n```\n\nThere are two ways to implement it.\n\n1. Iterative thinking: the `for` loop:\n\n    ```js run\n    function pow(x, n) {\n      let result = 1;\n\n      // multiply result by x n times in the loop\n      for (let i = 0; i < n; i++) {\n        result *= x;\n      }\n\n      return result;\n    }\n\n    alert( pow(2, 3) ); // 8\n    ```\n\n2. Recursive thinking: simplify the task and call self:\n\n    ```js run\n    function pow(x, n) {\n      if (n == 1) {\n        return x;\n      } else {\n        return x * pow(x, n - 1);\n      }\n    }\n\n    alert( pow(2, 3) ); // 8\n    ```\n\nPlease note how the recursive variant is fundamentally different.\n\nWhen `pow(x, n)` is called, the execution splits into two branches:\n\n```js\n              if n==1  = x\n             /\npow(x, n) =\n             \\       \n              else     = x * pow(x, n - 1)\n```\n\n1. If `n == 1`, then everything is trivial. It is called *the base* of recursion, because it immediately produces the obvious result: `pow(x, 1)` equals `x`.\n2. Otherwise, we can represent `pow(x, n)` as `x * pow(x, n - 1)`. In maths, one would write <code>x<sup>n</sup> = x * x<sup>n-1</sup></code>. This is called *a recursive step*: we transform the task into a simpler action (multiplication by `x`) and a simpler call of the same task (`pow` with lower `n`). Next steps simplify it further and further until `n` reaches `1`.\n\nWe can also say that `pow` *recursively calls itself* till `n == 1`.\n\n![recursive diagram of pow](recursion-pow.png)\n\n\nFor example, to calculate `pow(2, 4)` the recursive variant does these steps:\n\n1. `pow(2, 4) = 2 * pow(2, 3)`\n2. `pow(2, 3) = 2 * pow(2, 2)`\n3. `pow(2, 2) = 2 * pow(2, 1)`\n4. `pow(2, 1) = 2`\n\nSo, the recursion reduces a function call to a simpler one, and then -- to even more simpler, and so on, until the result becomes obvious.\n\n````smart header=\"Recursion is usually shorter\"\nA recursive solution is usually shorter than an iterative one.\n\nHere we can rewrite the same using the ternary `?` operator instead of `if` to make `pow(x, n)` more terse and still very readable:\n\n```js run\nfunction pow(x, n) {\n  return (n == 1) ? x : (x * pow(x, n - 1));\n}\n```\n````\n\nThe maximal number of nested calls (including the first one) is called *recursion depth*. In our case, it will be exactly `n`.\n\nThe maximal recursion depth is limited by JavaScript engine. We can make sure about 10000, some engines allow more, but 100000 is probably out of limit for the majority of them. There are automatic optimizations that help alleviate this (\"tail calls optimizations\"), but they are not yet supported everywhere and work only in simple cases.\n\nThat limits the application of recursion, but it still remains very wide. There are many tasks where recursive way of thinking gives simpler code, easier to maintain.\n\n## The execution stack\n\nNow let's examine how recursive calls work. For that we'll look under the hood of functions.\n\nThe information about a function run is stored in its *execution context*.\n\nThe [execution context](https://tc39.github.io/ecma262/#sec-execution-contexts) is an internal data structure that contains details about the execution of a function: where the control flow is now, the current variables, the value of `this` (we don't use it here) and few other internal details.\n\nOne function call has exactly one execution context associated with it.\n\nWhen a function makes a nested call, the following happens:\n\n- The current function is paused.\n- The execution context associated with it is remembered in a special data structure called *execution context stack*.\n- The nested call executes.\n- After it ends, the old execution context is retrieved from the stack, and the outer function is resumed from where it stopped.\n\nLet's see what happens during the `pow(2, 3)` call.\n\n### pow(2, 3)\n\nIn the beginning of the call `pow(2, 3)` the execution context will store variables: `x = 2, n = 3`, the execution flow is at line `1` of the function.\n\nWe can sketch it as:\n\n<ul class=\"function-execution-context-list\">\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 3, at line 1 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 3)</span>\n  </li>\n</ul>\n\nThat's when the function starts to execute. The condition `n == 1` is false, so the flow continues into the second branch of `if`:\n\n```js run\nfunction pow(x, n) {\n  if (n == 1) {\n    return x;\n  } else {\n*!*\n    return x * pow(x, n - 1);\n*/!*\n  }\n}\n\nalert( pow(2, 3) );\n```\n\n\nThe variables are same, but the line changes, so the context is now:\n\n<ul class=\"function-execution-context-list\">\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 3, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 3)</span>\n  </li>\n</ul>\n\nTo calculate `x * pow(x, n - 1)`, we need to make a subcall of `pow` with new arguments `pow(2, 2)`.\n\n### pow(2, 2)\n\nTo do a nested call, JavaScript remembers the current execution context in the *execution context stack*.\n\nHere we call the same function `pow`, but it absolutely doesn't matter. The process is the same for all functions:\n\n1. The current context is \"remembered\" on top of the stack.\n2. The new context is created for the subcall.\n3. When the subcall is finished -- the previous context is popped from the stack, and its execution continues.\n\nHere's the context stack when we entered the subcall `pow(2, 2)`:\n\n<ul class=\"function-execution-context-list\">\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 2, at line 1 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 2)</span>\n  </li>\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 3, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 3)</span>\n  </li>\n</ul>\n\nThe new current execution context is on top (and bold), and previous remembered contexts are below.\n\nWhen we finish the subcall -- it is easy to resume the previous context, because it keeps both variables and the exact place of the code where it stopped. Here in the picture we use the word \"line\", but of course it's more precise.\n\n### pow(2, 1)\n\nThe process repeats: a new subcall is made at line `5`, now with arguments `x=2`, `n=1`.\n\nA new execution context is created, the previous one is pushed on top of the stack:\n\n<ul class=\"function-execution-context-list\">\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 1, at line 1 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 1)</span>\n  </li>\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 2, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 2)</span>\n  </li>\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 3, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 3)</span>\n  </li>\n</ul>\n\nThere are 2 old contexts now and 1 currently running for `pow(2, 1)`.\n\n### The exit\n\nDuring the execution of `pow(2, 1)`, unlike before, the condition `n == 1` is truthy, so the first branch of `if` works:\n\n```js\nfunction pow(x, n) {\n  if (n == 1) {\n*!*\n    return x;\n*/!*\n  } else {\n    return x * pow(x, n - 1);\n  }\n}\n```\n\nThere are no more nested calls, so the function finishes, returning `2`.\n\nAs the function finishes, its execution context is not needed anymore, so it's removed from the memory. The previous one is restored off the top of the stack:\n\n\n<ul class=\"function-execution-context-list\">\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 2, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 2)</span>\n  </li>\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 3, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 3)</span>\n  </li>\n</ul>\n\nThe execution of `pow(2, 2)` is resumed. It has the result of the subcall `pow(2, 1)`, so it also can finish the evaluation of `x * pow(x, n - 1)`, returning `4`.\n\nThen the previous context is restored:\n\n<ul class=\"function-execution-context-list\">\n  <li>\n    <span class=\"function-execution-context\">Context: { x: 2, n: 3, at line 5 }</span>\n    <span class=\"function-execution-context-call\">pow(2, 3)</span>\n  </li>\n</ul>\n\nWhen it finishes, we have a result of `pow(2, 3) = 8`.\n\nThe recursion depth in this case was: **3**.\n\nAs we can see from the illustrations above, recursion depth equals the maximal number of context in the stack.\n\nNote the memory requirements. Contexts take memory. In our case, raising to the power of `n` actually requires the memory for `n` contexts, for all lower values of `n`.\n\nA loop-based algorithm is more memory-saving:\n\n```js\nfunction pow(x, n) {\n  let result = 1;\n\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n\n  return result;\n}\n```\n\nThe iterative `pow` uses a single context changing `i` and `result` in the process. Its memory requirements are small, fixed and do not depend on `n`.\n\n**Any recursion can be rewritten as a loop. The loop variant usually can be made more effective.**\n\n...But sometimes the rewrite is non-trivial, especially when function uses different recursive subcalls depending on conditions and merges their results or when the branching is more intricate. And the optimization may be unneeded and totally not worth the efforts.\n\nRecursion can give a shorter code, easier to understand and support. Optimizations are not required in every place, mostly we need a good code, that's why it's used.\n\n## Recursive traversals\n\nAnother great application of the recursion is a recursive traversal.\n\nImagine, we have a company. The staff structure can be presented as an object:\n\n```js\nlet company = {\n  sales: [{\n    name: 'John',\n    salary: 1000\n  }, {\n    name: 'Alice',\n    salary: 600\n  }],\n\n  development: {\n    sites: [{\n      name: 'Peter',\n      salary: 2000\n    }, {\n      name: 'Alex',\n      salary: 1800\n    }],\n\n    internals: [{\n      name: 'Jack',\n      salary: 1300\n    }]\n  }\n};\n```\n\nIn other words, a company has departments.\n\n- A department may have an array of staff. For instance, `sales` department has 2 employees: John and Alice.\n- Or a department may split into subdepartments, like `development` has two branches: `sites` and `internals`. Each of them has the own staff.\n- It is also possible that when a subdepartment grows, it divides into subsubdepartments (or teams).\n\n    For instance, the `sites` department in the future may be split into teams for `siteA` and `siteB`. And they, potentially, can split even more. That's not on the picture, just something to have in mind.\n\nNow let's say we want a function to get the sum of all salaries. How can we do that?\n\nAn iterative approach is not easy, because the structure is not simple. The first idea may be to make a `for` loop over `company` with nested subloop over 1st level departments. But then we need more nested subloops to iterate over the staff in 2nd level departments like `sites`. ...And then another subloop inside those for 3rd level departments that might appear in the future? Should we stop on level 3 or make 4 levels of loops? If we put 3-4 nested subloops in the code to traverse a single object, it becomes rather ugly.\n\nLet's try recursion.\n\nAs we can see, when our function gets a department to sum, there are two possible cases:\n\n1. Either it's a \"simple\" department with an *array of people* -- then we can sum the salaries in a simple loop.\n2. Or it's *an object with `N` subdepartments* -- then we can make `N` recursive calls to get the sum for each of the subdeps and combine the results.\n\nThe (1) is the base of recursion, the trivial case.\n\nThe (2) is the recursive step. A complex task is split into subtasks for smaller departments. They may in turn split again, but sooner or later the split will finish at (1).\n\nThe algorithm is probably even easier to read from the code:\n\n\n```js run\nlet company = { // the same object, compressed for brevity\n  sales: [{name: 'John', salary: 1000}, {name: 'Alice', salary: 600 }],\n  development: {\n    sites: [{name: 'Peter', salary: 2000}, {name: 'Alex', salary: 1800 }],\n    internals: [{name: 'Jack', salary: 1300}]\n  }\n};\n\n// The function to do the job\n*!*\nfunction sumSalaries(department) {\n  if (Array.isArray(department)) { // case (1)\n    return department.reduce((prev, current) => prev + current.salary, 0); // sum the array\n  } else { // case (2)\n    let sum = 0;\n    for (let subdep of Object.values(department)) {\n      sum += sumSalaries(subdep); // recursively call for subdepartments, sum the results\n    }\n    return sum;\n  }\n}\n*/!*\n\nalert(sumSalaries(company)); // 6700\n```\n\nThe code is short and easy to understand (hopefully?). That's the power of recursion. It also works for any level of subdepartment nesting.\n\nHere's the diagram of calls:\n\n![recursive salaries](recursive-salaries.png)\n\nWe can easily see the principle: for an object `{...}` subcalls are made, while arrays `[...]` are the \"leaves\" of the recursion tree, they give immediate result.\n\nNote that the code uses smart features that we've covered before:\n\n- Method `arr.reduce` explained in the chapter <info:array-methods> to get the sum of the array.\n- Loop `for(val of Object.values(obj))` to iterate over object values: `Object.values` returns an array of them.\n\n\n## Recursive structures\n\nA recursive (recursively-defined) data structure is a structure that replicates itself in parts.\n\nWe've just seen it in the example of a company structure above.\n\nA company *department* is:\n- Either an array of people.\n- Or an object with *departments*.\n\nFor web-developers there are much better-known examples: HTML and XML documents.\n\nIn the HTML document, an *HTML-tag* may contain a list of:\n- Text pieces.\n- HTML-comments.\n- Other *HTML-tags* (that in turn may contain text pieces/comments or other tags etc).\n\nThat's once again a recursive definition.\n\nFor better understanding, we'll cover one more recursive structure named \"Linked list\" that might be a better alternative for arrays in some cases.\n\n### Linked list\n\nImagine, we want to store an ordered list of objects.\n\nThe natural choice would be an array:\n\n```js\nlet arr = [obj1, obj2, obj3];\n```\n\n...But there's a problem with arrays. The \"delete element\" and \"insert element\" operations are expensive. For instance, `arr.unshift(obj)` operation has to renumber all elements to make room for a new `obj`, and if the array is big, it takes time. Same with `arr.shift()`.\n\nThe only structural modifications that do not require mass-renumbering are those that operate with the end of array: `arr.push/pop`. So an array can be quite slow for big queues.\n\nAlternatively, if we really need fast insertion/deletion, we can choose another data structure called a [linked list](https://en.wikipedia.org/wiki/Linked_list).\n\nThe *linked list element* is recursively defined as an object with:\n- `value`.\n- `next` property referencing the next *linked list element* or `null` if that's the end.\n\nFor instance:\n\n```js\nlet list = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: null\n      }\n    }\n  }\n};\n```\n\nGraphical representation of the list:\n\n![linked list](linked-list.png)\n\nAn alternative code for creation:\n\n```js no-beautify\nlet list = { value: 1 };\nlist.next = { value: 2 };\nlist.next.next = { value: 3 };\nlist.next.next.next = { value: 4 };\n```\n\nHere we can even more clearer see that there are multiple objects, each one has the `value` and `next` pointing to the neighbour. The `list` variable is the first object in the chain, so following `next` pointers from it we can reach any element.\n\nThe list can be easily split into multiple parts and later joined back:\n\n```js\nlet secondList = list.next.next;\nlist.next.next = null;\n```\n\n![linked list split](linked-list-split.png)\n\nTo join:\n\n```js\nlist.next.next = secondList;\n```\n\nAnd surely we can insert or remove items in any place.\n\nFor instance, to prepend a new value, we need to update the head of the list:\n\n```js\nlet list = { value: 1 };\nlist.next = { value: 2 };\nlist.next.next = { value: 3 };\nlist.next.next.next = { value: 4 };\n\n*!*\n// prepend the new value to the list\nlist = { value: \"new item\", next: list };\n*/!*\n```\n\n![linked list](linked-list-0.png)\n\nTo remove a value from the middle, change `next` of the previous one:\n\n```js\nlist.next = list.next.next;\n```\n\n![linked list](linked-list-remove-1.png)\n\nWe made `list.next` jump over `1` to value `2`. The value `1` is now excluded from the chain. If it's not stored anywhere else, it will be automatically removed from the memory.\n\nUnlike arrays, there's no mass-renumbering, we can easily rearrange elements.\n\nNaturally, lists are not always better than arrays. Otherwise everyone would use only lists.\n\nThe main drawback is that we can't easily access an element by its number. In an array that's easy: `arr[n]` is a direct reference. But in the list we need to start from the first item and go `next` `N` times to get the Nth element.\n\n...But we don't always need such operations. For instance, when we need a queue or even a [deque](https://en.wikipedia.org/wiki/Double-ended_queue) -- the ordered structure that must allow very fast adding/removing elements from both ends.\n\nSometimes it's worth to add another variable named `tail` to track the last element of the list (and update it when adding/removing elements from the end). For large sets of elements the speed difference versus arrays is huge.\n\n## Summary\n\nTerms:\n- *Recursion*  is a programming term that means a \"self-calling\" function. Such functions can be used to solve certain tasks in elegant ways.\n\n    When a function calls itself, that's called a *recursion step*. The *basis* of recursion is function arguments that make the task so simple that the function does not make further calls.\n\n- A [recursively-defined](https://en.wikipedia.org/wiki/Recursive_data_type) data structure is a data structure that can be defined using itself.\n\n    For instance, the linked list can be defined as a data structure consisting of an object referencing a list (or null).\n\n    ```js\n    list = { value, next -> list }\n    ```\n\n    Trees like HTML elements tree or the department tree from this chapter are also naturally recursive: they branch and every branch can have other branches.\n\n    Recursive functions can be used to walk them as we've seen in the `sumSalary` example.\n\nAny recursive function can be rewritten into an iterative one. And that's sometimes required to optimize stuff. But for many tasks a recursive solution is fast enough and easier to write and support.","libs":[],"children":["sum-to","factorial","fibonacci-numbers","output-single-linked-list","output-single-linked-list-reverse"],"headHtml":{"type":"Buffer","data":[60,115,116,121,108,101,62,10,46,102,117,110,99,116,105,111,110,45,101,120,101,99,117,116,105,111,110,45,99,111,110,116,101,120,116,45,108,105,115,116,32,123,10,32,32,109,97,114,103,105,110,58,32,48,59,10,32,32,112,97,100,100,105,110,103,58,32,48,59,10,32,32,111,118,101,114,102,108,111,119,58,32,97,117,116,111,59,10,125,10,10,46,102,117,110,99,116,105,111,110,45,101,120,101,99,117,116,105,111,110,45,99,111,110,116,101,120,116,32,123,10,32,32,98,111,114,100,101,114,58,32,49,112,120,32,115,111,108,105,100,32,98,108,97,99,107,59,10,32,32,102,111,110,116,45,102,97,109,105,108,121,58,32,34,67,111,110,115,111,108,97,115,34,44,32,109,111,110,111,115,112,97,99,101,59,10,32,32,112,97,100,100,105,110,103,58,32,52,112,120,32,54,112,120,59,10,32,32,109,97,114,103,105,110,58,32,48,32,52,112,120,59,10,125,10,10,46,102,117,110,99,116,105,111,110,45,101,120,101,99,117,116,105,111,110,45,99,111,110,116,101,120,116,45,99,97,108,108,32,123,10,32,32,99,111,108,111,114,58,32,103,114,97,121,59,10,125,10,10,46,102,117,110,99,116,105,111,110,45,101,120,101,99,117,116,105,111,110,45,99,111,110,116,101,120,116,45,99,97,108,108,58,58,98,101,102,111,114,101,32,123,10,32,32,99,111,110,116,101,110,116,58,32,39,32,99,97,108,108,58,32,39,59,10,125,10,10,46,102,117,110,99,116,105,111,110,45,101,120,101,99,117,116,105,111,110,45,99,111,110,116,101,120,116,45,108,105,115,116,32,108,105,58,102,105,114,115,116,45,99,104,105,108,100,32,123,10,32,32,102,111,110,116,45,119,101,105,103,104,116,58,32,98,111,108,100,59,10,125,10,60,47,115,116,121,108,101,62]},"parent":"advanced-functions"}},"sum-to":{"type":"Task","value":{"title":"Sum all numbers till the given one","slug":"sum-to","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/01-recursion/01-sum-to","weight":1,"libs":[],"importance":5,"content":"\nWrite a function `sumTo(n)` that calculates the sum of numbers `1 + 2 + ... + n`.\n\nFor instance:\n\n```js no-beautify\nsumTo(1) = 1\nsumTo(2) = 2 + 1 = 3\nsumTo(3) = 3 + 2 + 1 = 6\nsumTo(4) = 4 + 3 + 2 + 1 = 10\n...\nsumTo(100) = 100 + 99 + ... + 2 + 1 = 5050\n```\n\nMake 3 solution variants:\n\n1. Using a for loop.\n2. Using a recursion, cause `sumTo(n) = n + sumTo(n-1)` for `n > 1`.\n3. Using the [arithmetic progression](https://en.wikipedia.org/wiki/Arithmetic_progression) formula.\n\nAn example of the result:\n\n```js\nfunction sumTo(n) { /*... your code ... */ }\n\nalert( sumTo(100) ); // 5050\n```\n\nP.S. Which solution variant is the fastest? The slowest? Why?\n\nP.P.S. Can we use recursion to count `sumTo(100000)`?","solution":"The solution using a loop:\n\n```js run\nfunction sumTo(n) {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nalert( sumTo(100) );\n```\n\nThe solution using recursion:\n\n```js run\nfunction sumTo(n) {\n  if (n == 1) return 1;\n  return n + sumTo(n - 1);\n}\n\nalert( sumTo(100) );\n```\n\nThe solution using the formula: `sumTo(n) = n*(n+1)/2`:\n\n```js run\nfunction sumTo(n) {\n  return n * (n + 1) / 2;\n}\n\nalert( sumTo(100) );\n```\n\nP.S. Naturally, the formula is the fastest solution. It uses only 3 operations for any number `n`. The math helps!\n\nThe loop variant is the second in terms of speed. In both the recursive and the loop variant we sum the same numbers. But the recursion involves nested calls and execution stack management. That also takes resources, so it's slower.\n\nP.P.S. The standard describes a \"tail call\" optimization: if the recursive call is the very last one in the function (like in `sumTo` above), then the outer function will not need to resume the execution and we don't need to remember its execution context. In that case `sumTo(100000)` is countable. But if your JavaScript engine does not support it, there will be an error: maximum stack size exceeded, because there's usually a limitation on the total stack size.","parent":"recursion"}},"factorial":{"type":"Task","value":{"title":"Calculate factorial","slug":"factorial","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/01-recursion/02-factorial","weight":2,"libs":[],"importance":4,"content":"\nThe [factorial](https://en.wikipedia.org/wiki/Factorial) of a natural number is a number multiplied by `\"number minus one\"`, then by `\"number minus two\"`, and so on till `1`. The factorial of `n` is denoted as `n!`\n\nWe can write a definition of factorial like this:\n\n```js\nn! = n * (n - 1) * (n - 2) * ...*1\n```\n\nValues of factorials for different `n`:\n\n```js\n1! = 1\n2! = 2 * 1 = 2\n3! = 3 * 2 * 1 = 6\n4! = 4 * 3 * 2 * 1 = 24\n5! = 5 * 4 * 3 * 2 * 1 = 120\n```\n\nThe task is to write a function `factorial(n)` that calculates `n!` using recursive calls.\n\n```js\nalert( factorial(5) ); // 120\n```\n\nP.S. Hint: `n!` can be written as `n * (n-1)!` For instance: `3! = 3*2! = 3*2*1! = 6`","solution":"By definition, a factorial is `n!` can be written as `n * (n-1)!`.\n\nIn other words, the result of `factorial(n)` can be calculated as `n` multiplied by the result of `factorial(n-1)`. And the call for `n-1` can recursively descend lower, and lower, till `1`.\n\n```js run\nfunction factorial(n) {\n  return (n != 1) ? n * factorial(n - 1) : 1;\n}\n\nalert( factorial(5) ); // 120\n```\n\nThe basis of recursion is the value `1`. We can also make `0` the basis here, doesn't matter much, but gives one more recursive step:\n\n```js run\nfunction factorial(n) {\n  return n ? n * factorial(n - 1) : 1;\n}\n\nalert( factorial(5) ); // 120\n```","parent":"recursion"}},"fibonacci-numbers":{"type":"Task","value":{"title":"Fibonacci numbers","slug":"fibonacci-numbers","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/01-recursion/03-fibonacci-numbers","weight":3,"libs":[],"importance":5,"content":"\nThe sequence of [Fibonacci numbers](https://en.wikipedia.org/wiki/Fibonacci_number) has the formula <code>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></code>. In other words, the next number is a sum of the two preceding ones.\n\nFirst two numbers are `1`, then `2(1+1)`, then `3(1+2)`, `5(2+3)` and so on: `1, 1, 2, 3, 5, 8, 13, 21...`.\n\nFibonacci numbers are related to the [Golden ratio](https://en.wikipedia.org/wiki/Golden_ratio) and many natural phenomena around us.\n\nWrite a function `fib(n)` that returns the `n-th` Fibonacci number.\n\nAn example of work:\n\n```js\nfunction fib(n) { /* your code */ }\n\nalert(fib(3)); // 2\nalert(fib(7)); // 13\nalert(fib(77)); // 5527939700884757\n```\n\nP.S. The function should be fast. The call to `fib(77)` should take no more than a fraction of a second.","solution":"The first solution we could try here is the recursive one.\n\nFibonacci numbers are recursive by definition:\n\n```js run\nfunction fib(n) {\n  return n <= 1 ? n : fib(n - 1) + fib(n - 2);\n}\n\nalert( fib(3) ); // 2\nalert( fib(7) ); // 13\n// fib(77); // will be extremely slow!\n```\n\n...But for big values of `n` it's very slow. For instance, `fib(77)` may hang up the engine for some time eating all CPU resources.\n\nThat's because the function makes too many subcalls. The same values are re-evaluated again and again.\n\nFor instance, let's see a piece of calculations for `fib(5)`:\n\n```js no-beautify\n...\nfib(5) = fib(4) + fib(3)\nfib(4) = fib(3) + fib(2)\n...\n```\n\nHere we can see that the value of `fib(3)` is needed for both `fib(5)` and `fib(4)`. So `fib(3)` will be called and evaluated two times completely independently.\n\nHere's the full recursion tree:\n\n![fibonacci recursion tree](fibonacci-recursion-tree.png)\n\nWe can clearly notice that `fib(3)` is evaluated two times and `fib(2)` is evaluated three times. The total amount of computations grows much faster than `n`, making it enormous even for `n=77`.\n\nWe can optimize that by remembering already-evaluated values: if a value of say `fib(3)` is calculated once, then we can just reuse it in future computations.\n\nAnother variant would be to give up recursion and use a totally different loop-based algorithm.\n\nInstead of going from `n` down to lower values, we can make a loop that starts from `1` and `2`, then gets `fib(3)` as their sum, then `fib(4)` as the sum of two previous values, then `fib(5)` and goes up and up, till it gets to the needed value. On each step we only need to remember two previous values.\n\nHere are the steps of the new algorithm in details.\n\nThe start:\n\n```js\n// a = fib(1), b = fib(2), these values are by definition 1\nlet a = 1, b = 1;\n\n// get c = fib(3) as their sum\nlet c = a + b;\n\n/* we now have fib(1), fib(2), fib(3)\na  b  c\n1, 1, 2\n*/\n```\n\nNow we want to get `fib(4) = fib(2) + fib(3)`.\n\nLet's shift the variables: `a,b` will get `fib(2),fib(3)`, and `c` will get their sum:\n\n```js no-beautify\na = b; // now a = fib(2)\nb = c; // now b = fib(3)\nc = a + b; // c = fib(4)\n\n/* now we have the sequence:\n   a  b  c\n1, 1, 2, 3\n*/\n```\n\nThe next step gives another sequence number:\n\n```js no-beautify\na = b; // now a = fib(3)\nb = c; // now b = fib(4)\nc = a + b; // c = fib(5)\n\n/* now the sequence is (one more number):\n      a  b  c\n1, 1, 2, 3, 5\n*/\n```\n\n...And so on until we get the needed value. That's much faster than recursion and involves no duplicate computations.\n\nThe full code:\n\n```js run\nfunction fib(n) {\n  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}\n\nalert( fib(3) ); // 2\nalert( fib(7) ); // 13\nalert( fib(77) ); // 5527939700884757\n```\n\nThe loop starts with `i=3`, because the first and the second sequence values are hard-coded into variables `a=1`, `b=1`.\n\nThe approach is called [dynamic programming bottom-up](https://en.wikipedia.org/wiki/Dynamic_programming).","parent":"recursion"}},"output-single-linked-list":{"type":"Task","value":{"title":"Output a single-linked list","slug":"output-single-linked-list","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/01-recursion/04-output-single-linked-list","weight":4,"libs":[],"importance":5,"content":"\nLet's say we have a single-linked list (as described in the chapter <info:recursion>):\n\n```js\nlet list = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: null\n      }\n    }\n  }\n};\n```\n\nWrite a function `printList(list)` that outputs list items one-by-one.\n\nMake two variants of the solution: using a loop and using recursion.\n\nWhat's better: with recursion or without it?","solution":"# Loop-based solution\n\nThe loop-based variant of the solution:\n\n```js run\nlet list = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: null\n      }\n    }\n  }\n};\n\nfunction printList(list) {\n  let tmp = list;\n\n  while (tmp) {\n    alert(tmp.value);\n    tmp = tmp.next;\n  }\n\n}\n\nprintList(list);\n```\n\nPlease note that we use a temporary variable `tmp` to walk over the list. Technically, we could use a function parameter `list` instead:\n\n```js\nfunction printList(list) {\n\n  while(*!*list*/!*) {\n    alert(list.value);\n    list = list.next;\n  }\n\n}\n```\n\n...But that would be unwise. In the future we may need to extend a function, do something else with the list. If we change `list`, then we loose such ability.\n\nTalking about good variable names, `list` here is the list itself. The first element of it. And it should remain like that. That's clear and reliable.\n\nFrom the other side, the role of `tmp` is exclusively a list traversal, like `i` in the `for` loop.\n\n# Recursive solution\n\nThe recursive variant of `printList(list)` follows a simple logic: to output a list we should output the current element `list`, then do the same for `list.next`:\n\n```js run\nlet list = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: null\n      }\n    }\n  }\n};\n\nfunction printList(list) {\n\n  alert(list.value); // output the current item\n\n  if (list.next) {\n    printList(list.next); // do the same for the rest of the list\n  }\n\n}\n\nprintList(list);\n```\n\nNow what's better?\n\nTechnically, the loop is more effective. These two variants do the same, but the loop does not spend resources for nested function calls.\n\nFrom the other side, the recursive variant is shorter and sometimes easier to understand.","parent":"recursion"}},"output-single-linked-list-reverse":{"type":"Task","value":{"title":"Output a single-linked list in the reverse order","slug":"output-single-linked-list-reverse","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/01-recursion/05-output-single-linked-list-reverse","weight":5,"libs":[],"importance":5,"content":"\nOutput a single-linked list from the previous task <info:task/output-single-linked-list> in the reverse order.\n\nMake two solutions: using a loop and using a recursion.","solution":"# Using a recursion\n\nThe recursive logic is a little bit tricky here.\n\nWe need to first output the rest of the list and *then* output the current one:\n\n```js run\nlet list = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: null\n      }\n    }\n  }\n};\n\nfunction printReverseList(list) {\n\n  if (list.next) {\n    printReverseList(list.next);\n  }\n\n  alert(list.value);\n}\n\nprintReverseList(list);\n```\n\n# Using a loop\n\nThe loop variant is also a little bit more complicated then the direct output.\n\nThere is no way to get the last value in our `list`. We also can't \"go back\".\n\nSo what we can do is to first go through the items in the direct order and rememeber them in an array, and then output what we remembered in the reverse order:\n\n```js run\nlet list = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: null\n      }\n    }\n  }\n};\n\nfunction printReverseList(list) {\n  let arr = [];\n  let tmp = list;\n\n  while (tmp) {\n    arr.push(tmp.value);\n    tmp = tmp.next;\n  }\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    alert( arr[i] );\n  }\n}\n\nprintReverseList(list);\n```\n\nPlease note that the recursive solution actually does exactly the same: it follows the list, remembers the items in the chain of nested calls (in the execution context stack), and then outputs them.","parent":"recursion"}},"rest-parameters-spread-operator":{"type":"Article","value":{"title":"Rest parameters and spread operator","slug":"rest-parameters-spread-operator","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/02-rest-parameters-spread-operator/article.md","isFolder":false,"weight":2,"content":"\nMany JavaScript built-in functions support an arbitrary number of arguments.\n\nFor instance:\n\n- `Math.max(arg1, arg2, ..., argN)` -- returns the greatest of the arguments.\n- `Object.assign(dest, src1, ..., srcN)` -- copies properties from `src1..N` into `dest`.\n- ...and so on.\n\nIn this chapter we'll learn how to do the same. And, more importantly, how to feel comfortable working with such functions and arrays.\n\n## Rest parameters `...`\n\nA function can be called with any number of arguments, no matter how it is defined.\n\nLike here:\n```js run\nfunction sum(a, b) {\n  return a + b;\n}\n\nalert( sum(1, 2, 3, 4, 5) );\n```\n\nThere will be no error because of \"excessive\" arguments. But of course in the result only the first two will be counted.\n\nThe rest parameters can be mentioned in a function definition with three dots `...`. They literally mean \"gather the remaining parameters into an array\".\n\nFor instance, to gather all arguments into array `args`:\n\n```js run\nfunction sumAll(...args) { // args is the name for the array\n  let sum = 0;\n\n  for (let arg of args) sum += arg;\n\n  return sum;\n}\n\nalert( sumAll(1) ); // 1\nalert( sumAll(1, 2) ); // 3\nalert( sumAll(1, 2, 3) ); // 6\n```\n\nWe can choose to get the first parameters as variables, and gather only the rest.\n\nHere the first two arguments go into variables and the rest go into `titles` array:\n\n```js run\nfunction showName(firstName, lastName, ...titles) {\n  alert( firstName + ' ' + lastName ); // Julius Caesar\n\n  // the rest go into titles array\n  // i.e. titles = [\"Consul\", \"Imperator\"]\n  alert( titles[0] ); // Consul\n  alert( titles[1] ); // Imperator\n  alert( titles.length ); // 2\n}\n\nshowName(\"Julius\", \"Caesar\", \"Consul\", \"Imperator\");\n```\n\n````warn header=\"The rest parameters must be at the end\"\nThe rest parameters gather all remaining arguments, so the following has no sense:\n\n```js\nfunction f(arg1, ...rest, arg2) { // arg2 after ...rest ?!\n  // error\n}\n```\n\nThe `...rest` must always be last.\n````\n\n## The \"arguments\" variable\n\nThere is also a special array-like object named `arguments` that contains all arguments by their index.\n\nFor instance:\n\n```js run\nfunction showName() {\n  alert( arguments.length );\n  alert( arguments[0] );\n  alert( arguments[1] );\n\n  // it's iterable\n  // for(let arg of arguments) alert(arg);\n}\n\n// shows: 2, Julius, Caesar\nshowName(\"Julius\", \"Caesar\");\n\n// shows: 1, Ilya, undefined (no second argument)\nshowName(\"Ilya\");\n```\n\nIn old times, rest parameters did not exist in the language, and using `arguments` was the only way to get all arguments of the function, no matter their total number.\n\nAnd it still works, we can use it today.\n\nBut the downside is that although `arguments` is both array-like and iterable, it's not an array. It does not support array methods, so we can't call `arguments.map(...)` for example.\n\nAlso, it always contains all arguments. We can't capture them partially, like we did with rest parameters.\n\nSo when we need these features, then rest parameters are preferred.\n\n````smart header=\"Arrow functions do not have `\\\"arguments\\\"`\"\nIf we access the `arguments` object from an arrow function, it takes them from the outer \"normal\" function.\n\nHere's an example:\n\n```js run\nfunction f() {\n  let showArg = () => alert(arguments[0]);\n  showArg();\n}\n\nf(1); // 1\n```\nAs we remember, arrow functions don't have their own `this`. Now we know they don't have the special `arguments` object either.\n\n## Spread operator [#spread-operator]\n\nWe've just seen how to get an array from the list of parameters.\n\nBut sometimes we need to do exactly the reverse.\n\nFor instance, there's a built-in function [Math.max](mdn:js/Math/max) that returns the greatest number from a list:\n\n```js run\nalert( Math.max(3, 5, 1) ); // 5\n```\n\nNow let's say we have an array `[3, 5, 1]`. How do we call `Math.max` with it?\n\nPassing it \"as is\" won't work, because `Math.max` expects a list of numeric arguments, not a single array:\n\n```js run\nlet arr = [3, 5, 1];\n\n*!*\nalert( Math.max(arr) ); // NaN\n*/!*\n```\n\nAnd surely we can't manually list items in the code `Math.max(arr[0], arr[1], arr[2])`, because we may be unsure how many there are. As our script executes, there could be a lot, or there could be none. And that would get ugly.\n\n*Spread operator* to the rescue! It looks similar to rest parameters, also using `...`, but does quite the opposite.\n\nWhen `...arr` is used in the function call, it \"expands\" an iterable object `arr` into the list of arguments.\n\nFor `Math.max`:\n\n```js run\nlet arr = [3, 5, 1];\n\nalert( Math.max(...arr) ); // 5 (spread turns array into a list of arguments)\n```\n\nWe also can pass multiple iterables this way:\n\n```js run\nlet arr1 = [1, -2, 3, 4];\nlet arr2 = [8, 3, -8, 1];\n\nalert( Math.max(...arr1, ...arr2) ); // 8\n```\n\nWe can even combine the spread operator with normal values:\n\n\n```js run\nlet arr1 = [1, -2, 3, 4];\nlet arr2 = [8, 3, -8, 1];\n\nalert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25\n```\n\nAlso, the spread operator can be used to merge arrays:\n\n```js run\nlet arr = [3, 5, 1];\nlet arr2 = [8, 9, 15];\n\n*!*\nlet merged = [0, ...arr, 2, ...arr2];\n*/!*\n\nalert(merged); // 0,3,5,1,2,8,9,15 (0, then arr, then 2, then arr2)\n```\n\nIn the examples above we used an array to demonstrate the spread operator, but any iterable will do.\n\nFor instance, here we use the spread operator to turn the string into array of characters:\n\n```js run\nlet str = \"Hello\";\n\nalert( [...str] ); // H,e,l,l,o\n```\n\nThe spread operator internally uses iterators to gather elements, the same way as `for..of` does.\n\nSo, for a string, `for..of` returns characters and `...str` becomes `\"H\",\"e\",\"l\",\"l\",\"o\"`. The list of characters is passed to array initializer `[...str]`.\n\nFor this particular task we could also use `Array.from`, because it converts an iterable (like a string) into an array:\n\n```js run\nlet str = \"Hello\";\n\n// Array.from converts an iterable into an array\nalert( Array.from(str) ); // H,e,l,l,o\n```\n\nThe result is the same as `[...str]`.\n\nBut there's a subtle difference between `Array.from(obj)` and `[...obj]`:\n\n- `Array.from` operates on both array-likes and iterables.\n- The spread operator operates only on iterables.\n\nSo, for the task of turning something into an array, `Array.from` tends to be more universal.\n\n\n## Summary\n\nWhen we see `\"...\"` in the code, it is either rest parameters or the spread operator.\n\nThere's an easy way to distinguish between them:\n\n- When `...` is at the end of function parameters, it's \"rest parameters\" and gathers the rest of the list of arguments into an array.\n- When `...` occurs in a function call or alike, it's called a \"spread operator\" and expands an array into a list.\n\nUse patterns:\n\n- Rest parameters are used to create functions that accept any number of arguments.\n- The spread operator is used to pass an array to functions that normally require a list of many arguments.\n\nTogether they help to travel between a list and an array of parameters with ease.\n\nAll arguments of a function call are also available in \"old-style\" `arguments`: array-like iterable object.","libs":[],"children":[],"parent":"advanced-functions"}},"closure":{"type":"Article","value":{"title":"Closure","slug":"closure","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/article.md","isFolder":false,"weight":3,"content":"\nJavaScript is a very function-oriented language. It gives us a lot of freedom. A function can be created at one moment, then copied to another variable or passed as an argument to another function and called from a totally different place later.\n\nWe know that a function can access variables outside of it; this feature is used quite often.\n\nBut what happens when an outer variable changes? Does a function get the most recent value or the one that existed when the function was created?\n\nAlso, what happens when a function travels to another place in the code and is called from there -- does it get access to the outer variables of the new place?\n\nDifferent languages behave differently here, and in this chapter we cover the behaviour of JavaScript.\n\n## A couple of questions\n\nLet's consider two situations to begin with, and then study the internal mechanics piece-by-piece, so that you'll be able to answer the following questions and more complex ones in the future.\n\n1. The function `sayHi` uses an external variable `name`. When the function runs, which value is it going to use?\n\n    ```js\n    let name = \"John\";\n\n    function sayHi() {\n      alert(\"Hi, \" + name);\n    }\n\n    name = \"Pete\";\n\n    *!*\n    sayHi(); // what will it show: \"John\" or \"Pete\"?\n    */!*\n    ```\n\n    Such situations are common both in browser and server-side development. A function may be scheduled to execute later than it is created, for instance after a user action or a network request.\n\n    So, the question is: does it pick up the latest changes?\n\n\n2. The function `makeWorker` makes another function and returns it. That new function can be called from somewhere else. Will it have access to the outer variables from its creation place, or the invocation place, or both?\n\n    ```js\n    function makeWorker() {\n      let name = \"Pete\";\n\n      return function() {\n        alert(name);\n      };\n    }\n\n    let name = \"John\";\n\n    // create a function\n    let work = makeWorker();\n\n    // call it\n    *!*\n    work(); // what will it show? \"Pete\" (name where created) or \"John\" (name where called)?\n    */!*\n    ```\n\n\n## Lexical Environment\n\nTo understand what's going on, let's first discuss what a \"variable\" actually is.\n\nIn JavaScript, every running function, code block, and the script as a whole have an associated object known as the *Lexical Environment*.\n\nThe Lexical Environment object consists of two parts:\n\n1. *Environment Record* -- an object that has all local variables as its properties (and some other information like the value of `this`).\n2. A reference to the *outer lexical environment*, usually the one associated with the code lexically right outside of it (outside of the current curly brackets).\n\nSo, a \"variable\" is just a property of the special internal object, Environment Record. \"To get or change a variable\" means \"to get or change a property of the Lexical Environment\".\n\nFor instance, in this simple code, there is only one Lexical Environment:\n\n![lexical environment](lexical-environment-global.png)\n\nThis is a so-called global Lexical Environment, associated with the whole script. For browsers, all `<script>` tags share the same global environment.\n\nOn the picture above, the rectangle means Environment Record (variable store) and the arrow means the outer reference. The global Lexical Environment has no outer reference, so it points to `null`.\n\nHere's the bigger picture of how `let` variables work:\n\n![lexical environment](lexical-environment-global-2.png)\n\nRectangles on the right-hand side demonstrate how the global Lexical Environment changes during the execution:\n\n1. When the script starts, the Lexical Environment is empty.\n2. The `let phrase` definition appears. It has been assigned no value, so `undefined` is stored.\n3. `phrase` is assigned a value.\n4. `phrase` refers to a new value.\n\nEverything looks simple for now, right?\n\nTo summarize:\n\n- A variable is a property of a special internal object, associated with the currently executing block/function/script.\n- Working with variables is actually working with the properties of that object.\n\n### Function Declaration\n\nFunction Declarations are special. Unlike `let` variables, they are processed not when the execution reaches them, but when a Lexical Environment is created. For the global Lexical Environment, it means the moment when the script is started.\n\nThat is why we can call a function declaration before it is defined.\n\nThe code below demonstrates that the Lexical Environment is non-empty from the beginning. It has `say`, because that's a Function Declaration. And later it gets `phrase`, declared with `let`:\n\n![lexical environment](lexical-environment-global-3.png)\n\n\n### Inner and outer Lexical Environment\n\nDuring the call, `say()` uses an outer variable, so let's look at the details of what's going on.\n\nFirst, when a function runs, a new function Lexical Environment is created automatically. That's a general rule for all functions. That Lexical Environment is used to store local variables and parameters of the call.\n\n<!--\n    ```js\n    let phrase = \"Hello\";\n    \n    function say(name) {\n     alert( `${phrase}, ${name}` );\n    }\n    \n    say(\"John\"); // Hello, John\n    ```-->\n\nHere's the picture of Lexical Environments when the execution is inside `say(\"John\")`, at the line labelled with an arrow:\n\n![lexical environment](lexical-environment-simple.png)\n\nDuring the function call we have two Lexical Environments: the inner one (for the function call) and the outer one (global):\n\n- The inner Lexical Environment corresponds to the current execution of  `say`. It has a single variable: `name`, the function argument. We called `say(\"John\")`, so the value of `name` is `\"John\"`.\n- The outer Lexical Environment is the global Lexical Environment.\n\nThe inner Lexical Environment has the `outer` reference to the outer one.\n\n**When code wants to access a variable -- it is first searched for in the inner Lexical Environment, then in the outer one, then the more outer one and so on until the end of the chain.**\n\nIf a variable is not found anywhere, that's an error in strict mode. Without `use strict`, an assignment to an undefined variable creates a new global variable, for backwards compatibility.\n\nLet's see how the search proceeds in our example:\n\n- When the `alert` inside `say` wants to access `name`, it finds it immediately in the function Lexical Environment.\n- When it wants to access `phrase`, then there is no `phrase` locally, so it follows the `outer` reference and finds it globally.\n\n![lexical environment lookup](lexical-environment-simple-lookup.png)\n\nNow we can give the answer to the first question from the beginning of the chapter.\n\n**A function gets outer variables as they are now; it uses the most recent values.**\n\nThat's because of the described mechanism. Old variable values are not saved anywhere. When a function wants them, it takes the current values from its own or an outer Lexical Environment.\n\nSo the answer to the first question is `Pete`:\n\n```js run\nlet name = \"John\";\n\nfunction sayHi() {\n  alert(\"Hi, \" + name);\n}\n\nname = \"Pete\"; // (*)\n\n*!*\nsayHi(); // Pete\n*/!*\n```\n\n\nThe execution flow of the code above:\n\n1. The global Lexical Environment has `name: \"John\"`.\n2. At the line `(*)` the global variable is changed, now it has `name: \"Pete\"`.\n3. When the function `say()`, is executed and takes `name` from outside. Here that's from the global Lexical Environment where it's already `\"Pete\"`.\n\n\n```smart header=\"One call -- one Lexical Environment\"\nPlease note that a new function Lexical Environment is created each time a function runs.\n\nAnd if a function is called multiple times, then each invocation will have its own Lexical Environment, with local variables and parameters specific for that very run.\n```\n\n```smart header=\"Lexical Environment is a specification object\"\n\"Lexical Environment\" is a specification object. We can't get this object in our code and manipulate it directly. JavaScript engines also may optimize it, discard variables that are unused to save memory and perform other internal tricks, but the visible behavior should be as described.\n```\n\n\n## Nested functions\n\nA function is called \"nested\" when it is created inside another function.\n\nIt is easily possible to do this with JavaScript.\n\nWe can use it to organize our code, like this:\n\n```js\nfunction sayHiBye(firstName, lastName) {\n\n  // helper nested function to use below\n  function getFullName() {\n    return firstName + \" \" + lastName;\n  }\n\n  alert( \"Hello, \" + getFullName() );\n  alert( \"Bye, \" + getFullName() );\n\n}\n```\n\nHere the *nested* function `getFullName()` is made for convenience. It can access the outer variables and so can return the full name.\n\nWhat's more interesting, a nested function can be returned: either as a property of a new object (if the outer function creates an object with methods) or as a result by itself. It can then be used somewhere else. No matter where, it still has access to the same outer variables.\n\nAn example with the constructor function (see the chapter <info:constructor-new>):\n\n```js run\n// constructor function returns a new object\nfunction User(name) {\n\n  // the object method is created as a nested function\n  this.sayHi = function() {\n    alert(name);\n  };\n}\n\nlet user = new User(\"John\");\nuser.sayHi(); // the method code has access to the outer \"name\"\n```\n\nAn example with returning a function:\n\n```js run\nfunction makeCounter() {\n  let count = 0;\n\n  return function() {\n    return count++; // has access to the outer counter\n  };\n}\n\nlet counter = makeCounter();\n\nalert( counter() ); // 0\nalert( counter() ); // 1\nalert( counter() ); // 2\n```\n\nLet's go on with the `makeCounter` example. It creates the \"counter\" function that returns the next number on each invocation. Despite being simple, slightly modified variants of that code have practical uses, for instance, as a [pseudorandom number generator](https://en.wikipedia.org/wiki/Pseudorandom_number_generator), and more. So the example is not as artificial as it may appear.\n\nHow does the counter work internally?\n\nWhen the inner function runs, the variable in `count++` is searched from inside out. For the example above, the order will be:\n\n![](lexical-search-order.png)\n\n1. The locals of the nested function...\n2. The variables of the outer function...\n3. And so on until it reaches global variables.\n\nIn this example `count` is found on  step `2`. When an outer variable is modified, it's changed where it's found. So `count++` finds the outer variable and increases it in the Lexical Environment where it belongs. Like if we had `let count = 1`.\n\nHere are two questions to consider:\n\n1. Can we somehow reset the `counter` from the code that doesn't belong to `makeCounter`? E.g. after `alert` calls in the example above.\n2. If we call `makeCounter()` multiple times -- it returns many `counter` functions. Are they independent or do they share the same `count`?\n\nTry to answer them before you continue reading.\n\n...\n\nAll done?\n\nOkay, let's go over the answers.\n\n1. There is no way. The `counter` is a local function variable, we can't access it from the outside.\n2. For every call to `makeCounter()` a new function Lexical Environment is created, with its own `counter`. So the resulting `counter` functions are independent.\n\nHere's the demo:\n\n```js run\nfunction makeCounter() {\n  let count = 0;\n  return function() {\n    return count++;\n  };\n}\n\nlet counter1 = makeCounter();\nlet counter2 = makeCounter();\n\nalert( counter1() ); // 0\nalert( counter1() ); // 1\n\nalert( counter2() ); // 0 (independent)\n```\n\n\nHopefully, the situation with outer variables is quite clear for you now. But in more complex situations a deeper understanding of internals may be required. So let's dive deeper.\n\n## Environments in detail\n\nNow that you understand how closures work generally, we can descend to the very nuts and bolts.\n\nHere's what's going on in the `makeCounter` example step-by-step, follow it to make sure that you understand everything. Please note the additional `[[Environment]]` property that we didn't cover yet.\n\n1. When the script has just started, there is only global Lexical Environment:\n\n    ![](lexenv-nested-makecounter-1.png)\n\n    At that starting moment there is only `makeCounter` function, because it's a Function Declaration. It did not run yet.\n\n    All functions \"on birth\" receive a hidden property `[[Environment]]` with a reference to the Lexical Environment of their creation. We didn't talk about it yet, but that's how the function knows where it was made.\n\n    Here, `makeCounter` is created in the global Lexical Environment, so `[[Environment]]` keeps a reference to it.\n\n    In other words, a function is \"imprinted\" with a reference to the Lexical Environment where it was born. And `[[Environment]]` is the hidden function property that has that reference.\n\n2. The code runs on, and the call to `makeCounter()` is performed. Here's a snapshot of the moment when the execution is on the first line inside `makeCounter()`:\n\n    ![](lexenv-nested-makecounter-2.png)\n\n    At the moment of the call of `makeCounter()`, the Lexical Environment is created, to hold its variables and arguments.\n\n    As all Lexical Environments, it stores two things:\n    1. An Environment Record with local variables. In our case `count` is the only local variable (appearing when the line with `let count` is executed).\n    2. The outer lexical reference, which is set to `[[Environment]]` of the function. Here `[[Environment]]` of `makeCounter` references the global Lexical Environment.\n\n    So, now we have two Lexical Environments: the first one is global, the second one is for the current `makeCounter` call, with the outer reference to global.\n\n3. During the execution of `makeCounter()`, a tiny nested function is created.\n\n    It doesn't matter whether the function is created using Function Declaration or Function Expression. All functions get the `[[Environment]]` property that references the Lexical Environment in which they were made. So our new tiny nested function gets it as well.\n\n    For our new nested function the value of `[[Environment]]` is the current Lexical Environment of `makeCounter()` (where it was born):\n\n    ![](lexenv-nested-makecounter-3.png)\n\n    Please note that on this step the inner function was created, but not yet called. The code inside `function() { return count++; }` is not running, we're going to return it.\n\n4. As the execution goes on, the call to `makeCounter()` finishes, and the result (the tiny nested function) is assigned to the global variable `counter`:\n\n    ![](lexenv-nested-makecounter-4.png)\n\n    That function has only one line: `return count++`, that will be executed when we run it.\n\n5. When the `counter()` is called, an \"empty\" Lexical Environment is created for it. It has no local variables by itself. But the `[[Environment]]` of `counter` is used as the outer reference for it, so it has access to the variables of the former `makeCounter()` call where it was created:\n\n    ![](lexenv-nested-makecounter-5.png)\n\n    Now if it accesses a variable, it first searches its own Lexical Environment (empty), then the Lexical Environment of the former `makeCounter()` call, then the global one.\n\n    When it looks for `count`, it finds it among the variables `makeCounter`, in the nearest outer Lexical Environment.\n\n    Please note how memory management works here. Although `makeCounter()` call finished some time ago, its Lexical Environment was retained in memory, because there's a nested function with `[[Environment]]` referencing it.\n\n    Generally, a Lexical Environment object lives as long as there is a function which may use it. And only when there are none remaining, it is cleared.\n\n6. The call to `counter()` not only returns the value of `count`, but also increases it. Note that the modification is done \"in place\". The value of `count` is modified exactly in the environment where it was found.\n\n    ![](lexenv-nested-makecounter-6.png)\n\n    So we return to the previous step with the only change -- the new value of `count`. The following calls all do the same.\n\n7. Next `counter()` invocations do the same.\n\nThe answer to the second question from the beginning of the chapter should now be obvious.\n\nThe `work()` function in the code below uses the `name` from the place of its origin through the outer lexical environment reference:\n\n![](lexenv-nested-work.png)\n\nSo, the result is `\"Pete\"` here.\n\nBut if there were no `let name` in `makeWorker()`, then the search would go outside and take the global variable as we can see from the chain above. In that case it would be `\"John\"`.\n\n```smart header=\"Closures\"\nThere is a general programming term \"closure\", that developers generally should know.\n\nA [closure](https://en.wikipedia.org/wiki/Closure_(computer_programming)) is a function that remembers its outer variables and can access them. In some languages, that's not possible, or a function should be written in a special way to make it happen. But as explained above, in JavaScript all functions are naturally closures (there is only one exclusion, to be covered in <info:new-function>).\n\nThat is: they automatically remember where they were created using a hidden `[[Environment]]` property, and all of them can access outer variables.\n\nWhen on an interview, a frontend developer gets a question about \"what's a closure?\", a valid answer would be a definition of the closure and an explanation that all functions in JavaScript are closures, and maybe few more words about technical details: the `[[Environment]]` property and how Lexical Environments work.\n```\n\n## Code blocks and loops, IIFE\n\nThe examples above concentrated on functions. But Lexical Environments also exist for code blocks `{...}`.\n\nThey are created when a code block runs and contain block-local variables. Here are a couple of examples.\n\n## If\n\nIn the example below, when the execution goes into `if` block, the new \"if-only\" Lexical Environment is created for it:\n\n<!--\n    ```js run\n    let phrase = \"Hello\";\n    \n    if (true) {\n        let user = \"John\";\n\n        alert(`${phrase}, ${user}`); // Hello, John\n    }\n\n    alert(user); // Error, can't see such variable!\n    ```-->\n\n![](lexenv-if.png)\n\nThe new Lexical Environment gets the enclosing one as the outer reference, so `phrase` can be found. But all variables and Function Expressions declared inside `if` reside in that Lexical Environment and can't be seen from the outside.\n\nFor instance, after `if` finishes, the `alert` below won't see the `user`, hence the error.\n\n## For, while\n\nFor a loop, every iteration has a separate Lexical Environment. If a variable is declared in `for`, then it's also local to that Lexical Environment:\n\n```js run\nfor (let i = 0; i < 10; i++) {\n  // Each loop has its own Lexical Environment\n  // {i: value}\n}\n\nalert(i); // Error, no such variable\n```\n\nThat's actually an exception, because `let i` is visually outside of `{...}`. But in fact each run of the loop has its own Lexical Environment with the current `i` in it.\n\nAfter the loop, `i` is not visible.\n\n### Code blocks\n\nWe also can use a \"bare\" code block `{…}` to isolate variables into a \"local scope\".\n\nFor instance, in a web browser all scripts share the same global area. So if we create a global variable in one script, it becomes available to others. But that becomes a source of conflicts if two scripts use the same variable name and overwrite each other.\n\nThat may happen if the variable name is a widespread word, and script authors are unaware of each other.\n\nIf we'd like to avoid that, we can use a code block to isolate the whole script or a part of it:\n\n```js run\n{\n  // do some job with local variables that should not be seen outside\n\n  let message = \"Hello\";\n\n  alert(message); // Hello\n}\n\nalert(message); // Error: message is not defined\n```\n\nThe code outside of the block (or inside another script) doesn't see variables inside the block, because the block has its own Lexical Environment.\n\n### IIFE\n\nIn old scripts, one can find so-called \"immediately-invoked function expressions\" (abbreviated as IIFE) used for this purpose.\n\nThey look like this:\n\n```js run\n(function() {\n\n  let message = \"Hello\";\n\n  alert(message); // Hello\n\n})();\n```\n\nHere a Function Expression is created and immediately called. So the code executes right away and has its own private variables.\n\nThe Function Expression is wrapped with brackets `(function {...})`, because when JavaScript meets `\"function\"` in the main code flow, it understands it as the start of a Function Declaration. But a Function Declaration must have a name, so there will be an error:\n\n```js run\n// Error: Unexpected token (\nfunction() { // <-- JavaScript cannot find function name, meets ( and gives error\n\n  let message = \"Hello\";\n\n  alert(message); // Hello\n\n}();\n```\n\nWe can say \"okay, let it be so Function Declaration, let's add a name\", but it won't work. JavaScript does not allow Function Declarations to be called immediately:\n\n```js run\n// syntax error because of brackets below\nfunction go() {\n\n}(); // <-- can't call Function Declaration immediately\n```\n\nSo, round brackets are needed to show JavaScript that the function is created in the context of another expression, and hence it's a Function Expression. It needs no name and can be called immediately.\n\nThere are other ways to tell JavaScript that we mean Function Expression:\n\n```js run\n// Ways to create IIFE\n\n(function() {\n  alert(\"Brackets around the function\");\n}*!*)*/!*();\n\n(function() {\n  alert(\"Brackets around the whole thing\");\n}()*!*)*/!*;\n\n*!*!*/!*function() {\n  alert(\"Bitwise NOT operator starts the expression\");\n}();\n\n*!*+*/!*function() {\n  alert(\"Unary plus starts the expression\");\n}();\n```\n\nIn all the above cases we declare a Function Expression and run it immediately.\n\n## Garbage collection\n\nLexical Environment objects that we've been talking about are subject to the same memory management rules as regular values.\n\n- Usually, Lexical Environment is cleaned up after the function run. For instance:\n\n    ```js\n    function f() {\n      let value1 = 123;\n      let value2 = 456;\n    }\n\n    f();\n    ```\n\n    Here two values are technically the properties of the Lexical Environment. But after `f()` finishes that Lexical Environment becomes unreachable, so it's deleted from the memory.\n\n- ...But if there's a nested function that is still reachable after the end of `f`, then its `[[Environment]]` reference keeps the outer lexical environment alive as well:\n\n    ```js\n    function f() {\n      let value = 123;\n\n      function g() { alert(value); }\n\n    *!*\n      return g;\n    */!*\n    }\n\n    let g = f(); // g is reachable, and keeps the outer lexical environment in memory\n    ```\n\n- Please note that if `f()` is called many times, and resulting functions are saved, then the corresponding Lexical Environment objects will also be retained in memory. All 3 of them in the code below:\n\n    ```js\n    function f() {\n      let value = Math.random();\n\n      return function() { alert(value); };\n    }\n\n    // 3 functions in array, every one of them links to Lexical Environment\n    // from the corresponding f() run\n    //         LE   LE   LE\n    let arr = [f(), f(), f()];\n    ```\n\n- A Lexical Environment object dies when it becomes unreachable: when no nested functions remain that reference it. In the code below, after `g` becomes unreachable, the `value` is also cleaned from memory;\n\n    ```js\n    function f() {\n      let value = 123;\n\n      function g() { alert(value); }\n\n      return g;\n    }\n\n    let g = f(); // while g is alive\n    // there corresponding Lexical Environment lives\n\n    g = null; // ...and now the memory is cleaned up\n    ```\n\n### Real-life optimizations\n\nAs we've seen, in theory while a function is alive, all outer variables are also retained.\n\nBut in practice, JavaScript engines try to optimize that. They analyze variable usage and if it's easy to see that an outer variable is not used -- it is removed.\n\n**An important side effect in V8 (Chrome, Opera) is that such variable will become unavailable in debugging.**\n\nTry running the example below in Chrome with the Developer Tools open.\n\nWhen it pauses, in the console type `alert(value)`.\n\n```js run\nfunction f() {\n  let value = Math.random();\n\n  function g() {\n    debugger; // in console: type alert( value ); No such variable!\n  }\n\n  return g;\n}\n\nlet g = f();\ng();\n```\n\nAs you could see -- there is no such variable! In theory, it should be accessible, but the engine optimized it out.\n\nThat may lead to funny (if not such time-consuming) debugging issues. One of them -- we can see a same-named outer variable instead of the expected one:\n\n```js run global\nlet value = \"Surprise!\";\n\nfunction f() {\n  let value = \"the closest value\";\n\n  function g() {\n    debugger; // in console: type alert( value ); Surprise!\n  }\n\n  return g;\n}\n\nlet g = f();\ng();\n```\n\n```warn header=\"See ya!\"\nThis feature of V8 is good to know. If you are debugging with Chrome/Opera, sooner or later you will meet it.\n\nThat is not a bug in the debugger, but rather a special feature of V8. Perhaps it will be changed sometime.\nYou always can check for it by running the examples on this page.\n```","libs":[],"children":["counter-independent","counter-object-independent","function-in-if","closure-sum","filter-through-function","sort-by-field","make-army"],"parent":"advanced-functions"}},"counter-independent":{"type":"Task","value":{"title":"Are counters independent?","slug":"counter-independent","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/1-counter-independent","weight":1,"libs":[],"importance":5,"content":"\nHere we make two counters: `counter` and `counter2` using the same `makeCounter` function.\n\nAre they independent? What is the second counter going to show? `0,1` or `2,3` or something else?\n\n```js\nfunction makeCounter() {\n  let count = 0;\n\n  return function() {\n    return count++;\n  };\n}\n\nlet counter = makeCounter();\nlet counter2 = makeCounter();\n\nalert( counter() ); // 0\nalert( counter() ); // 1\n\n*!*\nalert( counter2() ); // ?\nalert( counter2() ); // ?\n*/!*\n```","solution":"The answer: **0,1.**\n\nFunctions `counter` and `counter2` are created by different invocations of `makeCounter`.\n\nSo they have independent outer Lexical Environments, each one has its own `count`.","parent":"closure"}},"counter-object-independent":{"type":"Task","value":{"title":"Counter object","slug":"counter-object-independent","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/2-counter-object-independent","weight":2,"libs":[],"importance":5,"content":"\nHere a counter object is made with the help of the constructor function.\n\nWill it work? What will it show?\n\n```js\nfunction Counter() {\n  let count = 0;\n\n  this.up = function() {\n    return ++count;\n  };\n  this.down = function() {\n    return --count;\n  };\n}\n\nlet counter = new Counter();\n\nalert( counter.up() ); // ?\nalert( counter.up() ); // ?\nalert( counter.down() ); // ?\n```","solution":"Surely it will work just fine.\n\nBoth nested functions are created within the same outer Lexical Environment, so they share access to the same `count` variable:\n\n```js run\nfunction Counter() {\n  let count = 0;\n\n  this.up = function() {\n    return ++count;\n  };\n  \n  this.down = function() {\n    return --count;\n  };\n}\n\nlet counter = new Counter();\n\nalert( counter.up() ); // 1\nalert( counter.up() ); // 2\nalert( counter.down() ); // 1\n```","parent":"closure"}},"function-in-if":{"type":"Task","value":{"title":"Function in if","slug":"function-in-if","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/3-function-in-if","weight":3,"libs":[],"content":"\nLook at the code. What will be result of the call at the last line?\n\n```js run\nlet phrase = \"Hello\";\n\nif (true) {\n  let user = \"John\";\n\n  function sayHi() {\n    alert(`${phrase}, ${user}`);\n  }\n}\n\n*!*\nsayHi();\n*/!*\n```","solution":"The result is **an error**.\n\nThe function `sayHi` is declared inside the `if`, so it only lives inside it. There is no `sayHi` outside.","parent":"closure"}},"closure-sum":{"type":"Task","value":{"title":"Sum with closures","slug":"closure-sum","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/4-closure-sum","weight":4,"libs":[],"importance":4,"content":"\nWrite function `sum` that works like this: `sum(a)(b) = a+b`.\n\nYes, exactly this way, via double brackets (not a mistype).\n\nFor instance:\n\n```js\nsum(1)(2) = 3\nsum(5)(-1) = 4\n```","solution":"For the second brackets to work, the first ones must return a function.\n\nLike this:\n\n```js run\nfunction sum(a) {\n\n  return function(b) {\n    return a + b; // takes \"a\" from the outer lexical environment\n  };\n\n}\n\nalert( sum(1)(2) ); // 3\nalert( sum(5)(-1) ); // 4\n```","parent":"closure"}},"filter-through-function":{"type":"Task","value":{"title":"Filter through function","slug":"filter-through-function","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/6-filter-through-function","weight":6,"libs":[],"importance":5,"content":"\nWe have a built-in method `arr.filter(f)` for arrays. It filters all elements through the function `f`. If it returns `true`, then that element is returned in the resulting array.\n\nMake a set of \"ready to use\" filters:\n\n- `inBetween(a, b)` -- between `a` and `b` or equal to them (inclusively).\n- `inArray([...])` -- in the given array.\n\nThe usage must be like this:\n\n- `arr.filter(inBetween(3,6))` -- selects only values between 3 and 6.\n- `arr.filter(inArray([1,2,3]))` -- selects only elements matching with one of the members of `[1,2,3]`.\n\nFor instance:\n\n```js\n/* .. your code for inBetween and inArray */\nlet arr = [1, 2, 3, 4, 5, 6, 7];\n\nalert( arr.filter(inBetween(3, 6)) ); // 3,4,5,6\n\nalert( arr.filter(inArray([1, 2, 10])) ); // 1,2\n```","solution":"# Filter inBetween\n\n```js run\nfunction inBetween(a, b) {\n  return function(x) {\n    return x >= a && x <= b;\n  };\n}\n\nlet arr = [1, 2, 3, 4, 5, 6, 7];\nalert( arr.filter(inBetween(3, 6)) ); // 3,4,5,6\n```\n\n# Filter inArray\n\n```js run\nfunction inArray(arr) {\n  return function(x) {\n    return arr.includes(x);\n  };\n}\n\nlet arr = [1, 2, 3, 4, 5, 6, 7];\nalert( arr.filter(inArray([1, 2, 10])) ); // 1,2\n```","parent":"closure"}},"sort-by-field":{"type":"Task","value":{"title":"Sort by field","slug":"sort-by-field","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/7-sort-by-field","weight":7,"libs":[],"importance":5,"content":"\nWe've got an array of objects to sort:\n\n```js\nlet users = [\n  { name: \"John\", age: 20, surname: \"Johnson\" },\n  { name: \"Pete\", age: 18, surname: \"Peterson\" },\n  { name: \"Ann\", age: 19, surname: \"Hathaway\" }\n];\n```\n\nThe usual way to do that would be:\n\n```js\n// by name (Ann, John, Pete)\nusers.sort((a, b) => a.name > b.name ? 1 : -1);\n\n// by age (Pete, Ann, John)\nusers.sort((a, b) => a.age > b.age ? 1 : -1);\n```\n\nCan we make it even less verbose, like this?\n\n```js\nusers.sort(byField('name'));\nusers.sort(byField('age'));\n```\n\nSo, instead of writing a function, just put `byField(fieldName)`.\n\nWrite the function `byField` that can be used for that.","solution":"```js run\nlet users = [\n  { name: \"John\", age: 20, surname: \"Johnson\" }, \n  { name: \"Pete\", age: 18, surname: \"Peterson\" },\n  { name: \"Ann\", age: 19, surname: \"Hathaway\" }\n];\n\n*!*\nfunction byField(field) {\n  return (a, b) => a[field] > b[field] ? 1 : -1;\n}\n*/!*\n\nusers.sort(byField('name'));\nusers.forEach(user => alert(user.name)); // Ann, John, Pete\n\nusers.sort(byField('age'));\nusers.forEach(user => alert(user.name)); // Pete, Ann, John\n```","parent":"closure"}},"make-army":{"type":"Task","value":{"title":"Army of functions","slug":"make-army","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/03-closure/8-make-army","weight":8,"libs":[],"importance":5,"content":"\nThe following code creates an array of `shooters`.\n\nEvery function is meant to output its number. But something is wrong...\n\n```js run\nfunction makeArmy() {\n  let shooters = [];\n\n  let i = 0;\n  while (i < 10) {\n    let shooter = function() { // shooter function\n      alert( i ); // should show its number\n    };\n    shooters.push(shooter);\n    i++;\n  }\n\n  return shooters;\n}\n\nlet army = makeArmy();\n\narmy[0](); // the shooter number 0 shows 10\narmy[5](); // and number 5 also outputs 10...\n// ... all shooters show 10 instead of their 0, 1, 2, 3...\n```\n\nWhy all shooters show the same? Fix the code so that they work as intended.","solution":"Let's examine what's done inside `makeArmy`, and the solution will become obvious.\n\n1. It creates an empty array `shooters`:\n\n    ```js\n    let shooters = [];\n    ```\n2. Fills it in the loop via `shooters.push(function...)`.\n\n    Every element is a function, so the resulting array looks like this:\n\n    ```js no-beautify\n    shooters = [\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); },\n      function () { alert(i); }\n    ];\n    ```\n\n3. The array is returned from the function.\n\nThen, later, the call to `army[5]()` will get the element `army[5]` from the array (it will be a function) and call it.\n\nNow why all such functions show the same?\n\nThat's because there's no local variable `i` inside `shooter` functions. When such a function is called, it takes `i` from its outer lexical environment.\n\nWhat will be the value of `i`?\n\nIf we look at the source:\n\n```js\nfunction makeArmy() {\n  ...\n  let i = 0;\n  while (i < 10) {\n    let shooter = function() { // shooter function\n      alert( i ); // should show its number\n    };\n    ...\n  }\n  ...\n}\n```\n\n...We can see that it lives in the lexical environment associated with the current `makeArmy()` run. But when `army[5]()` is called, `makeArmy` has already finished its job, and `i` has the last value: `10` (the end of `while`).\n\nAs a result, all `shooter` functions get from the outer lexical envrironment the same, last value `i=10`.\n\nThe fix can be very simple:\n\n```js run\nfunction makeArmy() {\n\n  let shooters = [];\n\n*!*\n  for(let i = 0; i < 10; i++) {\n*/!*\n    let shooter = function() { // shooter function\n      alert( i ); // should show its number\n    };\n    shooters.push(shooter);\n  }\n\n  return shooters;\n}\n\nlet army = makeArmy();\n\narmy[0](); // 0\narmy[5](); // 5\n```\n\nNow it works correctly, because every time the code block in `for (..) {...}` is executed, a new Lexical Environment is created for it, with the corresponding value of `i`.\n\nSo, the value of `i` now lives a little bit closer. Not in `makeArmy()` Lexical Environment, but in the Lexical Environment that corresponds the current loop iteration. A `shooter` gets the value exactly from the one where it was created.\n\n![](lexenv-makearmy.png)\n\nHere we rewrote `while` into `for`.\n\nAnother trick could be possible, let's see it for better understanding of the subject:\n\n\n```js run\nfunction makeArmy() {\n  let shooters = [];\n\n  let i = 0;\n  while (i < 10) {\n*!*\n    let j = i;\n*/!*\n    let shooter = function() { // shooter function\n      alert( *!*j*/!* ); // should show its number\n    };\n    shooters.push(shooter);\n    i++;\n  }\n\n  return shooters;\n}\n\nlet army = makeArmy();\n\narmy[0](); // 0\narmy[5](); // 5\n```\n\nThe `while` loop, just like `for`, makes a new Lexical Environment for each run. So here we make sure that it gets the right value for a `shooter`.\n\nWe copy `let j = i`. This makes a loop body local `j` and copies the value of `i` to it. Primitives are copied \"by value\", so we actually get a complete independent copy of `i`, belonging to the current loop iteration.","parent":"closure"}},"var":{"type":"Article","value":{"title":"The old \"var\"","slug":"var","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/04-var/article.md","isFolder":false,"weight":4,"content":"\nIn the very first chapter about [variables](info:variables), we mentioned three ways of variable declaration:\n\n1. `let`\n2. `const`\n3. `var`\n\n`let` and `const` behave exactly the same way in terms of Lexical Environments.\n\nBut `var` is a very different beast, that originates from very old times. It's generally not used in modern scripts, but still lurks in the old ones.\n\nIf you don't plan meeting such scripts you may even skip this chapter or postpone it, but then there's a chance that it bites you later.\n\nFrom the first sight, `var` behaves similar to `let`. That is, declares a variable:\n\n```js run\nfunction sayHi() {\n  var phrase = \"Hello\"; // local variable, \"var\" instead of \"let\"\n\n  alert(phrase); // Hello\n}\n\nsayHi();\n\nalert(phrase); // Error, phrase is not defined\n```\n\n...But here are the differences.\n\n## \"var\" has no block scope\n\n`var` variables are either function-wide or global, they are visible through blocks.\n\nFor instance:\n\n```js\nif (true) {\n  var test = true; // use \"var\" instead of \"let\"\n}\n\n*!*\nalert(test); // true, the variable lives after if\n*/!*\n```\n\nIf we used `let test` on the 2nd line, then it wouldn't be visible to `alert`. But `var` ignores code blocks, so we've got a global `test`.\n\nThe same thing for loops: `var` cannot be block- or loop-local:\n\n```js\nfor (var i = 0; i < 10; i++) {\n  // ...\n}\n\n*!*\nalert(i); // 10, \"i\" is visible after loop, it's a global variable\n*/!*\n```\n\nIf a code block is inside a function, then `var` becomes a function-level variable:\n\n```js\nfunction sayHi() {\n  if (true) {\n    var phrase = \"Hello\";\n  }\n\n  alert(phrase); // works\n}\n\nsayHi();\nalert(phrase); // Error: phrase is not defined\n```\n\nAs we can see, `var` pierces through `if`, `for` or other code blocks. That's because a long time ago in JavaScript blocks had no Lexical Environments. And `var` is a reminiscence of that.\n\n## \"var\" are processed at the function start\n\n`var` declarations are processed when the function starts (or script starts for globals).\n\nIn other words, `var` variables are defined from the beginning of the function, no matter where the definition is (assuming that the definition is not in the nested function).\n\nSo this code:\n\n```js\nfunction sayHi() {\n  phrase = \"Hello\";\n\n  alert(phrase);\n\n*!*\n  var phrase;\n*/!*\n}\n```\n\n...Is technically the same as this (moved `var phrase` above):\n\n```js\nfunction sayHi() {\n*!*\n  var phrase;\n*/!*\n\n  phrase = \"Hello\";\n\n  alert(phrase);\n}\n```\n\n...Or even as this (remember, code blocks are ignored):\n\n```js\nfunction sayHi() {\n  phrase = \"Hello\"; // (*)\n\n  *!*\n  if (false) {\n    var phrase;\n  }\n  */!*\n\n  alert(phrase);\n}\n```\n\nPeople also call such behavior \"hoisting\" (raising), because all `var` are \"hoisted\" (raised) to the top of the function.\n\nSo in the example above, `if (false)` branch never executes, but that doesn't matter. The `var` inside it is processed in the beginning of the function, so at the moment of `(*)` the variable exists.\n\n**Declarations are hoisted, but assignments are not.**\n\nThat's better to demonstrate with an example, like this:\n\n```js run\nfunction sayHi() {\n  alert(phrase);  \n\n*!*\n  var phrase = \"Hello\";\n*/!*\n}\n\nsayHi();\n```\n\nThe line `var phrase = \"Hello\"` has two actions in it:\n\n1. Variable declaration `var`\n2. Variable assignment `=`.\n\nThe declaration is processed at the start of function execution (\"hoisted\"), but the assignment always works at the place where it appears. So the code works essentially like this:\n\n```js run\nfunction sayHi() {\n*!*\n  var phrase; // declaration works at the start...\n*/!*\n\n  alert(phrase); // undefined\n\n*!*\n  phrase = \"Hello\"; // ...assignment - when the execution reaches it.\n*/!*\n}\n\nsayHi();\n```\n\nBecause all `var` declarations are processed at the function start, we can reference them at any place. But variables are undefined until the assignments.\n\nIn both examples above `alert` runs without an error, because the variable `phrase` exists. But its value is not yet assigned, so it shows `undefined`.\n\n## Summary\n\nThere are two main differences of `var`:\n\n1. Variables have no block scope, they are visible minimum at the function level.\n2. Variable declarations are processed at function start.\n\nThere's one more minor difference related to the global object, we'll cover that in the next chapter.\n\nThese differences are actually a bad thing most of the time. First, we can't create block-local variables. And hoisting just creates more space for errors. So, for new scripts `var` is used exceptionally rarely.","libs":[],"children":[],"parent":"advanced-functions"}},"global-object":{"type":"Article","value":{"title":"Global object","slug":"global-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/05-global-object/article.md","isFolder":false,"weight":5,"content":"\nWhen JavaScript was created, there was an idea of a \"global object\" that provides all global variables and functions. It was planned that multiple in-browser scripts would use that single global object and share variables through it.\n\nSince then, JavaScript greatly evolved, and that idea of linking code through global variables became much less appealing. In modern JavaScript, the concept of modules took its place.\n\nBut the global object still remains in the specification.\n\nIn a browser it is named \"window\", for Node.JS it is \"global\", for other environments it may have another name.\n\nIt does two things:\n\n1. Provides access to built-in functions and values, defined by the specification and the environment.\n    For instance, we can call `alert` directly or as a method of `window`:\n\n    ```js run\n    alert(\"Hello\");\n\n    // the same as\n    window.alert(\"Hello\");\n    ```\n\n    The same applies to other built-ins. E.g. we can use `window.Array` instead of `Array`.\n\n2. Provides access to global Function Declarations and `var` variables. We can read and write them using its properties, for instance:\n\n    <!-- no-strict to move variables out of eval -->\n    ```js untrusted run no-strict refresh\n    var phrase = \"Hello\";\n\n    function sayHi() {\n      alert(phrase);\n    }\n\n    // can read from window\n    alert( window.phrase ); // Hello (global var)\n    alert( window.sayHi ); // function (global function declaration)\n\n    // can write to window (creates a new global variable)\n    window.test = 5;\n\n    alert(test); // 5\n    ```\n\n...But the global object does not have variables declared with `let/const`!\n\n```js untrusted run no-strict refresh\n*!*let*/!* user = \"John\";\nalert(user); // John\n\nalert(window.user); // undefined, don't have let\nalert(\"user\" in window); // false\n```\n\n```smart header=\"The global object is not a global Environment Record\"\nIn versions of ECMAScript prior to ES-2015, there were no `let/const` variables, only `var`. And global object was used as a global Environment Record (wordings were a bit different, but that's the gist).\n\nBut starting from ES-2015, these entities are split apart. There's a global Lexical Environment with its Environment Record. And there's a global object that provides *some* of the global variables.\n\nAs a practical difference, global `let/const` variables are definitively properties of the global Environment Record, but they do not exist in the global object.\n\nNaturally, that's because the idea of a global object as a way to access \"all global things\" comes from ancient times. Nowadays is not considered to be a good thing. Modern language features like `let/const` do not make friends with it, but old ones are still compatible.\n```\n\n## Uses of \"window\"\n\nIn server-side environments like Node.JS, the `global` object is used exceptionally rarely. Probably it would be fair to say \"never\".\n\nIn-browser `window` is sometimes used though.\n\nUsually, it's not a good idea to use it, but here are some examples you can meet.\n\n1. To access exactly the global variable if the function has the local one with the same name.\n\n    ```js untrusted run no-strict refresh\n    var user = \"Global\";\n\n    function sayHi() {\n      var user = \"Local\";\n\n    *!*\n      alert(window.user); // Global\n    */!*\n    }\n\n    sayHi();\n    ```\n\n    Such use is a workaround. Would be better to name variables differently, that won't require use to write the code it this way. And please note `\"var\"` before `user`. The trick doesn't work with `let` variables.\n\n2. To check if a certain global variable or a builtin exists.\n\n    For instance, we want to check whether a global function `XMLHttpRequest` exists.\n\n    We can't write `if (XMLHttpRequest)`, because if there's no `XMLHttpRequest`, there will be an error (variable not defined).\n\n    But we can read it from `window.XMLHttpRequest`:\n\n    ```js run\n    if (window.XMLHttpRequest) {\n      alert('XMLHttpRequest exists!')\n    }\n    ```\n\n    If there is no such global function then `window.XMLHttpRequest` is just a non-existing object property. That's `undefined`, no error, so it works.\n\n    We can also write the test without `window`:\n\n    ```js\n    if (typeof XMLHttpRequest == 'function') {\n      /* is there a function XMLHttpRequest? */\n    }\n    ```\n\n    This doesn't use `window`, but is (theoretically) less reliable, because `typeof` may use a local XMLHttpRequest, and we want the global one.\n\n\n3. To take the variable from the right window. That's probably the most valid use case.\n\n    A browser may open multiple windows and tabs. A window may also embed another one in `<iframe>`. Every browser window has its own `window` object and global variables. JavaScript allows windows that come from the same site (same protocol, host, port) to access variables from each other.\n\n    That use is a little bit beyond our scope for now, but it looks like:\n    ```html run\n    <iframe src=\"/\" id=\"iframe\"></iframe>\n\n    <script>\n      alert( innerWidth ); // get innerWidth property of the current window (browser only)\n      alert( Array ); // get Array of the current window (javascript core builtin)\n\n      // when the iframe loads...\n      iframe.onload = function() {\n        // get width of the iframe window\n      *!*\n        alert( iframe.contentWindow.innerWidth );\n      */!*\n        // get the builtin Array from the iframe window\n      *!*\n        alert( iframe.contentWindow.Array );\n      */!*\n      };\n    </script>\n    ```\n\n    Here, first two alerts use the current window, and the latter two take variables from `iframe` window. Can be any variables if `iframe` originates from the same protocol/host/port.\n\n## \"this\" and global object\n\nSometimes, the value of `this` is exactly the global object. That's rarely used, but some scripts rely on that.\n\n1. In the browser, the value of `this` in the global area is `window`:\n\n    ```js run\n    // outside of functions\n    alert( this === window ); // true\n    ```\n\n    Other, non-browser environments, may use another value for `this` in such cases.\n\n2. When a function with `this` is called in non-strict mode, it gets the global object as `this`:\n    ```js run no-strict\n    // not in strict mode (!)\n    function f() {\n      alert(this); // [object Window]\n    }\n\n    f(); // called without an object\n    ```\n\n    By specification, `this` in this case must be the global object, even in non-browser environments like Node.JS. That's for compatibility with old scripts, in strict mode `this` would be `undefined`.","libs":[],"children":[],"parent":"advanced-functions"}},"function-object":{"type":"Article","value":{"title":"Function object, NFE","slug":"function-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/06-function-object/article.md","isFolder":false,"weight":6,"content":"\nAs we already know, functions in JavaScript are values.\n\nEvery value in JavaScript has a type. What type is a function?\n\nIn JavaScript, functions are objects.\n\nA good way to imagine functions is as callable \"action objects\". We can not only call them, but also treat them as objects: add/remove properties, pass by reference etc.\n\n\n## The \"name\" property\n\nFunction objects contain a few useable properties.\n\nFor instance, a function's name is accessible as the \"name\" property:\n\n```js run\nfunction sayHi() {\n  alert(\"Hi\");\n}\n\nalert(sayHi.name); // sayHi\n```\n\nWhat's more funny, the name-assigning logic is smart. It also assigns the correct name to functions that are used in assignments:\n\n```js run\nlet sayHi = function() {\n  alert(\"Hi\");\n}\n\nalert(sayHi.name); // sayHi (works!)\n```\n\nIt also works if the assignment is done via a default value:\n\n```js run\nfunction f(sayHi = function() {}) {\n  alert(sayHi.name); // sayHi (works!)\n}\n\nf();\n```\n\nIn the specification, this feature is called a \"contextual name\". If the function does not provide one, then in an assignment it is figured out from the context.\n\nObject methods have names too:\n\n```js run\nlet user = {\n\n  sayHi() {\n    // ...\n  },\n\n  sayBye: function() {\n    // ...\n  }\n\n}\n\nalert(user.sayHi.name); // sayHi\nalert(user.sayBye.name); // sayBye\n```\n\nThere's no magic though. There are cases when there's no way to figure out the right name. In that case, the name property empty, like here:\n\n```js\n// function created inside array\nlet arr = [function() {}];\n\nalert( arr[0].name ); // <empty string>\n// the engine has no way to set up the right name, so there is none\n```\n\nIn practice, however, most functions do have a name.\n\n## The \"length\" property\n\nThere is another built-in property \"length\" that returns the number of function parameters, for instance:\n\n```js run\nfunction f1(a) {}\nfunction f2(a, b) {}\nfunction many(a, b, ...more) {}\n\nalert(f1.length); // 1\nalert(f2.length); // 2\nalert(many.length); // 2\n```\n\nHere we can see that rest parameters are not counted.\n\nThe `length` property is sometimes used for introspection in functions that operate on other functions.\n\nFor instance, in the code below the `ask` function accepts a `question` to ask and an arbitrary number of `handler` functions to call.\n\nOnce a user provides their answer, the function calls the handlers. We can pass two kinds of handlers:\n\n- A zero-argument function, which is only called when the user gives a positive answer.\n- A function with arguments, which is called in either case and returns an answer.\n\nThe idea is that we have a simple, no-arguments handler syntax for positive cases (most frequent variant), but are able to provide universal handlers as well.\n\nTo call `handlers` the right way, we examine the `length` property:\n\n```js run\nfunction ask(question, ...handlers) {\n  let isYes = confirm(question);\n\n  for(let handler of handlers) {\n    if (handler.length == 0) {\n      if (isYes) handler();\n    } else {\n      handler(isYes);\n    }\n  }\n\n}\n\n// for positive answer, both handlers are called\n// for negative answer, only the second one\nask(\"Question?\", () => alert('You said yes'), result => alert(result));\n```\n\nThis is a particular case of so-called [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)) -- treating arguments differently depending on their type or, in our case depending on the `length`. The idea does have a use in JavaScript libraries.\n\n## Custom properties\n\nWe can also add properties of our own.\n\nHere we add the `counter` property to track the total calls count:\n\n```js run\nfunction sayHi() {\n  alert(\"Hi\");\n\n  *!*\n  // let's count how many times we run\n  sayHi.counter++;\n  */!*\n}\nsayHi.counter = 0; // initial value\n\nsayHi(); // Hi\nsayHi(); // Hi\n\nalert( `Called ${sayHi.counter} times` ); // Called 2 times\n```\n\n```warn header=\"A property is not a variable\"\nA property assigned to a function like `sayHi.counter = 0` does *not* define a local variable `counter` inside it. In other words, a property `counter` and a variable `let counter` are two unrelated things.\n\nWe can treat a function as an object, store properties in it, but that has no effect on its execution. Variables never use function properties and vice versa. These are just parallel words.\n```\n\nFunction properties can replace closures sometimes. For instance, we can rewrite the counter function example from the chapter <info:closure> to use a function property:\n\n```js run\nfunction makeCounter() {\n  // instead of:\n  // let count = 0\n\n  function counter() {\n    return counter.count++;\n  };\n\n  counter.count = 0;\n\n  return counter;\n}\n\nlet counter = makeCounter();\nalert( counter() ); // 0\nalert( counter() ); // 1\n```\n\nThe `count` is now stored in the function directly, not in its outer Lexical Environment.\n\nIs it better or worse than using a closure?\n\nThe main difference is that if the value of `count` lives in an outer variable, then external code is unable to access it. Only nested functions may modify it. And if it's bound to a function, then such a thing is possible:\n\n```js run\nfunction makeCounter() {\n\n  function counter() {\n    return counter.count++;\n  };\n\n  counter.count = 0;\n\n  return counter;\n}\n\nlet counter = makeCounter();\n\n*!*\ncounter.count = 10;\nalert( counter() ); // 10\n*/!*\n```\n\nSo the choice of implementation depends on our aims.\n\n## Named Function Expression\n\nNamed Function Expression, or NFE, is a term for Function Expressions that have a name.\n\nFor instance, let's take an ordinary Function Expression:\n\n```js\nlet sayHi = function(who) {\n  alert(`Hello, ${who}`);\n};\n```\n\nAnd add a name to it:\n\n```js\nlet sayHi = function *!*func*/!*(who) {\n  alert(`Hello, ${who}`);\n};\n```\n\nDid we achieve anything here? What's the purpose of that additional `\"func\"` name?\n\nFirst let's note, that we still have a Function Expression. Adding the name `\"func\"` after `function` did not make it a Function Declaration, because it is still created as a part of an assignment expression.\n\nAdding such a name also did not break anything.\n\nThe function is still available as `sayHi()`:\n\n```js run\nlet sayHi = function *!*func*/!*(who) {\n  alert(`Hello, ${who}`);\n};\n\nsayHi(\"John\"); // Hello, John\n```\n\nThere are two special things about the name `func`:\n\n1. It allows the function to reference itself internally.\n2. It is not visible outside of the function.\n\nFor instance, the function `sayHi` below calls itself again with `\"Guest\"` if no `who` is provided:\n\n```js run\nlet sayHi = function *!*func*/!*(who) {\n  if (who) {\n    alert(`Hello, ${who}`);\n  } else {\n*!*\n    func(\"Guest\"); // use func to re-call itself\n*/!*\n  }\n};\n\nsayHi(); // Hello, Guest\n\n// But this won't work:\nfunc(); // Error, func is not defined (not visible outside of the function)\n```\n\nWhy do we use `func`? Maybe just use `sayHi` for the nested call?\n\n\nActually, in most cases we can:\n\n```js\nlet sayHi = function(who) {\n  if (who) {\n    alert(`Hello, ${who}`);\n  } else {\n*!*\n    sayHi(\"Guest\");\n*/!*\n  }\n};\n```\n\nThe problem with that code is that the value of `sayHi` may change. The function may go to another variable, and the code will start to give errors:\n\n```js run\nlet sayHi = function(who) {\n  if (who) {\n    alert(`Hello, ${who}`);\n  } else {\n*!*\n    sayHi(\"Guest\"); // Error: sayHi is not a function\n*/!*\n  }\n};\n\nlet welcome = sayHi;\nsayHi = null;\n\nwelcome(); // Error, the nested sayHi call doesn't work any more!\n```\n\nThat happens because the function takes `sayHi` from its outer lexical environment. There's no local `sayHi`, so the outer variable is used. And at the moment of the call that outer `sayHi` is `null`.\n\nThe optional name which we can put into the Function Expression is meant to solve exactly these kinds of problems.\n\nLet's use it to fix our code:\n\n```js run\nlet sayHi = function *!*func*/!*(who) {\n  if (who) {\n    alert(`Hello, ${who}`);\n  } else {\n*!*\n    func(\"Guest\"); // Now all fine\n*/!*\n  }\n};\n\nlet welcome = sayHi;\nsayHi = null;\n\nwelcome(); // Hello, Guest (nested call works)\n```\n\nNow it works, because the name `\"func\"` is function-local. It is not taken from outside (and not visible there). The specification guarantees that it will always reference the current function.\n\nThe outer code still has it's variable `sayHi` or `welcome`. And `func` is an \"internal function name\", how the function can call itself internally.\n\n```smart header=\"There's no such thing for Function Declaration\"\nThe \"internal name\" feature described here is only available for Function Expressions, not to Function Declarations. For Function Declarations, there's just no syntax possibility to add a one more \"internal\" name.\n\nSometimes, when we need a reliable internal name, it's the reason to rewrite a Function Declaration to Named Function Expression form.\n```\n\n## Summary\n\nFunctions are objects.\n\nHere we covered their properties:\n\n- `name` -- the function name. Exists not only when given in the function definition, but also for assignments and object properties.\n- `length` -- the number of arguments in the function definition. Rest parameters are not counted.\n\nIf the function is declared as a Function Expression (not in the main code flow), and it carries the name, then it is called a Named Function Expression. The name can be used inside to reference itself, for recursive calls or such.\n\nAlso, functions may carry additional properties. Many well-known JavaScript libraries make great use of this feature.\n\nThey create a \"main\" function and attach many other \"helper\" functions to it. For instance, the [jquery](https://jquery.com) library creates a function named `$`. The [lodash](https://lodash.com) library creates a function `_`. And then adds `_.clone`, `_.keyBy` and other properties to (see the [docs](https://lodash.com/docs) when you want learn more about them). Actually, they do it to lessen their pollution of the global space, so that a single library gives only one global variable. That reduces the possibility of naming conflicts.\n\nSo, a function can do a useful job by itself and also carry a bunch of other functionality in properties.","libs":[],"children":["counter-inc-dec","sum-many-brackets"],"parent":"advanced-functions"}},"counter-inc-dec":{"type":"Task","value":{"title":"Set and decrease for counter","slug":"counter-inc-dec","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/06-function-object/2-counter-inc-dec","weight":2,"libs":[],"importance":5,"content":"\nModify the code of `makeCounter()` so that the counter can also decrease and set the number:\n\n- `counter()` should return the next number (as before).\n- `counter.set(value)` should set the `count` to `value`.\n- `counter.decrease(value)` should decrease the `count` by 1.\n\nSee the sandbox code for the complete usage example.\n\nP.S. You can use either a closure or the function property to keep the current count. Or write both variants.","solution":"The solution uses `count` in the local variable, but addition methods are written right into the `counter`. They share the same outer lexical environment and also can access the current `count`.","parent":"function-object"}},"sum-many-brackets":{"type":"Task","value":{"title":"Sum with an arbitrary amount of brackets","slug":"sum-many-brackets","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/06-function-object/5-sum-many-brackets","weight":5,"libs":[],"importance":2,"content":"\nWrite function `sum` that would work like this:\n\n```js\nsum(1)(2) == 3; // 1 + 2\nsum(1)(2)(3) == 6; // 1 + 2 + 3\nsum(5)(-1)(2) == 6\nsum(6)(-1)(-2)(-3) == 0\nsum(0)(1)(2)(3)(4)(5) == 15\n```\n\nP.S. Hint: you may need to setup custom object to primitive conversion for your function.","solution":"1. For the whole thing to work *anyhow*, the result of `sum` must be function.\n2. That function must keep in memory the current value between calls.\n3. According to the task, the function must become the number when used in `==`. Functions are objects, so the conversion happens as described in the chapter <info:object-toprimitive>, and we can provide our own method that returns the number.\n\nNow the code:\n\n```js run\nfunction sum(a) {\n\n  let currentSum = a;\n\n  function f(b) {\n    currentSum += b;\n    return f;\n  }\n\n  f.toString = function() {\n    return currentSum;\n  };\n\n  return f;\n}\n\nalert( sum(1)(2) ); // 3\nalert( sum(5)(-1)(2) ); // 6\nalert( sum(6)(-1)(-2)(-3) ); // 0\nalert( sum(0)(1)(2)(3)(4)(5) ); // 15\n```\n\nPlease note that the `sum` function actually works only once. It returns function `f`.\n\nThen, on each subsequent call, `f` adds its parameter to the sum `currentSum`, and returns itself.\n\n**There is no recursion in the last line of `f`.**\n\nHere is what recursion looks like:\n\n```js\nfunction f(b) {\n  currentSum += b;\n  return f(); // <-- recursive call\n}\n```\n\nAnd in our case, we just return the function, without calling it:\n\n```js\nfunction f(b) {\n  currentSum += b;\n  return f; // <-- does not call itself, returns itself\n}\n```\n\nThis `f` will be used in the next call, again return itself, so many times as needed. Then, when used as a number or a string -- the `toString` returns the `currentSum`. We could also use `Symbol.toPrimitive` or `valueOf` here for the conversion.","parent":"function-object"}},"new-function":{"type":"Article","value":{"title":"The \"new Function\" syntax","slug":"new-function","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/07-new-function/article.md","isFolder":false,"weight":7,"content":"\nThere's one more way to create a function. It's rarely used, but sometimes there's no alternative.\n\n## Syntax\n\nThe syntax for creating a function:\n\n```js\nlet func = new Function ([arg1[, arg2[, ...argN]],] functionBody)\n```\n\nIn other words, function parameters (or, more precisely, names for them) go first, and the body is last. All arguments are strings.\n\nIt's easier to understand by looking at an example. Here's a function with two arguments:\n\n```js run\nlet sum = new Function('a', 'b', 'return a + b'); \n\nalert( sum(1, 2) ); // 3\n```\n\nIf there are no arguments, then there's only a single argument, the function body:\n\n```js run\nlet sayHi = new Function('alert(\"Hello\")');\n\nsayHi(); // Hello\n```\n\nThe major difference from other ways we've seen is that the function is created literally from a string, that is passed at run time. \n\nAll previous declarations required us, programmers, to write the function code in the script.\n\nBut `new Function` allows to turn any string into a function. For example, we can receive a new function from a server and then execute it:\n\n```js\nlet str = ... receive the code from a server dynamically ...\n\nlet func = new Function(str);\nfunc();\n```\n\nIt is used in very specific cases, like when we receive code from a server, or to dynamically compile a function from a template. The need for that usually arises at advanced stages of development.\n\n## Closure\n\nUsually, a function remembers where it was born in the special property `[[Environment]]`. It references the Lexical Environment from where it's created.\n\nBut when a function is created using `new Function`, its `[[Environment]]` references not the current Lexical Environment, but instead the global one.\n\n```js run\n\nfunction getFunc() {\n  let value = \"test\";\n\n*!*\n  let func = new Function('alert(value)');\n*/!*\n\n  return func;\n}\n\ngetFunc()(); // error: value is not defined\n```\n\nCompare it with the regular behavior:\n\n```js run \nfunction getFunc() {\n  let value = \"test\";\n\n*!*\n  let func = function() { alert(value); };\n*/!*\n\n  return func;\n}\n\ngetFunc()(); // *!*\"test\"*/!*, from the Lexical Environment of getFunc\n```\n\nThis special feature of `new Function` looks strange, but appears very useful in practice.\n\nImagine that we must create a function from a string. The code of that function is not known at the time of writing the script (that's why we don't use regular functions), but will be known in the process of execution. We may receive it from the server or from another source.\n\nOur new function needs to interact with the main script.\n\nPerhaps we want it to be able to access outer local variables?\n\nThe problem is that before JavaScript is published to production, it's compressed using a *minifier* -- a special program that shrinks code by removing extra comments, spaces and -- what's important, renames local variables into shorter ones.\n\nFor instance, if a function has `let userName`, minifier replaces it `let a` (or another letter if this one is occupied), and does it everywhere. That's usually a safe thing to do, because the variable is local, nothing outside the function can access it. And inside the function, minifier replaces every mention of it. Minifiers are smart, they analyze the code structure, so they don't break anything. They're not just a dumb find-and-replace.\n\nBut, if `new Function` could access outer variables, then it would be unable to find `userName`, since this is passed in as a string *after* the code is minified.\n\n**Even if we could access outer lexical environment in `new Function`, we would have problems with minifiers.**\n\nThe \"special feature\" of `new Function` saves us from mistakes.\n\nAnd it enforces better code. If we need to pass something to a function created by `new Function`, we should pass it explicitly as an argument.\n\nOur \"sum\" function actually does that right:\n\n```js run \n*!*\nlet sum = new Function('a', 'b', 'return a + b');\n*/!*\n\nlet a = 1, b = 2;\n\n*!*\n// outer values are passed as arguments\nalert( sum(a, b) ); // 3\n*/!*\n```\n\n## Summary\n\nThe syntax:\n\n```js\nlet func = new Function(arg1, arg2, ..., body);\n```\n\nFor historical reasons, arguments can also be given as a comma-separated list. \n\nThese three mean the same:\n\n```js \nnew Function('a', 'b', 'return a + b'); // basic syntax\nnew Function('a,b', 'return a + b'); // comma-separated\nnew Function('a , b', 'return a + b'); // comma-separated with spaces\n```\n\nFunctions created with `new Function`, have `[[Environment]]` referencing the global Lexical Environment, not the outer one. Hence, they cannot use outer variables. But that's actually good, because it saves us from errors. Passing parameters explicitly is a much better method architecturally and causes no problems with minifiers.","libs":[],"children":[],"parent":"advanced-functions"}},"settimeout-setinterval":{"type":"Article","value":{"title":"Scheduling: setTimeout and setInterval","slug":"settimeout-setinterval","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/08-settimeout-setinterval/article.md","isFolder":false,"weight":8,"content":"\nWe may decide to execute a function not right now, but at a certain time later. That's called \"scheduling a call\".\n\nThere are two methods for it:\n\n- `setTimeout` allows to run a function once after the interval of time.\n- `setInterval` allows to run a function regularly with the interval between the runs.\n\nThese methods are not a part of JavaScript specification. But most environments have the internal scheduler and provide these methods. In particular, they are supported in all browsers and Node.JS.\n\n\n## setTimeout\n\nThe syntax:\n\n```js\nlet timerId = setTimeout(func|code, delay[, arg1, arg2...])\n```\n\nParameters:\n\n`func|code`\n: Function or a string of code to execute.\nUsually, that's a function. For historical reasons, a string of code can be passed, but that's not recommended.\n\n`delay`\n: The delay before run, in milliseconds (1000 ms = 1 second).\n\n`arg1`, `arg2`...\n: Arguments for the function (not supported in IE9-)\n\nFor instance, this code calls `sayHi()` after one second:\n\n```js run\nfunction sayHi() {\n  alert('Hello');\n}\n\n*!*\nsetTimeout(sayHi, 1000);\n*/!*\n```\n\nWith arguments:\n\n```js run\nfunction sayHi(phrase, who) {\n  alert( phrase + ', ' + who );\n}\n\n*!*\nsetTimeout(sayHi, 1000, \"Hello\", \"John\"); // Hello, John\n*/!*\n```\n\nIf the first argument is a string, then JavaScript creates a function from it.\n\nSo, this will also work:\n\n```js run no-beautify\nsetTimeout(\"alert('Hello')\", 1000);\n```\n\nBut using strings is not recommended, use functions instead of them, like this:\n\n```js run no-beautify\nsetTimeout(() => alert('Hello'), 1000);\n```\n\n````smart header=\"Pass a function, but don't run it\"\nNovice developers sometimes make a mistake by adding brackets `()` after the function:\n\n```js\n// wrong!\nsetTimeout(sayHi(), 1000);\n```\nThat doesn't work, because `setTimeout` expects a reference to function. And here `sayHi()` runs the function, and the *result of its execution* is passed to `setTimeout`. In our case the result of `sayHi()` is `undefined` (the function returns nothing), so nothing is scheduled.\n````\n\n### Canceling with clearTimeout\n\nA call to `setTimeout` returns a \"timer identifier\" `timerId` that we can use to cancel the execution.\n\nThe syntax to cancel:\n\n```js\nlet timerId = setTimeout(...);\nclearTimeout(timerId);\n```\n\nIn the code below, we schedule the function and then cancel it (changed our mind). As a result, nothing happens:\n\n```js run no-beautify\nlet timerId = setTimeout(() => alert(\"never happens\"), 1000);\nalert(timerId); // timer identifier\n\nclearTimeout(timerId);\nalert(timerId); // same identifier (doesn't become null after canceling)\n```\n\nAs we can see from `alert` output, in a browser the timer identifier is a number. In other environments, this can be something else. For instance, Node.JS returns a timer object with additional methods.\n\nAgain, there is no universal specification for these methods, so that's fine.\n\nFor browsers, timers are described in the [timers section](https://www.w3.org/TR/html5/webappapis.html#timers) of HTML5 standard.\n\n## setInterval\n\nThe `setInterval` method has the same syntax as `setTimeout`:\n\n```js\nlet timerId = setInterval(func|code, delay[, arg1, arg2...])\n```\n\nAll arguments have the same meaning. But unlike `setTimeout` it runs the function not only once, but regularly after the given interval of time.\n\nTo stop further calls, we should call `clearInterval(timerId)`.\n\nThe following example will show the message every 2 seconds. After 5 seconds, the output is stopped:\n\n```js run\n// repeat with the interval of 2 seconds\nlet timerId = setInterval(() => alert('tick'), 2000);\n\n// after 5 seconds stop\nsetTimeout(() => { clearInterval(timerId); alert('stop'); }, 5000);\n```\n\n```smart header=\"Modal windows freeze time in Chrome/Opera/Safari\"\nIn browsers IE and Firefox the internal timer continues \"ticking\" while showing `alert/confirm/prompt`, but in Chrome, Opera and Safari the internal timer becomes \"frozen\".\n\nSo if you run the code above and don't dismiss the `alert` window for some time, then in Firefox/IE next `alert` will be shown immediately as you do it (2 seconds passed from the previous invocation), and in Chrome/Opera/Safari -- after 2 more seconds (timer did not tick during the `alert`).\n```\n\n## Recursive setTimeout\n\nThere are two ways of running something regularly.\n\nOne is `setInterval`. The other one is a recursive `setTimeout`, like this:\n\n```js\n/** instead of:\nlet timerId = setInterval(() => alert('tick'), 2000);\n*/\n\nlet timerId = setTimeout(function tick() {\n  alert('tick');\n*!*\n  timerId = setTimeout(tick, 2000); // (*)\n*/!*\n}, 2000);\n```\n\nThe `setTimeout` above schedules the next call right at the end of the current one `(*)`.\n\nThe recursive `setTimeout` is a more flexible method than `setInterval`. This way the next call may be scheduled differently, depending on the results of the current one.\n\nFor instance, we need to write a service that sends a request to the server every 5 seconds asking for data, but in case the server is overloaded, it should increase the interval to 10, 20, 40 seconds...\n\nHere's the pseudocode:\n```js\nlet delay = 5000;\n\nlet timerId = setTimeout(function request() {\n  ...send request...\n\n  if (request failed due to server overload) {\n    // increase the interval to the next run\n    delay *= 2;\n  }\n\n  timerId = setTimeout(request, delay);\n\n}, delay);\n```\n\n\nAnd if we regularly have CPU-hungry tasks, then we can measure the time taken by the execution and plan the next call sooner or later.\n\n**Recursive `setTimeout` guarantees a delay between the executions, `setInterval` -- does not.**\n\nLet's compare two code fragments. The first one uses `setInterval`:\n\n```js\nlet i = 1;\nsetInterval(function() {\n  func(i);\n}, 100);\n```\n\nThe second one uses recursive `setTimeout`:\n\n```js\nlet i = 1;\nsetTimeout(function run() {\n  func(i);\n  setTimeout(run, 100);\n}, 100);\n```\n\nFor `setInterval` the internal scheduler will run `func(i)` every 100ms:\n\n![](setinterval-interval.png)\n\nDid you notice?\n\n**The real delay between `func` calls for `setInterval` is less than in the code!**\n\nThat's normal, because the time taken by `func`'s execution \"consumes\" a part of the interval.\n\nIt is possible that `func`'s execution turns out to be longer than we expected and takes more than 100ms.\n\nIn this case the engine waits for `func` to complete, then checks the scheduler and if the time is up, runs it again *immediately*.\n\nIn the edge case, if the function always executes longer than `delay` ms, then the calls will happen without a pause at all.\n\nAnd here is the picture for the recursive `setTimeout`:\n\n![](settimeout-interval.png)\n\n**The recursive `setTimeout` guarantees the fixed delay (here 100ms).**\n\nThat's because a new call is planned at the end of the previous one.\n\n````smart header=\"Garbage collection\"\nWhen a function is passed in `setInterval/setTimeout`, an internal reference is created to it and saved in the scheduler. It prevents the function from being garbage collected, even if there are no other references to it.\n\n```js\n// the function stays in memory until the scheduler calls it\nsetTimeout(function() {...}, 100);\n```\n\nFor `setInterval` the function stays in memory until `clearInterval` is called.\n\nThere's a side-effect. A function references the outer lexical environment, so, while it lives, outer variables live too. They may take much more memory than the function itself. So when we don't need the scheduled function anymore, it's better to cancel it, even if it's very small.\n````\n\n## setTimeout(...,0)\n\nThere's a special use case: `setTimeout(func, 0)`.\n\nThis schedules the execution of `func` as soon as possible. But scheduler will invoke it only after the current code is complete.\n\nSo the function is scheduled to run \"right after\" the current code. In other words, *asynchronously*.\n\nFor instance, this outputs \"Hello\", then immediately \"World\":\n\n```js run\nsetTimeout(() => alert(\"World\"), 0);\n\nalert(\"Hello\");\n```\n\nThe first line \"puts the call into calendar after 0ms\". But the scheduler will only \"check the calendar\" after the current code is complete, so `\"Hello\"` is first, and `\"World\"` -- after it.\n\n### Splitting CPU-hungry tasks\n\nThere's a trick to split CPU-hungry tasks using `setTimeout`.\n\nFor instance, a syntax-highlighting script (used to colorize code examples on this page) is quite CPU-heavy. To highlight the code, it performs the analysis, creates many colored elements, adds them to the document -- for a big text that takes a lot. It may even cause the browser to \"hang\", which is unacceptable.\n\nSo we can split the long text into pieces. First 100 lines, then plan another 100 lines using `setTimeout(...,0)`, and so on.\n\nFor clarity, let's take a simpler example for consideration. We have a function to count from `1` to `1000000000`.\n\nIf you run it, the CPU will hang. For server-side JS that's clearly noticeable, and if you are running it in-browser, then try to click other buttons on the page -- you'll see that whole JavaScript actually is paused, no other actions work until it finishes.\n\n```js run\nlet i = 0;\n\nlet start = Date.now();\n\nfunction count() {\n\n  // do a heavy job\n  for (let j = 0; j < 1e9; j++) {\n    i++;\n  }\n\n  alert(\"Done in \" + (Date.now() - start) + 'ms');\n}\n\ncount();\n```\n\nThe browser may even show \"the script takes too long\" warning (but hopefully it won't, because the number is not very big).\n\nLet's split the job using the nested `setTimeout`:\n\n```js run\nlet i = 0;\n\nlet start = Date.now();\n\nfunction count() {\n\n  // do a piece of the heavy job (*)\n  do {\n    i++;\n  } while (i % 1e6 != 0);\n\n  if (i == 1e9) {\n    alert(\"Done in \" + (Date.now() - start) + 'ms');\n  } else {\n    setTimeout(count, 0); // schedule the new call (**)\n  }\n\n}\n\ncount();\n```\n\nNow the browser UI is fully functional during the \"counting\" process.\n\nWe do a part of the job `(*)`:\n\n1. First run: `i=1...1000000`.\n2. Second run: `i=1000001..2000000`.\n3. ...and so on, the `while` checks if `i` is evenly divided by `1000000`.\n\nThen the next call is scheduled in `(*)` if we're not done yet.\n\nPauses between `count` executions provide just enough \"breath\" for the JavaScript engine to do something else, to react to other user actions.\n\nThe notable thing is that both variants -- with and without splitting the job by `setTimeout` -- are comparable in speed. There's no much difference in the overall counting time.\n\nTo make them closer, let's make an improvement.\n\nWe'll move the scheduling in the beginning of the `count()`:\n\n```js run\nlet i = 0;\n\nlet start = Date.now();\n\nfunction count() {\n\n  // move the scheduling at the beginning\n  if (i < 1e9 - 1e6) {\n    setTimeout(count, 0); // schedule the new call\n  }\n\n  do {\n    i++;\n  } while (i % 1e6 != 0);\n\n  if (i == 1e9) {\n    alert(\"Done in \" + (Date.now() - start) + 'ms');\n  }\n\n}\n\ncount();\n```\n\nNow when we start to `count()` and know that we'll need to `count()` more, we schedule that immediately, before doing the job.\n\nIf you run it, it's easy to notice that it takes significantly less time.\n\n````smart header=\"Minimal delay of nested timers in-browser\"\nIn the browser, there's a limitation of how often nested timers can run. The [HTML5 standard](https://www.w3.org/TR/html5/webappapis.html#timers) says: \"after five nested timers, the interval is forced to be at least four milliseconds.\".\n\nLet's demonstrate what it means with the example below. The `setTimeout` call in it re-schedules itself after `0ms`. Each call remembers the real time from the previous one in the `times` array. What do the real delays look like? Let's see:\n\n```js run\nlet start = Date.now();\nlet times = [];\n\nsetTimeout(function run() {\n  times.push(Date.now() - start); // remember delay from the previous call\n\n  if (start + 100 < Date.now()) alert(times); // show the delays after 100ms\n  else setTimeout(run, 0); // else re-schedule\n}, 0);\n\n// an example of the output:\n// 1,1,1,1,9,15,20,24,30,35,40,45,50,55,59,64,70,75,80,85,90,95,100\n```\n\nFirst timers run immediately (just as written in the spec), and then the delay comes into play and we see `9, 15, 20, 24...`.\n\nThat limitation comes from ancient times and many scripts rely on it, so it exists for historical reasons.\n\nFor server-side JavaScript, that limitation does not exist, and there exist other ways to schedule an immediate asynchronous job, like [process.nextTick](https://nodejs.org/api/process.html) and [setImmediate](https://nodejs.org/api/timers.html) for Node.JS. So the notion is browser-specific only.\n````\n\n### Allowing the browser to render\n\nAnother benefit for in-browser scripts is that they can show a progress bar or something to the user. That's because the browser usually does all \"repainting\" after the script is complete.\n\nSo if we do a single huge function then even if it changes something, the changes are not reflected in the document till it finishes.\n\nHere's the demo:\n```html run\n<div id=\"progress\"></div>\n\n<script>\n  let i = 0;\n\n  function count() {\n    for (let j = 0; j < 1e6; j++) {\n      i++;\n      // put the current i into the <div>\n      // (we'll talk more about innerHTML in the specific chapter, should be obvious here)\n      progress.innerHTML = i;\n    }\n  }\n\n  count();\n</script>\n```\n\nIf you run it, the changes to `i` will show up after the whole count finishes.\n\nAnd if we use `setTimeout` to split it into pieces then changes are applied in-between the runs, so this looks better:\n\n```html run\n<div id=\"progress\"></div>\n\n<script>\n  let i = 0;\n\n  function count() {\n\n    // do a piece of the heavy job (*)\n    do {\n      i++;\n      progress.innerHTML = i;\n    } while (i % 1e3 != 0);\n\n    if (i < 1e9) {\n      setTimeout(count, 0);\n    }\n\n  }\n\n  count();\n</script>\n```\n\nNow the `<div>` shows increasing values of `i`.\n\n## Summary\n\n- Methods `setInterval(func, delay, ...args)` and `setTimeout(func, delay, ...args)` allow to run the `func` regularly/once after `delay` milliseconds.\n- To cancel the execution, we should call `clearInterval/clearTimeout` with the value returned by `setInterval/setTimeout`.\n- Nested `setTimeout` calls is a more flexible alternative to `setInterval`. Also they can guarantee the minimal time *between* the executions.\n- Zero-timeout scheduling `setTimeout(...,0)` is used to schedule the call \"as soon as possible, but after the current code is complete\".\n\nSome use cases of `setTimeout(...,0)`:\n- To split CPU-hungry tasks into pieces, so that the script doesn't \"hang\"\n- To let the browser do something else while the process is going on (paint the progress bar).\n\nPlease note that all scheduling methods do not *guarantee* the exact delay. We should not rely on that in the scheduled code.\n\nFor example, the in-browser timer may slow down for a lot of reasons:\n- The CPU is overloaded.\n- The browser tab is in the background mode.\n- The laptop is on battery.\n\nAll that may increase the minimal timer resolution (the minimal delay) to 300ms or even 1000ms depending on the browser and settings.","libs":[],"children":["output-numbers-100ms","rewrite-settimeout","settimeout-result"],"parent":"advanced-functions"}},"output-numbers-100ms":{"type":"Task","value":{"title":"Output every second","slug":"output-numbers-100ms","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/08-settimeout-setinterval/1-output-numbers-100ms","weight":1,"libs":[],"importance":5,"content":"\nWrite a function `printNumbers(from, to)` that outputs a number every second, starting from `from` and ending with `to`.\n\nMake two variants of the solution.\n\n1. Using `setInterval`.\n2. Using recursive `setTimeout`.","solution":"Using `setInterval`:\n\n```js run\nfunction printNumbers(from, to) {\n  let current = from;\n\n  let timerId = setInterval(function() {\n    alert(current);\n    if (current == to) {\n      clearInterval(timerId);\n    }\n    current++;\n  }, 1000);\n}\n\n// usage:\nprintNumbers(5, 10);\n```\n\nUsing recursive `setTimeout`:\n\n\n```js run\nfunction printNumbers(from, to) {\n  let current = from;\n\n  setTimeout(function go() {\n    alert(current);\n    if (current < to) {\n      setTimeout(go, 1000);\n    }\n    current++;\n  }, 1000);\n}\n\n// usage:\nprintNumbers(5, 10);\n```\n\nNote that in both solutions, there is an initial delay before the first output. Sometimes we need to add a line to make the first output immediately, that's easy to do.","parent":"settimeout-setinterval"}},"rewrite-settimeout":{"type":"Task","value":{"title":"Rewrite setTimeout with setInterval","slug":"rewrite-settimeout","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/08-settimeout-setinterval/3-rewrite-settimeout","weight":3,"libs":[],"importance":4,"content":"\nHere's the function that uses nested `setTimeout` to split a job into pieces.\n\nRewrite it to `setInterval`:\n\n```js run\nlet i = 0;\n\nlet start = Date.now();\n\nfunction count() {\n\n  if (i == 1000000000) {\n    alert(\"Done in \" + (Date.now() - start) + 'ms');\n  } else {\n    setTimeout(count, 0);\n  }\n\n  // a piece of heavy job\n  for(let j = 0; j < 1000000; j++) {\n    i++;\n  }\n\n}\n\ncount();\n```","solution":"```js run\nlet i = 0;\n\nlet start = Date.now();\n\nlet timer = setInterval(count, 0);\n\nfunction count() {\n\n  for(let j = 0; j < 1000000; j++) {\n    i++;\n  }\n\n  if (i == 1000000000) {\n    alert(\"Done in \" + (Date.now() - start) + 'ms');\n    clearInterval(timer);\n  }\n\n}\n```","parent":"settimeout-setinterval"}},"settimeout-result":{"type":"Task","value":{"title":"What will setTimeout show?","slug":"settimeout-result","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/08-settimeout-setinterval/4-settimeout-result","weight":4,"libs":[],"importance":5,"content":"\nIn the code below there's a `setTimeout` call scheduled, then a heavy calculation is run, that takes more than 100ms to finish.\n\nWhen will the scheduled function run?\n\n1. After the loop.\n2. Before the loop.\n3. In the beginning of the loop.\n\n\nWhat is `alert` going to show?\n\n```js\nlet i = 0;\n\nsetTimeout(() => alert(i), 100); // ?\n\n// assume that the time to execute this function is >100ms\nfor(let j = 0; j < 100000000; j++) {\n  i++; \n}\n```","solution":"Any `setTimeout` will run only after the current code has finished.\n\nThe `i` will be the last one: `100000000`.\n\n```js run\nlet i = 0;\n\nsetTimeout(() => alert(i), 100); // 100000000\n\n// assume that the time to execute this function is >100ms\nfor(let j = 0; j < 100000000; j++) {\n  i++; \n}\n```","parent":"settimeout-setinterval"}},"call-apply-decorators":{"type":"Article","value":{"title":"Decorators and forwarding, call/apply","slug":"call-apply-decorators","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/09-call-apply-decorators/article.md","isFolder":false,"weight":9,"content":"\nJavaScript gives exceptional flexibility when dealing with functions. They can be passed around, used as objects, and now we'll see how to *forward* calls between them and *decorate* them.\n\n## Transparent caching\n\nLet's say we have a function `slow(x)` which is CPU-heavy, but its results are stable. In other words, for the same `x` it always returns the same result.\n\nIf the function is called often, we may want to cache (remember) the results for different `x` to avoid spending extra-time on recalculations.\n\nBut instead of adding that functionality into `slow()` we'll create a wrapper. As we'll see, there are many benefits of doing so.\n\nHere's the code, and explanations follow:\n\n```js run\nfunction slow(x) {\n  // there can be a heavy CPU-intensive job here\n  alert(`Called with ${x}`);\n  return x;\n}\n\nfunction cachingDecorator(func) {\n  let cache = new Map();\n\n  return function(x) {\n    if (cache.has(x)) { // if the result is in the map\n      return cache.get(x); // return it\n    }\n\n    let result = func(x); // otherwise call func\n\n    cache.set(x, result); // and cache (remember) the result\n    return result;\n  };\n}\n\nslow = cachingDecorator(slow);\n\nalert( slow(1) ); // slow(1) is cached\nalert( \"Again: \" + slow(1) ); // the same\n\nalert( slow(2) ); // slow(2) is cached\nalert( \"Again: \" + slow(2) ); // the same as the previous line\n```\n\nIn the code above `cachingDecorator` is a *decorator*: a special function that takes another function and alters its behavior.\n\nThe idea is that we can call `cachingDecorator` for any function, and it will return the caching wrapper. That's great, because we can have many functions that could use such a feature, and all we need to do is to apply `cachingDecorator` to them.\n\nBy separating caching from the main function code we also keep the main code simpler.\n\nNow let's get into details of how it works.\n\nThe result of `cachingDecorator(func)` is a \"wrapper\": `function(x)` that \"wraps\" the call of `func(x)` into caching logic:\n\n![](decorator-makecaching-wrapper.png)\n\nAs we can see, the wrapper returns the result of `func(x)` \"as is\". From an outside code, the wrapped `slow` function still does the same. It just got a caching aspect added to its behavior.\n\nTo summarize, there are several benefits of using a separate `cachingDecorator` instead of altering the code of `slow` itself:\n\n- The `cachingDecorator` is reusable. We can apply it to another function.\n- The caching logic is separate, it did not increase the complexity of `slow` itself (if there were any).\n- We can combine multiple decorators if needed (other decorators will follow).\n\n\n## Using \"func.call\" for the context\n\nThe caching decorator mentioned above is not suited to work with object methods.\n\nFor instance, in the code below `worker.slow()` stops working after the decoration:\n\n```js run\n// we'll make worker.slow caching\nlet worker = {\n  someMethod() {\n    return 1;\n  },\n\n  slow(x) {\n    // actually, there can be a scary CPU-heavy task here  \n    alert(\"Called with \" + x);\n    return x * this.someMethod(); // (*)\n  }\n};\n\n// same code as before\nfunction cachingDecorator(func) {\n  let cache = new Map();\n  return function(x) {\n    if (cache.has(x)) {\n      return cache.get(x);\n    }\n*!*\n    let result = func(x); // (**)\n*/!*\n    cache.set(x, result);\n    return result;\n  };\n}\n\nalert( worker.slow(1) ); // the original method works\n\nworker.slow = cachingDecorator(worker.slow); // now make it caching\n\n*!*\nalert( worker.slow(2) ); // Whoops! Error: Cannot read property 'someMethod' of undefined\n*/!*\n```\n\nThe error occurs in the line `(*)` that tries to access `this.someMethod` and fails. Can you see why?\n\nThe reason is that the wrapper calls the original function as `func(x)` in the line `(**)`. And, when called like that, the function gets `this = undefined`.\n\nWe would observe a similar symptom if we tried to run:\n\n```js\nlet func = worker.slow;\nfunc(2);\n```\n\nSo, the wrapper passes the call to the original method, but without the context `this`. Hence the error.\n\nLet's fix it.\n\nThere's a special built-in function method [func.call(context, ...args)](mdn:js/Function/call) that allows to call a function explicitly setting `this`.\n\nThe syntax is:\n\n```js\nfunc.call(context, arg1, arg2, ...)\n```\n\nIt runs `func` providing the first argument as `this`, and the next as the arguments.\n\nTo put it simply, these two calls do almost the same:\n```js\nfunc(1, 2, 3);\nfunc.call(obj, 1, 2, 3)\n```\n\nThey both call `func` with arguments `1`, `2` and `3`. The only difference is that `func.call` also sets `this` to `obj`.\n\nAs an example, in the code below we call `sayHi` in the context of different objects: `sayHi.call(user)` runs `sayHi` providing `this=user`, and the next line sets `this=admin`:\n\n```js run\nfunction sayHi() {\n  alert(this.name);\n}\n\nlet user = { name: \"John\" };\nlet admin = { name: \"Admin\" };\n\n// use call to pass different objects as \"this\"\nsayHi.call( user ); // this = John\nsayHi.call( admin ); // this = Admin\n```\n\nAnd here we use `call` to call `say` with the given context and phrase:\n\n\n```js run\nfunction say(phrase) {\n  alert(this.name + ': ' + phrase);\n}\n\nlet user = { name: \"John\" };\n\n// user becomes this, and \"Hello\" becomes the first argument\nsay.call( user, \"Hello\" ); // John: Hello\n```\n\n\nIn our case, we can use `call` in the wrapper to pass the context to the original function:\n\n\n```js run\nlet worker = {\n  someMethod() {\n    return 1;\n  },\n\n  slow(x) {\n    alert(\"Called with \" + x);\n    return x * this.someMethod(); // (*)\n  }\n};\n\nfunction cachingDecorator(func) {\n  let cache = new Map();\n  return function(x) {\n    if (cache.has(x)) {\n      return cache.get(x);\n    }\n*!*\n    let result = func.call(this, x); // \"this\" is passed correctly now\n*/!*\n    cache.set(x, result);\n    return result;\n  };\n}\n\nworker.slow = cachingDecorator(worker.slow); // now make it caching\n\nalert( worker.slow(2) ); // works\nalert( worker.slow(2) ); // works, doesn't call the original (cached)\n```\n\nNow everything is fine.\n\nTo make it all clear, let's see more deeply how `this` is passed along:\n\n1. After the decoration `worker.slow` is now the wrapper `function (x) { ... }`.\n2. So when `worker.slow(2)` is executed, the wrapper gets `2` as an argument and `this=worker` (it's the object before dot).\n3. Inside the wrapper, assuming the result is not yet cached, `func.call(this, x)` passes the current `this` (`=worker`) and the current argument (`=2`) to the original method.\n\n## Going multi-argument with \"func.apply\"\n\nNow let's make `cachingDecorator` even more universal. Till now it was working only with single-argument functions.\n\nNow how to cache the multi-argument `worker.slow` method?\n\n```js\nlet worker = {\n  slow(min, max) {\n    return min + max; // scary CPU-hogger is assumed\n  }\n};\n\n// should remember same-argument calls\nworker.slow = cachingDecorator(worker.slow);\n```\n\nWe have two tasks to solve here.\n\nFirst is how to use both arguments `min` and `max` for the key in `cache` map. Previously, for a single argument `x` we could just `cache.set(x, result)` to save the result and `cache.get(x)` to retrieve it. But now we need to remember the result for a *combination of arguments* `(min,max)`. The native `Map` takes single value only as the key.\n\nThere are many solutions possible:\n\n1. Implement a new (or use a third-party) map-like data structure that is more versatile and allows multi-keys.\n2. Use nested maps: `cache.set(min)` will be a `Map` that stores the pair `(max, result)`. So we can get `result` as `cache.get(min).get(max)`.\n3. Join two values into one. In our particular case we can just use a string `\"min,max\"` as the `Map` key. For flexibility, we can allow to provide a *hashing function* for the decorator, that knows how to make one value from many.\n\n\nFor many practical applications, the 3rd variant is good enough, so we'll stick to it.\n\nThe second task to solve is how to pass many arguments to `func`. Currently, the wrapper `function(x)` assumes a single argument, and `func.call(this, x)` passes it.\n\nHere we can use another built-in method [func.apply](mdn:js/Function/apply).\n\nThe syntax is:\n\n```js\nfunc.apply(context, args)\n```\n\nIt runs the `func` setting `this=context` and using an array-like object `args` as the list of arguments.\n\n\nFor instance, these two calls are almost the same:\n\n```js\nfunc(1, 2, 3);\nfunc.apply(context, [1, 2, 3])\n```\n\nBoth run `func` giving it arguments `1,2,3`. But `apply` also sets `this=context`.\n\nFor instance, here `say` is called with `this=user` and `messageData` as a list of arguments:\n\n```js run\nfunction say(time, phrase) {\n  alert(`[${time}] ${this.name}: ${phrase}`);\n}\n\nlet user = { name: \"John\" };\n\nlet messageData = ['10:00', 'Hello']; // become time and phrase\n\n*!*\n// user becomes this, messageData is passed as a list of arguments (time, phrase)\nsay.apply(user, messageData); // [10:00] John: Hello (this=user)\n*/!*\n```\n\nThe only syntax difference between `call` and `apply` is that `call` expects a list of arguments, while `apply` takes an array-like object with them.\n\nWe already know the spread operator `...` from the chapter <info:rest-parameters-spread-operator> that can pass an array (or any iterable) as a list of arguments. So if we use it with `call`, we can achieve almost the same as `apply`.\n\nThese two calls are almost equivalent:\n\n```js\nlet args = [1, 2, 3];\n\n*!*\nfunc.call(context, ...args); // pass an array as list with spread operator\nfunc.apply(context, args);   // is same as using apply\n*/!*\n```\n\nIf we look more closely, there's a minor difference between such uses of `call` and `apply`.\n\n- The spread operator `...` allows to pass *iterable* `args` as the list to `call`.\n- The `apply` accepts only *array-like* `args`.\n\nSo, these calls complement each other. Where we expect an iterable, `call` works, where we expect an array-like, `apply` works.\n\nAnd if `args` is both iterable and array-like, like a real array, then we technically could use any of them, but `apply` will probably be faster, because it's a single operation. Most JavaScript engines internally optimize is better than a pair `call + spread`.\n\nOne of the most important uses of `apply` is passing the call to another function, like this:\n\n```js\nlet wrapper = function() {\n  return anotherFunction.apply(this, arguments);\n};\n```\n\nThat's called *call forwarding*. The `wrapper` passes everything it gets: the context `this` and arguments to `anotherFunction` and returns back its result.\n\nWhen an external code calls such `wrapper`, it is indistinguishable from the call of the original function.\n\nNow let's bake it all into the more powerful `cachingDecorator`:\n\n```js run\nlet worker = {\n  slow(min, max) {\n    alert(`Called with ${min},${max}`);\n    return min + max;\n  }\n};\n\nfunction cachingDecorator(func, hash) {\n  let cache = new Map();\n  return function() {\n*!*\n    let key = hash(arguments); // (*)\n*/!*\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n*!*\n    let result = func.apply(this, arguments); // (**)\n*/!*\n\n    cache.set(key, result);\n    return result;\n  };\n}\n\nfunction hash(args) {\n  return args[0] + ',' + args[1];\n}\n\nworker.slow = cachingDecorator(worker.slow, hash);\n\nalert( worker.slow(3, 5) ); // works\nalert( \"Again \" + worker.slow(3, 5) ); // same (cached)\n```\n\nNow the wrapper operates with any number of arguments.\n\nThere are two changes:\n\n- In the line `(*)` it calls `hash` to create a single key from `arguments`. Here we use a simple \"joining\" function that turns arguments `(3, 5)` into the key `\"3,5\"`. More complex cases may require other hashing functions.\n- Then `(**)` uses `func.apply` to pass both the context and all arguments the wrapper got (no matter how many) to the original function.\n\n\n## Borrowing a method [#method-borrowing]\n\nNow let's make one more minor improvement in the hashing function:\n\n```js\nfunction hash(args) {\n  return args[0] + ',' + args[1];\n}\n```\n\nAs of now, it works only on two arguments. It would be better if it could glue any number of `args`.\n\nThe natural solution would be to use [arr.join](mdn:js/Array/join) method:\n\n```js\nfunction hash(args) {\n  return args.join();\n}\n```\n\n...Unfortunately, that won't work. Because we are calling `hash(arguments)` and `arguments` object is both iterable and array-like, but not a real array.\n\nSo calling `join` on it would fail, as we can see below:\n\n```js run\nfunction hash() {\n*!*\n  alert( arguments.join() ); // Error: arguments.join is not a function\n*/!*\n}\n\nhash(1, 2);\n```\n\nStill, there's an easy way to use array join:\n\n```js run\nfunction hash() {\n*!*\n  alert( [].join.call(arguments) ); // 1,2\n*/!*\n}\n\nhash(1, 2);\n```\n\nThe trick is called *method borrowing*.\n\nWe take (borrow) a join method from a regular array `[].join`. And use `[].join.call` to run it in the context of `arguments`.\n\nWhy does it work?\n\nThat's because the internal algorithm of the native method `arr.join(glue)` is very simple.\n\nTaken from the specification almost \"as-is\":\n\n1. Let `glue` be the first argument or, if no arguments, then a comma `\",\"`.\n2. Let `result` be an empty string.\n3. Append `this[0]` to `result`.\n4. Append `glue` and `this[1]`.\n5. Append `glue` and `this[2]`.\n6. ...Do so until `this.length` items are glued.\n7. Return `result`.\n\nSo, technically it takes `this` and joins `this[0]`, `this[1]` ...etc together. It's intentionally written in a way that allows any array-like `this` (not a coincidence, many methods follow this practice). That's why it also works with `this=arguments`.\n\n## Summary\n\n*Decorator* is a wrapper around a function that alters its behavior. The main job is still carried out by the function.\n\nIt is generally safe to replace a function or a method with a decorated one, except for one little thing. If the original function had properties on it, like `func.calledCount` or whatever, then the decorated one will not provide them. Because that is a wrapper. So one needs to be careful if one uses them. Some decorators provide their own properties.\n\nDecorators can be seen as \"features\" or \"aspects\" that can be added to a function. We can add one or add many. And all this without changing its code!\n\nTo implement `cachingDecorator`, we studied methods:\n\n- [func.call(context, arg1, arg2...)](mdn:js/Function/call) -- calls `func` with given context and arguments.\n- [func.apply(context, args)](mdn:js/Function/apply) -- calls `func` passing `context` as `this` and array-like `args` into a list of arguments.\n\nThe generic *call forwarding* is usually done with `apply`:\n\n```js\nlet wrapper = function() {\n  return original.apply(this, arguments);\n}\n```\n\nWe also saw an example of *method borrowing* when we take a method from an object and `call` it in the context of another object. It is quite common to take array methods and apply them to arguments. The alternative is to use rest parameters object that is a real array.\n\n\nThere are many decorators there in the wild. Check how well you got them by solving the tasks of this chapter.","libs":[],"children":["spy-decorator","delay","debounce","throttle"],"parent":"advanced-functions"}},"spy-decorator":{"type":"Task","value":{"title":"Spy decorator","slug":"spy-decorator","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/09-call-apply-decorators/01-spy-decorator","weight":1,"libs":[],"importance":5,"content":"\nCreate a decorator `spy(func)` that should return a wrapper that saves all calls to function in its `calls` property.\n\nEvery call is saved as an array of arguments.\n\nFor instance:\n\n```js\nfunction work(a, b) {\n  alert( a + b ); // work is an arbitrary function or method\n}\n\n*!*\nwork = spy(work);\n*/!*\n\nwork(1, 2); // 3\nwork(4, 5); // 9\n\nfor (let args of work.calls) {\n  alert( 'call:' + args.join() ); // \"call:1,2\", \"call:4,5\"\n}\n```\n\nP.S. That decorator is sometimes useful for unit-testing, it's advanced form is `sinon.spy` in [Sinon.JS](http://sinonjs.org/) library.","solution":"Here we can use `calls.push(args)` to store all arguments in the log and `f.apply(this, args)` to forward the call.","parent":"call-apply-decorators"}},"delay":{"type":"Task","value":{"title":"Delaying decorator","slug":"delay","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/09-call-apply-decorators/02-delay","weight":2,"libs":[],"importance":5,"content":"\nCreate a decorator `delay(f, ms)` that delays each call of `f` by `ms` milliseconds.\n\nFor instance:\n\n```js\nfunction f(x) {\n  alert(x);\n}\n\n// create wrappers\nlet f1000 = delay(f, 1000);\nlet f1500 = delay(f, 1500);\n\nf1000(\"test\"); // shows \"test\" after 1000ms\nf1500(\"test\"); // shows \"test\" after 1500ms\n```\n\nIn other words, `delay(f, ms)` returns a \"delayed by `ms`\" variant of `f`.\n\nIn the code above, `f` is a function of a single argument, but your solution should pass all arguments and the context `this`.","solution":"The solution:\n\n```js\nfunction delay(f, ms) {\n\n  return function() {\n    setTimeout(() => f.apply(this, arguments), ms);\n  };\n\n}\n```\n\nPlease note how an arrow function is used here. As we know, arrow functions do not have own `this` and `arguments`, so `f.apply(this, arguments)` takes `this` and `arguments` from the wrapper.\n\nIf we pass a regular function, `setTimeout` would call it without arguments and `this=window` (in-browser), so we'd need to write a bit more code to pass them from the wrapper:\n\n```js\nfunction delay(f, ms) {\n\n  // added variables to pass this and arguments from the wrapper inside setTimeout\n  return function(...args) {\n    let savedThis = this;\n    setTimeout(function() {\n      f.apply(savedThis, args);\n    }, ms);\n  };\n\n}\n```","parent":"call-apply-decorators"}},"debounce":{"type":"Task","value":{"title":"Debounce decorator","slug":"debounce","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/09-call-apply-decorators/03-debounce","weight":3,"libs":[],"importance":5,"content":"\nThe result of `debounce(f, ms)` decorator should be a wrapper that passes the call to `f` at maximum once per `ms` milliseconds.\n\nIn other words, when we call a \"debounced\" function, it guarantees that all other future in the closest `ms` milliseconds will be ignored.\n\nFor instance:\n\n```js no-beautify\nlet f = debounce(alert, 1000);\n\nf(1); // runs immediately\nf(2); // ignored\n\nsetTimeout( () => f(3), 100); // ignored ( only 100 ms passed )\nsetTimeout( () => f(4), 1100); // runs\nsetTimeout( () => f(5), 1500); // ignored (less than 1000 ms from the last run)\n```\n\nIn practice `debounce` is useful for functions that retrieve/update something when we know that nothing new can be done in such a short period of time, so it's better not to waste resources.","solution":"```js run no-beautify\nfunction debounce(f, ms) {\n\n  let isCooldown = false;\n\n  return function() {\n    if (isCooldown) return;\n\n    f.apply(this, arguments);\n\n    isCooldown = true;\n\n    setTimeout(() => isCooldown = false, ms);\n  };\n\n}\n```\n\nThe call to `debounce` returns a wrapper. There may be two states:\n\n- `isCooldown = false` -- ready to run.\n- `isCooldown = true` -- waiting for the timeout.\n\nIn the first call `isCooldown` is falsy, so the call proceeds, and the state changes to `true`.\n\nWhile `isCooldown` is true, all other calls are ignored.\n\nThen `setTimeout` reverts it to `false` after the given delay.","parent":"call-apply-decorators"}},"throttle":{"type":"Task","value":{"title":"Throttle decorator","slug":"throttle","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/09-call-apply-decorators/04-throttle","weight":4,"libs":[],"importance":5,"content":"\nCreate a \"throttling\" decorator `throttle(f, ms)` -- that returns a wrapper, passing the call to `f` at maximum once per `ms` milliseconds. Those calls that fall into the \"cooldown\" period, are ignored.\n\n**The difference with `debounce` -- if an ignored call is the last during the cooldown, then it executes at the end of the delay.**\n\nLet's check the real-life application to better understand that requirement and to see where it comes from.\n\n**For instance, we want to track mouse movements.**\n\nIn browser we can setup a function to run at every mouse micro-movement and get the pointer location as it moves. During an active mouse usage, this function usually runs very frequently, can be something like 100 times per second (every 10 ms).\n\n**The tracking function should update some information on the web-page.**\n\nUpdating function `update()` is too heavy to do it on every micro-movement. There is also no sense in making it more often than once per 100ms.\n\nSo we'll assign `throttle(update, 100)` as the function to run on each mouse move instead of the original `update()`. The decorator will be called often, but `update()` will be called at maximum once per 100ms.\n\nVisually, it will look like this:\n\n1. For the first mouse movement the decorated variant passes the call to `update`. That's important, the user sees our reaction to his move immediately.\n2. Then as the mouse moves on, until `100ms` nothing happens. The decorated variant ignores calls.\n3. At the end of `100ms` -- one more `update` happens with the last coordinates. \n4. Then, finally, the mouse stops somewhere. The decorated variant waits until `100ms` expire and then runs `update` runs with last coordinates. So, perhaps the most important, the final mouse coordinates are processed.\n\nA code example:\n\n```js\nfunction f(a) {\n  console.log(a)\n};\n\n// f1000 passes calls to f at maximum once per 1000 ms\nlet f1000 = throttle(f, 1000);\n\nf1000(1); // shows 1\nf1000(2); // (throttling, 1000ms not out yet)\nf1000(3); // (throttling, 1000ms not out yet)\n\n// when 1000 ms time out...\n// ...outputs 3, intermediate value 2 was ignored\n```\n\nP.S. Arguments and the context `this` passed to `f1000` should be passed to the original `f`.","solution":"```js\nfunction throttle(func, ms) {\n\n  let isThrottled = false,\n    savedArgs,\n    savedThis;\n\n  function wrapper() {\n\n    if (isThrottled) { // (2)\n      savedArgs = arguments;\n      savedThis = this;\n      return;\n    }\n\n    func.apply(this, arguments); // (1)\n\n    isThrottled = true;\n\n    setTimeout(function() {\n      isThrottled = false; // (3)\n      if (savedArgs) {\n        wrapper.apply(savedThis, savedArgs);\n        savedArgs = savedThis = null;\n      }\n    }, ms);\n  }\n\n  return wrapper;\n}\n```\n\nA call to `throttle(func, ms)` returns `wrapper`.\n\n1. During the first call, the `wrapper` just runs `func` and sets the cooldown state (`isThrottled = true`).\n2. In this state all calls memorized in `savedArgs/savedThis`. Please note that both the context and the arguments are equally important and should be memorized. We need them simultaneously to reproduce the call.\n3. ...Then after `ms` milliseconds pass, `setTimeout` triggers. The cooldown state is removed (`isThrottled = false`). And if we had ignored calls, then `wrapper` is executed with last memorized arguments and context.\n\nThe 3rd step runs not `func`, but `wrapper`, because we not only need to execute `func`, but once again enter the cooldown state and setup the timeout to reset it.","parent":"call-apply-decorators"}},"bind":{"type":"Article","value":{"title":"Function binding","slug":"bind","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/10-bind/article.md","isFolder":false,"weight":10,"content":"\nWhen using `setTimeout` with object methods or passing object methods along, there's a known problem: \"losing `this`\".\n\nSuddenly, `this` just stops working right. The situation is typical for novice developers, but happens with experienced ones as well.\n\n## Losing \"this\"\n\nWe already know that in JavaScript it's easy to lose `this`. Once a method is passed somewhere separately from the object -- `this` is lost.\n\nHere's how it may happen with `setTimeout`:\n\n```js run\nlet user = {\n  firstName: \"John\",\n  sayHi() {\n    alert(`Hello, ${this.firstName}!`);\n  }\n};\n\n*!*\nsetTimeout(user.sayHi, 1000); // Hello, undefined!\n*/!*\n```\n\nAs we can see, the output shows not \"John\" as `this.firstName`, but `undefined`!\n\nThat's because `setTimeout` got the function `user.sayHi`, separately from the object. The last line can be rewritten as:\n\n```js\nlet f = user.sayHi;\nsetTimeout(f, 1000); // lost user context\n```\n\nThe method `setTimeout` in-browser is a little special: it sets `this=window` for the function call (for Node.JS, `this` becomes the timer object, but doesn't really matter here). So for `this.firstName` it tries to get `window.firstName`, which does not exist. In other similar cases as we'll see, usually `this` just becomes `undefined`.\n\nThe task is quite typical -- we want to pass an object method somewhere else (here -- to the scheduler) where it will be called. How to make sure that it will be called in the right context?\n\n## Solution 1: a wrapper\n\nThe simplest solution is to use an wrapping function:\n\n```js run\nlet user = {\n  firstName: \"John\",\n  sayHi() {\n    alert(`Hello, ${this.firstName}!`);\n  }\n};\n\n*!*\nsetTimeout(function() {\n  user.sayHi(); // Hello, John!\n}, 1000);\n*/!*\n```\n\nNow it works, because it receives `user` from the outer lexical environment, and then calls the method normally.\n\nThe same, but shorter:\n\n```js\nsetTimeout(() => user.sayHi(), 1000); // Hello, John!\n```\n\nLooks fine, but a slight vulnerability appears in our code structure.\n\nWhat if before `setTimeout` triggers (there's one second delay!) `user` changes value? Then, suddenly, it will call the wrong object!\n\n\n```js run\nlet user = {\n  firstName: \"John\",\n  sayHi() {\n    alert(`Hello, ${this.firstName}!`);\n  }\n};\n\nsetTimeout(() => user.sayHi(), 1000);\n\n// ...within 1 second\nuser = { sayHi() { alert(\"Another user in setTimeout!\"); } };\n\n// Another user in setTimeout?!?\n```\n\nThe next solution guarantees that such thing won't happen.\n\n## Solution 2: bind\n\nFunctions provide a built-in method [bind](mdn:js/Function/bind) that allows to fix `this`.\n\nThe basic syntax is:\n\n```js\n// more complex syntax will be little later\nlet boundFunc = func.bind(context);\n````\n\nThe result of `func.bind(context)` is a special function-like \"exotic object\", that is callable as function and transparently passes the call to `func` setting `this=context`.\n\nIn other words, calling `boundFunc` is like `func` with fixed `this`.\n\nFor instance, here `funcUser` passes a call to `func` with `this=user`:\n\n```js run  \nlet user = {\n  firstName: \"John\"\n};\n\nfunction func() {\n  alert(this.firstName);\n}\n\n*!*\nlet funcUser = func.bind(user);\nfuncUser(); // John  \n*/!*\n```\n\nHere `func.bind(user)` as a \"bound variant\" of `func`, with fixed `this=user`.\n\nAll arguments are passed to the original `func` \"as is\", for instance:\n\n```js run  \nlet user = {\n  firstName: \"John\"\n};\n\nfunction func(phrase) {\n  alert(phrase + ', ' + this.firstName);\n}\n\n// bind this to user\nlet funcUser = func.bind(user);\n\n*!*\nfuncUser(\"Hello\"); // Hello, John (argument \"Hello\" is passed, and this=user)\n*/!*\n```\n\nNow let's try with an object method:\n\n\n```js run\nlet user = {\n  firstName: \"John\",\n  sayHi() {\n    alert(`Hello, ${this.firstName}!`);\n  }\n};\n\n*!*\nlet sayHi = user.sayHi.bind(user); // (*)\n*/!*\n\nsayHi(); // Hello, John!\n\nsetTimeout(sayHi, 1000); // Hello, John!\n```\n\nIn the line `(*)` we take the method `user.sayHi` and bind it to `user`. The `sayHi` is a \"bound\" function, that can be called alone or passed to `setTimeout` -- doesn't matter, the context will be right.\n\nHere we can see that arguments are passed \"as is\", only `this` is fixed by `bind`:\n\n```js run\nlet user = {\n  firstName: \"John\",\n  say(phrase) {\n    alert(`${phrase}, ${this.firstName}!`);\n  }\n};\n\nlet say = user.say.bind(user);\n\nsay(\"Hello\"); // Hello, John (\"Hello\" argument is passed to say)\nsay(\"Bye\"); // Bye, John (\"Bye\" is passed to say)\n```\n\n````smart header=\"Convenience method: `bindAll`\"\nIf an object has many methods and we plan to actively pass it around, then we could bind them all in a loop:\n\n```js\nfor (let key in user) {\n  if (typeof user[key] == 'function') {\n    user[key] = user[key].bind(user);\n  }\n}\n```\n\nJavaScript libraries also provide functions for convenient mass binding , e.g. [_.bindAll(obj)](http://lodash.com/docs#bindAll) in lodash.\n````\n\n## Summary\n\nMethod `func.bind(context, ...args)` returns a \"bound variant\" of function `func` that fixes the context `this` and first arguments if given.\n\nUsually we apply `bind` to fix `this` in an object method, so that we can pass it somewhere. For example, to `setTimeout`. There are more reasons to `bind` in the modern development, we'll meet them later.","libs":["lodash"],"children":["write-to-object-after-bind","second-bind","function-property-after-bind","question-use-bind"],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,102,117,110,99,116,105,111,110,32,109,117,108,40,97,44,32,98,41,32,123,10,32,32,114,101,116,117,114,110,32,97,32,42,32,98,59,10,125,59,10,10,102,117,110,99,116,105,111,110,32,97,115,107,40,113,117,101,115,116,105,111,110,44,32,97,110,115,119,101,114,44,32,111,107,44,32,102,97,105,108,41,32,123,10,32,32,108,101,116,32,114,101,115,117,108,116,32,61,32,112,114,111,109,112,116,40,113,117,101,115,116,105,111,110,44,32,39,39,41,59,10,32,32,105,102,32,40,114,101,115,117,108,116,46,116,111,76,111,119,101,114,67,97,115,101,40,41,32,61,61,32,97,110,115,119,101,114,46,116,111,76,111,119,101,114,67,97,115,101,40,41,41,32,111,107,40,41,59,10,32,32,101,108,115,101,32,102,97,105,108,40,41,59,10,125,10,10,102,117,110,99,116,105,111,110,32,98,105,110,100,40,102,117,110,99,44,32,99,111,110,116,101,120,116,32,47,42,44,32,97,114,103,115,42,47,41,32,123,10,32,32,108,101,116,32,98,105,110,100,65,114,103,115,32,61,32,91,93,46,115,108,105,99,101,46,99,97,108,108,40,97,114,103,117,109,101,110,116,115,44,32,50,41,59,32,47,47,32,40,49,41,10,32,32,102,117,110,99,116,105,111,110,32,119,114,97,112,112,101,114,40,41,32,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,47,47,32,40,50,41,10,32,32,32,32,108,101,116,32,97,114,103,115,32,61,32,91,93,46,115,108,105,99,101,46,99,97,108,108,40,97,114,103,117,109,101,110,116,115,41,59,10,32,32,32,32,108,101,116,32,117,110,115,104,105,102,116,65,114,103,115,32,61,32,98,105,110,100,65,114,103,115,46,99,111,110,99,97,116,40,97,114,103,115,41,59,32,32,47,47,32,40,51,41,10,32,32,32,32,114,101,116,117,114,110,32,102,117,110,99,46,97,112,112,108,121,40,99,111,110,116,101,120,116,44,32,117,110,115,104,105,102,116,65,114,103,115,41,59,32,32,47,47,32,40,52,41,10,32,32,125,10,32,32,114,101,116,117,114,110,32,119,114,97,112,112,101,114,59,10,125,10,60,47,115,99,114,105,112,116,62]},"parent":"advanced-functions"}},"write-to-object-after-bind":{"type":"Task","value":{"title":"Bound function as a method","slug":"write-to-object-after-bind","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/10-bind/2-write-to-object-after-bind","weight":2,"libs":[],"importance":5,"content":"\nWhat will be the output?\n\n```js\nfunction f() {\n  alert( this ); // ?\n}\n\nlet user = {\n  g: f.bind(null)\n};\n\nuser.g();\n```","solution":"The answer: `null`.\n\n\n```js run\nfunction f() {\n  alert( this ); // null\n}\n\nlet user = {\n  g: f.bind(null)\n};\n\nuser.g();\n```\n\nThe context of a bound function is hard-fixed. There's just no way to further change it.\n\nSo even while we run `user.g()`, the original function is called with `this=null`.","parent":"bind"}},"second-bind":{"type":"Task","value":{"title":"Second bind","slug":"second-bind","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/10-bind/3-second-bind","weight":3,"libs":[],"importance":5,"content":"\nCan we change `this` by additional binding?\n\nWhat will be the output?\n\n```js no-beautify\nfunction f() {\n  alert(this.name);\n}\n\nf = f.bind( {name: \"John\"} ).bind( {name: \"Ann\" } );\n\nf();\n```","solution":"The answer: **John**.\n\n```js run no-beautify\nfunction f() {\n  alert(this.name);\n}\n\nf = f.bind( {name: \"John\"} ).bind( {name: \"Pete\"} );\n\nf(); // John\n```\n\nThe exotic [bound function](https://tc39.github.io/ecma262/#sec-bound-function-exotic-objects) object returned by `f.bind(...)` remembers the context (and arguments if provided) only at creation time. \n\nA function cannot be re-bound.","parent":"bind"}},"function-property-after-bind":{"type":"Task","value":{"title":"Function property after bind","slug":"function-property-after-bind","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/10-bind/4-function-property-after-bind","weight":4,"libs":[],"importance":5,"content":"\nThere's a value in the property of a function. Will it change after `bind`? Why, elaborate?\n\n```js run\nfunction sayHi() {\n  alert( this.name );\n}\nsayHi.test = 5;\n\n*!*\nlet bound = sayHi.bind({\n  name: \"John\"\n});\n\nalert( bound.test ); // what will be the output? why?\n*/!*\n```","solution":"The answer: `undefined`.\n\nThe result of `bind` is another object. It does not have the `test` property.","parent":"bind"}},"question-use-bind":{"type":"Task","value":{"title":"Ask losing this","slug":"question-use-bind","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/10-bind/5-question-use-bind","weight":5,"libs":[],"importance":5,"content":"\nThe call to `askPassword()` in the code below should check the password and then call `user.loginOk/loginFail` depending on the answer.\n\nBut it leads to an error. Why?\n\nFix the highlighted line for everything to start working right (other lines are not to be changed).\n\n```js run\nfunction askPassword(ok, fail) {\n  let password = prompt(\"Password?\", '');\n  if (password == \"rockstar\") ok();\n  else fail();\n}\n\nlet user = {\n  name: 'John',\n\n  loginOk() {\n    alert(`${this.name} logged in`);\n  },\n\n  loginFail() {\n    alert(`${this.name} failed to log in`);\n  },\n\n};\n\n*!*\naskPassword(user.loginOk, user.loginFail);\n*/!*\n```","solution":"The error occurs because `ask` gets functions `loginOk/loginFail` without the object.\n\nWhen it calls them, they naturally assume `this=undefined`.\n\nLet's `bind` the context:\n\n```js run\nfunction askPassword(ok, fail) {\n  let password = prompt(\"Password?\", '');\n  if (password == \"rockstar\") ok();\n  else fail();\n}\n\nlet user = {\n  name: 'John',\n\n  loginOk() {\n    alert(`${this.name} logged in`);\n  },\n\n  loginFail() {\n    alert(`${this.name} failed to log in`);\n  },\n\n};\n\n*!*\naskPassword(user.loginOk.bind(user), user.loginFail.bind(user));\n*/!*\n```\n\nNow it works.\n\nAn alternative solution could be:\n```js\n//...\naskPassword(() => user.loginOk(), () => user.loginFail());\n```\n\nUsually that also works, but may fail in more complex situations where `user` has a chance of being overwritten between the moments of asking and running `() => user.loginOk()`.","parent":"bind"}},"currying-partials":{"type":"Article","value":{"title":"Currying and partials","slug":"currying-partials","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/11-currying-partials/article.md","isFolder":false,"weight":11,"content":"\nUntil now we have only been talking about binding `this`. Let's take it a step further.\n\nWe can bind not only `this`, but also arguments. That's rarely done, but sometimes can be handy.\n\nThe full syntax of `bind`:\n\n```js\nlet bound = func.bind(context, arg1, arg2, ...);\n```\n\nIt allows to bind context as `this` and starting arguments of the function.\n\nFor instance, we have a multiplication function `mul(a, b)`:\n\n```js\nfunction mul(a, b) {\n  return a * b;\n}\n```\n\nLet's use `bind` to create a function `double` on its base:\n\n```js run\n*!*\nlet double = mul.bind(null, 2);\n*/!*\n\nalert( double(3) ); // = mul(2, 3) = 6\nalert( double(4) ); // = mul(2, 4) = 8\nalert( double(5) ); // = mul(2, 5) = 10\n```\n\nThe call to `mul.bind(null, 2)` creates a new function `double` that passes calls to `mul`, fixing `null` as the context and `2` as the first argument. Further arguments are passed \"as is\".\n\nThat's called [partial function application](https://en.wikipedia.org/wiki/Partial_application) -- we create a new function by fixing some parameters of the existing one.\n\nPlease note that here we actually don't use `this` here. But `bind` requires it, so we must put in something like `null`.\n\nThe function `triple` in the code below triples the value:\n\n```js run\n*!*\nlet triple = mul.bind(null, 3);\n*/!*\n\nalert( triple(3) ); // = mul(3, 3) = 9\nalert( triple(4) ); // = mul(3, 4) = 12\nalert( triple(5) ); // = mul(3, 5) = 15\n```\n\nWhy do we usually make a partial function?\n\nHere our benefit is that we created an independent function with a readable name (`double`, `triple`). We can use it and don't write the first argument of every time, cause it's fixed with `bind`.\n\nIn other cases, partial application is useful when we have a very generic function, and want a less universal variant of it for convenience.\n\nFor instance, we have a function `send(from, to, text)`. Then, inside a `user` object we may want to use a partial variant of it: `sendTo(to, text)` that sends from the current user.\n\n## Going partial without context\n\nWhat if we'd like to fix some arguments, but not bind `this`?\n\nThe native `bind` does not allow that. We can't just omit the context and jump to arguments.\n\nFortunately, a `partial` function for binding only arguments can be easily implemented.\n\nLike this:\n\n```js run\n*!*\nfunction partial(func, ...argsBound) {\n  return function(...args) { // (*)\n    return func.call(this, ...argsBound, ...args);\n  }\n}\n*/!*\n\n// Usage:\nlet user = {\n  firstName: \"John\",\n  say(time, phrase) {\n    alert(`[${time}] ${this.firstName}: ${phrase}!`);\n  }\n};\n\n// add a partial method that says something now by fixing the first argument\nuser.sayNow = partial(user.say, new Date().getHours() + ':' + new Date().getMinutes());\n\nuser.sayNow(\"Hello\");\n// Something like:\n// [10:00] John: Hello!\n```\n\nThe result of `partial(func[, arg1, arg2...])` call is a wrapper `(*)` that calls `func` with:\n- Same `this` as it gets (for `user.sayNow` call it's `user`)\n- Then gives it `...argsBound` -- arguments from the `partial` call (`\"10:00\"`)\n- Then gives it `...args` -- arguments given to the wrapper (`\"Hello\"`)\n\nSo easy to do it with the spread operator, right?\n\nAlso there's a ready [_.partial](https://lodash.com/docs#partial) implementation from lodash library.\n\n## Currying\n\nSometimes people mix up partial function application mentioned above with another thing named \"currying\". That's another interesting technique of working with functions that we just have to mention here.\n\n[Currying](https://en.wikipedia.org/wiki/Currying) is translating a function from callable as `f(a, b, c)` into callable as `f(a)(b)(c)`.\n\nLet's make `curry` function that performs currying for binary functions. In other words, it translates `f(a, b)` into `f(a)(b)`:\n\n```js run\n*!*\nfunction curry(func) {\n  return function(a) {\n    return function(b) {\n      return func(a, b);\n    };\n  };\n}\n*/!*\n\n// usage\nfunction sum(a, b) {\n  return a + b;\n}\n\nlet carriedSum = curry(sum);\n\nalert( carriedSum(1)(2) ); // 3\n```\n\nAs you can see, the implementation is a series of wrappers.\n\n- The result of `curry(func)` is a wrapper `function(a)`.\n- When it is called like `sum(1)`, the argument is saved in the Lexical Environment, and a new wrapper is returned `function(b)`.\n- Then `sum(1)(2)` finally calls `function(b)` providing `2`, and it passes the call to the original multi-argument `sum`.\n\nMore advanced implementations of currying like [_.curry](https://lodash.com/docs#curry) from lodash library do something more sophisticated. They return a wrapper that allows a function to be called normally when all arguments are supplied *or* returns a partial otherwise.\n\n```js\nfunction curry(f) {\n  return function(...args) {\n    // if args.length == f.length (as many arguments as f has),\n    //   then pass the call to f\n    // otherwise return a partial function that fixes args as first arguments\n  };\n}\n```\n\n## Currying? What for?\n\nAdvanced currying allows both to keep the function callable normally and to get partials easily. To understand the benefits we definitely need a worthy real-life example.\n\nFor instance, we have the logging function `log(date, importance, message)` that formats and outputs the information. In real projects such functions also have many other useful features like: sending it over the network or filtering:\n\n```js\nfunction log(date, importance, message) {\n  alert(`[${date.getHours()}:${date.getMinutes()}] [${importance}] ${message}`);\n}\n```\n\nLet's curry it!\n\n```js\nlog = _.curry(log);\n```\n\nAfter that `log` still works the normal way:\n\n```js\nlog(new Date(), \"DEBUG\", \"some debug\");\n```\n\n...But also can be called in the curried form:\n\n```js\nlog(new Date())(\"DEBUG\")(\"some debug\"); // log(a)(b)(c)\n```\n\nLet's get a convenience function for today's logs:\n\n```js\n// todayLog will be the partial of log with fixed first argument\nlet todayLog = log(new Date());\n\n// use it\ntodayLog(\"INFO\", \"message\"); // [HH:mm] INFO message\n```\n\nAnd now a convenience function for today's debug messages:\n\n```js\nlet todayDebug = todayLog(\"DEBUG\");\n\ntodayDebug(\"message\"); // [HH:mm] DEBUG message\n```\n\nSo:\n1. We didn't lose anything after currying: `log` is still callable normally.\n2. We were able to generate partial functions that are convenient in many cases.\n\n## Advanced curry implementation\n\nIn case you're interested, here's the \"advanced\" curry implementation that we could use above.\n\n```js run\nfunction curry(func) {\n\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    } else {\n      return function(...args2) {\n        return curried.apply(this, args.concat(args2));\n      }\n    }\n  };\n\n}\n\nfunction sum(a, b, c) {\n  return a + b + c;\n}\n\nlet curriedSum = curry(sum);\n\n// still callable normally\nalert( curriedSum(1, 2, 3) ); // 6\n\n// get the partial with curried(1) and call it with 2 other arguments\nalert( curriedSum(1)(2,3) ); // 6\n\n// full curried form\nalert( curriedSum(1)(2)(3) ); // 6\n```\n\nThe new `curry` may look complicated, but it's actually pretty easy to understand.\n\nThe result of `curry(func)` is the wrapper `curried` that looks like this:\n\n```js\n// func is the function to transform\nfunction curried(...args) {\n  if (args.length >= func.length) { // (1)\n    return func.apply(this, args);\n  } else {\n    return function pass(...args2) { // (2)\n      return curried.apply(this, args.concat(args2));\n    }\n  }\n};\n```\n\nWhen we run it, there are two branches:\n\n1. Call now: if passed `args` count is the same as the original function has in its definition (`func.length`) or longer, then just pass the call to it.\n2. Get a partial: otherwise, `func` is not called yet. Instead, another wrapper `pass` is returned, that will re-apply `curried` providing previous arguments together with the new ones. Then on a new call, again, we'll get either a new partial (if not enough arguments) or, finally, the result.\n\nFor instance, let's see what happens in the case of `sum(a, b, c)`. Three arguments, so `sum.length = 3`.\n\nFor the call `curried(1)(2)(3)`:\n\n1. The first call `curried(1)` remembers `1` in its Lexical Environment, and returns a wrapper `pass`.\n2. The wrapper `pass` is called with `(2)`: it takes previous args (`1`), concatenates them with what it got `(2)` and calls `curried(1, 2)` with them together.\n\n    As the argument count is still less than 3, `curry` returns `pass`.\n3. The wrapper `pass` is called again with `(3)`,  for the next call `pass(3)` takes previous args (`1`, `2`) and adds `3` to them, making the call `curried(1, 2, 3)` -- there are `3` arguments at last, they are given to the original function.\n\nIf that's still not obvious, just trace the calls sequence in your mind or on the paper.\n\n```smart header=\"Fixed-length functions only\"\nThe currying requires the function to have a known fixed number of arguments.\n```\n\n```smart header=\"A little more than currying\"\nBy definition, currying should convert `sum(a, b, c)` into `sum(a)(b)(c)`.\n\nBut most implementations of currying in JavaScript are advanced, as described: they also keep the function callable in the multi-argument variant.\n```\n\n## Summary\n\n- When we fix some arguments of an existing function, the resulting (less universal) function is called *a partial*. We can use `bind` to get a partial, but there are other ways also.\n\n    Partials are convenient when we don't want to repeat the same argument over and over again. Like if we have a `send(from, to)` function, and `from` should always be the same for our task, we can get a partial and go on with it.\n\n- *Currying* is a transform that makes `f(a,b,c)` callable as `f(a)(b)(c)`. JavaScript implementations usually both keep the function callable normally and return the partial if arguments count is not enough.\n\n    Currying is great when we want easy partials. As we've seen in the logging example: the universal function `log(date, importance, message)` after currying gives us partials when called with one argument like `log(date)` or two arguments `log(date, importance)`.","libs":["lodash"],"children":["ask-currying"],"parent":"advanced-functions"}},"ask-currying":{"type":"Task","value":{"title":"Partial application for login","slug":"ask-currying","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/11-currying-partials/1-ask-currying","weight":1,"libs":[],"importance":5,"content":"\nThe task is a little more complex variant of <info:task/question-use-bind>. \n\nThe `user` object was modified. Now instead of two functions `loginOk/loginFail`, it has a single function `user.login(true/false)`.\n\nWhat to pass `askPassword` in the code below, so that it calls `user.login(true)` as `ok` and `user.login(false)` as `fail`?\n\n```js\nfunction askPassword(ok, fail) {\n  let password = prompt(\"Password?\", '');\n  if (password == \"rockstar\") ok();\n  else fail();\n}\n\nlet user = {\n  name: 'John',\n\n  login(result) {\n    alert( this.name + (result ? ' logged in' : ' failed to log in') );\n  }\n};\n\n*!*\naskPassword(?, ?); // ?\n*/!*\n```\n\nYour changes should only modify the highlighted fragment.","solution":"1. Either use a wrapper function, an arrow to be concise:\n\n    ```js \n    askPassword(() => user.login(true), () => user.login(false)); \n    ```\n\n    Now it gets `user` from outer variables and runs it the normal way.\n\n2. Or create a partial function from `user.login` that uses `user` as the context and has the correct first argument:\n\n\n    ```js \n    askPassword(user.login.bind(user, true), user.login.bind(user, false)); \n    ```","parent":"currying-partials"}},"arrow-functions":{"type":"Article","value":{"title":"Arrow functions revisited","slug":"arrow-functions","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/06-advanced-functions/12-arrow-functions/article.md","isFolder":false,"weight":12,"content":"\nLet's revisit arrow functions.\n\nArrow functions are not just a \"shorthand\" for writing small stuff.\n\nJavaScript is full of situations where we need to write a small function, that's executed somewhere else.\n\nFor instance:\n\n- `arr.forEach(func)` -- `func` is executed by `forEach` for every array item.\n- `setTimeout(func)` -- `func` is executed by the built-in scheduler.\n- ...there are more.\n\nIt's in the very spirit of JavaScript to create a function and pass it somewhere.\n\nAnd in such functions we usually don't want to leave the current context.\n\n## Arrow functions have no \"this\"\n\nAs we remember from the chapter <info:object-methods>, arrow functions do not have `this`. If `this` is accessed, it is taken from the outside.\n\nFor instance, we can use it to iterate inside an object method:\n\n```js run\nlet group = {\n  title: \"Our Group\",\n  students: [\"John\", \"Pete\", \"Alice\"],\n\n  showList() {\n*!*\n    this.students.forEach(\n      student => alert(this.title + ': ' + student)\n    );\n*/!*\n  }\n};\n\ngroup.showList();\n```\n\nHere in `forEach`, the arrow function is used, so `this.title` in it is exactly the same as in the outer method `showList`. That is: `group.title`.\n\nIf we used a \"regular\" function, there would be an error:\n\n```js run\nlet group = {\n  title: \"Our Group\",\n  students: [\"John\", \"Pete\", \"Alice\"],\n\n  showList() {\n*!*\n    this.students.forEach(function(student) {\n      // Error: Cannot read property 'title' of undefined\n      alert(this.title + ': ' + student)\n    });\n*/!*\n  }\n};\n\ngroup.showList();\n```\n\nThe error occurs because `forEach` runs functions with `this=undefined` by default, so the attempt to access `undefined.title` is made.\n\nThat doesn't affect arrow functions, because they just don't have `this`.\n\n```warn header=\"Arrow functions can't run with `new`\"\nNot having `this` naturally means another limitation: arrow functions can't be used as constructors. They can't be called with `new`.\n```\n\n```smart header=\"Arrow functions VS bind\"\nThere's a subtle difference between an arrow function `=>` and a regular function called with `.bind(this)`:\n\n- `.bind(this)` creates a \"bound version\" of the function.\n- The arrow `=>` doesn't create any binding. The function simply doesn't have `this`. The lookup of `this` is made exactly the same way as a regular variable search: in the outer lexical environment.\n```\n\n## Arrows have no \"arguments\"\n\nArrow functions also have no `arguments` variable.\n\nThat's great for decorators, when we need to forward a call with the current `this` and `arguments`.\n\nFor instance, `defer(f, ms)` gets a function and returns a wrapper around it that delays the call by `ms` milliseconds:\n\n```js run\nfunction defer(f, ms) {\n  return function() {\n    setTimeout(() => f.apply(this, arguments), ms)\n  };\n}\n\nfunction sayHi(who) {\n  alert('Hello, ' + who);\n}\n\nlet sayHiDeferred = defer(sayHi, 2000);\nsayHiDeferred(\"John\"); // Hello, John after 2 seconds\n```\n\nThe same without an arrow function would look like:\n\n```js\nfunction defer(f, ms) {\n  return function(...args) {\n    let ctx = this;\n    setTimeout(function() {\n      return f.apply(ctx, args);\n    }, ms);\n  };\n}\n```\n\nHere we had to create additional variables `args` and `ctx` so that the function inside `setTimeout` could take them.\n\n## Summary\n\nArrow functions:\n\n- Do not have `this`.\n- Do not have `arguments`.\n- Can't be called with `new`.\n- (They also don't have `super`, but we didn't study it. Will be in the chapter <info:class-inheritance>).\n\nThat's because they are meant for short pieces of code that do not have their own \"context\", but rather works in the current one. And they really shine in that use case.","libs":[],"children":[],"parent":"advanced-functions"}},"object-oriented-programming":{"type":"Article","value":{"title":"Objects, classes, inheritance","slug":"object-oriented-programming","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming","isFolder":true,"weight":7,"content":"\nIn this section we return to objects and learn them even more in-depth.","libs":[],"children":["property-descriptors","property-accessors","prototype-inheritance","function-prototype","native-prototypes","prototype-methods","class-patterns","class","class-inheritance","instanceof","mixins"],"parent":"js"}},"property-descriptors":{"type":"Article","value":{"title":"Property flags and descriptors","slug":"property-descriptors","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/01-property-descriptors/article.md","isFolder":false,"weight":1,"content":"\nAs we know, objects can store properties.\n\nTill now, a property was a simple \"key-value\" pair to us. But an object property is actually more complex and tunable thing.\n\n## Property flags\n\nObject properties, besides a **`value`**, have three special attributes (so-called \"flags\"):\n\n- **`writable`** -- if `true`, can be changed, otherwise it's read-only.\n- **`enumerable`** -- if `true`, then listed in loops, otherwise not listed.\n- **`configurable`** -- if `true`, the property can be deleted and these attributes can be modified, otherwise not.\n\nWe didn't see them yet, because generally they do not show up. When we create a property \"the usual way\", all of them are `true`. But we also can change them anytime.\n\nFirst, let's see how to get those flags.\n\nThe method [Object.getOwnPropertyDescriptor](mdn:js/Object/getOwnPropertyDescriptor) allows to query the *full* information about a property.\n\nThe syntax is:\n```js\nlet descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n```\n\n`obj`\n: The object to get information from.\n\n`propertyName`\n: The name of the property.\n\nThe returned value is a so-called \"property descriptor\" object: it contains the value and all the flags.\n\nFor instance:\n\n```js run\nlet user = {\n  name: \"John\"\n};\n\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\n\nalert( JSON.stringify(descriptor, null, 2 ) );\n/* property descriptor:\n{\n  \"value\": \"John\",\n  \"writable\": true,\n  \"enumerable\": true,\n  \"configurable\": true\n}\n*/\n```\n\nTo change the flags, we can use [Object.defineProperty](mdn:js/Object/defineProperty).\n\nThe syntax is:\n\n```js\nObject.defineProperty(obj, propertyName, descriptor)\n```\n\n`obj`, `propertyName`\n: The object and property to work on.\n\n`descriptor`\n: Property descriptor to apply.\n\nIf the property exists, `defineProperty` updates its flags. Otherwise, it creates the property with the given value and flags; in that case, if a flag is not supplied, it is assumed `false`.\n\nFor instance, here a property `name` is created with all falsy flags:\n\n```js run\nlet user = {};\n\n*!*\nObject.defineProperty(user, \"name\", {\n  value: \"John\"\n});\n*/!*\n\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\n\nalert( JSON.stringify(descriptor, null, 2 ) );\n/*\n{\n  \"value\": \"John\",\n*!*\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n*/!*\n}\n */\n```\n\nCompare it with \"normally created\" `user.name` above: now all flags are falsy. If that's not what we want then we'd better set them to `true` in `descriptor`.\n\nNow let's see effects of the flags by example.\n\n## Read-only\n\nLet's make `user.name` read-only by changing `writable` flag:\n\n```js run\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n*!*\n  writable: false\n*/!*\n});\n\n*!*\nuser.name = \"Pete\"; // Error: Cannot assign to read only property 'name'...\n*/!*\n```\n\nNow no one can change the name of our user, unless he applies his own `defineProperty` to override ours.\n\nHere's the same operation, but for the case when a property doesn't exist:\n\n```js run\nlet user = { };\n\nObject.defineProperty(user, \"name\", {\n*!*\n  value: \"Pete\",\n  // for new properties need to explicitly list what's true\n  enumerable: true,\n  configurable: true\n*/!*\n});\n\nalert(user.name); // Pete\nuser.name = \"Alice\"; // Error\n```\n\n\n## Non-enumerable\n\nNow let's add a custom `toString` to `user`.\n\nNormally, a built-in `toString` for objects is non-enumerable, it does not show up in `for..in`. But if we add `toString` of our own, then by default it shows up in `for..in`, like this:\n\n```js run\nlet user = {\n  name: \"John\",\n  toString() {\n    return this.name;\n  }\n};\n\n// By default, both our properties are listed:\nfor (let key in user) alert(key); // name, toString\n```\n\nIf we don't like it, then we can set `enumerable:false`. Then it won't appear in `for..in` loop, just like the built-in one:\n\n```js run\nlet user = {\n  name: \"John\",\n  toString() {\n    return this.name;\n  }\n};\n\nObject.defineProperty(user, \"toString\", {\n*!*\n  enumerable: false\n*/!*\n});\n\n*!*\n// Now our toString disappears:\n*/!*\nfor (let key in user) alert(key); // name\n```\n\nNon-enumerable properties are also excluded from `Object.keys`:\n\n```js\nalert(Object.keys(user)); // name\n```\n\n## Non-configurable\n\nThe non-configurable flag (`configurable:false`) is sometimes preset for built-in objects and properties.\n\nA non-configurable property can not be deleted or altered with `defineProperty`.\n\nFor instance, `Math.PI` is both read-only, non-enumerable and non-configurable:\n\n```js run\nlet descriptor = Object.getOwnPropertyDescriptor(Math, 'PI');\n\nalert( JSON.stringify(descriptor, null, 2 ) );\n/*\n{\n  \"value\": 3.141592653589793,\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n*/\n```\nSo, a programmer is unable to change the value of `Math.PI` or overwrite it.\n\n```js run\nMath.PI = 3; // Error\n\n// delete Math.PI won't work either\n```\n\nMaking a property non-configurable is a one-way road. We cannot change it back, because `defineProperty` doesn't work on non-configurable properties.\n\nHere we are making `user.name` a \"forever sealed\" constant:\n\n```js run\nlet user = { };\n\nObject.defineProperty(user, \"name\", {\n  value: \"John\",\n  writable: false,\n  configurable: false\n});\n\n*!*\n// won't be able to change user.name or its flags\n// all this won't work:\n//   user.name = \"Pete\"\n//   delete user.name\n//   defineProperty(user, \"name\", ...)\nObject.defineProperty(user, \"name\", {writable: true}); // Error\n*/!*\n```\n\n```smart header=\"Errors appear only in use strict\"\nIn the non-strict mode, no errors occur when writing to read-only properties and such. But the operation still won't succeed. Flag-violating actions are just silently ignored in non-strict.\n```\n\n## Object.defineProperties\n\nThere's a method [Object.defineProperties(obj, descriptors)](mdn:js/Object/defineProperties) that allows to define many properties at once.\n\nThe syntax is:\n\n```js\nObject.defineProperties(obj, {\n  prop1: descriptor1,\n  prop2: descriptor2\n  // ...\n});\n```\n\nFor instance:\n\n```js\nObject.defineProperties(user, {\n  name: { value: \"John\", writable: false },\n  surname: { value: \"Smith\", writable: false },\n  // ...\n});\n```\n\nSo, we can set many properties at once.\n\n## Object.getOwnPropertyDescriptors\n\nTo get all property descriptors at once, we can use the method [Object.getOwnPropertyDescriptors(obj)](mdn:js/Object/getOwnPropertyDescriptors).\n\nTogether with `Object.defineProperties` it can be used as a \"flags-aware\" way of cloning an object:\n\n```js\nlet clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj));\n```\n\nNormally when we clone an object, we use an assignment to copy properties, like this:\n\n```js\nfor (let key in user) {\n  clone[key] = user[key]\n}\n```\n\n...But that does not copy flags. So if we want a \"better\" clone then `Object.defineProperties` is preferred.\n\nAnother difference is that `for..in` ignores symbolic properties, but `Object.getOwnPropertyDescriptors` returns *all* property descriptors including symbolic ones.\n\n## Sealing an object globally\n\nProperty descriptors work at the level of individual properties.\n\nThere are also methods that limit access to the *whole* object:\n\n[Object.preventExtensions(obj)](mdn:js/Object/preventExtensions)\n: Forbids to add properties to the object.\n\n[Object.seal(obj)](mdn:js/Object/seal)\n: Forbids to add/remove properties, sets for all existing properties `configurable: false`.\n\n[Object.freeze(obj)](mdn:js/Object/freeze)\n: Forbids to add/remove/change properties, sets for all existing properties `configurable: false, writable: false`.\n\nAnd also there are tests for them:\n\n[Object.isExtensible(obj)](mdn:js/Object/isExtensible)\n: Returns `false` if adding properties is forbidden, otherwise `true`.\n\n[Object.isSealed(obj)](mdn:js/Object/isSealed)\n: Returns `true` if adding/removing properties is forbidden, and all existing properties have `configurable: false`.\n\n[Object.isFrozen(obj)](mdn:js/Object/isFrozen)\n: Returns `true` if adding/removing/changing properties is forbidden, and all current properties are `configurable: false, writable: false`.\n\nThese methods are rarely used in practice.","libs":[],"children":[],"parent":"object-oriented-programming"}},"property-accessors":{"type":"Article","value":{"title":"Property getters and setters","slug":"property-accessors","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/02-property-accessors/article.md","isFolder":false,"weight":2,"content":"\nThere are two kinds of properties.\n\nThe first kind is *data properties*. We already know how to work with them. Actually, all properties that we've been using till now were data properties.\n\nThe second type of properties is something new. It's *accessor properties*. They are essentially functions that work on getting and setting a value, but look like regular properties to an external code.\n\n## Getters and setters\n\nAccessor properties are represented by \"getter\" and \"setter\" methods. In an object literal they are denoted by `get` and `set`:\n\n```js\nlet obj = {\n  *!*get propName()*/!* {\n    // getter, the code executed on getting obj.propName\n  },\n\n  *!*set propName(value)*/!* {\n    // setter, the code executed on setting obj.propName = value\n  }\n};\n```\n\nThe getter works when `obj.propName` is read, the setter -- when it is assigned.\n\nFor instance, we have a `user` object with `name` and `surname`:\n\n```js run\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n```\n\nNow we want to add a \"fullName\" property, that should be \"John Smith\". Of course, we don't want to copy-paste existing information, so we can implement it as an accessor:\n\n```js run\nlet user = {\n  name: \"John\",\n  surname: \"Smith\",\n\n*!*\n  get fullName() {\n    return `${this.name} ${this.surname}`;\n  }\n*/!*\n};\n\n*!*\nalert(user.fullName); // John Smith\n*/!*\n```\n\nFrom outside, an accessor property looks like a regular one. That's the idea of accessor properties. We don't *call* `user.fullName` as a function, we *read* it normally: the getter runs behind the scenes.\n\nAs of now, `fullName` has only a getter. If we attempt to assign `user.fullName=`, there will be an error.\n\nLet's fix it by adding a setter for `user.fullName`:\n\n```js run\nlet user = {\n  name: \"John\",\n  surname: \"Smith\",\n\n  get fullName() {\n    return `${this.name} ${this.surname}`;\n  },\n\n*!*\n  set fullName(value) {\n    [this.name, this.surname] = value.split(\" \");\n  }\n*/!*\n};\n\n// set fullName is executed with the given value.\nuser.fullName = \"Alice Cooper\";\n\nalert(user.name); // Alice\nalert(user.surname); // Cooper\n```\n\nNow we have a \"virtual\" property. It is readable and writable, but in fact does not exist.\n\n```smart header=\"Accessor properties are only accessible with get/set\"\nA property can either be a \"data property\" or an \"accessor property\", but not both.\n\nOnce a property is defined with `get prop()` or `set prop()`, it's an accessor property. So there must be a getter to read it, and must be a setter if we want to assign it.\n\nSometimes it's normal that there's only a setter or only a getter. But the property won't be readable or writable in that case.\n```\n\n\n## Accessor descriptors\n\nDescriptors for accessor properties are different -- as compared with data properties.\n\nFor accessor properties, there is no `value` and `writable`, but instead there are `get` and `set` functions.\n\nSo an accessor descriptor may have:\n\n- **`get`** -- a function without arguments, that works when a property is read,\n- **`set`** -- a function with one argument, that is called when the property is set,\n- **`enumerable`** -- same as for data properties,\n- **`configurable`** -- same as for data properties.\n\nFor instance, to create an accessor `fullName` with `defineProperty`, we can pass a descriptor with `get` and `set`:\n\n```js run\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n\n*!*\nObject.defineProperty(user, 'fullName', {\n  get() {\n    return `${this.name} ${this.surname}`;\n  },\n\n  set(value) {\n    [this.name, this.surname] = value.split(\" \");\n  }\n*/!*\n});\n\nalert(user.fullName); // John Smith\n\nfor(let key in user) alert(key); // name, surname\n```\n\nPlease note once again that a property can be either an accessor or a data property, not both.\n\nIf we try to supply both `get` and `value` in the same descriptor, there will be an error:\n\n```js run\n*!*\n// Error: Invalid property descriptor.\n*/!*\nObject.defineProperty({}, 'prop', {\n  get() {\n    return 1\n  },\n\n  value: 2\n});\n```\n\n## Smarter getters/setters\n\nGetters/setters can be used as wrappers over \"real\" property values to gain more control over them.\n\nFor instance, if we want to forbid too short names for `user`, we can store `name` in a special property `_name`. And filter assignments in the setter:\n\n```js run\nlet user = {\n  get name() {\n    return this._name;\n  },\n\n  set name(value) {\n    if (value.length < 4) {\n      alert(\"Name is too short, need at least 4 characters\");\n      return;\n    }\n    this._name = value;\n  }\n};\n\nuser.name = \"Pete\";\nalert(user.name); // Pete\n\nuser.name = \"\"; // Name is too short...\n```\n\nTechnically, the external code may still access the name directly by using `user._name`. But there is a widely known agreement that properties starting with an underscore `\"_\"` are internal and should not be touched from outside the object.\n\n\n## Using for compatibility\n\nOne of the great ideas behind getters and setters -- they allow to take control over a \"normal\" data property and tweak it at any moment.\n\nFor instance, we started implementing user objects using data properties `name` and `age`:\n\n```js\nfunction User(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nlet john = new User(\"John\", 25);\n\nalert( john.age ); // 25\n```\n\n...But sooner or later, things may change. Instead of `age` we may decide to store `birthday`, because it's more precise and convenient:\n\n```js\nfunction User(name, birthday) {\n  this.name = name;\n  this.birthday = birthday;\n}\n\nlet john = new User(\"John\", new Date(1992, 6, 1));\n```\n\nNow what to do with the old code that still uses `age` property?\n\nWe can try to find all such places and fix them, but that takes time and can be hard to do if that code is written by other people. And besides, `age` is a nice thing to have in `user`, right? In some places it's just what we want.\n\nAdding a getter for `age` mitigates the problem:\n\n```js run no-beautify\nfunction User(name, birthday) {\n  this.name = name;\n  this.birthday = birthday;\n\n*!*\n  // age is calculated from the current date and birthday\n  Object.defineProperty(this, \"age\", {\n    get() {\n      let todayYear = new Date().getFullYear();\n      return todayYear - this.birthday.getFullYear();\n    }\n  });\n*/!*\n}\n\nlet john = new User(\"John\", new Date(1992, 6, 1));\n\nalert( john.birthday ); // birthday is available\nalert( john.age );      // ...as well as the age\n```\n\nNow the old code works too and we've got a nice additional property.","libs":[],"children":[],"parent":"object-oriented-programming"}},"prototype-inheritance":{"type":"Article","value":{"title":"Prototypal inheritance","slug":"prototype-inheritance","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/03-prototype-inheritance/article.md","isFolder":false,"weight":3,"content":"\nIn programming, we often want to take something and extend it.\n\nFor instance, we have a `user` object with its properties and methods, and want to make `admin` and `guest` as slightly modified variants of it. We'd like to reuse what we have in `user`, not copy/reimplement its methods, just build a new object on top of it.\n\n*Prototypal inheritance* is a language feature that helps in that.\n\n## [[Prototype]]\n\nIn JavaScript, objects have a special hidden property `[[Prototype]]` (as named in the specification), that is either `null` or references another object. That object is called \"a prototype\":\n\n![prototype](object-prototype-empty.png)\n\nThat `[[Prototype]]` has a \"magical\" meaning. When we want to read a property from `object`, and it's missing, JavaScript automatically takes it from the prototype. In programming, such thing is called \"prototypal inheritance\". Many cool language features and programming techniques are based on it.\n\nThe property `[[Prototype]]` is internal and hidden, but there are many ways to set it.\n\nOne of them is to use `__proto__`, like this:\n\n```js run\nlet animal = {\n  eats: true\n};\nlet rabbit = {\n  jumps: true\n};\n\n*!*\nrabbit.__proto__ = animal;\n*/!*\n```\n\nPlease note that `__proto__` is *not the same* as `[[Prototype]]`. That's a getter/setter for it. We'll talk about other ways of setting it later, but for now `__proto__` will do just fine.\n\nIf we look for a property in `rabbit`, and it's missing, JavaScript automatically takes it from `animal`.\n\nFor instance:\n\n```js run\nlet animal = {\n  eats: true\n};\nlet rabbit = {\n  jumps: true\n};\n\n*!*\nrabbit.__proto__ = animal; // (*)\n*/!*\n\n// we can find both properties in rabbit now:\n*!*\nalert( rabbit.eats ); // true (**)\n*/!*\nalert( rabbit.jumps ); // true\n```\n\nHere the line `(*)` sets `animal` to be a prototype of `rabbit`.\n\nThen, when `alert` tries to read property `rabbit.eats` `(**)`, it's not in `rabbit`, so JavaScript follows the `[[Prototype]]` reference and finds it in `animal` (look from the bottom up):\n\n![](proto-animal-rabbit.png)\n\nHere we can say that \"`animal` is the prototype of `rabbit`\" or \"`rabbit` prototypally inherits from `animal`\".\n\nSo if `animal` has a lot of useful properties and methods, then they become automatically available in `rabbit`. Such properties are called \"inherited\".\n\nIf we have a method in `animal`, it can be called on `rabbit`:\n\n```js run\nlet animal = {\n  eats: true,\n*!*\n  walk() {\n    alert(\"Animal walk\");\n  }\n*/!*\n};\n\nlet rabbit = {\n  jumps: true,\n  __proto__: animal\n};\n\n// walk is taken from the prototype\n*!*\nrabbit.walk(); // Animal walk\n*/!*\n```\n\nThe method is automatically taken from the prototype, like this:\n\n![](proto-animal-rabbit-walk.png)\n\nThe prototype chain can be longer:\n\n\n```js run\nlet animal = {\n  eats: true,\n  walk() {\n    alert(\"Animal walk\");\n  }\n};\n\nlet rabbit = {\n  jumps: true,\n  __proto__: animal\n};\n\nlet longEar = {\n  earLength: 10,\n  __proto__: rabbit\n}\n\n// walk is taken from the prototype chain\nlongEar.walk(); // Animal walk\nalert(longEar.jumps); // true (from rabbit)\n```\n\n![](proto-animal-rabbit-chain.png)\n\nThere are actually only two limitations:\n\n1. The references can't go in circles. JavaScript will throw an error if we try to assign `__proto__` in a circle.\n2. The value of `__proto__` can be either an object or `null`. All other values (like primitives) are ignored.\n\nAlso it may be obvious, but still: there can be only one `[[Prototype]]`. An object may not inherit from two others.\n\n## Read/write rules\n\nThe prototype is only used for reading properties.\n\nFor data properties (not getters/setters) write/delete operations work directly with the object.\n\nIn the example below, we assign its own `walk` method to `rabbit`:\n\n```js run\nlet animal = {\n  eats: true,\n  walk() {\n    /* this method won't be used by rabbit */  \n  }\n};\n\nlet rabbit = {\n  __proto__: animal\n}\n\n*!*\nrabbit.walk = function() {\n  alert(\"Rabbit! Bounce-bounce!\");\n};\n*/!*\n\nrabbit.walk(); // Rabbit! Bounce-bounce!\n```\n\nFrom now on, `rabbit.walk()` call finds the method immediately in the object and executes it, without using the prototype:\n\n![](proto-animal-rabbit-walk-2.png)\n\nFor getters/setters -- if we read/write a property, they are looked up in the prototype and invoked.\n\nFor instance, check out `admin.fullName` property in the code below:\n\n```js run\nlet user = {\n  name: \"John\",\n  surname: \"Smith\",\n\n  set fullName(value) {\n    [this.name, this.surname] = value.split(\" \");\n  },\n\n  get fullName() {\n    return `${this.name} ${this.surname}`;\n  }\n};\n\nlet admin = {\n  __proto__: user,\n  isAdmin: true\n};\n\nalert(admin.fullName); // John Smith (*)\n\n// setter triggers!\nadmin.fullName = \"Alice Cooper\"; // (**)\n```\n\nHere in the line `(*)` the property `admin.fullName` has a getter in the prototype `user`, so it is called. And in the line `(**)` the property has a setter in the prototype, so it is called.\n\n## The value of \"this\"\n\nAn interesting question may arise in the example above: what's the value of `this` inside `set fullName(value)`? Where the properties `this.name` and `this.surname` are written: `user` or `admin`?\n\nThe answer is simple: `this` is not affected by prototypes at all.\n\n**No matter where the method is found: in an object or its prototype. In a method call, `this` is always the object before the dot.**\n\nSo, the setter actually uses `admin` as `this`, not `user`.\n\nThat is actually a super-important thing, because we may have a big object with many methods and inherit from it. Then we can run its methods on inherited objects and they will modify the state of these objects, not the big one.\n\nFor instance, here `animal` represents a \"method storage\", and `rabbit` makes use of it.\n\nThe call `rabbit.sleep()` sets `this.isSleeping` on the `rabbit` object:\n\n```js run\n// animal has methods\nlet animal = {\n  walk() {\n    if (!this.isSleeping) {\n      alert(`I walk`);\n    }\n  },\n  sleep() {\n    this.isSleeping = true;\n  }\n};\n\nlet rabbit = {\n  name: \"White Rabbit\",\n  __proto__: animal\n};\n\n// modifies rabbit.isSleeping\nrabbit.sleep();\n\nalert(rabbit.isSleeping); // true\nalert(animal.isSleeping); // undefined (no such property in the prototype)\n```\n\nThe resulting picture:\n\n![](proto-animal-rabbit-walk-3.png)\n\nIf we had other objects like `bird`, `snake` etc inheriting from `animal`, they would also gain access to methods of `animal`. But `this` in each method would be the corresponding object, evaluated at the call-time (before dot), not `animal`. So when we write data into `this`, it is stored into these objects.\n\nAs a result, methods are shared, but the object state is not.\n\n## Summary\n\n- In JavaScript, all objects have a hidden `[[Prototype]]` property that's either another object or `null`.\n- We can use `obj.__proto__` to access it (there are other ways too, to be covered soon).\n- The object referenced by `[[Prototype]]` is called a \"prototype\".\n- If we want to read a property of `obj` or call a method, and it doesn't exist, then JavaScript tries to find it in the prototype. Write/delete operations work directly on the object, they don't use the prototype (unless the property is actually a setter).\n- If we call `obj.method()`, and the `method` is taken from the prototype, `this` still references `obj`. So methods always work with the current object even if they are inherited.","libs":[],"children":["property-after-delete","search-algorithm","proto-and-this","hamster-proto"],"parent":"object-oriented-programming"}},"property-after-delete":{"type":"Task","value":{"title":"Working with prototype","slug":"property-after-delete","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/03-prototype-inheritance/1-property-after-delete","weight":1,"libs":[],"importance":5,"content":"\nHere's the code that creates a pair of objects, then modifies them.\n\nWhich values are shown in the process?\n\n```js\nlet animal = {\n  jumps: null\n};\nlet rabbit = {\n  __proto__: animal,\n  jumps: true\n};\n\nalert( rabbit.jumps ); // ? (1)\n\ndelete rabbit.jumps;\n\nalert( rabbit.jumps ); // ? (2)\n\ndelete animal.jumps;\n\nalert( rabbit.jumps ); // ? (3)\n```\n\nThere should be 3 answers.","solution":"1. `true`, taken from `rabbit`.\n2. `null`, taken from `animal`.\n3. `undefined`, there's no such property any more.","parent":"prototype-inheritance"}},"search-algorithm":{"type":"Task","value":{"title":"Searching algorithm","slug":"search-algorithm","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/03-prototype-inheritance/2-search-algorithm","weight":2,"libs":[],"importance":5,"content":"\nThe task has two parts.\n\nWe have an object:\n\n```js\nlet head = {\n  glasses: 1\n};\n\nlet table = {\n  pen: 3\n};\n\nlet bed = {\n  sheet: 1,\n  pillow: 2\n};\n\nlet pockets = {\n  money: 2000\n};\n```\n\n1. Use `__proto__` to assign prototypes in a way that any property lookup will follow the path: `pockets` -> `bed` -> `table` -> `head`. For instance, `pockets.pen` should be `3` (found in `table`), and `bed.glasses` should be `1` (found in `head`).\n2. Answer the question: is it faster to get `glasses` as `pockets.glasses` or `head.glasses`? Benchmark if needed.","solution":"1. Let's add `__proto__`:\n\n    ```js run\n    let head = {\n      glasses: 1\n    };\n\n    let table = {\n      pen: 3,\n      __proto__: head\n    };\n\n    let bed = {\n      sheet: 1,\n      pillow: 2,\n      __proto__: table\n    };\n\n    let pockets = {\n      money: 2000,\n      __proto__: bed\n    };\n\n    alert( pockets.pen ); // 3\n    alert( bed.glasses ); // 1\n    alert( table.money ); // undefined\n    ```\n\n2. In modern engines, performance-wise, there's no difference whether we take a property from an object or its prototype. They remember where the property was found and reuse it in the next request.\n\n    For instance, for `pockets.glasses` they remember where they found `glasses` (in `head`), and next time will search right there. They are also smart enough to update internal caches if something changes, so that optimization is safe.","parent":"prototype-inheritance"}},"proto-and-this":{"type":"Task","value":{"title":"Where it writes?","slug":"proto-and-this","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/03-prototype-inheritance/3-proto-and-this","weight":3,"libs":[],"importance":5,"content":"\nWe have `rabbit` inheriting from `animal`.\n\nIf we call `rabbit.eat()`, which object receives the `full` property: `animal` or `rabbit`? \n\n```js\nlet animal = {\n  eat() {\n    this.full = true;\n  }\n};\n\nlet rabbit = {\n  __proto__: animal\n};\n\nrabbit.eat();\n```","solution":"**The answer: `rabbit`.**\n\nThat's because `this` is an object before the dot, so `rabbit.eat()` modifies `rabbit`.\n\nProperty lookup and execution are two different things.\nThe method `rabbit.eat` is first found in the prototype, then executed with `this=rabbit`","parent":"prototype-inheritance"}},"hamster-proto":{"type":"Task","value":{"title":"Why two hamsters are full?","slug":"hamster-proto","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/03-prototype-inheritance/4-hamster-proto","weight":4,"libs":[],"importance":5,"content":"\nWe have two hamsters: `speedy` and `lazy` inheriting from the general `hamster` object. \n\nWhen we feed one of them, the other one is also full. Why? How to fix it?\n\n```js run\nlet hamster = {\n  stomach: [],\n\n  eat(food) {\n    this.stomach.push(food);\n  }\n};\n\nlet speedy = {\n  __proto__: hamster\n};\n\nlet lazy = {\n  __proto__: hamster\n};\n\n// This one found the food\nspeedy.eat(\"apple\");\nalert( speedy.stomach ); // apple\n\n// This one also has it, why? fix please.\nalert( lazy.stomach ); // apple\n```","solution":"Let's look carefully at what's going on in the call `speedy.eat(\"apple\")`.\n\n1. The method `speedy.eat` is found in the prototype (`=hamster`), then executed with `this=speedy` (the object before the dot).\n\n2. Then `this.stomach.push()` needs to find `stomach` property and call `push` on it. It looks for `stomach` in `this` (`=speedy`), but nothing found.\n\n3. Then it follows the prototype chain and finds `stomach` in `hamster`.\n\n4. Then it calls `push` on it, adding the food into *the stomach of the prototype*.\n\nSo all hamsters share a single stomach!\n\nEvery time the `stomach` is taken from the prototype, then `stomach.push` modifies it \"at place\".\n\nPlease note that such thing doesn't happen in case of a simple assignment `this.stomach=`:\n\n```js run\nlet hamster = {\n  stomach: [],\n\n  eat(food) {\n*!*\n    // assign to this.stomach instead of this.stomach.push\n    this.stomach = [food];\n*/!*\n  }\n};\n\nlet speedy = {\n   __proto__: hamster\n};\n\nlet lazy = {\n  __proto__: hamster\n};\n\n// Speedy one found the food\nspeedy.eat(\"apple\");\nalert( speedy.stomach ); // apple\n\n// Lazy one's stomach is empty\nalert( lazy.stomach ); // <nothing>\n```\n\nNow all works fine, because `this.stomach=` does not perform a lookup of `stomach`. The value is written directly into `this` object.\n\nAlso we can totally evade the problem by making sure that each hamster has his own stomach:\n\n```js run\nlet hamster = {\n  stomach: [],\n\n  eat(food) {\n    this.stomach.push(food);\n  }\n};\n\nlet speedy = {\n  __proto__: hamster,\n*!*\n  stomach: []\n*/!*\n};\n\nlet lazy = {\n  __proto__: hamster,\n*!*\n  stomach: []\n*/!*\n};\n\n// Speedy one found the food\nspeedy.eat(\"apple\");\nalert( speedy.stomach ); // apple\n\n// Lazy one's stomach is empty\nalert( lazy.stomach ); // <nothing>\n```\n\nAs a common solution, all properties that describe the state of a particular object, like `stomach` above, are usually written into that object. That prevents such problems.","parent":"prototype-inheritance"}},"function-prototype":{"type":"Article","value":{"title":"F.prototype","slug":"function-prototype","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/04-function-prototype/article.md","isFolder":false,"weight":4,"content":"\nIn modern JavaScript we can set a prototype using `__proto__`, as described in the previous article. But it wasn't like that all the time.\n\nJavaScript has had prototypal inheritance from the beginning. It was one of the core features of the language.\n\nBut in the old times, there was another (and the only) way to set it: to use a `\"prototype\"` property of the constructor function. And there are still many scripts that use it.\n\n## The \"prototype\" property\n\nAs we know already, `new F()` creates a new object.\n\nWhen a new object is created with `new F()`, the object's `[[Prototype]]` is set to `F.prototype`.\n\nIn other words, if `F` has a `prototype` property with a value of the object type, then `new` operator uses it to set `[[Prototype]]` for the new object.\n\nPlease note that `F.prototype` here means a regular property named `\"prototype\"` on `F`. It sounds something similar to the term \"prototype\", but here we really mean a regular property with this name.\n\nHere's the example:\n\n```js run\nlet animal = {\n  eats: true\n};\n\nfunction Rabbit(name) {\n  this.name = name;\n}\n\n*!*\nRabbit.prototype = animal;\n*/!*\n\nlet rabbit = new Rabbit(\"White Rabbit\"); //  rabbit.__proto__ == animal\n\nalert( rabbit.eats ); // true\n```\n\nSetting `Rabbit.prototype = animal` literally states the following: \"When a `new Rabbit` is created, assign its `[[Prototype]]` to `animal`\".\n\nThat's the resulting picture:\n\n![](proto-constructor-animal-rabbit.png)\n\nOn the picture, `\"prototype\"` is a horizontal arrow, it's a regular property, and `[[Prototype]]` is vertical, meaning the inheritance of `rabbit` from `animal`.\n\n\n## Default F.prototype, constructor property\n\nEvery function has the `\"prototype\"` property even if we don't supply it.\n\nThe default `\"prototype\"` is an object with the only property `constructor` that points back to the function itself.\n\nLike this:\n\n```js\nfunction Rabbit() {}\n\n/* default prototype\nRabbit.prototype = { constructor: Rabbit };\n*/\n```\n\n![](function-prototype-constructor.png)\n\nWe can check it:\n\n```js run\nfunction Rabbit() {}\n// by default:\n// Rabbit.prototype = { constructor: Rabbit }\n\nalert( Rabbit.prototype.constructor == Rabbit ); // true\n```\n\nNaturally, if we do nothing, the `constructor` property is available to all rabbits through  `[[Prototype]]`:\n\n```js run\nfunction Rabbit() {}\n// by default:\n// Rabbit.prototype = { constructor: Rabbit }\n\nlet rabbit = new Rabbit(); // inherits from {constructor: Rabbit}\n\nalert(rabbit.constructor == Rabbit); // true (from prototype)\n```\n\n![](rabbit-prototype-constructor.png)\n\nWe can use `constructor` property to create a new object using the same constructor as the existing one.\n\nLike here:\n\n```js run\nfunction Rabbit(name) {\n  this.name = name;\n  alert(name);\n}\n\nlet rabbit = new Rabbit(\"White Rabbit\");\n\n*!*\nlet rabbit2 = new rabbit.constructor(\"Black Rabbit\");\n*/!*\n```\n\nThat's handy when we have an object, don't know which constructor was used for it (e.g. it comes from a 3rd party library), and we need to create another one of the same kind.\n\nBut probably the most important thing about `\"constructor\"` is that...\n\n**...JavaScript itself does not ensure the right `\"constructor\"` value.**\n\nYes, it exists in the default `\"prototype\"` for functions, but that's all. What happens with it later -- is totally on us.\n\nIn particular, if we replace the default prototype as a whole, then there will be no `\"constructor\"` in it.\n\nFor instance:\n\n```js run\nfunction Rabbit() {}\nRabbit.prototype = {\n  jumps: true\n};\n\nlet rabbit = new Rabbit();\n*!*\nalert(rabbit.constructor === Rabbit); // false\n*/!*\n```\n\nSo, to keep the right `\"constructor\"` we can choose to add/remove properties to the default `\"prototype\"` instead of overwriting it as a whole:\n\n```js\nfunction Rabbit() {}\n\n// Not overwrite Rabbit.prototype totally\n// just add to it\nRabbit.prototype.jumps = true\n// the default Rabbit.prototype.constructor is preserved\n```\n\nOr, alternatively, recreate the `constructor` property it manually:\n\n```js\nRabbit.prototype = {\n  jumps: true,\n*!*\n  constructor: Rabbit\n*/!*\n};\n\n// now constructor is also correct, because we added it\n```\n\n\n## Summary\n\nIn this chapter we briefly described the way of setting a `[[Prototype]]` for objects created via a constructor function. Later we'll see more advanced programming patterns that rely on it.\n\nEverything is quite simple, just few notes to make things clear:\n\n- The `F.prototype` property is not the same as `[[Prototype]]`. The only thing `F.prototype` does: it sets `[[Prototype]]` of new objects when `new F()` is called.\n- The value of `F.prototype` should be either an object or null: other values won't work.\n-  The `\"prototype\"` property only has such a special effect when is set to a constructor function, and invoked with `new`.\n\nOn regular objects the `prototype` is nothing special:\n```js\nlet user = {\n  name: \"John\",\n  prototype: \"Bla-bla\" // no magic at all\n};\n```\n\nBy default all functions have `F.prototype = { constructor: F }`, so we can get the constructor of an object by accessing its `\"constructor\"` property.","libs":[],"children":["changing-prototype","new-object-same-constructor"],"parent":"object-oriented-programming"}},"changing-prototype":{"type":"Task","value":{"title":"Changing \"prototype\"","slug":"changing-prototype","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/04-function-prototype/1-changing-prototype","weight":1,"libs":[],"importance":5,"content":"\nIn the code below we create `new Rabbit`, and then try to modify its prototype.\n\nIn the start, we have this code:\n\n```js run\nfunction Rabbit() {}\nRabbit.prototype = {\n  eats: true\n};\n\nlet rabbit = new Rabbit();\n\nalert( rabbit.eats ); // true\n```\n\n\n1. We added one more string (emphasized), what `alert` shows now?\n\n    ```js\n    function Rabbit() {}\n    Rabbit.prototype = {\n      eats: true\n    };\n\n    let rabbit = new Rabbit();\n\n    *!*\n    Rabbit.prototype = {};\n    */!*\n\n    alert( rabbit.eats ); // ?\n    ```\n\n2. ...And if the code is like this (replaced one line)?\n\n    ```js\n    function Rabbit() {}\n    Rabbit.prototype = {\n      eats: true\n    };\n\n    let rabbit = new Rabbit();\n\n    *!*\n    Rabbit.prototype.eats = false;\n    */!*\n\n    alert( rabbit.eats ); // ?\n    ```\n\n3. Like this (replaced one line)?\n\n    ```js\n    function Rabbit() {}\n    Rabbit.prototype = {\n      eats: true\n    };\n\n    let rabbit = new Rabbit();\n\n    *!*\n    delete rabbit.eats;\n    */!*\n\n    alert( rabbit.eats ); // ?\n    ```\n\n4. The last variant:\n\n    ```js\n    function Rabbit() {}\n    Rabbit.prototype = {\n      eats: true\n    };\n\n    let rabbit = new Rabbit();\n\n    *!*\n    delete Rabbit.prototype.eats;\n    */!*\n\n    alert( rabbit.eats ); // ?\n    ```","solution":"Answers:\n\n1. `true`. \n\n    The assignment to `Rabbit.prototype` sets up `[[Prototype]]` for new objects, but it does not affect the existing ones. \n\n2. `false`. \n\n    Objects are assigned by reference. The object from `Rabbit.prototype` is not duplicated, it's still a single object is referenced both by `Rabbit.prototype` and by the `[[Prototype]]` of `rabbit`. \n\n    So when we change its content through one reference, it is visible through the other one.\n\n3. `true`.\n\n    All `delete` operations are applied directly to the object. Here `delete rabbit.eats` tries to remove `eats` property from `rabbit`, but it doesn't have it. So the operation won't have any effect.\n\n4. `undefined`.\n\n    The property `eats` is deleted from the prototype, it doesn't exist any more.","parent":"function-prototype"}},"new-object-same-constructor":{"type":"Task","value":{"title":"Create an object with the same constructor","slug":"new-object-same-constructor","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/04-function-prototype/4-new-object-same-constructor","weight":4,"libs":[],"importance":5,"content":"\nImagine, we have an arbitrary object `obj`, created by a constructor function -- we don't know which one, but we'd like to create a new object using it.\n\nCan we do it like that?\n\n```js\nlet obj2 = new obj.constructor();\n```\n\nGive an example of a constructor function for `obj` which lets such code work right. And an example that makes it work wrong.","solution":"We can use such approach if we are sure that `\"constructor\"` property has the correct value.\n\nFor instance, if we don't touch the default `\"prototype\"`, then this code works for sure:\n\n```js run\nfunction User(name) {\n  this.name = name;\n}\n\nlet user = new User('John');\nlet user2 = new user.constructor('Pete');\n\nalert( user2.name ); // Pete (worked!)\n```\n\nIt worked, because `User.prototype.constructor == User`.\n\n..But if someone, so to say, overwrites `User.prototype` and forgets to recreate `\"constructor\"`, then it would fail.\n\nFor instance:\n\n```js run\nfunction User(name) {\n  this.name = name;\n}\n*!*\nUser.prototype = {}; // (*)\n*/!*\n\nlet user = new User('John');\nlet user2 = new user.constructor('Pete');\n\nalert( user2.name ); // undefined\n```\n\nWhy `user2.name` is `undefined`?\n\nHere's how `new user.constructor('Pete')` works:\n\n1. First, it looks for `constructor` in `user`. Nothing.\n2. Then it follows the prototype chain. The prototype of `user` is `User.prototype`, and it also has nothing.\n3. The value of `User.prototype` is a plain object `{}`, its prototype is `Object.prototype`. And there is `Object.prototype.constructor == Object`. So it is used.\n\nAt the end, we have `let user2 = new Object('Pete')`. The built-in `Object` constructor ignores arguments, it always creates an empty object -- that's what we have in `user2` after all.","parent":"function-prototype"}},"native-prototypes":{"type":"Article","value":{"title":"Native prototypes","slug":"native-prototypes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/05-native-prototypes/article.md","isFolder":false,"weight":5,"content":"\nThe `\"prototype\"` property is widely used by the core of JavaScript itself. All built-in constructor functions use it.\n\nWe'll see how it is for plain objects first, and then for more complex ones.\n\n## Object.prototype\n\nLet's say we output an empty object:\n\n```js run\nlet obj = {};\nalert( obj ); // \"[object Object]\" ?\n```\n\nWhere's the code that generates the string `\"[object Object]\"`? That's a built-in `toString` method, but where is it? The `obj` is empty!\n\n...But the short notation `obj = {}` is the same as `obj = new Object()`, where `Object` -- is a built-in object constructor function. And that function has `Object.prototype` that references a huge object with `toString` and other functions.\n\nLike this (all that is built-in):\n\n![](object-prototype.png)\n\nWhen `new Object()` is called (or a literal object `{...}` is created), the `[[Prototype]]` of it is set to `Object.prototype` by the rule that we've discussed in the previous chapter:\n\n![](object-prototype-1.png)\n\nAfterwards when `obj.toString()` is called -- the method is taken from `Object.prototype`.\n\nWe can check it like this:\n\n```js run\nlet obj = {};\n\nalert(obj.__proto__ === Object.prototype); // true\n// obj.toString === obj.__proto__.toString == Object.prototype.toString\n```\n\nPlease note that there is no additional `[[Prototype]]` in the chain above `Object.prototype`:\n\n```js run\nalert(Object.prototype.__proto__); // null\n```\n\n## Other built-in prototypes\n\nOther built-in objects such as `Array`, `Date`, `Function` and others also keep methods in prototypes.\n\nFor instance, when we create an array `[1, 2, 3]`, the default `new Array()` constructor is  used internally. So the array data is written into the new object, and `Array.prototype` becomes its prototype and provides methods. That's very memory-efficient.\n\nBy specification, all built-in prototypes have `Object.prototype` on the top. Sometimes people say that \"everything inherits from objects\".\n\nHere's the overall picture (for 3 built-ins to fit):\n\n![](native-prototypes-classes.png)\n\nLet's check the prototypes manually:\n\n```js run\nlet arr = [1, 2, 3];\n\n// it inherits from Array.prototype?\nalert( arr.__proto__ === Array.prototype ); // true\n\n// then from Object.prototype?\nalert( arr.__proto__.__proto__ === Object.prototype ); // true\n\n// and null on the top.\nalert( arr.__proto__.__proto__.__proto__ ); // null\n```\n\nSome methods in prototypes may overlap, for instance, `Array.prototype` has its own `toString` that lists comma-delimited elements:\n\n```js run\nlet arr = [1, 2, 3]\nalert(arr); // 1,2,3 <-- the result of Array.prototype.toString\n```\n\nAs we've seen before, `Object.prototype` has `toString` as well, but `Array.prototype` is closer in the chain, so the array variant is used.\n\n\n![](native-prototypes-array-tostring.png)\n\n\nIn-browser tools like Chrome developer console also show inheritance (may need to use `console.dir` for built-in objects):\n\n![](console_dir_array.png)\n\nOther built-in objects also work the same way. Even functions. They are objects of a built-in `Function` constructor, and their methods: `call/apply` and others are taken from `Function.prototype`. Functions have their own `toString` too.\n\n```js run\nfunction f() {}\n\nalert(f.__proto__ == Function.prototype); // true\nalert(f.__proto__.__proto__ == Object.prototype); // true, inherit from objects\n```\n\n## Primitives\n\nThe most intricate thing happens with strings, numbers and booleans.\n\nAs we remember, they are not objects. But if we try to access their properties, then temporary wrapper objects are created using built-in constructors `String`, `Number`, `Boolean`, they provide the methods and disappear.\n\nThese objects are created invisibly to us and most engines optimize them out, but the specification describes it exactly this way. Methods of these objects also reside in prototypes, available as `String.prototype`, `Number.prototype` and `Boolean.prototype`.\n\n```warn header=\"Values `null` and `undefined` have no object wrappers\"\nSpecial values `null` and `undefined` stand apart. They have no object wrappers, so methods and properties are not available for them. And there are no corresponding prototypes too.\n```\n\n## Changing native prototypes [#native-prototype-change]\n\nNative prototypes can be modified. For instance, if we add a method to `String.prototype`,  it becomes available to all strings:\n\n```js run\nString.prototype.show = function() {\n  alert(this);\n};\n\n\"BOOM!\".show(); // BOOM!\n```\n\nDuring the process of development we may have ideas which new built-in methods we'd like to have. And there may be a slight temptation to add them to native prototypes. But that is generally a bad idea.\n\nPrototypes are global, so it's easy to get a conflict. If two libraries add a method `String.prototype.show`, then one of them overwrites the other one.\n\nIn modern programming, there is only one case when modifying native prototypes is approved. That's polyfills. In other words, if there's a method in JavaScript specification that is not yet supported by our JavaScript engine (or any of those that we want to support), then may implement it manually and populate the built-in prototype with it.\n\nFor instance:\n\n```js run\nif (!String.prototype.repeat) { // if there's no such method\n  // add it to the prototype\n\n  String.prototype.repeat = function(n) {\n    // repeat the string n times\n\n    // actually, the code should be more complex than that,\n    // throw errors for negative values of \"n\"\n    // the full algorithm is in the specification\n    return new Array(n + 1).join(this);\n  };\n}\n\nalert( \"La\".repeat(3) ); // LaLaLa\n```\n\n## Borrowing from prototypes\n\nIn the chapter <info:call-apply-decorators#method-borrowing> we talked about method borrowing:\n\n```js run\nfunction showArgs() {\n*!*\n  // borrow join from array and call in the context of arguments\n  alert( [].join.call(arguments, \" - \") );\n*/!*\n}\n\nshowArgs(\"John\", \"Pete\", \"Alice\"); // John - Pete - Alice\n```\n\nBecause `join` resides in `Array.prototype`, we can call it from there directly and rewrite it as:\n\n```js\nfunction showArgs() {\n*!*\n  alert( Array.prototype.join.call(arguments, \" - \") );\n*/!*\n}\n```\n\nThat's more efficient, because it avoids the creation of an extra array object `[]`. On the other hand, it is longer to write.\n\n## Summary\n\n- All built-in objects follow the same pattern:\n    - The methods are stored in the prototype (`Array.prototype`, `Object.prototype`, `Date.prototype` etc).\n    - The object itself stores only the data (array items, object properties, the date).\n- Primitives also store methods in prototypes of wrapper objects: `Number.prototype`, `String.prototype`, `Boolean.prototype`. There are no wrapper objects only for `undefined` and `null`.\n- Built-in prototypes can be modified or populated with new methods. But it's not recommended to change them. Probably the only allowable cause is when we add-in a new standard, but not yet supported by the engine JavaScript method.","libs":[],"children":["defer-to-prototype","defer-to-prototype-extended"],"parent":"object-oriented-programming"}},"defer-to-prototype":{"type":"Task","value":{"title":"Add method \"f.defer(ms)\" to functions","slug":"defer-to-prototype","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/05-native-prototypes/1-defer-to-prototype","weight":1,"libs":[],"importance":5,"content":"\nAdd to the prototype of all functions the method `defer(ms)`, that runs the function after `ms` milliseconds.\n\nAfter you do it, such code should work:\n\n```js\nfunction f() {\n  alert(\"Hello!\");\n}\n\nf.defer(1000); // shows \"Hello!\" after 1 second\n```","solution":"```js run\nFunction.prototype.defer = function(ms) {\n  setTimeout(this, ms);\n};\n\nfunction f() {\n  alert(\"Hello!\");\n}\n\nf.defer(1000); // shows \"Hello!\" after 1 sec\n```","parent":"native-prototypes"}},"defer-to-prototype-extended":{"type":"Task","value":{"title":"Add the decorating \"defer()\" to functions","slug":"defer-to-prototype-extended","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/05-native-prototypes/2-defer-to-prototype-extended","weight":2,"libs":[],"importance":4,"content":"\nAdd to the prototype of all functions the method `defer(ms)`, that returns a wrapper, delaying the call by `ms` milliseconds.\n\nHere's an example of how it should work:\n\n```js\nfunction f(a, b) {\n  alert( a + b );\n}\n\nf.defer(1000)(1, 2); // shows 3 after 1 second\n```\n\nPlease note that the arguments should be passed to the original function.","solution":"```js run\nFunction.prototype.defer = function(ms) {\n  let f = this;\n  return function(...args) {\n    setTimeout(() => f.apply(this, args), ms);\n  }\n};\n\n// check it\nfunction f(a, b) {\n  alert( a + b );\n}\n\nf.defer(1000)(1, 2); // shows 3 after 1 sec\n```","parent":"native-prototypes"}},"prototype-methods":{"type":"Article","value":{"title":"Methods for prototypes","slug":"prototype-methods","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/06-prototype-methods/article.md","isFolder":false,"weight":6,"content":"\nIn this chapter we cover additional methods to work with a prototype.\n\nThere are also other ways to get/set a prototype, besides those that we already know:\n\n- [Object.create(proto[, descriptors])](mdn:js/Object/create) -- creates an empty object with given `proto` as `[[Prototype]]` and optional property descriptors.\n- [Object.getPrototypeOf(obj)](mdn:js/Object/getPrototypeOf) -- returns the `[[Prototype]]` of `obj`.\n- [Object.setPrototypeOf(obj, proto)](mdn:js/Object/setPrototypeOf) -- sets the `[[Prototype]]` of `obj` to `proto`.\n\nFor instance:\n\n```js run\nlet animal = {\n  eats: true\n};\n\n// create a new object with animal as a prototype\n*!*\nlet rabbit = Object.create(animal);\n*/!*\n\nalert(rabbit.eats); // true\n*!*\nalert(Object.getPrototypeOf(rabbit) === animal); // get the prototype of rabbit\n*/!*\n\n*!*\nObject.setPrototypeOf(rabbit, {}); // change the prototype of rabbit to {}\n*/!*\n```\n\n`Object.create` has an optional second argument: property descriptors. We can provide additional properties to the new object there, like this:\n\n```js run\nlet animal = {\n  eats: true\n};\n\nlet rabbit = Object.create(animal, {\n  jumps: {\n    value: true\n  }\n});\n\nalert(rabbit.jumps); // true\n```\n\nThe descriptors are in the same format as described in the chapter <info:property-descriptors>.\n\nWe can use `Object.create` to perform an object cloning more powerful than copying properties in `for..in`:\n\n```js\n// fully identical shallow clone of obj\nlet clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n```\n\nThis call makes a truly exact copy of `obj`, including all properties: enumerable and non-enumerable, data properties and setters/getters -- everything, and with the right `[[Prototype]]`.\n\n## Brief history\n\nIf we count all the ways to manage `[[Prototype]]`, there's a lot! Many ways to do the same!\n\nWhy so?\n\nThat's for historical reasons.\n\n- The `\"prototype\"` property of a constructor function works since very ancient times.\n- Later in the year 2012: `Object.create` appeared in the standard. It allowed to create objects with the given prototype, but did not allow to get/set it. So browsers implemented non-standard `__proto__` accessor that allowed to get/set a prototype at any time.\n- Later in the year 2015: `Object.setPrototypeOf` and `Object.getPrototypeOf` were added to the standard. The `__proto__` was de-facto implemented everywhere, so it made its way to the Annex B of the standard, that is optional for non-browser environments.\n\nAs of now we have all these ways at our disposal.\n\nTechnically, we can get/set `[[Prototype]]` at any time. But usually we only set it once at the object creation time, and then do not modify: `rabbit` inherits from `animal`, and that is not going to change. And JavaScript engines are highly optimized to that. Changing a prototype \"on-the-fly\" with `Object.setPrototypeOf` or `obj.__proto__=` is a very slow operation. But it is possible.\n\n## \"Very plain\" objects\n\nAs we know, objects can be used as associative arrays to store key/value pairs.\n\n...But if we try to store *user-provided* keys in it (for instance, a user-entered dictionary), we can see an interesting glitch: all keys work fine except `\"__proto__\"`.\n\nCheck out the example:\n\n```js run\nlet obj = {};\n\nlet key = prompt(\"What's the key?\", \"__proto__\");\nobj[key] = \"some value\";\n\nalert(obj[key]); // [object Object], not \"some value\"!\n```\n\nHere if the user types in `__proto__`, the assignment is ignored!\n\nThat shouldn't surprise us. The `__proto__` property is special: it must be either an object or `null`, a string can not become a prototype.\n\nBut we did not intend to implement such behavior, right? We want to store key/value pairs, and the key named `\"__proto__\"` was not properly saved. So that's a bug. Here the consequences are not terrible. But in other cases the prototype may indeed be changed, so the execution may go wrong in totally unexpected ways.\n\nWhat's worst -- usually developers do not think about such possibility at all. That makes such bugs hard to notice and even turn them into vulnerabilities, especially when JavaScript is used on server-side.\n\nSuch thing happens only with `__proto__`. All other properties are \"assignable\" normally.\n\nHow to evade the problem?\n\nFirst, we can just switch to using `Map`, then everything's fine.\n\nBut `Object` also can serve us well here, because language creators gave a thought to that problem long ago.\n\nThe `__proto__` is not a property of an object, but an accessor property of `Object.prototype`:\n\n![](object-prototype-2.png)\n\nSo, if `obj.__proto__` is read or assigned, the corresponding getter/setter is called from its prototype, and it gets/sets `[[Prototype]]`.\n\nAs it was said in the beginning: `__proto__` is a way to access `[[Prototype]]`, it is not `[[Prototype]]` itself.\n\nNow, if we want to use an object as an associative array, we can do it with a little trick:\n\n```js run\n*!*\nlet obj = Object.create(null);\n*/!*\n\nlet key = prompt(\"What's the key?\", \"__proto__\");\nobj[key] = \"some value\";\n\nalert(obj[key]); // \"some value\"\n```\n\n`Object.create(null)` creates an empty object without a prototype (`[[Prototype]]` is `null`):\n\n![](object-prototype-null.png)\n\nSo, there is no inherited getter/setter for `__proto__`. Now it is processed as a regular data property, so the example above works right.\n\nWe can call such object \"very plain\" or \"pure dictionary objects\", because they are even simpler than regular plain object `{...}`.\n\nA downside is that such objects lack any built-in object methods, e.g. `toString`:\n\n```js run\n*!*\nlet obj = Object.create(null);\n*/!*\n\nalert(obj); // Error (no toString)\n```\n\n...But that's usually fine for associative arrays.\n\nPlease note that most object-related methods are `Object.something(...)`, like `Object.keys(obj)` -- they are not in the prototype, so they will keep working on such objects:\n\n\n```js run\nlet chineseDictionary = Object.create(null);\nchineseDictionary.hello = \"ni hao\";\nchineseDictionary.bye = \"zai jian\";\n\nalert(Object.keys(chineseDictionary)); // hello,bye\n```\n\n## Getting all properties\n\nThere are many ways to get keys/values from an object.\n\nWe already know these ones:\n\n- [Object.keys(obj)](mdn:js/Object/keys) / [Object.values(obj)](mdn:js/Object/values) / [Object.entries(obj)](mdn:js/Object/entries) -- returns an array of enumerable own string property names/values/key-value pairs. These methods only list *enumerable* properties, and those that have *strings as keys*.\n\nIf we want symbolic properties:\n\n- [Object.getOwnPropertySymbols(obj)](mdn:js/Object/getOwnPropertySymbols) -- returns an array of all own symbolic property names.\n\nIf we want non-enumerable properties:\n\n- [Object.getOwnPropertyNames(obj)](mdn:js/Object/getOwnPropertyNames) -- returns an array of all own string property names.\n\nIf we want *all* properties:\n\n- [Reflect.ownKeys(obj)](mdn:js/Reflect/ownKeys) -- returns an array of all own property names.\n\nThese methods are a bit different about which properties they return, but all of them operate on the object itself. Properties from the prototype are not listed.\n\nThe `for..in` loop is different: it loops over inherited properties too.\n\nFor instance:\n\n```js run\nlet animal = {\n  eats: true\n};\n\nlet rabbit = {\n  jumps: true,\n  __proto__: animal\n};\n\n*!*\n// only own keys\nalert(Object.keys(rabbit)); // jumps\n*/!*\n\n*!*\n// inherited keys too\nfor(let prop in rabbit) alert(prop); // jumps, then eats\n*/!*\n```\n\nIf we want to distinguish inherited properties, there's a built-in method [obj.hasOwnProperty(key)](mdn:js/Object/hasOwnProperty): it returns `true` if `obj` has its own (not inherited) property named `key`.\n\nSo we can filter out inherited properties (or do something else with them):\n\n```js run\nlet animal = {\n  eats: true\n};\n\nlet rabbit = {\n  jumps: true,\n  __proto__: animal\n};\n\nfor(let prop in rabbit) {\n  let isOwn = rabbit.hasOwnProperty(prop);\n  alert(`${prop}: ${isOwn}`); // jumps:true, then eats:false\n}\n```\nHere we have the following inheritance chain: `rabbit`, then `animal`, then `Object.prototype` (because `animal` is a literal object `{...}`, so it's by default), and then `null` above it:\n\n![](rabbit-animal-object.png)\n\nNote, there's one funny thing. Where is the method `rabbit.hasOwnProperty` coming from? Looking at the chain we can see that the method is provided by `Object.prototype.hasOwnProperty`. In other words, it's inherited.\n\n...But why `hasOwnProperty` does not appear in `for..in` loop, if it lists all inherited properties?  The answer is simple: it's not enumerable. Just like all other properties of `Object.prototype`. That's why they are not listed.\n\n## Summary\n\nHere's a brief list of methods we discussed in this chapter -- as a recap:\n\n- [Object.create(proto[, descriptors])](mdn:js/Object/create) -- creates an empty object with given `proto` as `[[Prototype]]` (can be `null`) and optional property descriptors.\n- [Object.getPrototypeOf(obj)](mdn:js/Object.getPrototypeOf) -- returns the `[[Prototype]]` of `obj` (same as `__proto__` getter).\n- [Object.setPrototypeOf(obj, proto)](mdn:js/Object.setPrototypeOf) -- sets the `[[Prototype]]` of `obj` to `proto` (same as `__proto__` setter).\n- [Object.keys(obj)](mdn:js/Object/keys) / [Object.values(obj)](mdn:js/Object/values) / [Object.entries(obj)](mdn:js/Object/entries) -- returns an array of enumerable own string property names/values/key-value pairs.\n- [Object.getOwnPropertySymbols(obj)](mdn:js/Object/getOwnPropertySymbols) -- returns an array of all own symbolic property names.\n- [Object.getOwnPropertyNames(obj)](mdn:js/Object/getOwnPropertyNames) -- returns an array of all own string property names.\n- [Reflect.ownKeys(obj)](mdn:js/Reflect/ownKeys) -- returns an array of all own property names.\n- [obj.hasOwnProperty(key)](mdn:js/Object/hasOwnProperty): it returns `true` if `obj` has its own (not inherited) property named `key`.\n\nWe also made it clear that `__proto__` is a getter/setter for `[[Prototype]]` and resides in `Object.prototype`, just as other methods.\n\nWe can create an object without a prototype by `Object.create(null)`. Such objects are used as \"pure dictionaries\", they have no issues with `\"__proto__\"` as the key.\n\nAll methods that return object properties (like `Object.keys` and others) -- return \"own\" properties. If we want inherited ones, then we can use `for..in`.","libs":[],"children":["dictionary-tostring","compare-calls"],"parent":"object-oriented-programming"}},"dictionary-tostring":{"type":"Task","value":{"title":"Add toString to the dictionary","slug":"dictionary-tostring","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/06-prototype-methods/2-dictionary-tostring","weight":2,"libs":[],"importance":5,"content":"\nThere's an object `dictionary`, created as `Object.create(null)`, to store any `key/value` pairs.\n\nAdd method `dictionary.toString()` into it, that should return a comma-delimited list of keys. Your `toString` should not show up in `for..in` over the object.\n\nHere's how it should work:\n\n```js\nlet dictionary = Object.create(null);\n\n*!*\n// your code to add dictionary.toString method\n*/!*\n\n// add some data\ndictionary.apple = \"Apple\";\ndictionary.__proto__ = \"test\"; // __proto__ is a regular property key here\n\n// only apple and __proto__ are in the loop\nfor(let key in dictionary) {\n  alert(key); // \"apple\", then \"__proto__\"\n}  \n\n// your toString in action\nalert(dictionary); // \"apple,__proto__\"\n```","solution":"The method can take all enumerable keys using `Object.keys` and output their list.\n\nTo make `toString` non-enumerable, let's define it using a property descriptor. The syntax of `Object.create` allows to provide an object with property descriptors as the second argument.\n\n```js run\n*!*\nlet dictionary = Object.create(null, {\n  toString: { // define toString property\n    value() { // the value is a function\n      return Object.keys(this).join();\n    }\n  }\n});\n*/!*\n\ndictionary.apple = \"Apple\";\ndictionary.__proto__ = \"test\";\n\n// apple and __proto__ is in the loop\nfor(let key in dictionary) {\n  alert(key); // \"apple\", then \"__proto__\"\n}  \n\n// comma-separated list of properties by toString\nalert(dictionary); // \"apple,__proto__\"\n```\n\nWhen we create a property using a descriptor, its flags are `false` by default. So in the code above, `dictionary.toString` is non-enumerable.","parent":"prototype-methods"}},"compare-calls":{"type":"Task","value":{"title":"The difference beteeen calls","slug":"compare-calls","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/06-prototype-methods/3-compare-calls","weight":3,"libs":[],"importance":5,"content":"\nLet's create a new `rabbit` object:\n\n```js\nfunction Rabbit(name) {\n  this.name = name;\n}\nRabbit.prototype.sayHi = function() {\n  alert(this.name);\n};\n\nlet rabbit = new Rabbit(\"Rabbit\");\n```\n\nThese calls do the same thing or not?\n\n```js\nrabbit.sayHi();\nRabbit.prototype.sayHi();\nObject.getPrototypeOf(rabbit).sayHi();\nrabbit.__proto__.sayHi();\n```","solution":"The first call has `this == rabbit`, the other ones have `this` equal to `Rabbit.prototype`, because it's actually the object before the dot.\n\nSo only the first call shows `Rabbit`, other ones show `undefined`:\n\n```js run\nfunction Rabbit(name) {\n  this.name = name;\n}\nRabbit.prototype.sayHi = function() {\n  alert( this.name );\n}\n\nlet rabbit = new Rabbit(\"Rabbit\");\n\nrabbit.sayHi();                        // Rabbit\nRabbit.prototype.sayHi();              // undefined\nObject.getPrototypeOf(rabbit).sayHi(); // undefined\nrabbit.__proto__.sayHi();              // undefined\n```","parent":"prototype-methods"}},"class-patterns":{"type":"Article","value":{"title":"Class patterns","slug":"class-patterns","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/08-class-patterns/article.md","isFolder":false,"weight":8,"content":"\n```quote author=\"Wikipedia\"\nIn object-oriented programming, a *class* is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods).\n```\n\nThere's a special syntax construct and a keyword `class` in JavaScript. But before studying it, we should consider that the term \"class\" comes from the theory of object-oriented programming. The definition is cited above, and it's language-independent.\n\nIn JavaScript there are several well-known programming patterns to make classes even without using the `class` keyword. And here we'll talk about them first.\n\nThe `class` construct will be described in the next chapter, but in JavaScript it's a \"syntax sugar\" and an extension of one of the patterns that we'll study here.\n\n\n## Functional class pattern\n\nThe constructor function below can be considered a \"class\" according to the definition:\n\n```js run\nfunction User(name) {\n  this.sayHi = function() {\n    alert(name);\n  };\n}\n\nlet user = new User(\"John\");\nuser.sayHi(); // John\n```\n\nIt follows all parts of the definition:\n\n1. It is a \"program-code-template\" for creating objects (callable with `new`).\n2. It provides initial values for the state (`name` from parameters).\n3. It provides methods (`sayHi`).\n\nThis is called *functional class pattern*.\n\nIn the functional class pattern, local variables and nested functions inside `User`, that are not assigned to `this`, are visible from inside, but not accessible by the outer code.\n\nSo we can easily add internal functions and variables, like `calcAge()` here:\n\n```js run\nfunction User(name, birthday) {\n*!*\n  // only visible from other methods inside User\n  function calcAge() {\n    return new Date().getFullYear() - birthday.getFullYear();\n  }\n*/!*\n\n  this.sayHi = function() {\n    alert(`${name}, age:${calcAge()}`);\n  };\n}\n\nlet user = new User(\"John\", new Date(2000, 0, 1));\nuser.sayHi(); // John, age:17\n```\n\nIn this code variables `name`, `birthday` and the function `calcAge()` are internal, *private* to the object. They are only visible from inside of it.\n\nOn the other hand, `sayHi` is the external, *public* method. The external code that creates `user` can access it.\n\nThis way we can hide internal implementation details and helper methods from the outer code. Only what's assigned to `this` becomes visible outside.\n\n## Factory class pattern\n\nWe can create a class without using `new` at all.\n\nLike this:\n\n```js run\nfunction User(name, birthday) {\n  // only visible from other methods inside User\n  function calcAge() {\n    return new Date().getFullYear() - birthday.getFullYear();\n  }\n\n  return {\n    sayHi() {\n      alert(`${name}, age:${calcAge()}`);\n    }\n  };\n}\n\n*!*\nlet user = User(\"John\", new Date(2000, 0, 1));\n*/!*\nuser.sayHi(); // John, age:17\n```\n\nAs we can see, the function `User` returns an object with public properties and methods. The only benefit of this method is that we can omit `new`: write `let user = User(...)` instead of `let user = new User(...)`. In other aspects it's almost the same as the functional pattern.\n\n## Prototype-based classes\n\nPrototype-based classes are the most important and generally the best. Functional and factory class patterns are rarely used in practice.\n\nSoon you'll see why.\n\nHere's the same class rewritten using prototypes:\n\n```js run\nfunction User(name, birthday) {\n*!*\n  this._name = name;\n  this._birthday = birthday;\n*/!*\n}\n\n*!*\nUser.prototype._calcAge = function() {\n*/!*\n  return new Date().getFullYear() - this._birthday.getFullYear();\n};\n\nUser.prototype.sayHi = function() {\n  alert(`${this._name}, age:${this._calcAge()}`);\n};\n\nlet user = new User(\"John\", new Date(2000, 0, 1));\nuser.sayHi(); // John, age:17\n```\n\nThe code structure:\n\n- The constructor `User` only initializes the current object state.\n- Methods are added to `User.prototype`.\n\nAs we can see, methods are lexically not inside `function User`, they do not share a common lexical environment. If we declare variables inside `function User`, then they won't be visible to methods.\n\nSo, there is a widely known agreement that internal properties and methods are prepended with an underscore `\"_\"`. Like `_name` or `_calcAge()`. Technically, that's just an agreement, the outer code still can access them. But most developers recognize the meaning of `\"_\"` and try not to touch prefixed properties and methods in the external code.\n\nHere are the advantages over the functional pattern:\n\n- In the functional pattern, each object has its own copy of every method. We assign a separate copy of `this.sayHi = function() {...}` and other methods in the constructor.\n- In the prototypal pattern, all methods are in `User.prototype` that is shared between all user objects. An object itself only stores the data.\n\nSo the prototypal pattern is more memory-efficient.\n\n...But not only that. Prototypes allow us to setup the inheritance in a really efficient way. Built-in JavaScript objects all use prototypes. Also there's a special syntax construct: \"class\" that provides nice-looking syntax for them. And there's more, so let's go on with them.\n\n## Prototype-based inheritance for classes\n\nLet's say we have two prototype-based classes.\n\n`Rabbit`:\n\n```js\nfunction Rabbit(name) {\n  this.name = name;\n}\n\nRabbit.prototype.jump = function() {\n  alert(`${this.name} jumps!`);\n};\n\nlet rabbit = new Rabbit(\"My rabbit\");\n```\n\n![](rabbit-animal-independent-1.png)\n\n...And `Animal`:\n\n```js\nfunction Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.eat = function() {\n  alert(`${this.name} eats.`);\n};\n\nlet animal = new Animal(\"My animal\");\n```\n\n![](rabbit-animal-independent-2.png)\n\nRight now they are fully independent.\n\nBut we'd want `Rabbit` to extend `Animal`. In other words, rabbits should be based on animals, have access to methods of `Animal` and extend them with its own methods.\n\nWhat does it mean in the language of prototypes?\n\nRight now methods for `rabbit` objects are in `Rabbit.prototype`. We'd like `rabbit` to use `Animal.prototype` as a \"fallback\", if the method is not found in `Rabbit.prototype`.\n\nSo the prototype chain should be `rabbit` -> `Rabbit.prototype` -> `Animal.prototype`.\n\nLike this:\n\n![](class-inheritance-rabbit-animal.png)\n\nThe code to implement that:\n\n```js run\n// Same Animal as before\nfunction Animal(name) {\n  this.name = name;\n}\n\n// All animals can eat, right?\nAnimal.prototype.eat = function() {\n  alert(`${this.name} eats.`);\n};\n\n// Same Rabbit as before\nfunction Rabbit(name) {\n  this.name = name;\n}\n\nRabbit.prototype.jump = function() {\n  alert(`${this.name} jumps!`);\n};\n\n*!*\n// setup the inheritance chain\nRabbit.prototype.__proto__ = Animal.prototype; // (*)\n*/!*\n\nlet rabbit = new Rabbit(\"White Rabbit\");\n*!*\nrabbit.eat(); // rabbits can eat too\n*/!*\nrabbit.jump();\n```\n\nThe line `(*)` sets up the prototype chain. So that `rabbit` first searches methods in `Rabbit.prototype`, then `Animal.prototype`. And then, just for completeness, let's mention that if the method is not found in `Animal.prototype`, then the search continues in `Object.prototype`, because `Animal.prototype` is a regular plain object, so it inherits from it.\n\nSo here's the full picture:\n\n![](class-inheritance-rabbit-animal-2.png)\n\n## Summary\n\nThe term \"class\" comes from the object-oriented programming. In JavaScript it usually means the functional class pattern or the prototypal pattern. The prototypal pattern is more powerful and memory-efficient, so it's recommended to stick to it.\n\nAccording to the prototypal pattern:\n1. Methods are stored in `Class.prototype`.\n2. Prototypes inherit from each other.\n\nIn the next chapter we'll study `class` keyword and construct. It allows to write prototypal classes shorter and provides some additional benefits.","libs":[],"children":["inheritance-error-assign","rewrite-to-prototypes"],"parent":"object-oriented-programming"}},"inheritance-error-assign":{"type":"Task","value":{"title":"An error in the inheritance","slug":"inheritance-error-assign","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/08-class-patterns/1-inheritance-error-assign","weight":1,"libs":[],"importance":5,"content":"\nFind an error in the prototypal inheritance below.\n\nWhat's wrong? What are consequences going to be?\n\n```js\nfunction Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.walk = function() {\n  alert(this.name + ' walks');\n};\n\nfunction Rabbit(name) {\n  this.name = name;\n}\n\nRabbit.prototype = Animal.prototype;\n\nRabbit.prototype.walk = function() {\n  alert(this.name + \" bounces!\");\n};\n```","solution":"Here's the line with the error:\n\n```js\nRabbit.prototype = Animal.prototype;\n```\n\nHere `Rabbit.prototype` and `Animal.prototype` become the same object. So methods of both classes become mixed in that object.\n\nAs a result, `Rabbit.prototype.walk` overwrites `Animal.prototype.walk`, so all animals start to bounce:\n\n```js run\nfunction Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.walk = function() {\n  alert(this.name + ' walks');\n};\n\nfunction Rabbit(name) {\n  this.name = name;\n}\n\n*!*\nRabbit.prototype = Animal.prototype;\n*/!*\n\nRabbit.prototype.walk = function() {\n  alert(this.name + \" bounces!\");\n};\n\n*!*\nlet animal = new Animal(\"pig\");\nanimal.walk(); // pig bounces!\n*/!*\n```\n\nThe correct variant would be:\n\n```js\nRabbit.prototype.__proto__ = Animal.prototype;\n// or like this:\nRabbit.prototype = Object.create(Animal.prototype);\n```\n\nThat makes prototypes separate, each of them stores methods of the corresponding class, but `Rabbit.prototype` inherits from `Animal.prototype`.","parent":"class-patterns"}},"rewrite-to-prototypes":{"type":"Task","value":{"title":"Rewrite to prototypes","slug":"rewrite-to-prototypes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/08-class-patterns/2-rewrite-to-prototypes","weight":2,"libs":[],"importance":5,"content":"\nThe `Clock` class is written in functional style. Rewrite it using prototypes.\n\nP.S. The clock ticks in the console, open it to see.","solution":"Please note that properties that were internal in functional style (`template`, `timer`) and the internal method `render` are marked private with the underscore `_`.","parent":"class-patterns"}},"class":{"type":"Article","value":{"title":"Classes","slug":"class","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/09-class/article.md","isFolder":false,"weight":9,"content":"\nThe \"class\" construct allows to define prototype-based classes with a clean, nice-looking syntax.\n\n## The \"class\" syntax\n\nThe `class` syntax is versatile, we'll start with a simple example first.\n\nHere's a prototype-based class `User`:\n\n```js run\nfunction User(name) {\n  this.name = name;\n}\n\nUser.prototype.sayHi = function() {\n  alert(this.name);\n}\n\nlet user = new User(\"John\");\nuser.sayHi();\n```\n\n...And that's the same using `class` syntax:\n\n```js run\nclass User {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHi() {\n    alert(this.name);\n  }\n\n}\n\nlet user = new User(\"John\");\nuser.sayHi();\n```\n\nIt's easy to see that the two examples are alike. Just please note that methods in a class do not have a comma between them. Novice developers sometimes forget it and put a comma between class methods, and things don't work. That's not a literal object, but a class syntax.\n\nSo, what exactly does `class` do? We may think that it defines a new language-level entity, but that would be wrong.\n\nThe `class User {...}` here actually does two things:\n\n1. Declares a variable `User` that references the function named `\"constructor\"`.\n2. Puts methods listed in the definition into `User.prototype`. Here, it includes `sayHi` and the `constructor`.\n\nHere's the code to dig into the class and see that:\n\n```js run\nclass User {\n  constructor(name) { this.name = name; }\n  sayHi() { alert(this.name); }\n}\n\n*!*\n// proof: User is the \"constructor\" function\n*/!*\nalert(User === User.prototype.constructor); // true\n\n*!*\n// proof: there are two methods in its \"prototype\"\n*/!*\nalert(Object.getOwnPropertyNames(User.prototype)); // constructor, sayHi\n```\n\nHere's the illustration of what `class User` creates:\n\n![](class-user.png)\n\n\n\nSo `class` is a special syntax to define a constructor together with its prototype methods.\n\n...But not only that. There are minor tweaks here and there:\n\nConstructors require `new`\n: Unlike a regular function, a class `constructor` can't be called without `new`:\n\n```js run\nclass User {\n  constructor() {}\n}\n\nalert(typeof User); // function\nUser(); // Error: Class constructor User cannot be invoked without 'new'\n```\n\nDifferent string output\n: If we output it like `alert(User)`, some engines show `\"class User...\"`, while others show `\"function User...\"`.\n\nPlease don't be confused: the string representation may vary, but that's still a function, there is no separate \"class\" entity in JavaScript language.\n\nClass methods are non-enumerable\n: A class definition sets `enumerable` flag to `false` for all methods in the `\"prototype\"`. That's good, because if we `for..in` over an object, we usually don't want its class methods.\n\nClasses have a default `constructor() {}`\n: If there's no `constructor` in the `class` construct, then an empty function is generated, same as if we had written `constructor() {}`.\n\nClasses always `use strict`\n: All code inside the class construct is automatically in strict mode.\n\n### Getters/setters\n\nClasses may also include getters/setters. Here's an example with `user.name` implemented using them:\n\n```js run\nclass User {\n\n  constructor(name) {\n    // invokes the setter\n    this.name = name;\n  }\n\n*!*\n  get name() {\n*/!*\n    return this._name;\n  }\n\n*!*\n  set name(value) {\n*/!*\n    if (value.length < 4) {\n      alert(\"Name is too short.\");\n      return;\n    }\n    this._name = value;\n  }\n\n}\n\nlet user = new User(\"John\");\nalert(user.name); // John\n\nuser = new User(\"\"); // Name too short.\n```\n\nInternally, getters and setters are also created on the `User` prototype, like this:\n\n```js\nObject.defineProperties(User.prototype, {\n  name: {\n    get() {\n      return this._name\n    },\n    set(name) {\n      // ...\n    }\n  }\n});\n```\n\n### Only methods\n\nUnlike object literals, no `property:value` assignments are allowed inside `class`. There may be only methods and getters/setters. There is some work going on in the specification to lift that limitation, but it's not yet there.\n\nIf we really need to put a non-function value into the prototype, then we can alter `prototype` manually, like this:\n\n```js run\nclass User { }\n\nUser.prototype.test = 5;\n\nalert( new User().test ); // 5\n```\n\nSo, technically that's possible, but we should know why we're doing it. Such properties will be shared among all objects of the class.\n\nAn \"in-class\" alternative is to use a getter:\n\n```js run\nclass User {\n  get test() {\n    return 5;\n  }\n}\n\nalert( new User().test ); // 5\n```\n\nFrom the external code, the usage is the same. But the getter variant is a bit slower.\n\n## Class Expression\n\nJust like functions, classes can be defined inside another expression, passed around, returned etc.\n\nHere's a class-returning function (\"class factory\"):\n\n```js run\nfunction makeClass(phrase) {\n*!*\n  // declare a class and return it\n  return class {\n    sayHi() {\n      alert(phrase);\n    };\n  };\n*/!*\n}\n\nlet User = makeClass(\"Hello\");\n\nnew User().sayHi(); // Hello\n```\n\nThat's quite normal if we recall that `class` is just a special form of a function-with-prototype definition.\n\nAnd, like Named Function Expressions, such classes also may have a name, that is visible inside that class only:\n\n```js run\n// \"Named Class Expression\" (alas, no such term, but that's what's going on)\nlet User = class *!*MyClass*/!* {\n  sayHi() {\n    alert(MyClass); // MyClass is visible only inside the class\n  }\n};\n\nnew User().sayHi(); // works, shows MyClass definition\n\nalert(MyClass); // error, MyClass not visible outside of the class\n```\n\n## Static methods\n\nWe can also assign methods to the class function, not to its `\"prototype\"`. Such methods are called *static*.\n\nAn example:\n\n```js run\nclass User {\n*!*\n  static staticMethod() {\n*/!*\n    alert(this === User);\n  }\n}\n\nUser.staticMethod(); // true\n```\n\nThat actually does the same as assigning it as a function property:\n\n```js\nfunction User() { }\n\nUser.staticMethod = function() {\n  alert(this === User);\n};\n```\n\nThe value of `this` inside `User.staticMethod()` is the class constructor `User` itself (the \"object before dot\" rule).\n\nUsually, static methods are used to implement functions that belong to the class, but not to any particular object of it.\n\nFor instance, we have `Article` objects and need a function to compare them. The natural choice would be `Article.compare`, like this:\n\n```js run\nclass Article {\n  constructor(title, date) {\n    this.title = title;\n    this.date = date;\n  }\n\n*!*\n  static compare(articleA, articleB) {\n    return articleA.date - articleB.date;\n  }\n*/!*\n}\n\n// usage\nlet articles = [\n  new Article(\"Mind\", new Date(2016, 1, 1)),\n  new Article(\"Body\", new Date(2016, 0, 1)),\n  new Article(\"JavaScript\", new Date(2016, 11, 1))\n];\n\n*!*\narticles.sort(Article.compare);\n*/!*\n\nalert( articles[0].title ); // Body\n```\n\nHere `Article.compare` stands \"over\" the articles, as a means to compare them. It's not a method of an article, but rather of the whole class.\n\nAnother example would be a so-called \"factory\" method. Imagine, we need few ways to create an article:\n\n1. Create by given parameters (`title`, `date` etc).\n2. Create an empty article with today's date.\n3. ...\n\nThe first way can be implemented by the constructor. And for the second one we can make a static method of the class.\n\nLike `Article.createTodays()` here:\n\n```js run\nclass Article {\n  constructor(title, date) {\n    this.title = title;\n    this.date = date;\n  }\n\n*!*\n  static createTodays() {\n    // remember, this = Article\n    return new this(\"Today's digest\", new Date());\n  }\n*/!*\n}\n\nlet article = Article.createTodays();\n\nalert( article.title ); // Todays digest\n```\n\nNow every time we need to create a today's digest, we can call `Article.createTodays()`. Once again, that's not a method of an article, but a method of the whole class.\n\nStatic methods are also used in database-related classes to search/save/remove entries from the database, like this:\n\n```js\n// assuming Article is a special class for managing articles\n// static method to remove the article:\nArticle.remove({id: 12345});\n```\n\n## Summary\n\nThe basic class syntax looks like this:\n\n```js\nclass MyClass {\n  constructor(...) {\n    // ...\n  }\n  method1(...) {}\n  method2(...) {}\n  get something(...) {}\n  set something(...) {}\n  static staticMethod(..) {}\n  // ...\n}\n```\n\nThe value of `MyClass` is a function provided as `constructor`. If there's no `constructor`, then an empty function.\n\nIn any case, methods listed in the class declaration become members of its `prototype`, with the exception of static methods that are written into the function itself and callable as `MyClass.staticMethod()`. Static methods are used when we need a function bound to a class, but not to any object of that class.\n\nIn the next chapter we'll learn more about classes, including inheritance.","libs":[],"children":["rewrite-to-class"],"parent":"object-oriented-programming"}},"rewrite-to-class":{"type":"Task","value":{"title":"Rewrite to class","slug":"rewrite-to-class","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/09-class/1-rewrite-to-class","weight":1,"libs":[],"importance":5,"content":"\nRewrite the `Clock` class from prototypes to the modern \"class\" syntax.\n\nP.S. The clock ticks in the console, open it to see.","solution":"","parent":"class"}},"class-inheritance":{"type":"Article","value":{"title":"Class inheritance, super","slug":"class-inheritance","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/10-class-inheritance/article.md","isFolder":false,"weight":10,"content":"\nClasses can extend one another. There's a nice syntax, technically based on the prototypal inheritance.\n\nTo inherit from another class, we should specify `\"extends\"` and the parent class before the brackets `{..}`.\n\nHere `Rabbit` inherits from `Animal`:\n\n```js run\nclass Animal {\n\n  constructor(name) {\n    this.speed = 0;\n    this.name = name;\n  }\n\n  run(speed) {\n    this.speed += speed;\n    alert(`${this.name} runs with speed ${this.speed}.`);\n  }\n\n  stop() {\n    this.speed = 0;\n    alert(`${this.name} stopped.`);\n  }\n\n}\n\n*!*\n// Inherit from Animal\nclass Rabbit extends Animal {\n  hide() {\n    alert(`${this.name} hides!`);\n  }\n}\n*/!*\n\nlet rabbit = new Rabbit(\"White Rabbit\");\n\nrabbit.run(5); // White Rabbit runs with speed 5.\nrabbit.hide(); // White Rabbit hides!\n```\n\nThe `extends` keyword actually adds a `[[Prototype]]` reference from `Rabbit.prototype` to `Animal.prototype`, just as you expect it to be, and as we've seen before.\n\n![](animal-rabbit-extends.png)\n\nSo now `rabbit` has access both to its own methods and to methods of `Animal`.\n\n````smart header=\"Any expression is allowed after `extends`\"\nClass syntax allows to specify not just a class, but any expression after `extends`.\n\nFor instance, a function call that generates the parent class:\n\n```js run\nfunction f(phrase) {\n  return class {\n    sayHi() { alert(phrase) }\n  }\n}\n\n*!*\nclass User extends f(\"Hello\") {}\n*/!*\n\nnew User().sayHi(); // Hello\n```\nHere `class User` inherits from the result of `f(\"Hello\")`.\n\nThat may be useful for advanced programming patterns when we use functions to generate classes depending on many conditions and can inherit from them.\n````\n\n## Overriding a method\n\nNow let's move forward and override a method. As of now, `Rabbit` inherits the `stop` method that sets `this.speed = 0` from `Animal`.\n\nIf we specify our own `stop` in `Rabbit`, then it will be used instead:\n\n```js\nclass Rabbit extends Animal {\n  stop() {\n    // ...this will be used for rabbit.stop()\n  }\n}\n```\n\n\n...But usually we don't want to totally replace a parent method, but rather to build on top of it, tweak or extend its functionality. We do something in our method, but call the parent method before/after it or in the process.\n\nClasses provide `\"super\"` keyword for that.\n\n- `super.method(...)` to call a parent method.\n- `super(...)` to call a parent constructor (inside our constructor only).\n\nFor instance, let our rabbit autohide when stopped:\n\n```js run\nclass Animal {\n\n  constructor(name) {\n    this.speed = 0;\n    this.name = name;\n  }\n\n  run(speed) {\n    this.speed += speed;\n    alert(`${this.name} runs with speed ${this.speed}.`);\n  }\n\n  stop() {\n    this.speed = 0;\n    alert(`${this.name} stopped.`);\n  }\n\n}\n\nclass Rabbit extends Animal {\n  hide() {\n    alert(`${this.name} hides!`);\n  }\n\n*!*\n  stop() {\n    super.stop(); // call parent stop\n    this.hide(); // and then hide\n  }\n*/!*\n}\n\nlet rabbit = new Rabbit(\"White Rabbit\");\n\nrabbit.run(5); // White Rabbit runs with speed 5.\nrabbit.stop(); // White Rabbit stopped. White rabbit hides!\n```\n\nNow `Rabbit` has the `stop` method that calls the parent `super.stop()` in the process.\n\n````smart header=\"Arrow functions have no `super`\"\nAs was mentioned in the chapter <info:arrow-functions>, arrow functions do not have `super`.\n\nIf accessed, it's taken from the outer function. For instance:\n```js\nclass Rabbit extends Animal {\n  stop() {\n    setTimeout(() => super.stop(), 1000); // call parent stop after 1sec\n  }\n}\n```\n\nThe `super` in the arrow function is the same as in `stop()`, so it works as intended. If we specified a \"regular\" function here, there would be an error:\n\n```js\n// Unexpected super\nsetTimeout(function() { super.stop() }, 1000);\n```\n````\n\n\n## Overriding constructor\n\nWith constructors it gets a little bit tricky.\n\nTill now, `Rabbit` did not have its own `constructor`.\n\nAccording to the [specification](https://tc39.github.io/ecma262/#sec-runtime-semantics-classdefinitionevaluation), if a class extends another class and has no `constructor`, then the following `constructor` is generated:\n\n```js\nclass Rabbit extends Animal {\n  // generated for extending classes without own constructors\n*!*\n  constructor(...args) {\n    super(...args);\n  }\n*/!*\n}\n```\n\nAs we can see, it basically calls the parent `constructor` passing it all the arguments. That happens if we don't write a constructor of our own.\n\nNow let's add a custom constructor to `Rabbit`. It will specify the `earLength` in addition to `name`:\n\n```js run\nclass Animal {\n  constructor(name) {\n    this.speed = 0;\n    this.name = name;\n  }\n  // ...\n}\n\nclass Rabbit extends Animal {\n\n*!*\n  constructor(name, earLength) {\n    this.speed = 0;\n    this.name = name;\n    this.earLength = earLength;\n  }\n*/!*\n\n  // ...\n}\n\n*!*\n// Doesn't work!\nlet rabbit = new Rabbit(\"White Rabbit\", 10); // Error: this is not defined.\n*/!*\n```\n\nWhoops! We've got an error. Now we can't create rabbits. What went wrong?\n\nThe short answer is: constructors in inheriting classes must call `super(...)`, and (!) do it before using `this`.\n\n...But why? What's going on here? Indeed, the requirement seems strange.\n\nOf course, there's an explanation. Let's get into details, so you'd really understand what's going on.\n\nIn JavaScript, there's a distinction between a \"constructor function of an inheriting class\" and all others. In an inheriting class, the corresponding constructor function is labelled with a special internal property `[[ConstructorKind]]:\"derived\"`.\n\nThe difference is:\n\n- When a normal constructor runs, it creates an empty object as `this` and continues with it.\n- But when a derived constructor runs, it doesn't do it. It expects the parent constructor to do this job.\n\nSo if we're making a constructor of our own, then we must call `super`, because otherwise the object with `this` reference to it won't be created. And we'll get an error.\n\nFor `Rabbit` to work, we need to call `super()` before using `this`, like here:\n\n```js run\nclass Animal {\n\n  constructor(name) {\n    this.speed = 0;\n    this.name = name;\n  }\n\n  // ...\n}\n\nclass Rabbit extends Animal {\n\n  constructor(name, earLength) {\n*!*\n    super(name);\n*/!*\n    this.earLength = earLength;\n  }\n\n  // ...\n}\n\n*!*\n// now fine\nlet rabbit = new Rabbit(\"White Rabbit\", 10);\nalert(rabbit.name); // White Rabbit\nalert(rabbit.earLength); // 10\n*/!*\n```\n\n\n## Super: internals, [[HomeObject]]\n\nLet's get a little deeper under the hood of `super`. We'll see some interesting things by the way.\n\nFirst to say, from all that we've learned till now, it's impossible for `super` to work.\n\nYeah, indeed, let's ask ourselves, how it could technically work? When an object method runs, it gets the current object as `this`. If we call `super.method()` then, how to retrieve the `method`? Naturally, we need to take the `method` from the prototype of the current object. How, technically, we (or a JavaScript engine) can do it?\n\nMaybe we can get the method from `[[Prototype]]` of `this`, as `this.__proto__.method`? Unfortunately, that doesn't work.\n\nLet's try to do it. Without classes, using plain objects for the sake of simplicity.\n\nHere, `rabbit.eat()` should call `animal.eat()` method of the parent object:\n\n```js run\nlet animal = {\n  name: \"Animal\",\n  eat() {\n    alert(`${this.name} eats.`);\n  }\n};\n\nlet rabbit = {\n  __proto__: animal,\n  name: \"Rabbit\",\n  eat() {\n*!*\n    // that's how super.eat() could presumably work\n    this.__proto__.eat.call(this); // (*)\n*/!*\n  }\n};\n\nrabbit.eat(); // Rabbit eats.\n```\n\nAt the line `(*)` we take `eat` from the prototype (`animal`) and call it in the context of the current object. Please note that `.call(this)` is important here, because a simple `this.__proto__.eat()` would execute parent `eat` in the context of the prototype, not the current object.\n\nAnd in the code above it actually works as intended: we have the correct `alert`.\n\nNow let's add one more object to the chain. We'll see how things break:\n\n```js run\nlet animal = {\n  name: \"Animal\",\n  eat() {\n    alert(`${this.name} eats.`);\n  }\n};\n\nlet rabbit = {\n  __proto__: animal,\n  eat() {\n    // ...bounce around rabbit-style and call parent (animal) method\n    this.__proto__.eat.call(this); // (*)\n  }\n};\n\nlet longEar = {\n  __proto__: rabbit,\n  eat() {\n    // ...do something with long ears and call parent (rabbit) method\n    this.__proto__.eat.call(this); // (**)\n  }\n};\n\n*!*\nlongEar.eat(); // Error: Maximum call stack size exceeded\n*/!*\n```\n\nThe code doesn't work anymore! We can see the error trying to call `longEar.eat()`.\n\nIt may be not that obvious, but if we trace `longEar.eat()` call, then we can see why. In both lines `(*)` and `(**)` the value of `this` is the current object (`longEar`). That's essential: all object methods get the current object as `this`, not a prototype or something.\n\nSo, in both lines `(*)` and `(**)` the value of `this.__proto__` is exactly the same: `rabbit`. They both call `rabbit.eat` without going up the chain in the endless loop.\n\nHere's the picture of what happens:\n\n![](this-super-loop.png)\n\n1. Inside `longEar.eat()`, the line `(**)` calls `rabbit.eat` providing it with `this=longEar`.\n    ```js\n    // inside longEar.eat() we have this = longEar\n    this.__proto__.eat.call(this) // (**)\n    // becomes\n    longEar.__proto__.eat.call(this)\n    // that is\n    rabbit.eat.call(this);\n    ```\n2. Then in the line `(*)` of `rabbit.eat`, we'd like to pass the call even higher in the chain, but `this=longEar`, so `this.__proto__.eat` is again `rabbit.eat`!\n\n    ```js\n    // inside rabbit.eat() we also have this = longEar\n    this.__proto__.eat.call(this) // (*)\n    // becomes\n    longEar.__proto__.eat.call(this)\n    // or (again)\n    rabbit.eat.call(this);\n    ```\n\n3. ...So `rabbit.eat` calls itself in the endless loop, because it can't ascend any further.\n\nThe problem can't be solved by using `this` alone.\n\n### `[[HomeObject]]`\n\nTo provide the solution, JavaScript adds one more special internal property for functions: `[[HomeObject]]`.\n\n**When a function is specified as a class or object method, its `[[HomeObject]]` property becomes that object.**\n\nThis actually violates the idea of \"unbound\" functions, because methods remember their objects. And `[[HomeObject]]` can't be changed, so this bound is forever. So that's a very important change in the language.\n\nBut this change is safe. `[[HomeObject]]` is used only for calling parent methods in `super`, to resolve the prototype. So it doesn't break compatibility.\n\nLet's see how it works for `super` -- again, using plain objects:\n\n```js run\nlet animal = {\n  name: \"Animal\",\n  eat() {         // [[HomeObject]] == animal\n    alert(`${this.name} eats.`);\n  }\n};\n\nlet rabbit = {\n  __proto__: animal,\n  name: \"Rabbit\",\n  eat() {         // [[HomeObject]] == rabbit\n    super.eat();\n  }\n};\n\nlet longEar = {\n  __proto__: rabbit,\n  name: \"Long Ear\",\n  eat() {         // [[HomeObject]] == longEar\n    super.eat();\n  }\n};\n\n*!*\nlongEar.eat();  // Long Ear eats.\n*/!*\n```\n\nEvery method remembers its object in the internal `[[HomeObject]]` property. Then `super` uses it to resolve the parent prototype.\n\n`[[HomeObject]]` is defined for methods defined both in classes and in plain objects. But for objects, methods must be specified exactly the given way: as `method()`, not as `\"method: function()\"`.\n\nIn the example below a non-method syntax is used for comparison. `[[HomeObject]]` property is not set and the inheritance doesn't work:\n\n```js run\nlet animal = {\n  eat: function() { // should be the short syntax: eat() {...}\n    // ...\n  }\n};\n\nlet rabbit = {\n  __proto__: animal,\n  eat: function() {\n    super.eat();\n  }\n};\n\n*!*\nrabbit.eat();  // Error calling super (because there's no [[HomeObject]])\n*/!*\n```\n\n## Static methods and inheritance\n\nThe `class` syntax supports inheritance for static properties too.\n\nFor instance:\n\n```js run\nclass Animal {\n\n  constructor(name, speed) {\n    this.speed = speed;\n    this.name = name;\n  }\n\n  run(speed = 0) {\n    this.speed += speed;\n    alert(`${this.name} runs with speed ${this.speed}.`);\n  }\n\n  static compare(animalA, animalB) {\n    return animalA.speed - animalB.speed;\n  }\n\n}\n\n// Inherit from Animal\nclass Rabbit extends Animal {\n  hide() {\n    alert(`${this.name} hides!`);\n  }\n}\n\nlet rabbits = [\n  new Rabbit(\"White Rabbit\", 10),\n  new Rabbit(\"Black Rabbit\", 5)\n];\n\nrabbits.sort(Rabbit.compare);\n\nrabbits[0].run(); // Black Rabbit runs with speed 5.\n```\n\nNow we can call `Rabbit.compare` assuming that the inherited `Animal.compare` will be called.\n\nHow does it work? Again, using prototypes. As you might have already guessed, extends also gives `Rabbit` the `[[Prototype]]` reference to `Animal`.\n\n\n![](animal-rabbit-static.png)\n\nSo, `Rabbit` function now inherits from `Animal` function. And `Animal` function normally has `[[Prototype]]` referencing `Function.prototype`, because it doesn't `extend` anything.\n\nHere, let's check that:\n\n```js run\nclass Animal {}\nclass Rabbit extends Animal {}\n\n// for static propertites and methods\nalert(Rabbit.__proto__ === Animal); // true\n\n// and the next step is Function.prototype\nalert(Animal.__proto__ === Function.prototype); // true\n\n// that's in addition to the \"normal\" prototype chain for object methods\nalert(Rabbit.prototype.__proto__ === Animal.prototype);\n```\n\nThis way `Rabbit` has access to all static methods of `Animal`.\n\n### No static inheritance in built-ins\n\nPlease note that built-in classes don't have such static `[[Prototype]]` reference. For instance, `Object` has `Object.defineProperty`, `Object.keys` and so on, but `Array`, `Date` etc do not inherit them.\n\nHere's the picture structure for `Date` and `Object`:\n\n![](object-date-inheritance.png)\n\nNote, there's no link between `Date` and `Object`. Both `Object` and `Date` exist independently. `Date.prototype` inherits from `Object.prototype`, but that's all.\n\nSuch difference exists for historical reasons: there was no thought about class syntax and inheriting static methods at the dawn of JavaScript language.\n\n## Natives are extendable\n\nBuilt-in classes like Array, Map and others are extendable also.\n\nFor instance, here `PowerArray` inherits from the native `Array`:\n\n```js run\n// add one more method to it (can do more)\nclass PowerArray extends Array {\n  isEmpty() {\n    return this.length === 0;\n  }\n}\n\nlet arr = new PowerArray(1, 2, 5, 10, 50);\nalert(arr.isEmpty()); // false\n\nlet filteredArr = arr.filter(item => item >= 10);\nalert(filteredArr); // 10, 50\nalert(filteredArr.isEmpty()); // false\n```\n\nPlease note one very interesting thing. Built-in methods like `filter`, `map` and others -- return new objects of exactly the inherited type. They rely on the `constructor` property to do so.\n\nIn the example above,\n```js\narr.constructor === PowerArray\n```\n\nSo when `arr.filter()` is called, it internally creates the new array of results exactly as `new PowerArray`. And we can keep using its methods further down the chain.\n\nEven more, we can customize that behavior. The static getter `Symbol.species`, if exists, returns the constructor to use in such cases.\n\nFor example, here due to `Symbol.species` built-in methods like `map`, `filter` will return \"normal\" arrays:\n\n```js run\nclass PowerArray extends Array {\n  isEmpty() {\n    return this.length === 0;\n  }\n\n*!*\n  // built-in methods will use this as the constructor\n  static get [Symbol.species]() {\n    return Array;\n  }\n*/!*\n}\n\nlet arr = new PowerArray(1, 2, 5, 10, 50);\nalert(arr.isEmpty()); // false\n\n// filter creates new array using arr.constructor[Symbol.species] as constructor\nlet filteredArr = arr.filter(item => item >= 10);\n\n*!*\n// filteredArr is not PowerArray, but Array\n*/!*\nalert(filteredArr.isEmpty()); // Error: filteredArr.isEmpty is not a function\n```\n\nWe can use it in more advanced keys to strip extended functionality from resulting values if not needed. Or, maybe, to extend it even further.","libs":[],"children":["class-constructor-error","clock-class-extended","class-extend-object"],"parent":"object-oriented-programming"}},"class-constructor-error":{"type":"Task","value":{"title":"Error creating an instance","slug":"class-constructor-error","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/10-class-inheritance/1-class-constructor-error","weight":1,"libs":[],"importance":5,"content":"\nHere's the code with `Rabbit` extending `Animal`.\n\nUnfortunately, `Rabbit` objects can't be created. What's wrong? Fix it.\n```js run\nclass Animal {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n}\n\nclass Rabbit extends Animal {\n  constructor(name) {  \n    this.name = name;\n    this.created = Date.now();\n  }\n}\n\n*!*\nlet rabbit = new Rabbit(\"White Rabbit\"); // Error: this is not defined\n*/!*\nalert(rabbit.name);\n```","solution":"That's because the child constructor must call `super()`.\n\nHere's the corrected code:\n\n```js run\nclass Animal {\n\n  constructor(name) {\n    this.name = name;\n  }\n\n}\n\nclass Rabbit extends Animal {\n  constructor(name) {  \n    *!*\n    super(name);\n    */!*\n    this.created = Date.now();\n  }\n}\n\n*!*\nlet rabbit = new Rabbit(\"White Rabbit\"); // ok now\n*/!*\nalert(rabbit.name); // White Rabbit\n```","parent":"class-inheritance"}},"clock-class-extended":{"type":"Task","value":{"title":"Extended clock","slug":"clock-class-extended","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/10-class-inheritance/2-clock-class-extended","weight":2,"libs":[],"importance":5,"content":"\nWe've got a `Clock` class. As of now, it prints the time every second.\n\nCreate a new class `ExtendedClock` that inherits from `Clock` and adds the parameter `precision` -- the number of `ms` between \"ticks\". Should be `1000` (1 second) by default.\n\n- Your code should be in the file `extended-clock.js`\n- Don't modify the original `clock.js`. Extend it.","solution":"","parent":"class-inheritance"}},"class-extend-object":{"type":"Task","value":{"title":"Class extends Object?","slug":"class-extend-object","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/10-class-inheritance/3-class-extend-object","weight":3,"libs":[],"importance":5,"content":"\nAs we know, all objects normally inherit from `Object.prototype` and get access to \"generic\" object methods like `hasOwnProperty` etc.\n\nFor instance:\n\n```js run\nclass Rabbit {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nlet rabbit = new Rabbit(\"Rab\");\n\n*!*\n// hasOwnProperty method is from Object.prototype\n// rabbit.__proto__ === Object.prototype\nalert( rabbit.hasOwnProperty('name') ); // true\n*/!*\n```\n\nBut if we spell it out explicitly like `\"class Rabbit extends Object\"`, then the result would be different from a simple `\"class Rabbit\"`?\n\nWhat's the difference?\n\nHere's an example of such code (it doesn't work -- why? fix it?):\n\n```js\nclass Rabbit extends Object {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nlet rabbit = new Rabbit(\"Rab\");\n\nalert( rabbit.hasOwnProperty('name') ); // true\n```","solution":"First, let's see why the latter code doesn't work.\n\nThe reason becomes obvious if we try to run it. An inheriting class constructor must call `super()`. Otherwise `\"this\"` won't be \"defined\".\n\nSo here's the fix:\n\n```js run\nclass Rabbit extends Object {\n  constructor(name) {\n*!*\n    super(); // need to call the parent constructor when inheriting\n*/!*\n    this.name = name;\n  }\n}\n\nlet rabbit = new Rabbit(\"Rab\");\n\nalert( rabbit.hasOwnProperty('name') ); // true\n```\n\nBut that's not all yet.\n\nEven after the fix, there's still important difference in `\"class Rabbit extends Object\"` versus `class Rabbit`.\n\nAs we know, the \"extends\" syntax sets up two prototypes:\n\n1. Between `\"prototype\"` of the constructor functions (for methods).\n2. Between the constructor functions itself (for static methods).\n\nIn our case, for `class Rabbit extends Object` it means:\n\n```js run\nclass Rabbit extends Object {}\n\nalert( Rabbit.prototype.__proto__ === Object.prototype ); // (1) true\nalert( Rabbit.__proto__ === Object ); // (2) true\n```\n\nSo `Rabbit` now provides access to static methods of `Object` via `Rabbit`, like this:\n\n```js run\nclass Rabbit extends Object {}\n\n*!*\n// normally we call Object.getOwnPropertyNames\nalert ( Rabbit.getOwnPropertyNames({a: 1, b: 2})); // a,b\n*/!*\n```\n\nBut if we don't have `extends Object`, then `Rabbit.__proto__` is not set to `Object`.\n\nHere's the demo:\n\n```js run\nclass Rabbit {}\n\nalert( Rabbit.prototype.__proto__ === Object.prototype ); // (1) true\nalert( Rabbit.__proto__ === Object ); // (2) false (!)\nalert( Rabbit.__proto__ === Function.prototype ); // as any function by default\n\n*!*\n// error, no such function in Rabbit\nalert ( Rabbit.getOwnPropertyNames({a: 1, b: 2})); // Error\n*/!*\n```\n\nSo `Rabbit` doesn't provide access to static methods of `Object` in that case.\n\nBy the way, `Function.prototype` has \"generic\" function methods, like `call`, `bind` etc. They are ultimately available in both cases, because for the built-in `Object` constructor, `Object.__proto__ === Function.prototype`.\n\nHere's the picture:\n\n![](rabbit-extends-object.png)\n\nSo, to put it short, there are two differences:\n\n| class Rabbit | class Rabbit extends Object  |\n|--------------|------------------------------|\n| --             | needs to call `super()` in constructor |\n| `Rabbit.__proto__ === Function.prototype` | `Rabbit.__proto__ === Object` |","parent":"class-inheritance"}},"instanceof":{"type":"Article","value":{"title":"Class checking: \"instanceof\"","slug":"instanceof","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/11-instanceof/article.md","isFolder":false,"weight":11,"content":"\nThe `instanceof` operator allows to check whether an object belongs to a certain class. It also takes inheritance into account.\n\nSuch a check may be necessary in many cases, here we'll use it for building a *polymorphic* function, the one that treats arguments differently depending on their type.\n\n## The instanceof operator [#ref-instanceof]\n\nThe syntax is:\n```js\nobj instanceof Class\n```\n\nIt returns `true` if `obj` belongs to the `Class` (or a class inheriting from it).\n\nFor instance:\n\n```js run\nclass Rabbit {}\nlet rabbit = new Rabbit();\n\n// is it an object of Rabbit class?\n*!*\nalert( rabbit instanceof Rabbit ); // true\n*/!*\n```\n\nIt also works with constructor functions:\n\n```js run\n*!*\n// instead of class\nfunction Rabbit() {}\n*/!*\n\nalert( new Rabbit() instanceof Rabbit ); // true\n```\n\n...And with built-in classes like `Array`:\n\n```js run\nlet arr = [1, 2, 3];\nalert( arr instanceof Array ); // true\nalert( arr instanceof Object ); // true\n```\n\nPlease note that `arr` also belongs to the `Object` class. That's because `Array` prototypally inherits from `Object`.\n\nThe `instanceof` operator examines the prototype chain for the check, and is also fine-tunable using the static method `Symbol.hasInstance`.\n\nThe algorithm of `obj instanceof Class` works roughly as follows:\n\n1. If there's a static method `Symbol.hasInstance`, then use it. Like this:\n\n    ```js run\n    // assume anything that canEat is an animal\n    class Animal {\n      static [Symbol.hasInstance](obj) {\n        if (obj.canEat) return true;\n      }\n    }\n\n    let obj = { canEat: true };\n    alert(obj instanceof Animal); // true: Animal[Symbol.hasInstance](obj) is called\n    ```\n\n2. Most classes do not have `Symbol.hasInstance`. In that case, check if `Class.prototype` equals to one of prototypes in the `obj` prototype chain.\n\n    In other words, compare:\n    ```js\n    obj.__proto__ === Class.prototype\n    obj.__proto__.__proto__ === Class.prototype\n    obj.__proto__.__proto__.__proto__ === Class.prototype\n    ...\n    ```\n\n    In the example above `Rabbit.prototype === rabbit.__proto__`, so that gives the answer immediately.\n\n    In the case of an inheritance, `rabbit` is an instance of the parent class as well:\n\n    ```js run\n    class Animal {}\n    class Rabbit extends Animal {}\n\n    let rabbit = new Rabbit();\n    *!*\n    alert(rabbit instanceof Animal); // true\n    */!*\n    // rabbit.__proto__ === Rabbit.prototype\n    // rabbit.__proto__.__proto__ === Animal.prototype (match!)\n    ```\n\nHere's the illustration of what `rabbit instanceof Animal` compares with `Animal.prototype`:\n\n![](instanceof.png)\n\nBy the way, there's also a method [objA.isPrototypeOf(objB)](mdn:js/object/isPrototypeOf), that returns `true` if `objA` is somewhere in the chain of prototypes for `objB`. So the test of `obj instanceof Class` can be rephrased as `Class.prototype.isPrototypeOf(obj)`.\n\nThat's funny, but the `Class` constructor itself does not participate in the check! Only the chain of prototypes and `Class.prototype` matters.\n\nThat can lead to interesting consequences when `prototype` is changed.\n\nLike here:\n\n```js run\nfunction Rabbit() {}\nlet rabbit = new Rabbit();\n\n// changed the prototype\nRabbit.prototype = {};\n\n// ...not a rabbit any more!\n*!*\nalert( rabbit instanceof Rabbit ); // false\n*/!*\n```\n\nThat's one of the reasons to avoid changing `prototype`. Just to keep safe.\n\n## Bonus: Object toString for the type\n\nWe already know that plain objects are converted to string as `[object Object]`:\n\n```js run\nlet obj = {};\n\nalert(obj); // [object Object]\nalert(obj.toString()); // the same\n```\n\nThat's their implementation of `toString`. But there's a hidden feature that makes `toString` actually much more powerful than that. We can use it as an extended `typeof` and an alternative for `instanceof`.\n\nSounds strange? Indeed. Let's demystify.\n\nBy [specification](https://tc39.github.io/ecma262/#sec-object.prototype.tostring), the built-in `toString` can be extracted from the object and executed in the context of any other value. And its result depends on that value.\n\n- For a number, it will be `[object Number]`\n- For a boolean, it will be `[object Boolean]`\n- For `null`: `[object Null]`\n- For `undefined`: `[object Undefined]`\n- For arrays: `[object Array]`\n- ...etc (customizable).\n\nLet's demonstrate:\n\n```js run\n// copy toString method into a variable for convenience\nlet objectToString = Object.prototype.toString;\n\n// what type is this?\nlet arr = [];\n\nalert( objectToString.call(arr) ); // [object Array]\n```\n\nHere we used [call](mdn:js/function/call) as described in the chapter [](info:call-apply-decorators) to execute the function `objectToString` in the context `this=arr`.\n\nInternally, the `toString` algorithm examines `this` and returns the corresponding result. More examples:\n\n```js run\nlet s = Object.prototype.toString;\n\nalert( s.call(123) ); // [object Number]\nalert( s.call(null) ); // [object Null]\nalert( s.call(alert) ); // [object Function]\n```\n\n### Symbol.toStringTag\n\nThe behavior of Object `toString` can be customized using a special object property `Symbol.toStringTag`.\n\nFor instance:\n\n```js run\nlet user = {\n  [Symbol.toStringTag]: \"User\"\n};\n\nalert( {}.toString.call(user) ); // [object User]\n```\n\nFor most environment-specific objects, there is such a property. Here are few browser specific examples:\n\n```js run\n// toStringTag for the envinronment-specific object and class:\nalert( window[Symbol.toStringTag]); // window\nalert( XMLHttpRequest.prototype[Symbol.toStringTag] ); // XMLHttpRequest\n\nalert( {}.toString.call(window) ); // [object Window]\nalert( {}.toString.call(new XMLHttpRequest()) ); // [object XMLHttpRequest]\n```\n\nAs you can see, the result is exactly `Symbol.toStringTag` (if exists), wrapped into `[object ...]`.\n\nAt the end we have \"typeof on steroids\" that not only works for primitive data types, but also for built-in objects and even can be customized.\n\nIt can be used instead of `instanceof` for built-in objects when we want to get the type as a string rather than just to check.\n\n## Summary\n\nLet's recap the type-checking methods that we know:\n\n|               | works for   |  returns      |\n|---------------|-------------|---------------|\n| `typeof`      | primitives  |  string       |\n| `{}.toString` | primitives, built-in objects, objects with `Symbol.toStringTag`   |       string |\n| `instanceof`  | objects     |  true/false   |\n\nAs we can see, `{}.toString` is technically a \"more advanced\" `typeof`.\n\nAnd `instanceof` operator really shines when we are working with a class hierarchy and want to check for the class taking into account inheritance.","libs":[],"children":["strange-instanceof"],"parent":"object-oriented-programming"}},"strange-instanceof":{"type":"Task","value":{"title":"Strange instanceof","slug":"strange-instanceof","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/11-instanceof/1-strange-instanceof","weight":1,"libs":[],"importance":5,"content":"\nWhy `instanceof` below returns `true`? We can easily see that `a` is not created by `B()`.\n\n```js run\nfunction A() {}\nfunction B() {}\n\nA.prototype = B.prototype = {};\n\nlet a = new A();\n\n*!*\nalert( a instanceof B ); // true\n*/!*\n```","solution":"Yeah, looks strange indeed.\n\nBut `instanceof` does not care about the function, but rather about its `prototype`, that it matches against the prototype chain.\n\nAnd here `a.__proto__ == B.prototype`, so `instanceof` returns `true`.\n\nSo, by the logic of `instanceof`, the `prototype` actually defines the type, not the constructor function.","parent":"instanceof"}},"mixins":{"type":"Article","value":{"title":"Mixins","slug":"mixins","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/07-object-oriented-programming/13-mixins/article.md","isFolder":false,"weight":13,"content":"\nIn JavaScript we can only inherit from a single object. There can be only one `[[Prototype]]` for an object. And a class may extend only one other class.\n\nBut sometimes that feels limiting. For instance, I have a class `StreetSweeper` and a class `Bicycle`, and want to make a `StreetSweepingBicycle`.\n\nOr, talking about programming, we have a class `Renderer` that implements templating and a class `EventEmitter` that implements event handling, and want to merge these functionalities together with a class `Page`, to make a page that can use templates and emit events.\n\nThere's a concept that can help here, called \"mixins\".\n\nAs defined in Wikipedia, a [mixin](https://en.wikipedia.org/wiki/Mixin) is a class that contains methods for use by other classes without having to be the parent class of those other classes.\n\nIn other words, a *mixin* provides methods that implement a certain behavior, but we do not use it alone, we use it to add the behavior to other classes.\n\n## A mixin example\n\nThe simplest way to make a mixin in JavaScript is to make an object with useful methods, so that we can easily merge them into a prototype of any class.\n\nFor instance here the mixin `sayHiMixin` is used to add some \"speech\" for `User`:\n\n```js run\n*!*\n// mixin\n*/!*\nlet sayHiMixin = {\n  sayHi() {\n    alert(`Hello ${this.name}`);\n  },\n  sayBye() {\n    alert(`Bye ${this.name}`);\n  }\n};\n\n*!*\n// usage:\n*/!*\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// copy the methods\nObject.assign(User.prototype, sayHiMixin);\n\n// now User can say hi\nnew User(\"Dude\").sayHi(); // Hello Dude!\n```\n\nThere's no inheritance, but a simple method copying. So `User` may extend some other class and also include the mixin to \"mix-in\" the additional methods, like this:\n\n```js\nclass User extends Person {\n  // ...\n}\n\nObject.assign(User.prototype, sayHiMixin);\n```\n\nMixins can make use of inheritance inside themselves.\n\nFor instance, here `sayHiMixin` inherits from `sayMixin`:\n\n```js run\nlet sayMixin = {\n  say(phrase) {\n    alert(phrase);\n  }\n};\n\nlet sayHiMixin = {\n  __proto__: sayMixin, // (or we could use Object.create to set the prototype here)\n\n  sayHi() {\n    *!*\n    // call parent method\n    */!*\n    super.say(`Hello ${this.name}`);\n  },\n  sayBye() {\n    super.say(`Bye ${this.name}`);\n  }\n};\n\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// copy the methods\nObject.assign(User.prototype, sayHiMixin);\n\n// now User can say hi\nnew User(\"Dude\").sayHi(); // Hello Dude!\n```\n\nPlease note that the call to the parent method `super.say()` from `sayHiMixin` looks for the method in the prototype of that mixin, not the class.\n\n![](mixin-inheritance.png)\n\nThat's because methods from `sayHiMixin` have `[[HomeObject]]` set to it. So `super` actually means `sayHiMixin.__proto__`, not `User.__proto__`.\n\n## EventMixin\n\nNow let's make a mixin for real life.\n\nThe important feature of many objects is working with events.\n\nThat is: an object should have a method to \"generate an event\" when something important happens to it, and other objects should be able to \"listen\" to such events.\n\nAn event must have a name and, optionally, bundle some additional data.\n\nFor instance, an object `user` can generate an event `\"login\"` when the visitor logs in. And another object `calendar` may want to receive such events to load the calendar for the logged-in person.\n\nOr, a `menu` can generate the event `\"select\"` when a menu item is selected, and other objects may want to get that information and react on that event.\n\nEvents is a way to \"share information\" with anyone who wants it. They can be useful in any class, so let's make a mixin for them:\n\n```js run\nlet eventMixin = {\n  /**\n   * Subscribe to event, usage:\n   *  menu.on('select', function(item) { ... }\n  */\n  on(eventName, handler) {\n    if (!this._eventHandlers) this._eventHandlers = {};\n    if (!this._eventHandlers[eventName]) {\n      this._eventHandlers[eventName] = [];\n    }\n    this._eventHandlers[eventName].push(handler);\n  },\n\n  /**\n   * Cancel the subscription, usage:\n   *  menu.off('select', handler)\n   */\n  off(eventName, handler) {\n    let handlers = this._eventHandlers && this._eventHandlers[eventName];\n    if (!handlers) return;\n    for (let i = 0; i < handlers.length; i++) {\n      if (handlers[i] === handler) {\n        handlers.splice(i--, 1);\n      }\n    }\n  },\n\n  /**\n   * Generate the event and attach the data to it\n   *  this.trigger('select', data1, data2);\n   */\n  trigger(eventName, ...args) {\n    if (!this._eventHandlers || !this._eventHandlers[eventName]) {\n      return; // no handlers for that event name\n    }\n\n    // call the handlers\n    this._eventHandlers[eventName].forEach(handler => handler.apply(this, args));\n  }\n};\n```\n\nThere are 3 methods here:\n\n1. `.on(eventName, handler)` -- assigns function `handler` to run when the event with that name happens. The handlers are stored in the `_eventHandlers` property.\n2. `.off(eventName, handler)` -- removes the function from the handlers list.\n3. `.trigger(eventName, ...args)` -- generates the event: all assigned handlers are called and `args` are passed as arguments to them.\n\n\nUsage:\n\n```js run\n// Make a class\nclass Menu {\n  choose(value) {\n    this.trigger(\"select\", value);\n  }\n}\n// Add the mixin\nObject.assign(Menu.prototype, eventMixin);\n\nlet menu = new Menu();\n\n// call the handler on selection:\n*!*\nmenu.on(\"select\", value => alert(`Value selected: ${value}`));\n*/!*\n\n// triggers the event => shows Value selected: 123\nmenu.choose(\"123\"); // value selected\n```\n\nNow if we have the code interested to react on user selection, we can bind it with `menu.on(...)`.\n\nAnd the `eventMixin` can add such behavior to as many classes as we'd like, without interfering with the inheritance chain.\n\n## Summary\n\n*Mixin* -- is a generic object-oriented programming term: a class that contains methods for other classes.\n\nSome other languages like e.g. python allow to create mixins using multiple inheritance. JavaScript does not support multiple inheritance, but mixins can be implemented by copying them into the prototype.\n\nWe can use mixins as a way to augment a class by multiple behaviors, like event-handling as we have seen above.\n\nMixins may become a point of conflict if they occasionally overwrite native class methods. So generally one should think well about the naming for a mixin, to minimize such possibility.","libs":[],"children":[],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,108,101,116,32,101,118,101,110,116,77,105,120,105,110,32,61,32,123,10,10,32,32,47,42,42,10,32,32,32,42,32,83,117,98,115,99,114,105,98,101,32,116,111,32,101,118,101,110,116,44,32,117,115,97,103,101,58,10,32,32,32,42,32,32,109,101,110,117,46,111,110,40,39,115,101,108,101,99,116,39,44,32,102,117,110,99,116,105,111,110,40,105,116,101,109,41,32,123,32,46,46,46,32,125,10,32,32,42,47,10,32,32,111,110,40,101,118,101,110,116,78,97,109,101,44,32,104,97,110,100,108,101,114,41,32,123,10,32,32,32,32,105,102,32,40,33,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,41,32,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,32,61,32,123,125,59,10,32,32,32,32,105,102,32,40,33,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,91,101,118,101,110,116,78,97,109,101,93,41,32,123,10,32,32,32,32,32,32,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,91,101,118,101,110,116,78,97,109,101,93,32,61,32,91,93,59,10,32,32,32,32,125,10,32,32,32,32,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,91,101,118,101,110,116,78,97,109,101,93,46,112,117,115,104,40,104,97,110,100,108,101,114,41,59,10,32,32,125,44,10,10,32,32,47,42,42,10,32,32,32,42,32,67,97,110,99,101,108,32,116,104,101,32,115,117,98,115,99,114,105,112,116,105,111,110,44,32,117,115,97,103,101,58,10,32,32,32,42,32,32,109,101,110,117,46,111,102,102,40,39,115,101,108,101,99,116,39,44,32,104,97,110,100,108,101,114,41,10,32,32,32,42,47,10,32,32,111,102,102,40,101,118,101,110,116,78,97,109,101,44,32,104,97,110,100,108,101,114,41,32,123,10,32,32,32,32,108,101,116,32,104,97,110,100,108,101,114,115,32,61,32,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,32,38,38,32,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,91,101,118,101,110,116,78,97,109,101,93,59,10,32,32,32,32,105,102,32,40,33,104,97,110,100,108,101,114,115,41,32,114,101,116,117,114,110,59,10,32,32,32,32,102,111,114,40,108,101,116,32,105,32,61,32,48,59,32,105,32,60,32,104,97,110,100,108,101,114,115,46,108,101,110,103,116,104,59,32,105,43,43,41,32,123,10,32,32,32,32,32,32,105,102,32,40,104,97,110,100,108,101,114,115,91,105,93,32,61,61,32,104,97,110,100,108,101,114,41,32,123,10,32,32,32,32,32,32,32,32,104,97,110,100,108,101,114,115,46,115,112,108,105,99,101,40,105,45,45,44,32,49,41,59,10,32,32,32,32,32,32,125,10,32,32,32,32,125,10,32,32,125,44,10,10,32,32,47,42,42,10,32,32,32,42,32,71,101,110,101,114,97,116,101,32,116,104,101,32,101,118,101,110,116,32,97,110,100,32,97,116,116,97,99,104,32,116,104,101,32,100,97,116,97,32,116,111,32,105,116,10,32,32,32,42,32,32,116,104,105,115,46,116,114,105,103,103,101,114,40,39,115,101,108,101,99,116,39,44,32,100,97,116,97,49,44,32,100,97,116,97,50,41,59,10,32,32,32,42,47,10,32,32,116,114,105,103,103,101,114,40,101,118,101,110,116,78,97,109,101,44,32,46,46,46,97,114,103,115,41,32,123,10,32,32,32,32,105,102,32,40,33,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,32,124,124,32,33,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,91,101,118,101,110,116,78,97,109,101,93,41,32,123,10,32,32,32,32,32,32,114,101,116,117,114,110,59,32,47,47,32,110,111,32,104,97,110,100,108,101,114,115,32,102,111,114,32,116,104,97,116,32,101,118,101,110,116,32,110,97,109,101,10,32,32,32,32,125,10,10,32,32,32,32,47,47,32,99,97,108,108,32,116,104,101,32,104,97,110,100,108,101,114,115,10,32,32,32,32,116,104,105,115,46,95,101,118,101,110,116,72,97,110,100,108,101,114,115,91,101,118,101,110,116,78,97,109,101,93,46,102,111,114,69,97,99,104,40,104,97,110,100,108,101,114,32,61,62,32,104,97,110,100,108,101,114,46,97,112,112,108,121,40,116,104,105,115,44,32,97,114,103,115,41,41,59,10,32,32,125,10,125,59,10,60,47,115,99,114,105,112,116,62,10]},"parent":"object-oriented-programming"}},"error-handling":{"type":"Article","value":{"title":"Error handling","slug":"error-handling","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/08-error-handling","isFolder":true,"weight":8,"content":"","libs":[],"children":["try-catch","custom-errors"],"parent":"js"}},"try-catch":{"type":"Article","value":{"title":"Error handling, \"try..catch\"","slug":"try-catch","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/08-error-handling/1-try-catch/article.md","isFolder":false,"weight":1,"content":"\nNo matter how great we are at programming, sometimes our scripts have errors. They may occur because of our mistakes, an unexpected user input, an erroneous server response and for a thousand of other reasons.\n\nUsually, a script \"dies\" (immediately stops) in case of an error, printing it to console.\n\nBut there's a syntax construct `try..catch` that allows to \"catch\" errors and, instead of dying, do something more reasonable.\n\n## The \"try..catch\" syntax\n\nThe `try..catch` construct has two main blocks: `try`, and then `catch`:\n\n```js\ntry {\n\n  // code...\n\n} catch (err) {\n\n  // error handling\n\n}\n```\n\nIt works like this:\n\n1. First, the code in `try {...}` is executed.\n2. If there were no errors, then `catch(err)` is ignored: the execution reaches the end of `try` and then jumps over `catch`.\n3. If an error occurs, then `try` execution is stopped, and the control flows to the beginning of `catch(err)`. The `err` variable (can use any name for it) contains an error object with details about what's happened.\n\n![](try-catch-flow.png)\n\nSo, an error inside the `try {…}` block does not kill the script: we have a chance to handle it in `catch`.\n\nLet's see more examples.\n\n- An errorless example: shows `alert` `(1)` and `(2)`:\n\n    ```js run\n    try {\n\n      alert('Start of try runs');  // *!*(1) <--*/!*\n\n      // ...no errors here\n\n      alert('End of try runs');   // *!*(2) <--*/!*\n\n    } catch(err) {\n\n      alert('Catch is ignored, because there are no errors'); // (3)\n\n    }\n\n    alert(\"...Then the execution continues\");\n    ```\n- An example with an error: shows `(1)` and `(3)`:\n\n    ```js run\n    try {\n\n      alert('Start of try runs');  // *!*(1) <--*/!*\n\n    *!*\n      lalala; // error, variable is not defined!\n    */!*\n\n      alert('End of try (never reached)');  // (2)\n\n    } catch(err) {\n\n      alert(`Error has occured!`); // *!*(3) <--*/!*\n\n    }\n\n    alert(\"...Then the execution continues\");\n    ```\n\n\n````warn header=\"`try..catch` only works for runtime errors\"\nFor `try..catch` to work, the code must be runnable. In other words, it should be valid JavaScript.\n\nIt won't work if the code is syntactically wrong, for instance it has unmatched curly braces:\n\n```js run\ntry {\n  {{{{{{{{{{{{\n} catch(e) {\n  alert(\"The engine can't understand this code, it's invalid\");\n}\n```\n\nThe JavaScript engine first reads the code, and then runs it. The errors that occur on the reading phrase are called \"parse-time\" errors and are unrecoverable (from inside that code). That's because the engine can't understand the code.\n\nSo, `try..catch` can only handle errors that occur in the valid code. Such errors are called \"runtime errors\" or, sometimes, \"exceptions\".\n````\n\n\n````warn header=\"`try..catch` works synchronously\"\nIf an exception happens in \"scheduled\" code, like in `setTimeout`, then `try..catch` won't catch it:\n\n```js run\ntry {\n  setTimeout(function() {\n    noSuchVariable; // script will die here\n  }, 1000);\n} catch (e) {\n  alert( \"won't work\" );\n}\n```\n\nThat's because `try..catch` actually wraps the `setTimeout` call that schedules the function. But the function itself is executed later, when the engine has already left the `try..catch` construct.\n\nTo catch an exception inside a scheduled function, `try..catch` must be inside that function:\n```js run\nsetTimeout(function() {\n  try {    \n    noSuchVariable; // try..catch handles the error!\n  } catch (e) {\n    alert( \"error is caught here!\" );\n  }\n}, 1000);\n```\n````\n\n## Error object\n\nWhen an error occurs, JavaScript generates an object containing the details about it. The object is then passed as an argument to `catch`:\n\n```js\ntry {\n  // ...\n} catch(err) { // <-- the \"error object\", could use another word instead of err\n  // ...\n}\n```\n\nFor all built-in errors, the error object inside `catch` block has two main properties:\n\n`name`\n: Error name. For an undefined variable that's `\"ReferenceError\"`.\n\n`message`\n: Textual message about error details.\n\nThere are other non-standard properties available in most environments. One of most widely used and supported is:\n\n`stack`\n: Current call stack: a string with information about the sequence of nested calls that led to the error. Used for debugging purposes.\n\nFor instance:\n\n```js run untrusted\ntry {\n*!*\n  lalala; // error, variable is not defined!\n*/!*\n} catch(err) {\n  alert(err.name); // ReferenceError\n  alert(err.message); // lalala is not defined\n  alert(err.stack); // ReferenceError: lalala is not defined at ...\n\n  // Can also show an error as a whole\n  // The error is converted to string as \"name: message\"\n  alert(err); // ReferenceError: lalala is not defined\n}\n```\n\n\n## Using \"try..catch\"\n\nLet's explore a real-life use case of `try..catch`.\n\nAs we already know, JavaScript supports the [JSON.parse(str)](mdn:js/JSON/parse) method to read JSON-encoded values.\n\nUsually it's used to decode data received over the network, from the server or another source.\n\nWe receive it and call `JSON.parse`, like this:\n\n```js run\nlet json = '{\"name\":\"John\", \"age\": 30}'; // data from the server\n\n*!*\nlet user = JSON.parse(json); // convert the text representation to JS object\n*/!*\n\n// now user is an object with properties from the string\nalert( user.name ); // John\nalert( user.age );  // 30\n```\n\nYou can find more detailed information about JSON in the <info:json> chapter.\n\n**If `json` is malformed, `JSON.parse` generates an error, so the script \"dies\".**\n\nShould we be satisfied with that? Of course, not!\n\nThis way, if something's wrong with the data, the visitor will never know that (unless he opens developer console). And people really don't like when something \"just dies\" without any error message.\n\nLet's use `try..catch` to handle the error:\n\n```js run\nlet json = \"{ bad json }\";\n\ntry {\n\n*!*\n  let user = JSON.parse(json); // <-- when an error occurs...\n*/!*\n  alert( user.name ); // doesn't work\n\n} catch (e) {\n*!*\n  // ...the execution jumps here\n  alert( \"Our apologies, the data has errors, we'll try to request it one more time.\" );\n  alert( e.name );\n  alert( e.message );\n*/!*\n}\n```\n\nHere we use the `catch` block only to show the message, but we can do much more: send a new network request, suggest an alternative to the visitor, send information about the error to a logging facility, ... . All much better than just dying.\n\n## Throwing our own errors\n\nWhat if `json` is syntactically correct, but doesn't have a required `name` property?\n\nLike this:\n\n```js run\nlet json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n\n  let user = JSON.parse(json); // <-- no errors\n*!*\n  alert( user.name ); // no name!\n*/!*\n\n} catch (e) {\n  alert( \"doesn't execute\" );\n}\n```\n\nHere `JSON.parse` runs normally, but the absence of `name` is actually an error for us.\n\nTo unify error handling, we'll use the `throw` operator.\n\n### \"Throw\" operator\n\nThe `throw` operator generates an error.\n\nThe syntax is:\n\n```js\nthrow <error object>\n```\n\nTechnically, we can use anything as an error object. That may be even a primitive, like a number or a string, but it's better to use objects, preferrably with `name` and `message` properties (to stay somewhat compatible with built-in errors).\n\nJavaScript has many built-in constructors for standard errors: `Error`, `SyntaxError`, `ReferenceError`, `TypeError` and others. We can use them to create error objects as well.\n\nTheir syntax is:\n\n```js\nlet error = new Error(message);\n// or\nlet error = new SyntaxError(message);\nlet error = new ReferenceError(message);\n// ...\n```\n\nFor built-in errors (not for any objects, just for errors), the `name` property is exactly the name of the constructor. And `message` is taken from the argument.\n\nFor instance:\n\n```js run\nlet error = new Error(\"Things happen o_O\");\n\nalert(error.name); // Error\nalert(error.message); // Things happen o_O\n```\n\nLet's see what kind of error `JSON.parse` generates:\n\n```js run\ntry {\n  JSON.parse(\"{ bad json o_O }\");\n} catch(e) {\n*!*\n  alert(e.name); // SyntaxError\n*/!*\n  alert(e.message); // Unexpected token o in JSON at position 0\n}\n```\n\nAs we can see, that's a `SyntaxError`.\n\nAnd in our case, the absence of `name` could be treated as a syntax error also, assuming that users must have a `name`.\n\nSo let's throw it:\n\n```js run\nlet json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n\n  let user = JSON.parse(json); // <-- no errors\n\n  if (!user.name) {\n*!*\n    throw new SyntaxError(\"Incomplete data: no name\"); // (*)\n*/!*\n  }\n\n  alert( user.name );\n\n} catch(e) {\n  alert( \"JSON Error: \" + e.message ); // JSON Error: Incomplete data: no name\n}\n```\n\nIn the line `(*)`, the `throw` operator generates a `SyntaxError` with the given `message`, the same way as JavaScript would generate it itself. The execution of `try` immediately stops and the control flow jumps into `catch`.\n\nNow `catch` became a single place for all error handling: both for `JSON.parse` and other cases.\n\n## Rethrowing\n\nIn the example above we use `try..catch` to handle incorrect data. But is it possible that *another unexpected error* occurs within the `try {...}` block? Like a variable is undefined or something else, not just that \"incorrect data\" thing.\n\nLike this:\n\n```js run\nlet json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n  user = JSON.parse(json); // <-- forgot to put \"let\" before user\n\n  // ...\n} catch(err) {\n  alert(\"JSON Error: \" + err); // JSON Error: ReferenceError: user is not defined\n  // (no JSON Error actually)\n}\n```\n\nOf course, everything's possible! Programmers do make mistakes. Even in open-source utilities used by millions for decades -- suddenly a crazy bug may be discovered that leads to terrible hacks (like it happened with the `ssh` tool).\n\nIn our case, `try..catch` is meant to catch \"incorrect data\" errors. But by its nature, `catch` gets *all* errors from `try`. Here it gets an unexpected error, but still shows the same `\"JSON Error\"` message. That's wrong and also makes the code more difficult to debug.\n\nFortunately, we can find out which error we get, for instance from its `name`:\n\n```js run\ntry {\n  user = { /*...*/ };\n} catch(e) {\n*!*\n  alert(e.name); // \"ReferenceError\" for accessing an undefined variable\n*/!*\n}\n```\n\nThe rule is simple:\n\n**Catch should only process errors that it knows and \"rethrow\" all others.**\n\nThe \"rethrowing\" technique can be explained in more detail as:\n\n1. Catch gets all errors.\n2. In `catch(err) {...}` block we analyze the error object `err`.\n2. If we don't know how to handle it, then we do `throw err`.\n\nIn the code below, we use rethrowing so that `catch` only handles `SyntaxError`:\n\n```js run\nlet json = '{ \"age\": 30 }'; // incomplete data\ntry {\n\n  let user = JSON.parse(json);\n\n  if (!user.name) {\n    throw new SyntaxError(\"Incomplete data: no name\");\n  }\n\n*!*\n  blabla(); // unexpected error\n*/!*\n\n  alert( user.name );\n\n} catch(e) {\n\n*!*\n  if (e.name == \"SyntaxError\") {\n    alert( \"JSON Error: \" + e.message );\n  } else {\n    throw e; // rethrow (*)\n  }\n*/!*\n\n}\n```\n\nThe error throwing on line `(*)` from inside `catch` block \"falls out\" of `try..catch` and can be either caught by an outer `try..catch` construct (if it exists), or it kills the script.\n\nSo the `catch` block actually handles only errors that it knows how to deal with and \"skips\" all others.\n\nThe example below demonstrates how such errors can be caught by one more level of `try..catch`:\n\n```js run\nfunction readData() {\n  let json = '{ \"age\": 30 }';\n\n  try {\n    // ...\n*!*\n    blabla(); // error!\n*/!*\n  } catch (e) {\n    // ...\n    if (e.name != 'SyntaxError') {\n*!*\n      throw e; // rethrow (don't know how to deal with it)\n*/!*\n    }\n  }\n}\n\ntry {\n  readData();\n} catch (e) {\n*!*\n  alert( \"External catch got: \" + e ); // caught it!\n*/!*\n}\n```\n\nHere `readData` only knows how to handle `SyntaxError`, while the outer `try..catch` knows how to handle everything.\n\n## try..catch..finally\n\nWait, that's not all.\n\nThe `try..catch` construct may have one more code clause: `finally`.\n\nIf it exists, it runs in all cases:\n\n- after `try`, if there were no errors,\n- after `catch`, if there were errors.\n\nThe extended syntax looks like this:\n\n```js\n*!*try*/!* {\n   ... try to execute the code ...\n} *!*catch*/!*(e) {\n   ... handle errors ...\n} *!*finally*/!* {\n   ... execute always ...\n}\n```\n\nTry running this code:\n\n```js run\ntry {\n  alert( 'try' );\n  if (confirm('Make an error?')) BAD_CODE();\n} catch (e) {\n  alert( 'catch' );\n} finally {\n  alert( 'finally' );\n}\n```\n\nThe code has two ways of execution:\n\n1. If you answer \"Yes\" to \"Make an error?\", then `try -> catch -> finally`.\n2. If you say \"No\", then `try -> finally`.\n\nThe `finally` clause is often used when we start doing something before `try..catch` and want to finalize it in any case of outcome.\n\nFor instance, we want to measure the time that a Fibonacci numbers function `fib(n)` takes. Naturally, we can start measuring before it runs and finish afterwards. But what if there's an error during the function call? In particular, the implementation of `fib(n)` in the code below returns an error for negative or non-integer numbers.\n\nThe `finally` clause is a great place to finish the measurements no matter what.\n\nHere `finally` guarantees that the time will be measured correctly in both situations -- in case of a successful execution of `fib` and in case of an error in it:\n\n```js run\nlet num = +prompt(\"Enter a positive integer number?\", 35)\n\nlet diff, result;\n\nfunction fib(n) {\n  if (n < 0 || Math.trunc(n) != n) {\n    throw new Error(\"Must not be negative, and also an integer.\");\n  }\n  return n <= 1 ? n : fib(n - 1) + fib(n - 2);\n}\n\nlet start = Date.now();\n\ntry {\n  result = fib(num);\n} catch (e) {\n  result = 0;\n*!*\n} finally {\n  diff = Date.now() - start;\n}\n*/!*\n\nalert(result || \"error occured\");\n\nalert( `execution took ${diff}ms` );\n```\n\nYou can check by running the code with entering `35` into `prompt` -- it executes normally, `finally` after `try`. And then enter `-1` -- there will be an immediate error, an the execution will take `0ms`. Both measurements are done correctly.\n\nIn other words, there may be two ways to exit a function: either a `return` or `throw`. The `finally` clause handles them both.\n\n\n```smart header=\"Variables are local inside `try..catch..finally`\"\nPlease note that `result` and `diff` variables in the code above are declared *before* `try..catch`.\n\nOtherwise, if `let` were made inside the `{...}` block, it would only be visible inside of it.\n```\n\n````smart header=\"`finally` and `return`\"\nThe `finally` clause works for *any* exit from `try..catch`. That includes an explicit `return`.\n\nIn the example below, there's a `return` in `try`. In this case, `finally` is executed just before the control returns to the outer code.\n\n```js run\nfunction func() {\n\n  try {\n*!*\n    return 1;\n*/!*\n\n  } catch (e) {\n    /* ... */\n  } finally {\n*!*\n    alert( 'finally' );\n*/!*\n  }\n}\n\nalert( func() ); // first works alert from finally, and then this one\n```\n````\n\n````smart header=\"`try..finally`\"\n\nThe `try..finally` construct, without `catch` clause, is also useful. We apply it when we don't want to handle errors right here, but want to be sure that processes that we started are finalized.\n\n```js\nfunction func() {\n  // start doing something that needs completion (like measurements)\n  try {\n    // ...\n  } finally {\n    // complete that thing even if all dies\n  }\n}\n```\nIn the code above, an error inside `try` always falls out, because there's no `catch`. But `finally` works before the execution flow jumps outside.\n````\n\n## Global catch\n\n```warn header=\"Environment-specific\"\nThe information from this section is not a part of the core JavaScript.\n```\n\nLet's imagine we've got a fatal error outside of `try..catch`, and the script died. Like a programming error or something else terrible.\n\nIs there a way to react on such occurrences? We may want to log the error, show something to the user (normally he doesn't see error messages) etc.\n\nThere is none in the specification, but environments usually provide it, because it's really useful. For instance, Node.JS has [process.on('uncaughtException')](https://nodejs.org/api/process.html#process_event_uncaughtexception) for that. And in the browser we can assign a function to special [window.onerror](mdn:api/GlobalEventHandlers/onerror) property. It will run in case of an uncaught error.\n\nThe syntax:\n\n```js\nwindow.onerror = function(message, url, line, col, error) {\n  // ...\n};\n```\n\n`message`\n: Error message.\n\n`url`\n: URL of the script where error happened.\n\n`line`, `col`\n: Line and column numbers where error happened.\n\n`error`\n: Error object.\n\nFor instance:\n\n```html run untrusted refresh height=1\n<script>\n*!*\n  window.onerror = function(message, url, line, col, error) {\n    alert(`${message}\\n At ${line}:${col} of ${url}`);\n  };\n*/!*\n\n  function readData() {\n    badFunc(); // Whoops, something went wrong!\n  }\n\n  readData();\n</script>\n```\n\nThe role of the global handler `window.onerror` is usually not to recover the script execution -- that's probably impossible in case of programming errors, but to send the error message to developers.\n\nThere are also web-services that provide error-logging for such cases, like <https://errorception.com> or <http://www.muscula.com>.\n\nThey work like this:\n\n1. We register at the service and get a piece of JS (or a script URL) from them to insert on pages.\n2. That JS script has a custom `window.onerror` function.\n3. When an error occurs, it sends a network request about it to the service.\n4. We can log in to the service web interface and see errors.\n\n## Summary\n\nThe `try..catch` construct allows to handle runtime errors. It literally allows to try running the code and catch errors that may occur in it.\n\nThe syntax is:\n\n```js\ntry {\n  // run this code\n} catch(err) {\n  // if an error happened, then jump here\n  // err is the error object\n} finally {\n  // do in any case after try/catch\n}\n```\n\nThere may be no `catch` section or no `finally`, so `try..catch` and `try..finally` are also valid.\n\nError objects have following properties:\n\n- `message` -- the human-readable error message.\n- `name` -- the string with error name (error constructor name).\n- `stack` (non-standard) -- the stack at the moment of error creation.\n\nWe can also generate our own errors using the `throw` operator. Technically, the argument of `throw` can be anything, but usually it's an error object inheriting from the built-in `Error` class. More on extending errors in the next chapter.\n\nRethrowing is a basic pattern of error handling: a `catch` block usually expects and knows how to handle the particular error type, so it should rethrow errors it doesn't know.\n\nEven if we don't have `try..catch`, most environments allow to setup a \"global\" error handler to catch errors that \"fall out\". In-browser that's `window.onerror`.","libs":[],"children":["finally-or-code-after"],"parent":"error-handling"}},"finally-or-code-after":{"type":"Task","value":{"title":"Finally or just the code?","slug":"finally-or-code-after","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/08-error-handling/1-try-catch/1-finally-or-code-after","weight":1,"libs":[],"importance":5,"content":"\nCompare the two code fragments.\n\n1. The first one uses `finally` to execute the code after `try..catch`:\n\n    ```js\n    try {\n      work work\n    } catch (e) {\n      handle errors\n    } finally {\n    *!*\n      cleanup the working space\n    */!*\n    }\n    ```\n2. The second fragment puts the cleaning right after `try..catch`:\n\n    ```js\n    try {\n      work work\n    } catch (e) {\n      handle errors\n    }\n\n    *!*\n    cleanup the working space\n    */!*\n    ```\n\nWe definitely need the cleanup after the work has started, doesn't matter if there was an error or not.\n\nIs there an advantage here in using `finally` or both code fragments are equal? If there is such an advantage, then give an example when it matters.","solution":"The difference becomes obvious when we look at the code inside a function.\n\nThe behavior is different if there's a \"jump out\" of `try..catch`.\n\nFor instance, when there's a `return` inside `try..catch`. The `finally` clause works in case of *any* exit from `try..catch`, even via the `return` statement: right after `try..catch` is done, but before the calling code gets the control.\n\n```js run\nfunction f() {\n  try {\n    alert('start');\n*!*\n    return \"result\";\n*/!*\n  } catch (e) {\n    /// ...\n  } finally {\n    alert('cleanup!');\n  }\n}\n\nf(); // cleanup!\n```\n\n...Or when there's a `throw`, like here:\n\n```js run\nfunction f() {\n  try {\n    alert('start');\n    throw new Error(\"an error\");\n  } catch (e) {\n    // ...\n    if(\"can't handle the error\") {\n*!*\n      throw e;\n*/!*\n    }\n\n  } finally {\n    alert('cleanup!')\n  }\n}\n\nf(); // cleanup!\n```\n\nIt's `finally` that guarantees the cleanup here. If we just put the code at the end of `f`, it wouldn't run.","parent":"try-catch"}},"custom-errors":{"type":"Article","value":{"title":"Custom errors, extending Error","slug":"custom-errors","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/08-error-handling/2-custom-errors/article.md","isFolder":false,"weight":2,"content":"\nWhen we develop something, we often need our own error classes to reflect specific things that may go wrong in our tasks. For errors in network operations we may need `HttpError`, for database operations `DbError`, for searching operations `NotFoundError` and so on.\n\nOur errors should support basic error properties like `message`, `name` and, preferably, `stack`. But they also may have other properties of their own, e.g. `HttpError` objects may have `statusCode` property with a value like `404` or `403` or `500`.\n\nJavaScript allows to use `throw` with any argument, so technically our custom error classes don't need to inherit from `Error`. But if we inherit, then it becomes possible to use `obj instanceof Error` to identify error objects. So it's better to inherit from it.\n\nAs we build our application, our own errors naturally form a hierarchy, for instance `HttpTimeoutError` may inherit from `HttpError`, and so on.\n\n## Extending Error\n\nAs an example, let's consider a function `readUser(json)` that should read JSON with user data.\n\nHere's an example of how a valid `json` may look:\n```js\nlet json = `{ \"name\": \"John\", \"age\": 30 }`;\n```\n\nInternally, we'll use `JSON.parse`. If it receives malformed `json`, then it throws `SyntaxError`.\n\nBut even if `json` is syntactically correct, that doesn't mean that it's a valid user, right? It may miss the necessary data. For instance, if may not have `name` and `age` properties that are essential for our users.\n\nOur function `readUser(json)` will not only read JSON, but check (\"validate\") the data. If there are no required fields, or the format is wrong, then that's an error. And that's not a `SyntaxError`, because the data is syntactically correct, but another kind of error. We'll call it `ValidationError` and create a class for it. An error of that kind should also carry the information about the offending field.\n\nOur `ValidationError` class should inherit from the built-in `Error` class.\n\nThat class is built-in, but we should have its approximate code before our eyes, to understand what we're extending.\n\nSo here you are:\n\n```js\n// The \"pseudocode\" for the built-in Error class defined by JavaScript itself\nclass Error {\n  constructor(message) {\n    this.message = message;\n    this.name = \"Error\"; // (different names for different built-in error classes)\n    this.stack = <nested calls>; // non-standard, but most environments support it\n  }\n}\n```\n\nNow let's go on and inherit `ValidationError` from it:\n\n```js run untrusted\n*!*\nclass ValidationError extends Error {\n*/!*\n  constructor(message) {\n    super(message); // (1)\n    this.name = \"ValidationError\"; // (2)\n  }\n}\n\nfunction test() {\n  throw new ValidationError(\"Whoops!\");\n}\n\ntry {\n  test();\n} catch(err) {\n  alert(err.message); // Whoops!\n  alert(err.name); // ValidationError\n  alert(err.stack); // a list of nested calls with line numbers for each\n}\n```\n\nPlease take a look at the constructor:\n\n1. In the line `(1)` we call the parent constructor. JavaScript requires us to call `super` in the child constructor, so that's obligatory. The parent constructor sets the `message` property.\n2. The parent constructor also sets the `name` property to `\"Error\"`, so in the line `(2)` we reset it to the right value.\n\nLet's try to use it in `readUser(json)`:\n\n```js run\nclass ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\n// Usage\nfunction readUser(json) {\n  let user = JSON.parse(json);\n\n  if (!user.age) {\n    throw new ValidationError(\"No field: age\");\n  }\n  if (!user.name) {\n    throw new ValidationError(\"No field: name\");\n  }\n\n  return user;\n}\n\n// Working example with try..catch\n\ntry {\n  let user = readUser('{ \"age\": 25 }');\n} catch (err) {\n  if (err instanceof ValidationError) {\n*!*\n    alert(\"Invalid data: \" + err.message); // Invalid data: No field: name\n*/!*\n  } else if (err instanceof SyntaxError) { // (*)\n    alert(\"JSON Syntax Error: \" + err.message);\n  } else {\n    throw err; // unknown error, rethrow it (**)\n  }\n}\n```\n\nThe `try..catch` block in the code above handles both our `ValidationError` and the built-in `SyntaxError` from `JSON.parse`.\n\nPlease take a look at how we use `instanceof` to check for the specific error type in the line `(*)`.\n\nWe could also look at `err.name`, like this:\n\n```js\n// ...\n// instead of (err instanceof SyntaxError)\n} else if (err.name == \"SyntaxError\") { // (*)\n// ...\n```  \n\nThe `instanceof` version is much better, because in the future we are going to extend `ValidationError`, make subtypes of it, like `PropertyRequiredError`. And `instanceof` check will continue to work for new inheriting classes. So that's future-proof.\n\nAlso it's important that if `catch` meets an unknown error, then it rethrows it in the line `(**)`. The `catch`  only knows how to handle validation and syntax errors, other kinds (due to a typo in the code or such) should fall through.\n\n## Further inheritance\n\nThe `ValidationError` class is very generic. Many things may go wrong. The property may be absent or it may be in a wrong format (like a string value for `age`). Let's make a more concrete class `PropertyRequiredError`, exactly for absent properties. It will carry additional information about the property that's missing.\n\n```js run\nclass ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\n*!*\nclass PropertyRequiredError extends ValidationError {\n  constructor(property) {\n    super(\"No property: \" + property);\n    this.name = \"PropertyRequiredError\";\n    this.property = property;\n  }\n}\n*/!*\n\n// Usage\nfunction readUser(json) {\n  let user = JSON.parse(json);\n\n  if (!user.age) {\n    throw new PropertyRequiredError(\"age\");\n  }\n  if (!user.name) {\n    throw new PropertyRequiredError(\"name\");\n  }\n\n  return user;\n}\n\n// Working example with try..catch\n\ntry {\n  let user = readUser('{ \"age\": 25 }');\n} catch (err) {\n  if (err instanceof ValidationError) {\n*!*\n    alert(\"Invalid data: \" + err.message); // Invalid data: No property: name\n    alert(err.name); // PropertyRequiredError\n    alert(err.property); // name\n*/!*\n  } else if (err instanceof SyntaxError) {\n    alert(\"JSON Syntax Error: \" + err.message);\n  } else {\n    throw err; // unknown error, rethrow it\n  }\n}\n```\n\nThe new class `PropertyRequiredError` is easy to use: we only need to pass the property name: `new PropertyRequiredError(property)`. The human-readable `message` is generated by the constructor.\n\nPlease note that `this.name` in `PropertyRequiredError` constructor is again assigned manually. That may become a bit tedius -- to assign `this.name = <class name>` when creating each custom error. But there's a way out. We can make our own \"basic error\" class that removes this burden from our shoulders by using `this.constructor.name` for `this.name` in the constructor. And then inherit from it.\n\nLet's call it `MyError`.\n\nHere's the code with `MyError` and other custom error classes, simplified:\n\n```js run\nclass MyError extends Error {\n  constructor(message) {\n    super(message);\n*!*\n    this.name = this.constructor.name;\n*/!*\n  }\n}\n\nclass ValidationError extends MyError { }\n\nclass PropertyRequiredError extends ValidationError {\n  constructor(property) {\n    super(\"No property: \" + property);\n    this.property = property;\n  }\n}\n\n// name is correct\nalert( new PropertyRequiredError(\"field\").name ); // PropertyRequiredError\n```\n\nNow custom errors are much shorter, especially `ValidationError`, as we got rid of the `\"this.name = ...\"` line in the constructor.\n\n## Wrapping exceptions\n\nThe purpose of the function `readUser` in the code above is \"to read the user data\", right? There may occur different kinds of errors in the process. Right now we have `SyntaxError` and `ValidationError`, but in the future `readUser` function may grow: the new code will probably generate other kinds of errors.\n\nThe code which calls `readUser` should handle these errors. Right now it uses multiple `if` in the `catch` block to check for different error types and rethrow the unknown ones. But if `readUser` function generates several kinds of errors -- then we should ask ourselves: do we really want to check for all error types one-by-one in every code that calls `readUser`?\n\nOften the answer is \"No\": the outer code wants to be \"one level above all that\". It wants to have some kind of \"data reading error\". Why exactly it happened -- is often irrelevant (the error message describes it). Or, even better if there is a way to get error details, but only if we need to.\n\nSo let's make a new class `ReadError` to represent such errors. If an error occurs inside `readUser`, we'll catch it there and generate `ReadError`. We'll also keep the reference to the original error in its `cause` property. Then the outer code will only have to check for `ReadError`.\n\nHere's the code that defines `ReadError` and demonstrates its use in `readUser` and `try..catch`:\n\n```js run\nclass ReadError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = 'ReadError';\n  }\n}\n\nclass ValidationError extends Error { /*...*/ }\nclass PropertyRequiredError extends ValidationError { /* ... */ }\n\nfunction validateUser(user) {\n  if (!user.age) {\n    throw new PropertyRequiredError(\"age\");\n  }\n\n  if (!user.name) {\n    throw new PropertyRequiredError(\"name\");\n  }\n}\n\nfunction readUser(json) {\n  let user;\n\n  try {\n    user = JSON.parse(json);\n  } catch (err) {\n*!*\n    if (err instanceof SyntaxError) {\n      throw new ReadError(\"Syntax Error\", err);\n    } else {\n      throw err;\n    }\n*/!*\n  }\n\n  try {\n    validateUser(user);\n  } catch (err) {\n*!*\n    if (err instanceof ValidationError) {\n      throw new ReadError(\"Validation Error\", err);\n    } else {\n      throw err;\n    }\n*/!*\n  }\n\n}\n\ntry {\n  readUser('{bad json}');\n} catch (e) {\n  if (e instanceof ReadError) {\n*!*\n    alert(e);\n    // Original error: SyntaxError: Unexpected token b in JSON at position 1\n    alert(\"Original error: \" + e.cause);\n*/!*\n  } else {\n    throw e;\n  }\n}\n```\n\nIn the code above, `readUser` works exactly as described -- catches syntax and validation errors and throws `ReadError` errors instead (unknown errors are rethrown as usual).\n\nSo the outer code checks `instanceof ReadError` and that's it. No need to list possible all error types.\n\nThe approach is called \"wrapping exceptions\", because we take \"low level exceptions\" and \"wrap\" them into `ReadError` that is more abstract and more convenient to use for the calling code. It is widely used in object-oriented programming.\n\n## Summary\n\n- We can inherit from `Error` and other built-in error classes normally, just need to take care of `name` property and don't forget to call `super`.\n- Most of the time, we should use `instanceof` to check for particular errors. It also works with inheritance. But sometimes we have an error object coming from the 3rd-party library and there's no easy way to get the class. Then `name` property can be used for such checks.\n- Wrapping exceptions is a widespread technique when a function handles low-level exceptions and makes a higher-level object to report about the errors. Low-level exceptions sometimes become properties of that object like `err.cause` in the examples above, but that's not strictly required.","libs":[],"children":["format-error"],"parent":"error-handling"}},"format-error":{"type":"Task","value":{"title":"Inherit from SyntaxError","slug":"format-error","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/1-js/08-error-handling/2-custom-errors/1-format-error","weight":1,"libs":[],"importance":5,"content":"\nCreate a class `FormatError` that inherits from the built-in `SyntaxError` class.\n\nIt should support `message`, `name` and `stack` properties.\n\nUsage example:\n\n```js\nlet err = new FormatError(\"formatting error\");\n\nalert( err.message ); // formatting error\nalert( err.name ); // FormatError\nalert( err.stack ); // stack\n\nalert( err instanceof FormatError ); // true\nalert( err instanceof SyntaxError ); // true (because inherits from SyntaxError)\n```","solution":"```js run untrusted\nclass FormatError extends SyntaxError {\n  constructor(message) {\n    super(message);\n    this.name = \"FormatError\";\n  }\n}\n\nlet err = new FormatError(\"formatting error\");\n\nalert( err.message ); // formatting error\nalert( err.name ); // FormatError\nalert( err.stack ); // stack\n\nalert( err instanceof SyntaxError ); // true\n```","parent":"custom-errors"}},"ui":{"type":"Article","value":{"title":"Browser: Document, Events, Interfaces","slug":"ui","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui","isFolder":true,"weight":2,"content":"\nLearning how to manage the browser page: add elements, manipulate their size and position, dynamically create interfaces and interact with the visitor.","libs":[],"children":["document","events","event-details","forms-controls"]}},"document":{"type":"Article","value":{"title":"Document","slug":"document","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document","isFolder":true,"weight":1,"content":"\nHere we'll learn to manipulate a web-page using JavaScript.","libs":[],"children":["browser-environment","dom-nodes","dom-navigation","searching-elements-dom","basic-dom-node-properties","dom-attributes-and-properties","modifying-document","styles-and-classes","size-and-scroll","size-and-scroll-window","coordinates"],"parent":"ui"}},"browser-environment":{"type":"Article","value":{"title":"Browser environment, specs","slug":"browser-environment","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/01-browser-environment/article.md","isFolder":false,"weight":1,"content":"\nThe JavaScript language was initially created for web browsers. Since then, it has evolved and become a language with many uses and platforms.\n\nA platform may be a browser, or a web-server, or a washing machine, or another *host*. Each of them provides platform-specific functionality. The JavaScript specification calls that a *host environment*.\n\nA host environment provides platform-specific objects and functions additional to the language core. Web browsers give a means to control web pages. Node.JS provides server-side features, and so on.\n\nHere's a bird's-eye view of what we have when JavaScript runs in a web-browser:\n\n![](windowObjects.png)\n\nThere's a \"root\" object called `window`. It has two roles:\n\n1. First, it is a global object for JavaScript code, as described in the chapter <info:global-object>.\n2. Second, it represents the \"browser window\" and provides methods to control it.\n\nFor instance, here we use it as a global object:\n\n```js run\nfunction sayHi() {\n  alert(\"Hello\");\n}\n\n// global functions are accessible as properties of window\nwindow.sayHi();\n```\n\nAnd here we use it as a browser window, to see the window height:\n\n```js run\nalert(window.innerHeight); // inner window height\n```\n\nThere are more window-specific methods and properties, we'll cover them later.\n\n## Document Object Model (DOM)\n\nThe `document` object gives access to the page content. We can change or create anything on the page using it.\n\nFor instance:\n```js run\n// change the background color to red\ndocument.body.style.background = \"red\";\n\n// change it back after 1 second\nsetTimeout(() => document.body.style.background = \"\", 1000);\n```\n\nHere we used `document.body.style`, but there's much, much more. Properties and methods are described in the specification. There happen to be two working groups who develop it:\n\n1. [W3C](https://en.wikipedia.org/wiki/World_Wide_Web_Consortium) -- the documentation is at <https://www.w3.org/TR/dom>.\n2. [WhatWG](https://en.wikipedia.org/wiki/WHATWG), publishing at <https://dom.spec.whatwg.org>.\n\nAs it happens, the two groups don't always agree, so it's like we have two sets of standards. But they are very similar and eventually things merge. The documentation that you can find on the given resources is very similar, with about a 99% match. There are very minor differences that you probably won't notice.\n\nPersonally, I find <https://dom.spec.whatwg.org> more pleasant to use.\n\nIn the ancient past, there was no standard at all -- each browser implemented however it wanted. Different browsers had different sets, methods, and properties for the same thing, and developers had to write different code for each of them. Dark, messy times.\n\nEven now we can sometimes meet old code that uses browser-specific properties and works around incompatibilities. But, in this tutorial we'll use modern stuff: there's no need to learn old things until you really need to (chances are high that you won't).\n\nThen the DOM standard appeared, in an attempt to bring everyone to an agreement. The first version was \"DOM Level 1\", then it was extended by DOM Level 2, then DOM Level 3, and now it's reached DOM Level 4. People from WhatWG group got tired of version numbers and are calling it just \"DOM\", without a number. So we'll do the same.\n\n```smart header=\"DOM is not only for browsers\"\nThe DOM specification explains the structure of a document and provides objects to manipulate it. There are non-browser instruments that use it too.\n\nFor instance, server-side tools that download HTML pages and process them use the DOM. They may support only a part of the specification though.\n```\n\n```smart header=\"CSSOM for styling\"\nCSS rules and stylesheets are not structured like HTML. There's a separate specification [CSSOM](https://www.w3.org/TR/cssom-1/) that explains how they are represented as objects, and how to read and write them.\n\nCSSOM is used together with DOM when we modify style rules for the document. In practice though, CSSOM is rarely required, because usually CSS rules are static. We rarely need to add/remove CSS rules from JavaScript, so we won't cover it right now.\n```\n\n## BOM (part of HTML spec)\n\nBrowser Object Model (BOM) are additional objects provided by the browser (host environment) to work with everything except the document.\n\nFor instance:\n\n- The [navigator](mdn:api/Window/navigator) object provides background information about the browser and the operating system. There are many properties, but the two most widely known are: `navigator.userAgent` -- about the current browser, and `navigator.platform` -- about the platform (can help to differ between Windows/Linux/Mac etc).\n- The [location](mdn:api/Window/location) object allows us to read the current URL and can redirect the browser to a new one.\n\nHere's how we can use the `location` object:\n\n```js run\nalert(location.href); // shows current URL\nif (confirm(\"Go to wikipedia?\")) {\n  location.href = \"https://wikipedia.org\"; // redirect the browser to another URL\n}\n```\n\nFunctions `alert/confirm/prompt` are also a part of BOM: they are directly not related to the document, but represent pure browser methods of communicating with the user.\n\n\n```smart header=\"HTML specification\"\nBOM is the part of the general [HTML specification](https://html.spec.whatwg.org).\n\nYes, you heard that right. The HTML spec at <https://html.spec.whatwg.org> is not only about the \"HTML language\" (tags, attributes), but also covers a bunch of objects, methods and browser-specific DOM extensions. That's \"HTML in broad terms\".\n```\n\n## Summary\n\nTalking about standards, we have:\n\nDOM specification\n: Describes the document structure, manipulations and events, see <https://dom.spec.whatwg.org>.\n\nCSSOM specification\n: Describes stylesheets and style rules, manipulations with them and their binding to documents, see <https://www.w3.org/TR/cssom-1/>.\n\nHTML specification\n: Describes the HTML language (e.g. tags) and also the BOM (browser object model) -- various browser functions: `setTimeout`, `alert`, `location` and so on, see <https://html.spec.whatwg.org>. It takes the DOM specification and extends it with many additional properties and methods.\n\nNow we'll get down to learning DOM, because the document plays the central role in the UI.\n\nPlease note the links above, as there's so much stuff to learn it's impossible to cover and remember everything.\n\nWhen you'd like to read about a property or a method, the Mozilla manual at <https://developer.mozilla.org/en-US/search> is a nice resource, but reading the corresponding spec may be better: it's more complex and longer to read, but will make your fundamental knowledge sound and complete.","libs":[],"children":[],"parent":"document"}},"dom-nodes":{"type":"Article","value":{"title":"DOM tree","slug":"dom-nodes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/02-dom-nodes/article.md","isFolder":false,"weight":2,"content":"\nThe backbone of an HTML document are tags.\n\nAccording to Document Object Model (DOM), every HTML-tag is an object. Nested tags are called \"children\" of the enclosing one.\n\nThe text inside a tag it is an object as well.\n\nAll these objects are accessible using JavaScript.\n\n## An example of DOM\n\nFor instance, let's explore the DOM for this document:\n\n```html run no-beautify\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title>About elks</title>\n</head>\n<body>\n  The truth about elks.\n</body>\n</html>\n```\n\nThe DOM represents HTML as a tree structure of tags. Here's how it looks:\n\n<div class=\"domtree\"></div>\n\n<script>\nlet node1 = {\"name\":\"HTML\",\"nodeType\":1,\"children\":[{\"name\":\"HEAD\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n    \"},{\"name\":\"TITLE\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"About elks\"}]},{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n  \"}]},{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n  \"},{\"name\":\"BODY\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n  The truth about elks.\"}]}]}\n\ndrawHtmlTree(node1, 'div.domtree', 690, 320);\n</script>\n\n```online\nOn the picture above, you can click on element nodes and their children will open/collapse.\n```\n\nTags are called *element nodes* (or just elements). Nested tags become children of the enclosing ones. As a result we have a tree of elements: `<html>` is at the root, then `<head>` and `<body>` are its children, etc.\n\nThe text inside elements forms *text nodes*, labelled as `#text`. A text node contains only a string. It may not have children and is always a leaf of the tree.\n\nFor instance, the `<title>` tag has the text `\"About elks\"`.\n\nPlease note the special characters in text nodes:\n\n- a newline: `↵` (in JavaScript known as `\\n`)\n- a space: `␣`\n\nSpaces and newlines -- are totally valid characters, they form text nodes and become a part of the DOM. So, for instance, in the example above the `<head>` tag contains some spaces before `<title>`, and that text becomes a `#text` node (it contains a newline and some spaces only).\n\nThere are only two top-level exclusions:\n1. Spaces and newlines before `<head>` are ignored for historical reasons,\n2. If we put something after `</body>`, then that is automatically moved inside the `body`, at the end, as the HTML spec requires that all content must be inside `<body>`. So there may be no spaces after `</body>`.\n\nIn other cases everything's straightforward -- if there are spaces (just like any character) in the document, then they become text nodes in DOM, and if we remove them, then there won't be any.\n\nHere are no space-only text nodes:\n\n```html no-beautify\n<!DOCTYPE HTML>\n<html><head><title>About elks</title></head><body>The truth about elks.</body></html>\n```\n\n<div class=\"domtree\"></div>\n\n<script>\nlet node2 = {\"name\":\"HTML\",\"nodeType\":1,\"children\":[{\"name\":\"HEAD\",\"nodeType\":1,\"children\":[{\"name\":\"TITLE\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"About elks\"}]}]},{\"name\":\"BODY\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"The truth about elks.\"}]}]}\n\ndrawHtmlTree(node2, 'div.domtree', 690, 210);\n</script>\n\n```smart header=\"Edge spaces and in-between empty text are usually hidden in tools\"\nBrowser tools (to be covered soon) that work with DOM usually do not show spaces at the start/end of the text and empty text nodes (line-breaks) between tags.\n\nThat's because they are mainly used to decorate HTML, and do not affect how it is shown (in most cases).\n\nOn further DOM pictures we'll sometimes omit them where they are irrelevant, to keep things short.\n```\n\n\n## Autocorrection\n\nIf the browser encounters malformed HTML, it automatically corrects it when making DOM.\n\nFor instance, the top tag is always `<html>`. Even if it doesn't exist in the document -- it will exist in the DOM, the browser will create it. The same goes for `<body>`.\n\nAs an example, if the HTML file is a single word `\"Hello\"`, the browser will wrap it into `<html>` and `<body>`, add the required `<head>`, and the DOM will be:\n\n\n<div class=\"domtree\"></div>\n\n<script>\nlet node3 = {\"name\":\"HTML\",\"nodeType\":1,\"children\":[{\"name\":\"HEAD\",\"nodeType\":1,\"children\":[]},{\"name\":\"BODY\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"Hello\"}]}]}\n\ndrawHtmlTree(node3, 'div.domtree', 690, 150);\n</script>\n\nWhile generating the DOM, browsers automatically process errors in the document, close tags and so on.\n\nSuch an \"invalid\" document:\n\n```html no-beautify\n<p>Hello\n<li>Mom\n<li>and\n<li>Dad\n```\n\n...Will become a normal DOM, as the browser reads tags and restores the missing parts:\n\n<div class=\"domtree\"></div>\n\n<script>\nlet node4 = {\"name\":\"HTML\",\"nodeType\":1,\"children\":[{\"name\":\"HEAD\",\"nodeType\":1,\"children\":[]},{\"name\":\"BODY\",\"nodeType\":1,\"children\":[{\"name\":\"P\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"Hello\"}]},{\"name\":\"LI\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"Mom\"}]},{\"name\":\"LI\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"and\"}]},{\"name\":\"LI\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"Dad\"}]}]}]}\n\ndrawHtmlTree(node4, 'div.domtree', 690, 360);\n</script>\n\n````warn header=\"Tables always have `<tbody>`\"\nAn interesting \"special case\" is tables. By the DOM specification they must have `<tbody>`, but HTML text may (officially) omit it. Then the browser creates `<tbody>` in DOM automatically.\n\nFor the HTML:\n\n```html no-beautify\n<table id=\"table\"><tr><td>1</td></tr></table>\n```\n\nDOM-structure will be:\n<div class=\"domtree\"></div>\n\n<script>\nlet node5 = {\"name\":\"TABLE\",\"nodeType\":1,\"children\":[{\"name\":\"TBODY\",\"nodeType\":1,\"children\":[{\"name\":\"TR\",\"nodeType\":1,\"children\":[{\"name\":\"TD\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"1\"}]}]}]}]};\n\ndrawHtmlTree(node5,  'div.domtree', 600, 200);\n</script>\n\nYou see? The `<tbody>` appeared out of nowhere. You should keep this in mind while working with tables to avoid surprises.\n````\n\n## Other node types\n\nLet's add more tags and a comment to the page:\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n  The truth about elks.\n  <ol>\n    <li>An elk is a smart</li>\n*!*\n    <!-- comment -->\n*/!*\n    <li>...and cunning animal!</li>\n  </ol>\n</body>\n</html>\n```\n\n<div class=\"domtree\"></div>\n\n<script>\nlet node6 = {\"name\":\"HTML\",\"nodeType\":1,\"children\":[{\"name\":\"HEAD\",\"nodeType\":1,\"children\":[]},{\"name\":\"BODY\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n  The truth about elks.\\n    \"},{\"name\":\"OL\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n      \"},{\"name\":\"LI\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"An elk is a smart\"}]},{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n      \"},{\"name\":\"#comment\",\"nodeType\":8,\"content\":\"comment\"},{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n      \"},{\"name\":\"LI\",\"nodeType\":1,\"children\":[{\"name\":\"#text\",\"nodeType\":3,\"content\":\"...and cunning animal!\"}]},{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n    \"}]},{\"name\":\"#text\",\"nodeType\":3,\"content\":\"\\n  \\n\"}]}]};\n\ndrawHtmlTree(node6, 'div.domtree', 690, 500);\n</script>\n\nHere we see a new tree node type -- *comment node*, labeled as `#comment`.\n\nWe may think -- why a comment is added to the DOM? It doesn't affect the visual representation in any way. But there's a rule -- if something's in HTML, then it also must be in the DOM tree.\n\n**Everything in HTML, even comments, becomes a part of the DOM.**\n\nEven the `<!DOCTYPE...>` directive at the very beginning of HTML is also a DOM node. It's in the DOM tree right before `<html>`. We are not going to touch that node, we even don't draw it on diagrams for that reason, but it's there.\n\nThe `document` object that represents the whole document is, formally, a DOM node as well.\n\nThere are [12 node types](https://dom.spec.whatwg.org/#node). In practice we usually work with 4 of them:\n\n1. `document` -- the \"entry point\" into DOM.\n2. element nodes -- HTML-tags, the tree building blocks.\n3. text nodes -- contain text.\n4. comments -- sometimes we can put the information there, it won't be shown, but JS can read it from the DOM.\n\n## See it for yourself\n\nTo see the DOM structure in real-time, try [Live DOM Viewer](http://software.hixie.ch/utilities/js/live-dom-viewer/). Just type in the document, and it will show up DOM at an instant.\n\n## In the browser inspector\n\nAnother way to explore the DOM is to use the browser developer tools. Actually, that's what we use when developing.\n\nTo do so, open the web-page [elks.html](elks.html), turn on the browser developer tools and switch to the Elements tab.\n\nIt should look like this:\n\n![](elks.png)\n\nYou can see the DOM, click on elements, see their details and so on.\n\nPlease note that the DOM structure in developer tools is simplified. Text nodes are shown just as text. And there are no \"blank\" (space only) text nodes at all. That's fine, because most of the time we are interested in element nodes.\n\nClicking the <span class=\"devtools\" style=\"background-position:-328px -124px\"></span> button in the left-upper corner allows to choose a node from the webpage using a mouse (or other pointer devices) and \"inspect\" it (scroll to it in the Elements tab). This works great when we have a huge HTML page (and corresponding huge DOM) and would like to see the place of a particual element in it.\n\nAnother way to do it would be just right-clicking on a webpage and selecting \"Inspect\" in the context menu.\n\n![](inspect.png)\n\nAt the right part of the tools there are the following subtabs:\n- **Styles** -- we can see CSS applied to the current element rule by rule, including built-in rules (gray). Almost everything can be edited in-place, including the dimensions/margins/paddings of the box below.\n- **Computed** -- to see CSS applied to the element by property: for each property we can see a rule that gives it (including CSS inheritance and such).\n- **Event Listeners** -- to see event listeners attached to DOM elements (we'll cover them in the next part of the tutorial).\n- ...and so on.\n\nThe best way to study them is to click around. Most values are editable in-place.\n\n## Interaction with console\n\nAs we explore the DOM, we also may want to apply JavaScript to it. Like: get a node and run some code to modify it, to see how it looks. Here are few tips to travel between the Elements tab and the console.\n\n- Select the first `<li>` in the Elements tab.\n- Press `key:Esc` -- it will open console right below the Elements tab.\n\nNow the last selected element is available as `$0`, the previously selected is `$1` etc.\n\nWe can run commands on them. For instance, `$0.style.background = 'red'` makes the selected list item red, like this:\n\n![](domconsole0.png)\n\nFrom the other side, if we're in console and have a variable referencing a DOM node, then we can use the command `inspect(node)` to see it in the Elements pane.\n\nOr we can just output it in the console and explore \"at-place\", like `document.body` below:\n\n![](domconsole1.png)\n\nThat's for debugging purposes of course. From the next chapter on we'll access and modify DOM using JavaScript.\n\nThe browser developer tools are a great help in development: we can explore the DOM, try things and see what goes wrong.\n\n## Summary\n\nAn HTML/XML document is represented inside the browser as the DOM tree.\n\n- Tags become element nodes and form the structure.\n- Text becomes text nodes.\n- ...etc, everything in HTML has its place in DOM, even comments.\n\nWe can use developer tools to inspect DOM and modify it manually.\n\nHere we covered the basics, the most used and important actions to start with. There's an extensive documentation about Chrome Developer Tools at <https://developers.google.com/web/tools/chrome-devtools>. The best way to learn the tools is to click here and there, read menus: most options are obvious. Later, when you know them in general, read the docs and pick up the rest.\n\nDOM nodes have properties and methods that allow to travel between them, modify, move around the page and more. We'll get down to them in the next chapters.","libs":["d3","domtree"],"children":[],"headHtml":{"type":"Buffer","data":[60,115,116,121,108,101,62,10,115,112,97,110,46,100,101,118,116,111,111,108,115,32,123,10,32,32,100,105,115,112,108,97,121,58,32,105,110,108,105,110,101,45,98,108,111,99,107,59,10,32,32,98,97,99,107,103,114,111,117,110,100,45,105,109,97,103,101,58,32,117,114,108,40,47,97,114,116,105,99,108,101,47,100,111,109,45,110,111,100,101,115,47,116,111,111,108,98,97,114,66,117,116,116,111,110,71,108,121,112,104,115,46,115,118,103,41,59,10,32,32,104,101,105,103,104,116,58,49,54,112,120,59,10,32,32,119,105,100,116,104,58,49,54,112,120,59,10,125,10,60,47,115,116,121,108,101,62,10]},"parent":"document"}},"dom-navigation":{"type":"Article","value":{"title":"Walking the DOM","slug":"dom-navigation","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/03-dom-navigation/article.md","isFolder":false,"weight":3,"content":"\nThe DOM allows to do anything with elements and their contents, but first we need to reach the corresponding DOM object, get it into a variable, and then we are able to modify it.\n\nAll operations on the DOM start with the `document` object. From it we can access any node.\n\nHere's a picture of links that allow to travel between DOM nodes:\n\n![](dom-links.png)\n\nLet's discuss them in more detail.\n\n## On top: documentElement and body\n\nThe topmost tree nodes are available directly as `document` properties:\n\n`<html>` = `document.documentElement`\n: The topmost document node is `document.documentElement`. That's DOM node of `<html>` tag.\n\n`<body>` = `document.body`\n: Another widely used DOM node is the `<body>` element -- `document.body`.\n\n`<head>` = `document.head`\n: The `<head>` tag is available as `document.head`.\n\n````warn header=\"There's a catch: `document.body` can be `null`\"\nA script cannot access an element that doesn't exist at the moment of running.\n\nIn particular, if a script is inside `<head>`, then `document.body` is unavailable, because the browser did not read it yet.\n\nSo, in the example below the first `alert` shows `null`:\n\n```html run\n<html>\n\n<head>\n  <script>\n*!*\n    alert( \"From HEAD: \" + document.body ); // null, there's no <body> yet\n*/!*\n  </script>\n</head>\n\n<body>\n\n  <script>\n    alert( \"From BODY: \" + document.body ); // HTMLBodyElement, now it exists\n  </script>\n\n</body>\n</html>\n```\n````\n\n```smart header=\"In the DOM world `null` means \\\"doesn't exist\\\"\"\nIn the DOM, the `null` value means \"doesn't exist\" or \"no such node\".\n```\n\n## Children: childNodes, firstChild, lastChild\n\nThere are two terms that we'll use from now on:\n\n- **Child nodes (or children)** -- elements that are direct children. In other words, they are nested exactly in the given one. For instance, `<head>` and `<body>` are children of `<html>` element.\n- **Descendants** -- all elements that are nested in the given one, including children, their children and so on.\n\nFor instance, here `<body>` has children `<div>` and `<ul>` (and few blank text nodes):\n\n```html run\n<html>\n<body>\n  <div>Begin</div>\n\n  <ul>\n    <li>\n      <b>Information</b>\n    </li>\n  </ul>\n</body>\n</html>\n```\n\n...And if we ask for all descendants of `<body>`, then we get direct children `<div>`, `<ul>` and also more nested elements like `<li>` (being a child of `<ul>`) and `<b>` (being a child of `<li>`) -- the entire subtree.\n\n**The `childNodes` collection provides access to all child nodes, including text nodes.**\n\nThe example below shows children of `document.body`:\n\n```html run\n<html>\n<body>\n  <div>Begin</div>\n\n  <ul>\n    <li>Information</li>\n  </ul>\n\n  <div>End</div>\n\n  <script>\n*!*\n    for (let i = 0; i < document.body.childNodes.length; i++) {\n      alert( document.body.childNodes[i] ); // Text, DIV, Text, UL, ..., SCRIPT\n    }\n*/!*\n  </script>\n  ...more stuff...\n</body>\n</html>\n```\n\nPlease note an interesting detail here. If we run the example above, the last element shown is `<script>`. In fact, the document has more stuff below, but at the moment of the script execution the browser did not read it yet, so the script doesn't see it.\n\n**Properties `firstChild` and `lastChild` give fast access to the first and last children.**\n\nThey are just shorthands. If there exist child nodes, then the following is always true:\n```js\nelem.childNodes[0] === elem.firstChild\nelem.childNodes[elem.childNodes.length - 1] === elem.lastChild\n```\n\nThere's also a special function `elem.hasChildNodes()` to check whether there are any child nodes.\n\n### DOM collections\n\nAs we can see, `childNodes` looks like an array. But actually it's not an array, but rather a *collection* -- a special array-like iterable object.\n\nThere are two important consequences:\n\n1. We can use `for..of` to iterate over it:\n  ```js\n  for (let node of document.body.childNodes) {\n    alert(node); // shows all nodes from the collection\n  }\n  ```\n  That's because it's iterable (provides the `Symbol.iterator` property, as required).\n\n2. Array methods won't work, because it's not an array:\n  ```js run\n  alert(document.body.childNodes.filter); // undefined (there's no filter method!)\n  ```\n\nThe first thing is nice. The second is tolerable, because we can use `Array.from` to create a \"real\" array from the collection, if we want array methods:\n\n  ```js run\n  alert( Array.from(document.body.childNodes).filter ); // now it's there\n  ```\n\n```warn header=\"DOM collections are read-only\"\nDOM collections, and even more -- *all* navigation properties listed in this chapter are read-only.\n\nWe can't replace a child by something else assigning `childNodes[i] = ...`.\n\nChanging DOM needs other methods, we'll see them in the next chapter.\n```\n\n```warn header=\"DOM collections are live\"\nAlmost all DOM collections with minor exceptions are *live*. In other words, they reflect the current state of DOM.\n\nIf we keep a reference to `elem.childNodes`, and add/remove nodes into DOM, then they appear in the collection automatically.\n```\n\n````warn header=\"Don't use `for..in` to loop over collections\"\nCollections are iterable using `for..of`. Sometimes people try to use `for..in` for that.\n\nPlease, don't. The `for..in` loop iterates over all enumerable properties. And collections have some \"extra\" rarely used properties that we usually do not want to get:\n\n```html run\n<body>\n<script>\n  // shows 0, 1, length, item, values and more.\n  for (let prop in document.body.childNodes) alert(prop);\n</script>\n</body>\n````\n\n## Siblings and the parent\n\n*Siblings* are nodes that are children of the same parent. For instance, `<head>` and `<body>` are siblings:\n\n- `<body>` is said to be the \"next\" or \"right\" sibling of `<head>`,\n- `<head>` is said to be the \"previous\" or \"left\" sibling of `<body>`.\n\nThe parent is available as `parentNode`.\n\nThe next node in the same parent (next sibling) is `nextSibling`, and the previous one is `previousSibling`.\n\nFor instance:\n\n```html run\n<html><head></head><body><script>\n  // HTML is \"dense\" to evade extra \"blank\" text nodes.\n\n  // parent of <body> is <html>\n  alert( document.body.parentNode === document.documentElement ); // true\n\n  // after <head> goes <body>\n  alert( document.head.nextSibling ); // HTMLBodyElement\n\n  // before <body> goes <head>\n  alert( document.body.previousSibling ); // HTMLHeadElement\n</script></body></html>\n```\n\n## Element-only navigation\n\nNavigation properties listed above refer to *all* nodes. For instance, in `childNodes` we can see both text nodes, element nodes, and even comment nodes if there exist.\n\nBut for many tasks we don't want text or comment nodes. We want to manipulate element nodes that represent tags and form the structure of the page.\n\nSo let's see more navigation links that only take *element nodes* into account:\n\n![](dom-links-elements.png)\n\nThe links are similar to those given above, just with `Element` word inside:\n\n- `children` -- only those children that are element nodes.\n- `firstElementChild`, `lastElementChild` -- first and last element children.\n- `previousElementSibling`, `nextElementSibling` -- neighbour elements.\n- `parentElement` -- parent element.\n\n````smart header=\"Why `parentElement`? Can the parent be *not* an element?\"\nThe `parentElement` property returns the \"element\" parent, while `parentNode` returns \"any node\" parent. These properties are usually the same: they both get the parent.\n\nWith the one exception of `document.documentElement`:\n\n```js run\nalert( document.documentElement.parentNode ); // document\nalert( document.documentElement.parentElement ); // null\n```\n\nIn other words, the `documentElement` (`<html>`) is the root node. Formally, it has `document` as its parent. But `document` is not an element node, so `parentNode` returns it and `parentElement` does not.\n\nSometimes that matters when we're walking over the chain of parents and call a method on each of them, but `document` doesn't have it, so we exclude it.\n````\n\nLet's modify one of the examples above: replace `childNodes` with `children`. Now it shows only elements:\n\n```html run\n<html>\n<body>\n  <div>Begin</div>\n\n  <ul>\n    <li>Information</li>\n  </ul>\n\n  <div>End</div>\n\n  <script>\n*!*\n    for (let elem of document.body.children) {\n      alert(elem); // DIV, UL, DIV, SCRIPT\n    }\n*/!*\n  </script>\n  ...\n</body>\n</html>\n```\n\n## More links: tables [#dom-navigation-tables]\n\nTill now we described the basic navigation properties.\n\nCertain types of DOM elements may provide additional properties, specific to their type, for convenience.\n\nTables are a great example and important particular case of that.\n\n**The `<table>`** element supports (in addition to the given above) these properties:\n- `table.rows` -- the collection of `<tr>` elements of the table.\n- `table.caption/tHead/tFoot` -- references to elements `<caption>`, `<thead>`, `<tfoot>`.\n- `table.tBodies` -- the collection of `<tbody>` elements (can be many according to the standard).\n\n**`<thead>`, `<tfoot>`, `<tbody>`** elements provide the `rows` property:\n- `tbody.rows` -- the collection of `<tr>` inside.\n\n**`<tr>`:**\n- `tr.cells` -- the collection of `<td>` and `<th>` cells inside the given `<tr>`.\n- `tr.sectionRowIndex` -- the position (index) of the given `<tr>` inside the enclosing `<thead>/<tbody>/<tfoot>`.\n- `tr.rowIndex` -- the number of the `<tr>` in the table as a whole (including all table rows).\n\n**`<td>` and `<th>`:**\n- `td.cellIndex` -- the number of the cell inside the enclosing `<tr>`.\n\nAn example of usage:\n\n```html run height=100\n<table id=\"table\">\n  <tr>\n    <td>one</td><td>two</td>\n  </tr>\n  <tr>\n    <td>three</td><td>four</td>\n  </tr>\n</table>\n\n<script>\n  // get the content of the first row, second cell\n  alert( table.*!*rows[0].cells[1]*/!*.innerHTML ) // \"two\"\n</script>\n```\n\nThe specification: [tabular data](https://html.spec.whatwg.org/multipage/tables.html).\n\nThere are also additional navigation properties for HTML forms. We'll look at them later when start working with forms.\n\n# Summary\n\nGiven a DOM node, we can go to its immediate neighbours using navigation properties.\n\nThere are two main sets of them:\n\n- For all nodes: `parentNode`, `childNodes`, `firstChild`, `lastChild`, `previousSibling`, `nextSibling`.\n- For element nodes only: `parentElement`, `children`, `firstElementChild`, `lastElementChild`, `previousElementSibling`, `nextElementSibling`.\n\nSome types of DOM elements, e.g. tables, provide additional properties and collections to access their content.","libs":["d3","domtree"],"children":["dom-children","navigation-links-which-null","select-diagonal-cells"],"headHtml":{"type":"Buffer","data":[60,115,116,121,108,101,62,10,35,116,114,97,118,101,108,45,100,111,109,45,99,111,109,109,101,110,116,32,123,10,32,32,102,111,110,116,45,115,116,121,108,101,58,32,105,116,97,108,105,99,59,10,125,10,35,116,114,97,118,101,108,45,100,111,109,45,99,111,110,116,114,111,108,32,117,108,32,123,10,32,32,109,97,114,103,105,110,58,32,54,112,120,32,48,59,10,125,10,60,47,115,116,121,108,101,62]},"parent":"document"}},"dom-children":{"type":"Task","value":{"title":"DOM children","slug":"dom-children","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/03-dom-navigation/1-dom-children","weight":1,"libs":[],"importance":5,"content":"\nFor the page:\n\n```html\n<html>\n<body>\n  <div>Users:</div>\n  <ul>\n    <li>John</li>\n    <li>Pete</li>\n  </ul>\n</body>\n</html>\n```\n\nHow to access:\n- The `<div>` DOM node?\n- The `<ul>` DOM node?\n- The second `<li>` (with Pete)?","solution":"There are many ways, for instance:\n\n\nThe `<div>` DOM node:\n\n```js\ndocument.body.firstElementChild\n// or\ndocument.body.children[0]\n// or (the first node is space, so we take 2nd)\ndocument.body.childNodes[1]\n```\n\nThe `<ul>` DOM node:\n\n```js\ndocument.body.lastElementChild\n// or\ndocument.body.children[1]\n```\n\nThe second `<li>` (with Pete):\n\n```js\n// get <ul>, and then get its last element child\ndocument.body.lastElementChild.lastElementChild\n```","parent":"dom-navigation"}},"navigation-links-which-null":{"type":"Task","value":{"title":"The sibling question","slug":"navigation-links-which-null","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/03-dom-navigation/3-navigation-links-which-null","weight":3,"libs":[],"importance":5,"content":"\nIf `elem` -- is an arbitrary DOM element node...\n\n- Is it true that `elem.lastChild.nextSibling` is always `null`?\n- Is it true that `elem.children[0].previousSibling` is always `null` ?","solution":"1. Yes, true. The element `elem.lastChild` is always the last one, it has no `nextSibling`, so if there are children, then yes.\n2. No, wrong, because `elem.children[0]` is the first child among elements. But there may be non-element nodes before it. So `previousSibling` may be a text node.\n\nPlease note that for both cases if there are no children, then there will be an error. For instance, if `elem.lastChild` is `null`, we can't access `elem.lastChild.nextSibling`.","parent":"dom-navigation"}},"select-diagonal-cells":{"type":"Task","value":{"title":"Select all diagonal cells","slug":"select-diagonal-cells","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/03-dom-navigation/4-select-diagonal-cells","weight":4,"libs":[],"importance":5,"content":"\nWrite the code to paint all diagonal table cells in red.\n\nYou'll need to get all diagonal `<td>` from the `<table>` and paint them using the code:\n\n```js\n// td should be the reference to the table cell\ntd.style.backgroundColor = 'red';\n```\n\nThe result should be:\n\n[iframe src=\"solution\" height=180]","solution":"We'll be using `rows` and `cells` properties to access diagonal table cells.","parent":"dom-navigation"}},"searching-elements-dom":{"type":"Article","value":{"title":"Searching: getElement* and querySelector*","slug":"searching-elements-dom","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/04-searching-elements-dom/article.md","isFolder":false,"weight":4,"content":"\nDOM navigation properties are great when elements are close to each other. What if they are not? How to get an arbitrary element of the page?\n\nThere are additional searching methods for that.\n## document.getElementById or just id\n\nIf an element has the `id` attribute, then there's a global variable by the name from that `id`.\n\nWe can use it to access the element, like this:\n\n```html run\n<div id=\"*!*elem*/!*\">\n  <div id=\"*!*elem-content*/!*\">Element</div>\n</div>\n\n<script>\n  alert(elem); // DOM-element with id=\"elem\"\n  alert(window.elem); // accessing global variable like this also works\n\n  // for elem-content things are a bit more complex\n  // that has a dash inside, so it can't be a variable name\n  alert(window['elem-content']); // ...but accessible using square brackets [...]\n</script>\n```\n\nThat's unless we declare the same-named variable by our own:\n\n```html run untrusted height=0\n<div id=\"elem\"></div>\n\n<script>\n  let elem = 5;\n\n  alert(elem); // the variable overrides the element\n</script>\n```\n\nThe behavior is described [in the specification](http://www.whatwg.org/specs/web-apps/current-work/#dom-window-nameditem), but it is supported mainly for compatibility. The browser tries to help us by mixing namespaces of JS and DOM. Good for very simple scripts, but there may be name conflicts. Also, when we look in JS and don't have HTML in view, it's not obvious where the variable comes from.\n\nThe better alternative is to use a special method `document.getElementById(id)`.\n\nFor instance:\n\n```html run\n<div id=\"elem\">\n  <div id=\"elem-content\">Element</div>\n</div>\n\n<script>\n*!*\n  let elem = document.getElementById('elem');\n*/!*\n\n  elem.style.background = 'red';\n</script>\n```\n\nHere in the tutorial we'll often use `id` to directly reference an element, but that's only to keep things short. In real life `document.getElementById` is the preferred method.\n\n```smart header=\"There can be only one\"\nThe `id` must be unique. There can be only one element in the document with the given `id`.\n\nIf there are multiple elements with the same `id`, then the behavior of corresponding methods is unpredictable. The browser may return any of them at random. So please stick to the rule and keep `id` unique.\n```\n\n```warn header=\"Only `document.getElementById`, not `anyNode.getElementById`\"\nThe method `getElementById` that can be called only on `document` object. It looks for the given `id` in the whole document.\n```\n\n## getElementsBy*\n\nThere are also other methods to look for nodes:\n\n- `elem.getElementsByTagName(tag)` looks for elements with the given tag and returns the collection of them. The `tag` parameter can also be a star `\"*\"` for \"any tags\".\n\nFor instance:\n```js\n// get all divs in the document\nlet divs = document.getElementsByTagName('div');\n```\n\nThis method is callable in the context of any DOM element.\n\nLet's find all `input` tags inside the table:\n\n```html run height=50\n<table id=\"table\">\n  <tr>\n    <td>Your age:</td>\n\n    <td>\n      <label>\n        <input type=\"radio\" name=\"age\" value=\"young\" checked> less than 18\n      </label>\n      <label>\n        <input type=\"radio\" name=\"age\" value=\"mature\"> from 18 to 50\n      </label>\n      <label>\n        <input type=\"radio\" name=\"age\" value=\"senior\"> more than 60\n      </label>\n    </td>\n  </tr>\n</table>\n\n<script>\n*!*\n  let inputs = table.getElementsByTagName('input');\n*/!*\n\n  for (let input of inputs) {\n    alert( input.value + ': ' + input.checked );\n  }\n</script>\n```\n\n```warn header=\"Don't forget the `\\\"s\\\"` letter!\"\nNovice developers sometimes forget the letter `\"s\"`. That is, they try to call `getElementByTagName` instead of <code>getElement<b>s</b>ByTagName</code>.\n\nThe `\"s\"` letter is absent in `getElementById`, because it returns a single element. But `getElementsByTagName` returns a collection of elements, so there's `\"s\"` inside.\n```\n\n````warn header=\"It returns a collection, not an element!\"\nAnother widespread novice mistake is to write:\n\n```js\n// doesn't work\ndocument.getElementsByTagName('input').value = 5;\n```\n\nThat won't work, because it takes a *collection* of inputs and assigns the value to it rather than to elements inside it.\n\nWe should either iterate over the collection or get an element by its index, and then assign, like this:\n\n```js\n// should work (if there's an input)\ndocument.getElementsByTagName('input')[0].value = 5;\n```\n````\n\nThere are also other rarely used methods of this kind:\n\n- `elem.getElementsByClassName(className)` returns elements that have the given CSS class. Elements may have other classes too.\n- `document.getElementsByName(name)` returns elements with the given `name` attribute, document-wide. Exists for historical reasons, very rarely used, we mention it here only for completeness.\n\nFor instance:\n\n```html run height=50\n<form name=\"my-form\">\n  <div class=\"article\">Article</div>\n  <div class=\"long article\">Long article</div>\n</form>\n\n<script>\n  // find by name attribute\n  let form = document.getElementsByName('my-form')[0];\n\n  // find by class inside the form\n  let articles = form.getElementsByClassName('article');\n  alert(articles.length); // 2, found two elements with class \"article\"\n</script>\n```\n\n## querySelectorAll [#querySelectorAll]\n\nNow goes the heavy artillery.\n\nThe call to `elem.querySelectorAll(css)` returns all elements inside `elem` matching the given CSS selector. That's the most often used and powerful method.\n\nHere we look for all `<li>` elements that are last children:\n\n```html run\n<ul>\n  <li>The</li>\n  <li>test</li>\n</ul>\n<ul>\n  <li>has</li>\n  <li>passed</li>\n</ul>\n<script>\n*!*\n  let elements = document.querySelectorAll('ul > li:last-child');\n*/!*\n\n  for (let elem of elements) {\n    alert(elem.innerHTML); // \"test\", \"passed\"\n  }\n</script>\n```\n\nThis method is indeed powerful, because any CSS selector can be used.\n\n```smart header=\"Can use pseudo-classes as well\"\nPseudo-classes in the CSS selector like `:hover` and `:active` are also supported. For instance, `document.querySelectorAll(':hover')` will return the collection with elements that the pointer is  over now (in nesting order: from the outermost `<html>` to the most nested one).\n```\n\n\n## querySelector [#querySelector]\n\nThe call to `elem.querySelector(css)` returns the first element for the given CSS selector.\n\nIn other words, the result is the same as `elem.querySelectorAll(css)[0]`, but the latter is looking for *all* elements and picking one, while `elem.querySelector` just looks for one. So it's faster and shorter to write.\n\n## matches\n\nPrevious methods were searching the DOM.\n\nThe [elem.matches(css)](http://dom.spec.whatwg.org/#dom-element-matches) does not look for anything, it merely checks if `elem` matches the given CSS-selector. It returns `true` or `false`.\n\nThe method comes handy when we are iterating over elements (like in array or something) and trying to filter those that interest us.\n\nFor instance:\n\n```html run\n<a href=\"http://example.com/file.zip\">...</a>\n<a href=\"http://ya.ru\">...</a>\n\n<script>\n  // can be any collection instead of document.body.children\n  for (let elem of document.body.children) {\n*!*\n    if (elem.matches('a[href$=\"zip\"]')) {\n*/!*\n      alert(\"The archive reference: \" + elem.href );\n    }\n  }\n</script>\n```\n\n## closest\n\nAll elements that are directly above the given one are called its *ancestors*.\n\nIn other words, ancestors are: parent, the parent of parent, its parent and so on. The ancestors together form the chain of parents from the element to the top.\n\nThe method `elem.closest(css)` looks the nearest ancestor that matches the CSS-selector. The `elem` itself is also included in the search.\n\nIn other words, the method `closest` goes up from the element and checks each of parents. If it matches the selector, then the search stops, and the ancestor is returned.\n\nFor instance:\n\n```html run\n<h1>Contents</h1>\n\n<div class=\"contents\">\n  <ul class=\"book\">\n    <li class=\"chapter\">Chapter 1</li>\n    <li class=\"chapter\">Chapter 1</li>\n  </ul>\n</div>\n\n<script>\n  let chapter = document.querySelector('.chapter'); // LI\n\n  alert(chapter.closest('.book')); // UL\n  alert(chapter.closest('.contents')); // DIV\n\n  alert(chapter.closest('h1')); // null (because h1 is not an ancestor)\n</script>\n```\n\n## Live collections\n\nAll methods `\"getElementsBy*\"` return a *live* collection. Such collections always reflect the current state of the document and \"auto-update\" when it changes.\n\nIn the example below, there are two scripts.\n\n1. The first one creates a reference to the collection of `<div>`. As of now, it's length is `1`.\n2. The second scripts runs after the browser meets one more `<div>`, so it's length is `2`.\n\n```html run\n<div>First div</div>\n\n<script>\n  let divs = document.getElementsByTagName('div');\n  alert(divs.length); // 1\n</script>\n\n<div>Second div</div>\n\n<script>\n*!*\n  alert(divs.length); // 2\n*/!*\n</script>\n```\n\nIn contrast, `querySelectorAll` returns a *static* collection. It's like a fixed array of elements.\n\nIf we use it instead, then both scripts output `1`:\n\n\n```html run\n<div>First div</div>\n\n<script>\n  let divs = document.querySelectorAll('div');\n  alert(divs.length); // 1\n</script>\n\n<div>Second div</div>\n\n<script>\n*!*\n  alert(divs.length); // 1\n*/!*\n</script>\n```\n\nNow we can easily see the difference. The static collection did not increase after the appearance of a new `div` in the document.\n\nHere we used separate scripts to illustrate how the element addition affects the collection, but any DOM manipulations affect them. Soon we'll see more of them.\n\n## Summary\n\nThere are 6 main methods to search for nodes in DOM:\n\n<table>\n<thead>\n<tr>\n<td>Method</td>\n<td>Searches by...</td>\n<td>Can call on an element?</td>\n<td>Live?</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getElementById</code></td>\n<td><code>id</code></td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>getElementsByName</code></td>\n<td><code>name</code></td>\n<td>-</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>getElementsByTagName</code></td>\n<td>tag or <code>'*'</code></td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>getElementsByClassName</code></td>\n<td>class</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>querySelector</code></td>\n<td>CSS-selector</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>querySelectorAll</code></td>\n<td>CSS-selector</td>\n<td>✔</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n\nPlease note that methods `getElementById` and `getElementsByName` can only be called in the context of the document: `document.getElementById(...)`. But not on an element: `elem.getElementById(...)` would cause an error.\n\nOther methods can be called on elements too. For instance `elem.querySelectorAll(...)` will search inside `elem` (in the DOM subtree).\n\nBesides that:\n\n- There is `elem.matches(css)` to check if `elem` matches the given CSS selector.\n- There is `elem.closest(css)` to look for the nearest ancestor that matches the given CSS-selector. The `elem` itself is also checked.\n\nAnd let's mention one more method here to check for the child-parent relationship:\n-  `elemA.contains(elemB)` returns true if `elemB` is inside `elemA` (a descendant of `elemA`) or when `elemA==elemB`.","libs":[],"children":["find-elements","tree-info"],"parent":"document"}},"find-elements":{"type":"Task","value":{"title":"Search for elements","slug":"find-elements","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/04-searching-elements-dom/1-find-elements","weight":1,"libs":[],"importance":4,"content":"\nHere's the document with the table and form.\n\nHow to find?\n\n1. The table with `id=\"age-table\"`.\n2. All `label` elements inside that table (there should be 3 of them).\n3. The first `td` in that table (with the word \"Age\").\n4. The `form` with the name `search`.\n5. The first `input` in that form.\n6. The last `input` in that form.\n\nOpen the page [table.html](table.html) in a separate window and make use of browser tools for that.","solution":"There are many ways to do it.\n\nHere are some of them:\n\n```js\n// 1. The table with `id=\"age-table\"`.\nlet table = document.getElementById('age-table')\n\n// 2. All label elements inside that table\ntable.getElementsByTagName('label')\n// or\ndocument.querySelectorAll('#age-table label')\n\n// 3. The first td in that table (with the word \"Age\").\ntable.rows[0].cells[0]\n// or\ntable.getElementsByTagName('td')[0]\n// or\ntable.querySelector('td')\n\n// 4. The form with the name \"search\".\n// assuming there's only one element with name=\"search\"\nlet form = document.getElementsByName('search')[0]\n// or, form specifically\ndocument.querySelector('form[name=\"search\"]')\n\n// 5. The first input in that form.\nform.getElementsByTagName('input')\n// or\nform.querySelector('input')\n\n// 6. The last input in that form.\n// there's no direct query for that\nlet inputs = form.querySelectorAll('input') // search all\ninputs[inputs.length-1] // take last\n```","parent":"searching-elements-dom"}},"tree-info":{"type":"Task","value":{"title":"Count descendants","slug":"tree-info","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/04-searching-elements-dom/2-tree-info","weight":2,"libs":[],"importance":5,"content":"\nThere's a tree structured as nested `ul/li`.\n\nWrite the code that for each `<li>` shows:\n\n1. What's the text inside it (without the subtree)\n2. The number of nested `<li>` -- all descendants, including the deeply nested ones.\n\n[demo src=\"solution\"]","solution":"Let's make a loop over `<li>`:\n\n```js\nfor (let li of document.querySelectorAll('li')) {\n  ...\n}\n```\n\nIn the loop we need to get the text inside every `li`. We can read it directly from the first child node, that is the text node:\n\n```js\nfor (let li of document.querySelectorAll('li')) {\n  let title = li.firstChild.data;\n\n  // title is the text in <li> before any other nodes\n}\n```\n\nThen we can get the number of descendants `li.getElementsByTagName('li')`.","parent":"searching-elements-dom"}},"basic-dom-node-properties":{"type":"Article","value":{"title":"Node properties: type, tag and contents","slug":"basic-dom-node-properties","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/05-basic-dom-node-properties/article.md","isFolder":false,"weight":5,"content":"\nLet's get a more in-depth look at DOM nodes.\n\nIn this chapter we'll see more into what they are and their most used properties.\n\n## DOM node classes\n\nDOM nodes have different properties depending on their class. For instance, an element node corresponding to tag `<a>` has link-related properties, and the one corresponding to `<input>` has input-related properties and so on. Text nodes are not the same as element nodes. But there are also common properties and methods between all of them, because all classes of DOM nodes form a single hierarchy.\n\nEach DOM node belongs to the corresponding built-in class.\n\nThe root of the hierarchy is [EventTarget](https://dom.spec.whatwg.org/#eventtarget), that is inherited by  [Node](http://dom.spec.whatwg.org/#interface-node), and other DOM nodes inherit from it.\n\nHere's the picture, explanations to follow:\n\n![](dom-class-hierarchy.png)\n\nThe classes are:\n\n- [EventTarget](https://dom.spec.whatwg.org/#eventtarget) -- is the root \"abstract\" class. Objects of that class are never created. It serves as a base, so that all DOM nodes support so-called \"events\", we'll study them later.\n- [Node](http://dom.spec.whatwg.org/#interface-node) -- is also an \"abstract\" class, serving as a base  for DOM nodes. It provides the core tree functionality: `parentNode`, `nextSibling`, `childNodes` and so on (they are getters). Objects of `Node` class are never created. But there are concrete node classes that inherit from it, namely: `Text` for text nodes, `Element` for element nodes and more exotic ones like `Comment` for comment nodes.\n- [Element](http://dom.spec.whatwg.org/#interface-element) -- is a base class for DOM elements. It provides element-level navigation like `nextElementSibling`, `children` and searching methods like `getElementsByTagName`, `querySelector`. In the browser there may be not only HTML, but also XML and SVG documents. The `Element` class serves as a base for more specific classes: `SVGElement`, `XMLElement` and `HTMLElement`.\n- [HTMLElement](https://html.spec.whatwg.org/multipage/dom.html#htmlelement) -- is finally the basic class for all HTML elements. It is inherited by various HTML elements:\n    - [HTMLInputElement](https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement) -- the class for `<input>` elements,\n    - [HTMLBodyElement](https://html.spec.whatwg.org/multipage/semantics.html#htmlbodyelement) -- the class for `<body>` elements,\n    - [HTMLAnchorElement](https://html.spec.whatwg.org/multipage/semantics.html#htmlanchorelement) -- the class for `<a>` elements\n    - ...and so on, each tag has its own class that may provide specific properties and methods.\n\nSo, the full set of properties and methods of a given node comes as the result of the inheritance.\n\nFor example, let's consider the DOM object for an `<input>` element. It belongs to [HTMLInputElement](https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement) class. It gets properties and methods as a superposition of:\n\n- `HTMLInputElement` -- this class provides input-specific properties, and inherits from...\n- `HTMLElement` -- it provides common HTML element methods (and getters/setters) and inherits from...\n- `Element` -- provides generic element methods and inherits from...\n- `Node` -- provides common DOM node properties and inherits from...\n- `EventTarget` -- gives the support for events (to be covered),\n- ...and finally it inherits from `Object`, so \"pure object\" methods like `hasOwnProperty` are also available.\n\nTo see the DOM node class name, we can recall that an object usually has the `constructor` property. It references to the class constructor, and `constructor.name` is its name:\n\n```js run\nalert( document.body.constructor.name ); // HTMLBodyElement\n```\n\n...Or we can just `toString` it:\n\n```js run\nalert( document.body ); // [object HTMLBodyElement]\n```\n\nWe also can use `instanceof` to check the inheritance:\n\n```js run\nalert( document.body instanceof HTMLBodyElement ); // true\nalert( document.body instanceof HTMLElement ); // true\nalert( document.body instanceof Element ); // true\nalert( document.body instanceof Node ); // true\nalert( document.body instanceof EventTarget ); // true\n```\n\nAs we can see, DOM nodes are regular JavaScript objects. They use prototype-based classes for inheritance.\n\nThat's also easy to see by outputting an element with `console.dir(elem)` in a browser. There in the console you can see `HTMLElement.prototype`, `Element.prototype` and so on.\n\n```smart header=\"`console.dir(elem)` versus `console.log(elem)`\"\nMost browsers support two commands in their developer tools: `console.log` and `console.dir`. They output their arguments to the console. For JavaScript objects these commands usually do the same.\n\nBut for DOM elements they are different:\n\n- `console.log(elem)` shows the element DOM tree.\n- `console.dir(elem)` shows the element as a DOM object, good to explore its properties.\n\nTry it on `document.body`.\n```\n\n````smart header=\"IDL in the spec\"\nIn the specification, classes are described not using JavaScript, but a special [Interface description language](https://en.wikipedia.org/wiki/Interface_description_language) (IDL), that is usually easy to understand.\n\nIn IDL all properties are prepended with their types. For instance, `DOMString`, `boolean` and so on.\n\nHere's an excerpt from it, with comments:\n\n```js\n// Define HTMLInputElement\n*!*\n// The colon \":\" means that HTMLInputElement inherits from HTMLElement\n*/!*\ninterface HTMLInputElement: HTMLElement {\n  // here go properties and methods of <input> elements\n\n*!*\n  // \"DOMString\" means that these properties are strings\n*/!*\n  attribute DOMString accept;\n  attribute DOMString alt;\n  attribute DOMString autocomplete;\n  attribute DOMString value;\n\n*!*\n  // boolean property (true/false)\n  attribute boolean autofocus;\n*/!*\n  ...\n*!*\n  // now the method: \"void\" means that that returns no value\n*/!*\n  void select();\n  ...\n}\n```\n\nOther classes are somewhat similar.\n````\n\n## The \"nodeType\" property\n\nThe `nodeType` property provides an old-fashioned way to get the \"type\" of a DOM node.\n\nIt has a numeric value:\n- `elem.nodeType == 1` for element nodes,\n- `elem.nodeType == 3` for text nodes,\n- `elem.nodeType == 9` for the document object,\n- there are few other values in [the specification](https://dom.spec.whatwg.org/#node).\n\nFor instance:\n\n```html run\n<body>\n  <script>  \n  let elem = document.body;\n\n  // let's examine what it is?\n  alert(elem.nodeType); // 1 => element\n\n  // and the first child is...\n  alert(elem.firstChild.nodeType); // 3 => text\n\n  // for the document object, the type is 9\n  alert( document.nodeType ); // 9\n  </script>\n</body>\n```\n\nIn modern scripts, we can use `instanceof` and other class-based tests to see the node type, but sometimes `nodeType` may be simpler. We can only read `nodeType`, not change it.\n\n## Tag: nodeName and tagName\n\nGiven a DOM node, we can read its tag name from `nodeName` or `tagName` properties:\n\nFor instance:\n\n```js run\nalert( document.body.nodeName ); // BODY\nalert( document.body.tagName ); // BODY\n```\n\nIs there any difference between tagName and nodeName?\n\nSure, the difference is reflected in their names, but is indeed a bit subtle.\n\n- The `tagName` property exists only for `Element` nodes.\n- The `nodeName` is defined for any `Node`:\n    - for elements it means the same as `tagName`.\n    - for other node types (text, comment, etc.) it has a string with the node type.\n\nIn other words, `tagName` is only supported by element nodes (as it originates from `Element` class), while `nodeName` can say something about other node types.\n\nFor instance, let's compare `tagName` and `nodeName` for the `document` and a comment node:\n\n\n```html run\n<body><!-- comment -->\n\n  <script>\n    // for comment\n    alert( document.body.firstChild.tagName ); // undefined (no element)\n    alert( document.body.firstChild.nodeName ); // #comment\n\n    // for document\n    alert( document.tagName ); // undefined (not element)\n    alert( document.nodeName ); // #document\n  </script>\n</body>\n```\n\nIf we only deal with elements, then `tagName` is the only thing we should use.\n\n\n```smart header=\"The tag name is always uppercase except XHTML\"\nThe browser has two modes of processing documents: HTML and XML. Usually the HTML-mode is used for webpages. XML-mode is enabled when the browser receives an XML-document with the header: `Content-Type: application/xml+xhtml`.\n\nIn HTML mode `tagName/nodeName` is always uppercased: it's `BODY` either for `<body>` or `<BoDy>`.\n\nIn XML mode the case is kept \"as is\". Nowadays XML mode is rarely used.\n```\n\n\n## innerHTML: the contents\n\nThe [innerHTML](https://w3c.github.io/DOM-Parsing/#widl-Element-innerHTML) property allows to get the HTML inside the element as a string.\n\nWe can also modify it. So it's one of most powerful ways to change the page.\n\nThe example shows the contents of `document.body` and then replaces it completely:\n\n```html run\n<body>\n  <p>A paragraph</p>\n  <div>A div</div>\n\n  <script>\n    alert( document.body.innerHTML ); // read the current contents\n    document.body.innerHTML = 'The new BODY!'; // replace it\n  </script>\n\n</body>\n```\n\nWe can try to insert invalid HTML, the browser will fix our errors:\n\n```html run\n<body>\n\n  <script>\n    document.body.innerHTML = '<b>test'; // forgot to close the tag\n    alert( document.body.innerHTML ); // <b>test</b> (fixed)\n  </script>\n\n</body>\n```\n\n```smart header=\"Scripts don't execute\"\nIf `innerHTML` inserts a `<script>` tag into the document -- it doesn't execute.\n\nIt becomes a part of HTML, just as a script that has already run.\n```\n\n### Beware: \"innerHTML+=\" does a full overwrite\n\nWe can append \"more HTML\" by using `elem.innerHTML+=\"something\"`.\n\nLike this:\n\n```js\nchatDiv.innerHTML += \"<div>Hello<img src='smile.gif'/> !</div>\";\nchatDiv.innerHTML += \"How goes?\";\n```\n\nBut we should be very careful about doing it, because what's going on is *not* an addition, but a full overwrite.\n\nTechnically, these two lines do the same:\n\n```js\nelem.innerHTML += \"...\";\n// is a shorter way to write:\n*!*\nelem.innerHTML = elem.innerHTML + \"...\"\n*/!*\n```\n\nIn other words, `innerHTML+=` does this:\n\n1. The old contents is removed.\n2. The new `innerHTML` is written instead (a concatenation of the old and the new one).\n\n**As the content is \"zeroed-out\" and rewritten from the scratch, all images and other resources will be reloaded**.\n\nIn the `chatDiv` example above the line `chatDiv.innerHTML+=\"How goes?\"` re-creates the HTML content and reloads `smile.gif` (hope it's cached). If `chatDiv` has a lot of other text and images, then the reload becomes clearly visible.\n\nThere are other side-effects as well. For instance, if the existing text was selected with the mouse, then most browsers will remove the selection upon rewriting `innerHTML`. And if there was an `<input>` with a text entered by the visitor, then the text will be removed. And so on.\n\nLuckily, there are other ways to add HTML besides `innerHTML`, and we'll study them soon.\n\n## outerHTML: full HTML of the element\n\nThe `outerHTML` property contains the full HTML of the element. That's like `innerHTML` plus the element itself.\n\nHere's an example:\n\n```html run\n<div id=\"elem\">Hello <b>World</b></div>\n\n<script>\n  alert(elem.outerHTML); // <div id=\"elem\">Hello <b>World</b></div>\n</script>\n```\n\n**Beware: unlike `innerHTML`, writing to `outerHTML` does not change the element. Instead, it replaces it as a whole in the outer context.**\n\nYeah, sounds strange, and strange it is, that's why we make a separate note about it here. Take a look.\n\nConsider the example:\n\n```html run\n<div>Hello, world!</div>\n\n<script>\n  let div = document.querySelector('div');\n\n*!*\n  // replace div.outerHTML with <p>...</p>\n*/!*\n  div.outerHTML = '<p>A new element!</p>'; // (*)\n\n*!*\n  // Wow! The div is still the same!\n*/!*\n  alert(div.outerHTML); // <div>Hello, world!</div>\n</script>\n```\n\nIn the line `(*)` we take the full HTML of `<div>...</div>` and replace it by `<p>...</p>`. In the outer document we can see the new content instead of the `<div>`. But the old `div` variable is still the same.\n\nThe `outerHTML` assignment does not modify the DOM element, but extracts it from the outer context and inserts a new piece of HTML instead of it.\n\nNovice developers sometimes make an error here: they modify `div.outerHTML` and then continue to work with `div` as if it had the new content in it.\n\nThat's possible with `innerHTML`, but not with `outerHTML`.\n\nWe can write to `outerHTML`, but should keep in mind that it doesn't change the element we're writing to. It creates the new content on its place instead. We can get a reference to new elements by querying DOM.\n\n## nodeValue/data: text node content\n\nThe `innerHTML` property is only valid for element nodes.\n\nOther node types have their counterpart: `nodeValue` and `data` properties. These two are almost the same for practical use, there are only minor specification differences. So we'll use `data`, because it's shorter.\n\nWe can read it, like this:\n\n```html run height=\"50\"\n<body>\n  Hello\n  <!-- Comment -->\n  <script>\n    let text = document.body.firstChild;\n*!*\n    alert(text.data); // Hello\n*/!*\n\n    let comment = text.nextSibling;\n*!*\n    alert(comment.data); // Comment\n*/!*\n  </script>\n</body>\n```\n\nFor text nodes we can imagine a reason to read or modify them, but why comments? Usually, they are not interesting at all, but sometimes developers embed information into HTML in them, like this:\n\n```html\n<!-- if isAdmin -->\n  <div>Welcome, Admin!</div>\n<!-- /if -->\n```\n\n...Then JavaScript can read it and process embedded instructions.\n\n## textContent: pure text\n\nThe `textContent` provides access to the *text* inside the element: only text, minus all `<tags>`.\n\nFor instance:\n\n```html run\n<div id=\"news\">\n  <h1>Headline!</h1>\n  <p>Martians attack people!</p>\n</div>\n\n<script>\n  // Headline! Martians attack people!\n  alert(news.textContent);\n</script>\n```\n\nAs we can see, only text is returned, as if all `<tags>` were cut out, but the text in them remained.\n\nIn practice, reading such text is rarely needed.\n\n**Writing to `textContent` is much more useful, because it allows to write text the \"safe way\".**\n\nLet's say we have an arbitrary string, for instance entered by a user, and want to show it.\n\n- With `innerHTML` we'll have it inserted \"as HTML\", with all HTML tags.\n- With `textContent` we'll have it inserted \"as text\", all symbols are treated literally.\n\nCompare the two:\n\n```html run\n<div id=\"elem1\"></div>\n<div id=\"elem2\"></div>\n\n<script>\n  let name = prompt(\"What's your name?\", \"<b>Winnie-the-pooh!</b>\");\n\n  elem1.innerHTML = name;\n  elem2.textContent = name;\n</script>\n```\n\n1. The first `<div>` gets the name \"as HTML\": all tags become tags, so we see the bold name.\n2. The second `<div>` gets the name \"as text\", so we literally see `<b>Winnie-the-pooh!</b>`.\n\nIn most cases, we expect the text from a user, and want to treat it as text. We don't want unexpected HTML in our site. An assignment to `textContent` does exactly that.\n\n## The \"hidden\" property\n\nThe \"hidden\" attribute and the DOM property specifies whether the element is visible or not.\n\nWe can use it in HTML or assign using JavaScript, like this:\n\n```html run height=\"80\"\n<div>Both divs below are hidden</div>\n\n<div hidden>With the attribute \"hidden\"</div>\n\n<div id=\"elem\">JavaScript assigned the property \"hidden\"</div>\n\n<script>\n  elem.hidden = true;\n</script>\n```\n\nTechnically, `hidden` works the same as `style=\"display:none\"`. But it's shorter to write.\n\nHere's a blinking element:\n\n\n```html run height=50\n<div id=\"elem\">A blinking element</div>\n\n<script>\n  setInterval(() => elem.hidden = !elem.hidden, 1000);\n</script>\n```\n\n## More properties\n\nDOM elements also have additional properties, many of them provided by the class:\n\n- `value` -- the value for `<input>`, `<select>` and `<textarea>` (`HTMLInputElement`, `HTMLSelectElement`...).\n- `href` -- the \"href\" for `<a href=\"...\">` (`HTMLAnchorElement`).\n- `id` -- the value of \"id\" attribute, for all elements (`HTMLElement`).\n- ...and much more...\n\nFor instance:\n\n```html run height=\"80\"\n<input type=\"text\" id=\"elem\" value=\"value\">\n\n<script>\n  alert(elem.type); // \"text\"\n  alert(elem.id); // \"elem\"\n  alert(elem.value); // value\n</script>\n```\n\nMost standard HTML attributes have the corresponding DOM property, and we can access it like that.\n\nIf we want to know the full list of supported properties for a given class, we can find them in the specification. For instance, HTMLInputElement is documented at <https://html.spec.whatwg.org/#htmlinputelement>.\n\nOr if we'd like to get them fast or are interested in a concrete browser specification -- we can always output the element using `console.dir(elem)` and read the properties. Or explore \"DOM properties\" in the Elements tab of the browser developer tools.\n\n## Summary\n\nEach DOM node belongs to a certain class. The classes form a hierarchy. The full set of properties and methods come as the result of inheritance.\n\nMain DOM node properties are:\n\n`nodeType`\n: We can get `nodeType` from the DOM object class, but often we need just to see if it is a text or element node. The `nodeType` property is good for that. It has numeric values, most important are: `1` -- for elements,`3` -- for text nodes. Read-only.\n\n`nodeName/tagName`\n: For elements, tag name (uppercased unless XML-mode). For non-element nodes `nodeName` describes what it is. Read-only.\n\n`innerHTML`\n: The HTML content of the element. Can be modified.\n\n`outerHTML`\n: The full HTML of the element. A write operation into `elem.outerHTML` does not touch `elem` itself. Instead it gets replaced with the new HTML in the outer context.\n\n`nodeValue/data`\n: The content of a non-element node (text, comment). These two are almost the same, usually we use `data`. Can be modified.\n\n`textContent`\n: The text inside the element, basically HTML minus all `<tags>`. Writing into it puts the text inside the element, with all special characters and tags treated exactly as text. Can safely insert user-generated text and protect from unwanted HTML insertions.\n\n`hidden`\n: When set to `true`, does the same as CSS `display:none`.\n\nDOM nodes also have other properties depending on their class. For instance, `<input>` elements (`HTMLInputElement`) support `value`, `type`, while `<a>` elements (`HTMLAnchorElement`) support `href` etc. Most standard HTML attributes have a corresponding DOM property.\n\nBut HTML attributes and DOM properties are not always the same, as we'll see in the next chapter.","libs":[],"children":["lastchild-nodetype-inline","tag-in-comment","where-document-in-hierarchy"],"parent":"document"}},"lastchild-nodetype-inline":{"type":"Task","value":{"title":"What's in the nodeType?","slug":"lastchild-nodetype-inline","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/05-basic-dom-node-properties/2-lastchild-nodetype-inline","weight":2,"libs":[],"importance":5,"content":"\nWhat does the script show?\n\n```html\n<html>\n\n<body>\n  <script>\n    alert(document.body.lastChild.nodeType);\n  </script>\n</body>\n\n</html>\n```","solution":"There's a catch here.\n\nAt the time of `<script>` execution the last DOM node is exactly `<script>`, because the browser did not process the rest of the page yet.\n\nSo the result is `1` (element node).\n\n```html run height=60\n<html>\n\n<body>\n  <script>\n    alert(document.body.lastChild.nodeType);\n  </script>\n</body>\n\n</html>\n```","parent":"basic-dom-node-properties"}},"tag-in-comment":{"type":"Task","value":{"title":"Tag in comment","slug":"tag-in-comment","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/05-basic-dom-node-properties/3-tag-in-comment","weight":3,"libs":[],"importance":3,"content":"\nWhat does this code show?\n\n```html\n<script>\n  let body = document.body;\n\n  body.innerHTML = \"<!--\" + body.tagName + \"-->\";\n\n  alert( body.firstChild.data ); // what's here?\n</script>\n```","solution":"The answer: **`BODY`**.\n\n```html run\n<script>\n  let body = document.body;\n\n  body.innerHTML = \"<!--\" + body.tagName + \"-->\";\n\n  alert( body.firstChild.data ); // BODY\n</script>\n```\n\nWhat's going on step by step:\n\n1. The content of `<body>` is replaced with the comment. The comment is `<!--BODY-->`, because `body.tagName == \"BODY\"`. As we remember, `tagName` is always uppercase in HTML.\n2. The comment is now the only child node, so we get it in `body.firstChild`.\n3. The `data` property of the comment is its contents (inside `<!--...-->`): `\"BODY\"`.","parent":"basic-dom-node-properties"}},"where-document-in-hierarchy":{"type":"Task","value":{"title":"Where's the \"document\" in the hierarchy?","slug":"where-document-in-hierarchy","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/05-basic-dom-node-properties/4-where-document-in-hierarchy","weight":4,"libs":[],"importance":4,"content":"\nWhich class does the `document` belong to?\n\nWhat's its place in the DOM hierarchy?\n\nDoes it inherit from `Node` or `Element`, or maybe `HTMLElement`?","solution":"We can see which class it belongs by outputting it, like:\n\n```js run\nalert(document); // [object HTMLDocument]\n```\n\nOr:\n\n```js run\nalert(document.constructor.name); // HTMLDocument\n```\n\nSo, `document` is an instance of `HTMLDocument` class.\n\nWhat's its place in the hierarchy?\n\nYeah, we could browse the specification, but it would be faster to figure out manually.\n\nLet's traverse the prototype chain via `__proto__`.\n\nAs we know, methods of a class are in the `prototype` of the constructor. For instance, `HTMLDocument.prototype` has methods for documents.\n\nAlso, there's a reference to the constructor function inside the `prototype`:\n\n```js run\nalert(HTMLDocument.prototype.constructor === HTMLDocument); // true\n```\n\nFor built-in classes in all prototypes there's a `constructor` reference, and we can get `constructor.name` to see the name of the class. Let's do it for all objects in the `document` prototype chain:\n\n```js run\nalert(HTMLDocument.prototype.constructor.name); // HTMLDocument\nalert(HTMLDocument.prototype.__proto__.constructor.name); // Document\nalert(HTMLDocument.prototype.__proto__.__proto__.constructor.name); // Node\n```\n\nWe also could examine the object using `console.dir(document)` and see these names by opening `__proto__`. The console takes them from `constructor` internally.","parent":"basic-dom-node-properties"}},"dom-attributes-and-properties":{"type":"Article","value":{"title":"Attributes and properties","slug":"dom-attributes-and-properties","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/06-dom-attributes-and-properties/article.md","isFolder":false,"weight":6,"content":"\nWhen the browser loads the page, it \"reads\" (another word: \"parses\") HTML text and generates DOM objects from it. For element nodes most standard HTML attributes automatically become properties of DOM objects.\n\nFor instance, if the tag is `<body id=\"page\">`, then the DOM object has `body.id=\"page\"`.\n\nBut the attribute-property mapping is not one-to-one! In this chapter we'll pay attention to separate these two notions, to see how to work with them, when they are the same, and when they are different.\n\n## DOM properties\n\nWe've already seen built-in DOM properties. There's a lot. But technically no one limits us, and if it's not enough -- we can add our own.\n\nDOM nodes are regular JavaScript objects. We can alter them.\n\nFor instance, let's create a new property in `document.body`:\n\n```js run\ndocument.body.myData = {\n  name: 'Caesar',\n  title: 'Imperator'\n};\n\nalert(document.body.myData.title); // Imperator\n```\n\nWe can add a method as well:\n\n```js run\ndocument.body.sayTagName = function() {\n  alert(this.tagName);\n};\n\ndocument.body.sayTagName(); // BODY (the value of \"this\" in the method is document.body)\n```\n\nWe can also modify built-in prototypes like `Element.prototype` and add new methods to all elements:\n\n```js run\nElement.prototype.sayHi = function() {\n  alert(`Hello, I'm ${this.tagName}`);\n};\n\ndocument.documentElement.sayHi(); // Hello, I'm HTML\ndocument.body.sayHi(); // Hello, I'm BODY\n```\n\nSo, DOM properties and methods behave just like those of regular JavaScript objects:\n\n- They can have any value.\n- They are case-sensitive (write `elem.nodeType`, not `elem.NoDeTyPe`).\n\n## HTML attributes\n\nIn HTML language, tags may have attributes. When the browser reads HTML text and creates DOM objects for tags, it recognizes *standard* attributes and creates DOM properties from them.\n\nSo when an element has `id` or another *standard* attribute, the corresponding property gets created. But that doesn't happen if the attribute is non-standard.\n\nFor instance:\n```html run\n<body id=\"test\" something=\"non-standard\">\n  <script>\n    alert(document.body.id); // test\n*!*\n    // non-standard attribute does not yield a property\n    alert(document.body.something); // undefined\n*/!*\n  </script>\n</body>\n```\n\nPlease note that a standard attribute for one element can be unknown for another one. For instance, `\"type\"` is standard for `<input>` ([HTMLInputElement](https://html.spec.whatwg.org/#htmlinputelement)), but not for `<body>` ([HTMLBodyElement](https://html.spec.whatwg.org/#htmlbodyelement)). Standard attributes are described in the specification for the corresponding element class.\n\nHere we can see it:\n```html run\n<body id=\"body\" type=\"...\">\n  <input id=\"input\" type=\"text\">\n  <script>\n    alert(input.type); // text\n*!*\n    alert(body.type); // undefined: DOM property not created, because it's non-standard\n*/!*\n  </script>\n</body>\n```\n\nSo, if an attribute is non-standard, there won't be DOM-property for it. Is there a way to access such attributes?\n\nSure. All attributes are accessible using following methods:\n\n- `elem.hasAttribute(name)` -- checks for existence.\n- `elem.getAttribute(name)` -- gets the value.\n- `elem.setAttribute(name, value)` -- sets the value.\n- `elem.removeAttribute(name)` -- removes the attribute.\n\nThese methods operate exactly with what's written in HTML.\n\nAlso one can read all attributes using `elem.attributes`: a collection of objects that belong to a built-in [Attr](https://dom.spec.whatwg.org/#attr) class, with `name` and `value` properties.\n\nHere's a demo of reading a non-standard property:\n\n```html run\n<body something=\"non-standard\">\n  <script>\n*!*\n    alert(document.body.getAttribute('something')); // non-standard\n*/!*\n  </script>\n</body>\n```\n\nHTML attributes have the following features:\n\n- Their name is case-insensitive (`id` is same as `ID`).\n- Their values are always strings.\n\nHere's an extended demo of working with attributes:\n\n```html run\n<body>\n  <div id=\"elem\" about=\"Elephant\"></div>\n\n  <script>\n    alert( elem.getAttribute('About') ); // (1) 'Elephant', reading\n\n    elem.setAttribute('Test', 123); // (2), writing\n\n    alert( elem.outerHTML ); // (3), see it's there\n\n    for (let attr of elem.attributes) { // (4) list all\n      alert( `${attr.name} = ${attr.value}` );\n    }\n  </script>\n</body>\n```\n\nPlease note:\n\n1. `getAttribute('About')` -- the first letter is uppercase here, and in HTML it's all lowercase. But that doesn't matter: attribute names are case-insensitive.\n2. We can assign anything to an attribute, but it becomes a string. So here we have `\"123\"` as the value.\n3. All attributes including ones that we set are visible in `outerHTML`.\n4. The `attributes` collection is iterable and has all attributes with `name` and `value`.\n\n## Property-attribute synchronization\n\nWhen a standard attribute changes, the corresponding property is auto-updated, and (with some exceptions) vice versa.\n\nIn the example below `id` is modified as an attribute, and we can see the property changed too. And then the same backwards:\n\n```html run\n<input>\n\n<script>\n  let input = document.querySelector('input');\n\n  // attribute => property\n  input.setAttribute('id', 'id');\n  alert(input.id); // id (updated)\n\n  // property => attribute\n  input.id = 'newId';\n  alert(input.getAttribute('id')); // newId (updated)\n</script>\n```\n\nBut there are exclusions, for instance `input.value` synchronizes only from attribute -> to property, but not back:\n\n```html run\n<input>\n\n<script>\n  let input = document.querySelector('input');\n\n  // attribute => property\n  input.setAttribute('value', 'text');\n  alert(input.value); // text\n\n*!*\n  // NOT property => attribute\n  input.value = 'newValue';\n  alert(input.getAttribute('value')); // text (not updated!)\n*/!*\n</script>\n```\n\nIn the example above:\n- Changing the attribute `value` updates the property.\n- But the property change does not affect the attribute.\n\nThat \"feature\" may actually come in handy, because the user may modify `value`, and then after it, if we want to recover the \"original\" value from HTML, it's in the attribute.\n\n## DOM properties are typed\n\nDOM properties are not always strings. For instance, the `input.checked` property (for checkboxes) is a boolean:\n\n```html run\n<input id=\"input\" type=\"checkbox\" checked> checkbox\n\n<script>\n  alert(input.getAttribute('checked')); // the attribute value is: empty string\n  alert(input.checked); // the property value is: true\n</script>\n```\n\nThere are other examples. The `style` attribute is a string, but the `style` property is an object:\n\n```html run\n<div id=\"div\" style=\"color:red;font-size:120%\">Hello</div>\n\n<script>\n  // string\n  alert(div.getAttribute('style')); // color:red;font-size:120%\n\n  // object\n  alert(div.style); // [object CSSStyleDeclaration]\n  alert(div.style.color); // red\n</script>\n```\n\nThat's an important difference. But even if a DOM property type is a string, it may differ from the attribute!\n\nFor instance, the `href` DOM property is always a *full* URL, even if the attribute contains a relative URL or just a `#hash`.\n\nHere's an example:\n\n```html height=30 run\n<a id=\"a\" href=\"#hello\">link</a>\n<script>\n  // attribute\n  alert(a.getAttribute('href')); // #hello\n\n  // property\n  alert(a.href ); // full URL in the form http://site.com/page#hello\n</script>\n```\n\nIf we need the value of `href` or any other attribute exactly as written in the HTML, we can use `getAttribute`.\n\n\n## Non-standard attributes, dataset\n\nWhen writing HTML, we use a lot of standard attributes. But what about non-standard, custom ones? First, let's see whether they are useful or not? What for?\n\nSometimes non-standard attributes are used to pass custom data from HTML to JavaScript, or to \"mark\" HTML-elements for JavaScript.\n\nLike this:\n\n```html run\n<!-- mark the div to show \"name\" here -->\n<div *!*show-info=\"name\"*/!*></div>\n<!-- and age here -->\n<div *!*show-info=\"age\"*/!*></div>\n\n<script>\n  // the code finds an element with the mark and shows what's requested\n  let user = {\n    name: \"Pete\",\n    age: 25\n  };\n\n  for(let div of document.querySelectorAll('[show-info]')) {\n    // insert the corresponding info into the field\n    let field = div.getAttribute('show-info');\n    div.innerHTML = user[field]; // Pete, then age\n  }\n</script>\n```\n\nAlso they can be used to style an element.\n\nFor instance, here for the order state the attribute `order-state` is used:\n\n```html run\n<style>\n  /* styles rely on the custom attribute \"order-state\" */\n  .order[order-state=\"new\"] {\n    color: green;\n  }\n\n  .order[order-state=\"pending\"] {\n    color: blue;\n  }\n\n  .order[order-state=\"canceled\"] {\n    color: red;\n  }\n</style>\n\n<div class=\"order\" order-state=\"new\">\n  A new order.\n</div>\n\n<div class=\"order\" order-state=\"pending\">\n  A pending order.\n</div>\n\n<div class=\"order\" order-state=\"canceled\">\n  A canceled order.\n</div>\n```\n\nWhy the attribute may be preferable to classes like `.order-state-new`, `.order-state-pending`, `order-state-canceled`?\n\nThat's because an attribute is more convenient to manage. The state can be changed as easy as:\n\n```js\n// a bit simpler than removing old/adding a new class\ndiv.setAttribute('order-state', 'canceled');\n```\n\nBut there may be a possible problem with custom attributes. What if we use a non-standard attribute for our purposes and later the standard introduces it and makes it do something? The HTML language is alive, it grows, more attributes appear to suit the needs of developers. There may be unexpected effects in such case.\n\nTo avoid conflicts, there exist [data-*](https://html.spec.whatwg.org/#embedding-custom-non-visible-data-with-the-data-*-attributes) attributes.\n\n**All attributes starting with \"data-\" are reserved for programmers' use. They are available in the `dataset` property.**\n\nFor instance, if an `elem` has an attribute named `\"data-about\"`, it's available as `elem.dataset.about`.\n\nLike this:\n\n```html run\n<body data-about=\"Elephants\">\n<script>\n  alert(document.body.dataset.about); // Elephants\n</script>\n```\n\nMultiword attributes like `data-order-state` become camel-cased: `dataset.orderState`.\n\nHere's a rewritten \"order state\" example:\n\n```html run\n<style>\n  .order[data-order-state=\"new\"] {\n    color: green;\n  }\n\n  .order[data-order-state=\"pending\"] {\n    color: blue;\n  }\n\n  .order[data-order-state=\"canceled\"] {\n    color: red;\n  }\n</style>\n\n<div id=\"order\" class=\"order\" data-order-state=\"new\">\n  A new order.\n</div>\n\n<script>\n  // read\n  alert(order.dataset.orderState); // new\n\n  // modify\n  order.dataset.orderState = \"pending\"; // (*)\n</script>\n```\n\nUsing `data-*` attributes is a valid, safe way to pass custom data.\n\nPlease note that we can not only read, but also modify data-attributes. Then CSS updates the view accordingly: in the example above the last line `(*)` changes the color to blue.\n\n## Summary\n\n- Attributes -- is what's written in HTML.\n- Properties -- is what's in DOM objects.\n\nA small comparison:\n\n|            | Properties | Attributes |\n|------------|------------|------------|\n|Type|Any value, standard properties have types described in the spec|A string|\n|Name|Name is case-sensitive|Name is not case-sensitive|\n\nMethods to work with attributes are:\n\n- `elem.hasAttribute(name)` -- to check for existence.\n- `elem.getAttribute(name)` -- to get the value.\n- `elem.setAttribute(name, value)` -- to set the value.\n- `elem.removeAttribute(name)` -- to remove the attribute.\n- `elem.attributes` is a collection of all attributes.\n\nFor most needs, DOM properties can serve us well. We should refer to attributes only when DOM properties do not suit us, when we need exactly attributes, for instance:\n\n- We need a non-standard attribute. But if it starts with `data-`, then we should use `dataset`.\n- We want to read the value \"as written\" in HTML. The value of the DOM property may be different, for instance the `href` property is always a full URL, and we may want to get the \"original\" value.","libs":[],"children":["get-user-attribute","yellow-links"],"parent":"document"}},"get-user-attribute":{"type":"Task","value":{"title":"Get the attribute","slug":"get-user-attribute","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/06-dom-attributes-and-properties/1-get-user-attribute","weight":1,"libs":[],"importance":5,"content":"\nWrite the code to select the element with `data-widget-name` attribute from the document and to read its value.\n\n```html run\n<!DOCTYPE html>\n<html>\n<body>\n\n  <div data-widget-name=\"menu\">Choose the genre</div>\n\n  <script>\n    /* your code */\n  </script>\n</body>\n</html>\n```","solution":"```html run height=100\n<!DOCTYPE html>\n<html>\n<body>\n\n  <div data-widget-name=\"menu\">Choose the genre</div>\n\n  <script>\n    // getting it\n    let elem = document.querySelector('[data-widget-name]');\n\n    // reading the value\n    alert(elem.dataset.widgetName);\n    // or\n    alert(elem.getAttribute('data-widget-name'));\n  </script>\n</body>\n</html>\n```","parent":"dom-attributes-and-properties"}},"yellow-links":{"type":"Task","value":{"title":"Make external links orange","slug":"yellow-links","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/06-dom-attributes-and-properties/2-yellow-links","weight":2,"libs":[],"importance":3,"content":"\nMake all external links orange by altering their `style` property.\n\nA link is external if:\n- It's `href` has `://` in it\n- But doesn't start with `http://internal.com`.\n\nExample:\n\n```html run\n<a name=\"list\">the list</a>\n<ul>\n  <li><a href=\"http://google.com\">http://google.com</a></li>\n  <li><a href=\"/tutorial\">/tutorial.html</a></li>\n  <li><a href=\"local/path\">local/path</a></li>\n  <li><a href=\"ftp://ftp.com/my.zip\">ftp://ftp.com/my.zip</a></li>\n  <li><a href=\"http://nodejs.org\">http://nodejs.org</a></li>\n  <li><a href=\"http://internal.com/test\">http://internal.com/test</a></li>\n</ul>\n\n<script>\n  // setting style for a single link\n  let link = document.querySelector('a');\n  link.style.color = 'orange';\n</script>\n```\n\nThe result should be:\n\n[iframe border=1 height=180 src=\"solution\"]","solution":"First, we need to find all external references.\n\nThere are two ways.\n\nThe first is to find all links using `document.querySelectorAll('a')` and then filter out what we need:\n\n```js\nlet links = document.querySelectorAll('a');\n\nfor (let link of links) {\n*!*\n  let href = link.getAttribute('href');\n*/!*\n  if (!href) continue; // no attribute\n\n  if (!href.includes('://')) continue; // no protocol\n\n  if (href.startsWith('http://internal.com')) continue; // internal\n\n  link.style.color = 'orange';\n}\n```\n\nPlease note: we use `link.getAttribute('href')`. Not `link.href`, because we need the value from HTML.\n\n...Another, simpler way would be to add the checks to CSS selector:\n\n```js\n// look for all links that have :// in href\n// but href doesn't start with http://internal.com\nlet selector = 'a[href*=\"://\"]:not([href^=\"http://internal.com\"])';\nlet links = document.querySelectorAll(selector);\n\nlinks.forEach(link => link.style.color = 'orange');\n```","parent":"dom-attributes-and-properties"}},"modifying-document":{"type":"Article","value":{"title":"Modifying the document","slug":"modifying-document","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/article.md","isFolder":false,"weight":7,"content":"\nDOM modifications is the key to create \"live\" pages.\n\nHere we'll see how to create new elements \"on the fly\" and modify the existing page content.\n\nFirst we'll see a simple example and then explain the methods.\n\n## Example: show a message\n\nFor a start, let's see how to add a message on the page that looks nicer than `alert`.\n\nHere's how it will look:\n\n```html autorun height=\"80\"\n<style>\n.alert {\n  padding: 15px;\n  border: 1px solid #d6e9c6;\n  border-radius: 4px;\n  color: #3c763d;\n  background-color: #dff0d8;\n}\n</style>\n\n*!*\n<div class=\"alert\">\n  <strong>Hi there!</strong> You've read an important message.\n</div>\n*/!*\n```\n\nThat was an HTML example. Now let's create the same `div` with JavaScript (assuming that the styles are still in the HTML or an external CSS file).\n\n## Creating an element\n\n\nTo create DOM nodes, there are two methods:\n\n`document.createElement(tag)`\n: Creates a new element with the given tag:\n\n    ```js\n    let div = document.createElement('div');\n    ```\n\n`document.createTextNode(text)`\n: Creates a new *text node* with the given text:\n\n    ```js\n    let textNode = document.createTextNode('Here I am');\n    ```\n\n### Creating the message\n\nIn our case we want to make a `div` with given classes and the message in it:\n\n```js\nlet div = document.createElement('div');\ndiv.className = \"alert alert-success\";\ndiv.innerHTML = \"<strong>Hi there!</strong> You've read an important message.\";\n```\n\nAfter that, we have a ready DOM element. Right now it's in the variable, but can not be seen, because it's not been inserted into the page yet.\n\n## Insertion methods\n\nTo make the `div` show up, we need to insert it somewhere into `document`. For instance, in `document.body`.\n\nThere's a special method for that: `document.body.appendChild(div)`.\n\nHere's the full code:\n\n```html run height=\"80\"\n<style>\n.alert {\n  padding: 15px;\n  border: 1px solid #d6e9c6;\n  border-radius: 4px;\n  color: #3c763d;\n  background-color: #dff0d8;\n}\n</style>\n\n<script>\n  let div = document.createElement('div');\n  div.className = \"alert alert-success\";\n  div.innerHTML = \"<strong>Hi there!</strong> You've read an important message.\";\n\n*!*\n  document.body.appendChild(div);\n*/!*\n</script>\n```\n\nHere's a brief list of methods to insert a node into a parent element (`parentElem` for short):\n\n`parentElem.appendChild(node)`\n: Appends `node` as the last child of `parentElem`.\n\n    The following example adds a new `<li>` to the end of `<ol>`:\n\n    ```html run height=100\n    <ol id=\"list\">\n      <li>0</li>\n      <li>1</li>\n      <li>2</li>\n    </ol>\n\n    <script>\n      let newLi = document.createElement('li');\n      newLi.innerHTML = 'Hello, world!';\n\n      list.appendChild(newLi);\n    </script>\n    ```\n\n`parentElem.insertBefore(node, nextSibling)`\n: Inserts `node` before `nextSibling` into `parentElem`.\n\n    The following code inserts a new list item before the second `<li>`:\n\n    ```html run height=100\n    <ol id=\"list\">\n      <li>0</li>\n      <li>1</li>\n      <li>2</li>\n    </ol>\n    <script>\n      let newLi = document.createElement('li');\n      newLi.innerHTML = 'Hello, world!';\n\n    *!*\n      list.insertBefore(newLi, list.children[1]);\n    */!*\n    </script>\n    ```\n    To insert `newLi` as the first element, we can do it like this:\n    \n    ```js\n    list.insertBefore(newLi, list.firstChild);\n    ```\n\n`parentElem.replaceChild(node, oldChild)`\n: Replaces `oldChild` with `node` among children of `parentElem`.\n\nAll these methods return the inserted node. In other words, `parentElem.appendChild(node)` returns `node`. But usually the returned value is not used, we just run the method.\n\nThese methods are \"old school\": they exist from the ancient times and we can meet them in many old scripts. Unfortunately, there are some tasks that are hard to solve with them.\n\nFor instance, how to insert *html* if we have it as a string? Or, given a node, how to insert another node *before* it? Of course, all that is doable, but not in an elegant way.\n\nSo there exist two other sets of insertion methods to handle all cases easily.\n\n### prepend/append/before/after\n\nThis set of methods provides more flexible insertions:\n\n- `node.append(...nodes or strings)` -- append nodes or strings at the end of `node`,\n- `node.prepend(...nodes or strings)` -- insert nodes or strings into the beginning of `node`,\n- `node.before(...nodes or strings)` –- insert nodes or strings before the `node`,\n- `node.after(...nodes or strings)` –- insert nodes or strings after the `node`,\n- `node.replaceWith(...nodes or strings)` –- replaces `node` with the given nodes or strings.\n\nHere's an example of using these methods to add more items to a list and the text before/after it:\n\n```html autorun\n<ol id=\"ol\">\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n</ol>\n\n<script>\n  ol.before('before');\n  ol.after('after');\n\n  let prepend = document.createElement('li');\n  prepend.innerHTML = 'prepend';\n  ol.prepend(prepend);  \n\n  let append = document.createElement('li');\n  append.innerHTML = 'append';\n  ol.append(append);\n</script>\n```\n\nHere's a small picture what methods do:\n\n![](before-prepend-append-after.png)\n\nSo the final list will be:\n\n```html\nbefore\n<ol id=\"ol\">\n  <li>prepend</li>\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n  <li>append</li>\n</ol>\nafter\n```\n\nThese methods can insert multiple lists of nodes and text pieces in a single call.\n\nFor instance, here a string and an element are inserted:\n\n```html run\n<div id=\"div\"></div>\n<script>\n  div.before('<p>Hello</p>', document.createElement('hr'));\n</script>\n```\n\nAll text is inserted *as text*.\n\nSo the final HTML is:\n\n```html run\n*!*\n&lt;p&gt;Hello&lt;/p&gt;\n*/!*\n<hr>\n<div id=\"div\"></div>\n```\n\nIn other words, strings are inserted in a safe way, like `elem.textContent` does it.\n\nSo, these methods can only be used to insert DOM nodes or text pieces.\n\nBut what if we want to insert HTML \"as html\", with all tags and stuff working, like `elem.innerHTML`?\n\n### insertAdjacentHTML/Text/Element\n\nThere's another, pretty versatile method: `elem.insertAdjacentHTML(where, html)`.\n\nThe first parameter is a string, specifying where to insert, must be one of the following:\n\n- `\"beforebegin\"` -- insert `html` before `elem`,\n- `\"afterbegin\"` -- insert `html` into `elem`, at the beginning,\n- `\"beforeend\"` -- insert `html` into `elem`, at the end,\n- `\"afterend\"` -- insert `html` after `elem`.\n\nThe second parameter is an HTML string, inserted \"as is\".\n\nFor instance:\n\n```html run\n<div id=\"div\"></div>\n<script>\n  div.insertAdjacentHTML('beforebegin', '<p>Hello</p>');\n  div.insertAdjacentHTML('afterend', '<p>Bye</p>');\n</script>\n```\n\n...Would lead to:\n\n```html run\n<p>Hello</p>\n<div id=\"div\"></div>\n<p>Bye</p>\n```\n\nThat's how we can append an arbitrary HTML to our page.\n\nHere's the picture of insertion variants:\n\n![](insert-adjacent.png)\n\nWe can easily notice similarities between this and the previous picture. The insertion points are actually the same, but this method inserts HTML.\n\nThe method has two brothers:\n\n- `elem.insertAdjacentText(where, text)` -- the same syntax, but a string of `text` in inserted \"as text\" instead of HTML,\n- `elem.insertAdjacentElement(where, elem)` -- the same syntax, but inserts an element.\n\nThey exist mainly to make the syntax \"uniform\". In practice, most of the time only `insertAdjacentHTML` is used, because for elements and text we have methods `append/prepend/before/after` -- they are shorter to write and can insert nodes/text pieces.\n\nSo here's an alternative variant of showing a message:\n\n```html run\n<style>\n.alert {\n  padding: 15px;\n  border: 1px solid #d6e9c6;\n  border-radius: 4px;\n  color: #3c763d;\n  background-color: #dff0d8;\n}\n</style>\n\n<script>\n  document.body.insertAdjacentHTML(\"afterbegin\", `<div class=\"alert alert-success\">\n    <strong>Hi there!</strong> You've read an important message.\n  </div>`);\n</script>\n```\n\n## Cloning nodes: cloneNode\n\nHow to insert one more similar message?\n\nWe could make a function and put the code there. But the alternative way would be to *clone* the existing `div` and modify the text inside it (if needed).\n\nSometimes when we have a big element, that may be faster and simpler.\n\n- The call `elem.cloneNode(true)` creates a \"deep\" clone of the element -- with all attributes and subelements. If we call `elem.cloneNode(false)`, then the clone is made without child elements.\n\nAn example of copying the message:\n\n```html run height=\"120\"\n<style>\n.alert {\n  padding: 15px;\n  border: 1px solid #d6e9c6;\n  border-radius: 4px;\n  color: #3c763d;\n  background-color: #dff0d8;\n}\n</style>\n\n<div class=\"alert\" id=\"div\">\n  <strong>Hi there!</strong> You've read an important message.\n</div>\n\n<script>\n*!*\n  let div2 = div.cloneNode(true); // clone the message\n  div2.querySelector('strong').innerHTML = 'Bye there!'; // change the clone\n\n  div.after(div2); // show the clone after the existing div\n*/!*\n</script>\n```\n\n## Removal methods\n\nTo remove nodes, there are the following methods:\n\n\n`parentElem.removeChild(node)`\n: Removes `elem` from  `parentElem` (assuming it's a child).\n\n`node.remove()`\n: Removes the `node` from its place.\n\nWe can easily see that the second method is much shorter. The first one exists for historical reasons.\n\n````smart\nIf we want to *move* an element to another place -- there's no need to remove it from the old one.\n\n**All insertion methods automatically remove the node from the old place.**\n\nFor instance, let's swap elements:\n\n```html run height=50\n<div id=\"first\">First</div>\n<div id=\"second\">Second</div>\n<script>\n  // no need to call remove\n  second.after(first); // take #second and after it - insert #first\n</script>\n```\n````\n\nLet's make our message disappear after a second:\n\n```html run untrusted\n<style>\n.alert {\n  padding: 15px;\n  border: 1px solid #d6e9c6;\n  border-radius: 4px;\n  color: #3c763d;\n  background-color: #dff0d8;\n}\n</style>\n\n<script>\n  let div = document.createElement('div');\n  div.className = \"alert alert-success\";\n  div.innerHTML = \"<strong>Hi there!</strong> You've read an important message.\";\n\n  document.body.append(div);\n*!*\n  setTimeout(() => div.remove(), 1000);\n  // or setTimeout(() => document.body.removeChild(div), 1000);\n*/!*\n</script>\n```\n\n## A word about \"document.write\"\n\nThere's one more, very ancient method of adding something to a web-page: `document.write`.\n\nThe syntax:\n\n```html run\n<p>Somewhere in the page...</p>\n*!*\n<script>\n  document.write('<b>Hello from JS</b>');\n</script>\n*/!*\n<p>The end</p>\n```\n\nThe call to `document.write(html)` writes the `html` into page \"right here and now\". The `html` string can be dynamically generated, so it's kind of flexible. We can use JavaScript to create a full-fledged webpage and write it.\n\nThe method comes from times when there were no DOM, no standards... Really old times. It still lives, because there are scripts using it.\n\nIn modern scripts we can rarely see it, because of the following important limitation:\n\n**The call to `document.write` only works while the page is loading.**\n\nIf we call it afterwards, the existing document content is erased.\n\nFor instance:\n\n```html run\n<p>After one second the contents of this page will be replaced...</p>\n*!*\n<script>\n  // document.write after 1 second\n  // that's after the page loaded, so it erases the existing content\n  setTimeout(() => document.write('<b>...By this.</b>'), 1000);\n</script>\n*/!*\n```\n\nSo it's kind of unusable at \"after loaded\" stage, unlike other DOM methods we covered above.\n\nThat was the downside.\n\nTechnically, when `document.write` is called while the browser is still reading HTML, it appends something to it, and the browser consumes it just as it were initially there.\n\nThat gives us the upside -- it works blazingly fast, because there's *no DOM modification*. It writes directly into the page text, while the DOM is not yet built, and the browser puts it into DOM at generation-time.\n\nSo if we need to add a lot of text into HTML dynamically, and we're at page loading phase, and the speed matters, it may help. But in practice these requirements rarely come together. And usually we can see this method in scripts just because they are old.\n\n## Summary\n\nMethods to create new nodes:\n\n- `document.createElement(tag)` -- creates an element with the given tag,\n- `document.createTextNode(value)` -- creates a text node (rarely used),\n- `elem.cloneNode(deep)` -- clones the element, if `deep==true` then with all descendants.  \n\nInsertion and removal of nodes:\n\n- From the parent:\n  - `parent.appendChild(node)`\n  - `parent.insertBefore(node, nextSibling)`\n  - `parent.removeChild(node)`\n  - `parent.replaceChild(newElem, node)`\n\n  All these methods return `node`.\n\n- Given a list of nodes and strings:\n  - `node.append(...nodes or strings)` -- insert into `node`, at the end,\n  - `node.prepend(...nodes or strings)` -- insert into `node`, at the beginning,\n  - `node.before(...nodes or strings)` –- insert right before `node`,\n  - `node.after(...nodes or strings)` –- insert right after `node`,\n  - `node.replaceWith(...nodes or strings)` –- replace `node`.\n  - `node.remove()` –- remove the `node`.\n\n  Text strings are inserted \"as text\".\n\n- Given a piece of HTML: `elem.insertAdjacentHTML(where, html)`, inserts depending on where:\n  - `\"beforebegin\"` -- insert `html` right before `elem`,\n  - `\"afterbegin\"` -- insert `html` into `elem`, at the beginning,\n  - `\"beforeend\"` -- insert `html` into `elem`, at the end,\n  - `\"afterend\"` -- insert `html` right after `elem`.\n\n  Also there are similar methods `elem.insertAdjacentText` and `elem.insertAdjacentElement`, they  insert text strings and elements, but they are rarely used.\n\n- To append HTML to the page before it has finished loading:\n  - `document.write(html)`\n\n  After the page is loaded such a call erases the document. Mostly seen in old scripts.","libs":[],"children":["createtextnode-vs-innerhtml","clear-elem","why-aaa","create-list","create-object-tree","tree-count","calendar-table","clock-setinterval","append-to-list","sort-table"],"parent":"document"}},"createtextnode-vs-innerhtml":{"type":"Task","value":{"title":"createTextNode vs innerHTML vs textContent","slug":"createtextnode-vs-innerhtml","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/1-createtextnode-vs-innerhtml","weight":1,"libs":[],"importance":5,"content":"\nWe have an empty DOM element `elem` and a string `text`.\n\nWhich of these 3 commands do exactly the same?\n\n1. `elem.append(document.createTextNode(text))`\n2. `elem.innerHTML = text`\n3. `elem.textContent = text`","solution":"Answer: **1 and 3**.\n\nBoth commands result in adding the `text` \"as text\" into the `elem`.\n\nHere's an example:\n\n```html run height=80\n<div id=\"elem1\"></div>\n<div id=\"elem2\"></div>\n<div id=\"elem3\"></div>\n<script>\n  let text = '<b>text</b>';\n\n  elem1.append(document.createTextNode(text));\n  elem2.textContent = text;\n  elem3.innerHTML = text;\n</script>\n```","parent":"modifying-document"}},"clock-setinterval":{"type":"Task","value":{"title":"Colored clock with setInterval","slug":"clock-setinterval","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/10-clock-setinterval","weight":10,"libs":[],"importance":4,"content":"\nCreate a colored clock like here:\n\n[iframe src=\"solution\" height=60]","solution":"First, let's make HTML/CSS.\n\nEach component of the time would look great in its own `<span>`:\n\n```html\n<div id=\"clock\">\n  <span class=\"hour\">hh</span>:<span class=\"min\">mm</span>:<span class=\"sec\">ss</span>\n</div>\n```\n\nAlso we'll need CSS to color them.\n\nThe `update` function will refresh the clock, to be called by `setInterval` every second:\n\n```js\nfunction update() {\n  let clock = document.getElementById('clock');\n*!*\n  let date = new Date(); // (*)\n*/!*\n  let hours = date.getHours();\n  if (hours < 10) hours = '0' + hours;\n  clock.children[0].innerHTML = hours;\n\n  let minutes = date.getMinutes();\n  if (minutes < 10) minutes = '0' + minutes;\n  clock.children[1].innerHTML = minutes;\n\n  let seconds = date.getSeconds();\n  if (seconds < 10) seconds = '0' + seconds;\n  clock.children[2].innerHTML = seconds;\n}\n```\n\nIn the line `(*)` we every time check the current date. The calls to `setInterval` are not reliable: they may happen with delays.\n\nThe clock-managing functions:\n\n```js\nlet timerId;\n\nfunction clockStart() { // run the clock\n  timerId = setInterval(update, 1000);\n  update(); // (*)\n}\n\nfunction clockStop() {\n  clearInterval(timerId);\n  timerId = null;\n}\n```\n\nPlease note that the call to `update()` is not only scheduled in `clockStart()`, but immediately run in the line `(*)`. Otherwise the visitor would have to wait till the first execution of `setInterval`. And the clock would be empty till then.","parent":"modifying-document"}},"append-to-list":{"type":"Task","value":{"title":"Insert the HTML in the list","slug":"append-to-list","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/11-append-to-list","weight":11,"libs":[],"importance":5,"content":"\nWrite the code to insert `<li>2</li><li>3</li>` between two `<li>` here:\n\n```html\n<ul id=\"ul\">\n  <li id=\"one\">1</li>\n  <li id=\"two\">4</li>\n</ul>\n```","solution":"When we need to insert a piece of HTML somewhere, `insertAdjacentHTML` is the best fit.\n  \nThe solution:\n\n```js\none.insertAdjacentHTML('afterend', '<li>2</li><li>3</li>');\n```","parent":"modifying-document"}},"sort-table":{"type":"Task","value":{"title":"Sort the table","slug":"sort-table","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/12-sort-table","weight":12,"libs":[],"importance":5,"content":"\nThere's a table:\n\n<table>\n<tr>\n  <th>Name</th>\n  <th>Surname</th>\n  <th>Age</th>\n</tr>\n<tr>\n  <td>John</td>\n  <td>Smith</td>\n  <td>10</td>\n</tr>\n<tr>\n  <td>Pete</td>\n  <td>Brown</td>\n  <td>15</td>\n</tr>\n<tr>\n  <td>Ann</td>\n  <td>Lee</td>\n  <td>5</td>\n</tr>\n<tr>\n  <td>...</td>\n  <td>...</td>\n  <td>...</td>\n</tr>\n</table>\n\nThere may be more rows in it.\n\nWrite the code to sort it by the `\"name\"` column.","solution":"The solution is short, yet may look a bit tricky, so here I provide it with extensive comments:\n\n\n```js\nlet sortedRows = Array.from(table.rows)\n  .slice(1)\n  .sort((rowA, rowB) => rowA.cells[0].innerHTML > rowB.cells[0].innerHTML ? 1 : -1);\n\ntable.tBodies[0].append(...sortedRows);\n```\n\n1. Get all `<tr>`, like `table.querySelectorAll('tr')`, then make an array from them, cause we need array methods.\n2. The first TR (`table.rows[0]`) is actually a table header, so we take the rest by `.slice(1)`.\n3. Then sort them comparing by the content of the first `<td>` (the name field).\n4. Now insert nodes in the right order by `.append(...sortedRows)`.\n\n    Tables always have an implicit <tbody> element, so we need to take it and insert into it: a simple `table.append(...)` would fail.\n\n    Please note: we don't have to remove them, just \"re-insert\", they leave the old place automatically.","parent":"modifying-document"}},"clear-elem":{"type":"Task","value":{"title":"Clear the element","slug":"clear-elem","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/4-clear-elem","weight":4,"libs":[],"importance":5,"content":"\nCreate a function `clear(elem)` that removes everything from the element.\n\n```html run height=60\n<ol id=\"elem\">\n  <li>Hello</li>\n  <li>World</li>\n</ol>\n\n<script>\n  function clear(elem) { /* your code */ }\n\n  clear(elem); // clears the list\n</script>\n```","solution":"First, let's see how *not* to do it:\n\n```js\nfunction clear(elem) {\n  for (let i=0; i < elem.childNodes.length; i++) {\n      elem.childNodes[i].remove();\n  }\n}\n```\n\nThat won't work, because the call to `remove()` shifts the collection `elem.childNodes`, so elements start from the index `0` every time. But `i` increases, and some elements will be skipped.\n\nThe `for..of` loop also does the same.\n\nThe right variant could be:\n\n```js\nfunction clear(elem) {\n  while (elem.firstChild) {\n    elem.firstChild.remove();\n  }\n}\n```\n\nAnd also there's a simpler way to do the same:\n\n```js\nfunction clear(elem) {\n  elem.innerHTML = '';\n}\n```","parent":"modifying-document"}},"why-aaa":{"type":"Task","value":{"title":"Why does \"aaa\" remain?","slug":"why-aaa","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/5-why-aaa","weight":5,"libs":[],"importance":1,"content":"\nRun the example. Why does `table.remove()` not delete the text `\"aaa\"`?\n\n```html height=100 run\n<table id=\"table\">\n  aaa\n  <tr>\n    <td>Test</td>\n  </tr>\n</table>\n\n<script>\n  alert(table); // the table, as it should be\n\n  table.remove();\n  // why there's still aaa in the document?\n</script>\n```","solution":"The HTML in the task is incorrect. That's the reason of the odd thing.\n\nThe browser has to fix it automatically. But there may be no text inside the `<table>`: according to the spec only table-specific tags are allowed. So the browser adds `\"aaa\"` *before* the `<table>`.\n\nNow it's obvious that when we remove the table, it remains.\n\nThe question can be easily answered by exploring the DOM using the browser tools. It shows `\"aaa\"` before the `<table>`.\n\nThe HTML standard specifies in detail how to process bad HTML, and such behavior of the browser is correct.","parent":"modifying-document"}},"create-list":{"type":"Task","value":{"title":"Create a list","slug":"create-list","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/6-create-list","weight":6,"libs":[],"importance":4,"content":"\nWrite an interface to create a list from user input.\n\nFor every list item:\n\n1. Ask a user about its content using `prompt`.\n2. Create the `<li>` with it and add it to `<ul>`.\n3. Continue until the user cancels the input (by pressing `key:Esc` or CANCEL in prompt).\n\nAll elements should be created dynamically.\n\nIf a user types HTML-tags, they should be treated like a text.\n\n[demo src=\"solution\"]","solution":"Please note the usage of `textContent` to assign the `<li>` content.","parent":"modifying-document"}},"create-object-tree":{"type":"Task","value":{"title":"Create a tree from the object","slug":"create-object-tree","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/7-create-object-tree","weight":7,"libs":[],"importance":5,"content":"\nWrite a function `createTree` that creates a nested `ul/li` list from the nested object.\n\nFor instance:\n\n```js\nlet data = {\n  \"Fish\": {\n    \"trout\": {},\n    \"salmon\": {}\n  },\n\n  \"Tree\": {\n    \"Huge\": {\n      \"sequoia\": {},\n      \"oak\": {}\n    },\n    \"Flowering\": {\n      \"redbud\": {},\n      \"magnolia\": {}\n    }\n  }\n};\n```\n\nThe syntax:\n\n```js\nlet container = document.getElementById('container');\n*!*\ncreateTree(container, data); // creates the tree in the container\n*/!*\n```\n\nThe result (tree) should look like this:\n\n[iframe border=1 src=\"build-tree-dom\"]\n\nChoose one of two ways of solving this task:\n\n1. Create the HTML for the tree and then assign to `container.innerHTML`.\n2. Create tree nodes and append with DOM methods.\n\nWould be great if you could do both.\n\nP.S. The tree should not have \"extra\" elements like empty `<ul></ul>` for the leaves.","solution":"The easiest way to walk the object is to use recursion.\n\n1. [The solution with innerHTML](sandbox:innerhtml).\n2. [The solution with DOM](sandbox:build-tree-dom).","parent":"modifying-document"}},"tree-count":{"type":"Task","value":{"title":"Show descendants in a tree","slug":"tree-count","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/8-tree-count","weight":8,"libs":[],"importance":5,"content":"\nThere's a tree organized as nested `ul/li`.\n\nWrite the code that adds to each `<li>` the number of its descendants. Skip leaves (nodes without children).\n\nThe result:\n\n[iframe border=1 src=\"solution\"]","solution":"To append text to each `<li>` we can alter the text node `data`.","parent":"modifying-document"}},"calendar-table":{"type":"Task","value":{"title":"Create a calendar","slug":"calendar-table","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/07-modifying-document/9-calendar-table","weight":9,"libs":[],"importance":4,"content":"\nWrite a function `createCalendar(elem, year, month)`.\n\nThe call should create a calendar for the given year/month and put it inside `elem`.\n\nThe calendar should be a table, where a week is `<tr>`, and a day is `<td>`. The table top should be `<th>` with weekday names: the first day should be Monday, and so on till Sunday.\n\nFor instance, `createCalendar(cal, 2012, 9)` should generate in element `cal` the following calendar:\n\n[iframe height=210 src=\"solution\"]\n\nP.S. For this task it's enough to generate the calendar, should not yet be clickable.","solution":"We'll create the table as a string: `\"<table>...</table>\"`, and then assign it to  `innerHTML`.\n\nThe algorithm:\n\n1. Create the table header with `<th>` and weekday names.\n1. Create the date object `d = new Date(year, month-1)`. That's the first day of `month` (taking into account that months in JavaScript start from `0`, not `1`).\n2. First few cells till the first day of the month `d.getDay()` may be empty. Let's fill them in with `<td></td>`.\n3. Increase the day in `d`: `d.setDate(d.getDate()+1)`. If `d.getMonth()` is not yet the next month, then add the new cell `<td>` to the calendar. If that's a Sunday, then add a newline <code>\"&lt;/tr&gt;&lt;tr&gt;\"</code>.\n4. If the month has finished, but the table row is not yet full, add empty `<td>` into it, to make it square.","parent":"modifying-document"}},"styles-and-classes":{"type":"Article","value":{"title":"Styles and classes","slug":"styles-and-classes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/08-styles-and-classes/article.md","isFolder":false,"weight":8,"content":"\nBefore we get to JavaScript ways of dealing with styles and classes -- here's an important rule. Hopefully it's obvious enough, but we still have to mention it.\n\nThere are generally two ways to style an element:\n\n1. Create a class in CSS and add it: `<div class=\"...\">`\n2. Write properties directly into `style`: `<div style=\"...\">`.\n\nCSS is always the preferred way -- not only for HTML, but in JavaScript as well.\n\nWe should only manipulate the `style` property if classes \"can't handle it\".\n\nFor instance, `style` is acceptable if we calculate coordinates of an element dynamically and want to set them from JavaScript, like this:\n\n```js\nlet top = /* complex calculations */;\nlet left = /* complex calculations */;\nelem.style.left = left; // e.g '123px'\nelem.style.top = top; // e.g '456px'\n```\n\nFor other cases, like making the text red, adding a background icon -- describe that in CSS and then apply the class. That's more flexible and easier to support.\n\n## className and classList\n\nChanging a class is one of the most often used actions in scripts.\n\nIn the ancient time, there was a limitation in JavaScript: a reserved word like `\"class\"` could not be an object property. That limitation does not exist now, but at that time it was impossible to have a `\"class\"` property, like `elem.class`.\n\nSo for classes the similar-looking property `\"className\"` was introduced: the `elem.className` corresponds to the `\"class\"` attribute.\n\nFor instance:\n\n```html run\n<body class=\"main page\">\n  <script>\n    alert(document.body.className); // main page\n  </script>\n</body>\n```\n\nIf we assign something to `elem.className`, it replaces the whole strings of classes. Sometimes that's what we need, but often we want to add/remove a single class.\n\nThere's another property for that: `elem.classList`.\n\nThe `elem.classList` is a special object with methods to `add/remove/toggle` classes.\n\nFor instance:\n\n```html run\n<body class=\"main page\">\n  <script>\n*!*\n    // add a class\n    document.body.classList.add('article');\n*/!*\n\n    alert(document.body.className); // main page article\n  </script>\n</body>\n```\n\nSo we can operate both on the full class string using `className` or on individual classes using `classList`. What we choose depends on our needs.\n\nMethods of `classList`:\n\n- `elem.classList.add/remove(\"class\")` -- adds/removes the class.\n- `elem.classList.toggle(\"class\")` -- if the class exists, then removes it, otherwise adds it.\n- `elem.classList.contains(\"class\")` -- returns `true/false`, checks for the given class.\n\nBesides that, `classList` is iterable, so we can list all classes like this:\n\n```html run\n<body class=\"main page\">\n  <script>\n    for (let name of document.body.classList) {\n      alert(name); // main, and then page\n    }\n  </script>\n</body>\n```\n\n## Element style\n\nThe property `elem.style` is an object that corresponds to what's written in the `\"style\"` attribute. Setting `elem.style.width=\"100px\"` works as if we had in the attribute `style=\"width:100px\"`.\n\nFor multi-word property the camelCase is used:\n\n```js no-beautify\nbackground-color  => elem.style.backgroundColor\nz-index           => elem.style.zIndex\nborder-left-width => elem.style.borderLeftWidth\n```\n\nFor instance:\n\n```js run\ndocument.body.style.backgroundColor = prompt('background color?', 'green');\n```\n\n````smart header=\"Prefixed properties\"\nBrowser-prefixed properties like `-moz-border-radius`, `-webkit-border-radius` also follow the same rule, for instance:\n\n```js\nbutton.style.MozBorderRadius = '5px';\nbutton.style.WebkitBorderRadius = '5px';\n```\n\nThat is: a dash `\"-\"` becomes an uppercase.\n````\n\n## Resetting the style property\n\nSometimes we want to assign a style property, and later remove it.\n\nFor instance, to hide an element, we can set `elem.style.display = \"none\"`.\n\nThen later we may want to remove the `style.display` as if it were not set. Instead of `delete elem.style.display` we should assign an empty line to it: `elem.style.display = \"\"`.\n\n```js run\n// if we run this code, the <body> \"blinks\"\ndocument.body.style.display = \"none\"; // hide\n\nsetTimeout(() => document.body.style.display = \"\", 1000); // back to normal\n```\n\nIf we set `display` to an empty string, then the browser applies CSS classes and its built-in styles normally, as if there were no such `style` property at all.\n\n````smart header=\"Full rewrite with `style.cssText`\"\nNormally, we use `style.*` to assign individual style properties. We can't set the full style like `div.style=\"color: red; width: 100px\"`, because `div.style` is an object, and it's read-only.\n\nTo set the full style as a string, there's a special property `style.cssText`:\n\n```html run\n<div id=\"div\">Button</div>\n\n<script>\n  // we can set special style flags like \"important\" here\n  div.style.cssText=`color: red !important;\n    background-color: yellow;\n    width: 100px;\n    text-align: center;\n  `;\n\n  alert(div.style.cssText);\n</script>\n```\n\nWe rarely use it, because such assignment removes all existing styles: it does not add, but replaces them. May occasionally delete something needed. But still can be done for new elements when we know we don't delete something important.\n\nThe same can be accomplished by setting an attribute: `div.setAttribute('style', 'color: red...')`.\n````\n\n## Mind the units\n\nCSS units must be provided in style values.\n\nFor instance, we should not set `elem.style.top` to `10`, but rather to `10px`. Otherwise it wouldn't work:\n\n```html run height=100\n<body>\n  <script>\n  *!*\n    // doesn't work!\n    document.body.style.margin = 20;\n    alert(document.body.style.margin); // '' (empty string, the assignment is ignored)\n  */!*\n\n    // now add the CSS unit (px) - and it works\n    document.body.style.margin = '20px';\n    alert(document.body.style.margin); // 20px\n\n    alert(document.body.style.marginTop); // 20px\n    alert(document.body.style.marginLeft); // 20px\n  </script>\n</body>\n```\n\nPlease note how the browser \"unpacks\" the property `style.margin` in the last lines and infers `style.marginLeft` and `style.marginTop` (and other partial margins) from it.\n\n## Computed styles: getComputedStyle\n\nModifying a style is easy. But how to *read* it?\n\nFor instance, we want to know the size, margins, the color of an element. How to do it?\n\n**The `style` property operates only on the value of the `\"style\"` attribute, without any CSS cascade.**\n\nSo we can't read anything that comes from CSS classes using `elem.style`.\n\nFor instance, here `style` doesn't see the margin:\n\n```html run height=60 no-beautify\n<head>\n  <style> body { color: red; margin: 5px } </style>\n</head>\n<body>\n\n  The red text\n  <script>\n*!*\n    alert(document.body.style.color); // empty\n    alert(document.body.style.marginTop); // empty\n*/!*\n  </script>\n</body>\n```\n\n...But what if we need, say, increase the margin by 20px? We want the current value for the start.\n\nThere's another method for that: `getComputedStyle`.\n\nThe syntax is:\n\n```js\ngetComputedStyle(element[, pseudo])\n```\n\nelement\n: Element to read the value for.\n\npseudo\n: A pseudo-element if required, for instance `::before`. An empty string or no argument means the element itself.\n\nThe result is an object with style properties, like `elem.style`, but now with respect to all CSS classes.\n\nFor instance:\n\n```html run height=100\n<head>\n  <style> body { color: red; margin: 5px } </style>\n</head>\n<body>\n\n  <script>\n    let computedStyle = getComputedStyle(document.body);\n\n    // now we can read the margin and the color from it\n\n    alert( computedStyle.marginTop ); // 5px\n    alert( computedStyle.color ); // rgb(255, 0, 0)\n  </script>\n\n</body>\n```\n\n```smart header=\"Computed and resolved values\"\nThere are two concepts in [CSS](https://drafts.csswg.org/cssom/#resolved-values):\n\n1. A *computed* style value is the value after all CSS rules and CSS inheritance is applied, as the  result of the CSS cascade. It can look like `height:1em` or `font-size:125%`.\n2. A *resolved* style value is the one finally applied to the element. Values like `1em` or `125%` are relative. The browser takes the computed value and makes all units fixed and absolute, for instance: `height:20px` or `font-size:16px`. For geometry properties resolved values may have a floating point, like `width:50.5px`.\n\nA long time ago `getComputedStyle` was created to get computed values, but it turned out that resolved values are much more convenient, and the standard changed.\n\nSo nowadays `getComputedStyle` actually returns the resolved value of the property.\n```\n\n````warn header=\"`getComputedStyle` requires the full property name\"\nWe should always ask for the exact property that we want, like `paddingLeft` or `marginTop` or `borderTopWidth`. Otherwise the correct result is not guaranteed.\n\nFor instance, if there are properties `paddingLeft/paddingTop`, then what should we get for `getComputedStyle(elem).padding`? Nothing, or maybe a \"generated\" value from known paddings? There's no standard rule here.\n\nThere are other inconsistencies. As an example, some browsers (Chrome) show `10px` in the document below, and some of them (Firefox) --  do not:\n\n```html run\n<style>\n  body {\n    margin: 10px;\n  }\n</style>\n<script>\n  let style = getComputedStyle(document.body);\n  alert(style.margin); // empty string in Firefox\n</script>\n```\n````\n\n```smart header=\"\\\"Visited\\\" links styles are hidden!\"\nVisited links may be colored using `:visited` CSS pseudoclass.\n\nBut `getComputedStyle` does not give access to that color, because otherwise an arbitrary page could find out whether the user visited a link by creating it on the page and checking the styles.\n\nJavaScript we may not see the styles applied by `:visited`. And also, there's a limitation in CSS that forbids to apply geometry-changing styles in `:visited`. That's to guarantee that there's no sideway for an evil page to test if a link was visited and hence to break the privacy.\n```\n\n## Summary\n\nTo manage classes, there are two DOM properties:\n\n- `className` -- the string value, good to manage the whole set of classes.\n- `classList` -- the object with methods `add/remove/toggle/contains`, good for individual classes.\n\nTo change the styles:\n\n- The `style` property is an object with camelCased styles. Reading and writing to it has the same meaning as modifying individual properties in the `\"style\"` attribute. To see how to apply `important` and other rare stuff -- there's a list of methods at [MDN](mdn:api/CSSStyleDeclaration).\n\n- The `style.cssText` property corresponds to the whole `\"style\"` attribute, the full string of styles.\n\nTo read the resolved styles (with respect to all classes, after all CSS is applied and final values are calculated):\n\n- The `getComputedStyle(elem[, pseudo])` returns the style-like object with them. Read-only.","libs":[],"children":["create-notification"],"parent":"document"}},"create-notification":{"type":"Task","value":{"title":"Create a notification","slug":"create-notification","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/08-styles-and-classes/2-create-notification","weight":2,"libs":[],"importance":5,"content":"\nWrite a function `showNotification(options)` that a notification: `<div class=\"notification\">` with the given content. The notification should automatically disappear after 1.5 seconds.\n\nThe options are:\n\n```js\n// shows an element with the text \"Hello\" near the right-top of the window\nshowNotification({\n  top: 10, // 10px from the top of the window (by default 0px)\n  right: 10, // 10px from the right edge of the window (by default 0px)\n  html: \"Hello!\", // the HTML of notification\n  className: \"welcome\" // an additional class for the div (optional)\n});\n```\n\n[demo src=\"solution\"]\n\n\nUse CSS positioning to show the element at given top/right coordinates. The source document has the necessary styles.","solution":"","parent":"styles-and-classes"}},"size-and-scroll":{"type":"Article","value":{"title":"Element size and scrolling","slug":"size-and-scroll","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/09-size-and-scroll/article.md","isFolder":false,"weight":9,"content":"\nThere are many JavaScript properties that allow us to read information about element width, height and other geometry features.\n\nWe often need them when moving or positioning elements in JavaScript, to correctly calculate coordinates.\n\n\n## Sample element\n\nAs a sample element to demonstrate properties we'll use the one given below:\n\n```html no-beautify\n<div id=\"example\">\n  ...Text...\n</div>\n<style>\n  #example {\n    width: 300px;\n    height: 200px;\n    border: 25px solid #E8C48F;\n    padding: 20px;              \n    overflow: auto;             \n  }\n</style>\n```\n\nIt has the border, padding and scrolling. The full set of features. There are no margins, as they are not the part of the element itself, and there are no special properties for them.\n\nThe element looks like this:\n\n![](metric-css.png)\n\nYou can [open the document in the sandbox](sandbox:metric).\n\n```smart header=\"Mind the scrollbar\"\nThe picture above demonstrates the most complex case when the element has a scrollbar. Some browsers (not all) reserve the space for it by taking it from the content.\n\nSo, without scrollbar the content width would be `300px`, but if the scrollbar is `16px` wide (the width may vary between devices and browsers) then only `300 - 16 = 284px` remains, and we should take it into account. That's why examples from this chapter assume that there's a scrollbar. If there's no scrollbar, then things are just a bit simpler.\n```\n\n```smart header=\"The `padding-bottom` may be filled with text\"\nUsually paddings are shown empty on illustrations, but if there's a lot of text in the element and it overflows, then browsers show the \"overflowing\" text at `padding-bottom`, so you can see that in examples. But the padding is still there, unless specified otherwise.\n```\n\n## Geometry\n\nElement properties that provide width, height and other geometry are always numbers. They are assumed to be in pixels.\n\nHere's the overall picture:\n\n![](metric-all.png)\n\nThey are many properties, it's difficult to fit them all in the single picture, but their values are simple and easy to understand.\n\nLet's start exploring them from the outside of the element.\n\n## offsetParent, offsetLeft/Top\n\nThese properties are rarely needed, but still they are the \"most outer\" geometry properties, so we'll start with them.\n\nThe `offsetParent` is the nearest ancestor that is:\n\n1. CSS-positioned (`position` is `absolute`, `relative` or `fixed`),\n2. or `<td>`, `<th>`, `<table>`,\n2. or `<body>`.\n\nIn most practical cases we can use `offsetParent` to get the nearest CSS-positioned ancestor. And `offsetLeft/offsetTop` provide x/y coordinates relative to it's left-upper corner.\n\nIn the example below the inner `<div>` has `<main>` as `offsetParent` and `offsetLeft/offsetTop` shifts from its left-upper corner (`180`):\n\n```html run height=10\n<main style=\"position: relative\" id=\"main\">\n  <article>\n    <div id=\"example\" style=\"position: absolute; left: 180px; top: 180px\">...</div>\n  </article>\n</main>\n<script>\n  alert(example.offsetParent.id); // main\n  alert(example.offsetLeft); // 180 (note: a number, not a string \"180px\")\n  alert(example.offsetTop); // 180\n</script>\n```\n\n![](metric-offset-parent.png)\n\n\nThere are several occasions when `offsetParent` is `null`:\n\n1. For not shown elements (`display:none` or not in the document).\n2. For `<body>` and `<html>`.\n3. For elements with `position:fixed`.\n\n## offsetWidth/Height\n\nNow let's move on to the element itself.\n\nThese two properties are the simplest ones. They provide the \"outer\" width/height of the element. Or, in other words, its full size including borders.\n\n![](metric-offset-width-height.png)\n\nFor our sample element:\n\n- `offsetWidth = 390` -- the outer width, can be calculated as inner CSS-width (`300px`) plus paddings (`2 * 20px`) and borders (`2 * 25px`).\n- `offsetHeight = 290` -- the outer height.\n\n````smart header=\"Geometry properties for not shown elements are zero/null\"\nGeometry properties are calculated only for shown elements.\n\nIf an element (or any of its ancestors) has `display:none` or is not in the document, then all geometry properties are zero or `null` depending on what it is.\n\nFor example, `offsetParent` is `null`, and `offsetWidth`, `offsetHeight` are `0`.\n\nWe can use this to check if an element is hidden, like this:\n\n```js\nfunction isHidden(elem) {\n  return !elem.offsetWidth && !elem.offsetHeight;\n}\n```\n\nPlease note that such `isHidden` returns `true` for elements that are on-screen, but have zero sizes (like an empty `<div>`).\n````\n\n## clientTop/Left\n\nInside the element we have the borders.\n\nTo measure them, there are properties `clientTop` and `clientLeft`.\n\nIn our example:\n\n- `clientLeft = 25` -- left border width\n- `clientTop = 25` -- top border width\n\n![](metric-client-left-top.png)\n\n...But to be precise -- they are not borders, but relative coordinates of the inner side from the outer side.\n\nWhat's the difference?\n\nIt becomes visible when the document is right-to-left (the operating system is in Arabic or Hebrew languages). The scrollbar is then not on the right, but on the left, and then `clientLeft` also includes the scrollbar width.\n\nIn that case, `clientLeft` would be not `25`, but with the scrollbar width `25 + 16 = 41`:\n\n![](metric-client-left-top-rtl.png)\n\n## clientWidth/Height\n\nThese properties provide the size of the area inside the element borders.\n\nThey include the content width together with paddings, but without the scrollbar:\n\n![](metric-client-width-height.png)\n\nOn the picture above let's first consider `clientHeight`: it's easier to evaluate. There's no horizontal scrollbar, so it's exactly the sum of what's inside the borders: CSS-height `200px` plus top and bottom paddings (`2 * 20px`) total `240px`.\n\nNow `clientWidth` -- here the content width is not `300px`, but `284px`, because `16px` are occupied by the scrollbar. So the sum is `284px` plus left and right paddings, total `324px`.\n\n**If there are no paddings, then `clientWidth/Height` is exactly the content area, inside the borders and the scrollbar (if any).**\n\n![](metric-client-width-nopadding.png)\n\nSo when there's no padding we can use `clientWidth/clientHeight` to get the content area size.\n\n## scrollWidth/Height\n\n- Properties `clientWidth/clientHeight` only account for the visible part of the element.\n- Properties `scrollWidth/scrollHeight` also include the scrolled out (hidden) parts:\n\n![](metric-scroll-width-height.png)\n\nOn the picture above:\n\n- `scrollHeight = 723` -- is the full inner height of the content area including the scrolled out parts.\n- `scrollWidth = 324` -- is the full inner width, here we have no horizontal scroll, so it equals `clientWidth`.\n\nWe can use these properties to expand the element wide to its full width/height.\n\nLike this:\n\n```js\n// expand the element to the full content height\nelement.style.height = `${element.scrollHeight}px`;\n```\n\n```online\nClick the button to expand the element:\n\n<div id=\"element\" style=\"width:300px;height:200px; padding: 0;overflow: auto; border:1px solid black;\">text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text</div>\n\n<button style=\"padding:0\" onclick=\"element.style.height = `${element.scrollHeight}px`\">element.style.height = `${element.scrollHeight}px`</button>\n```\n\n## scrollLeft/scrollTop\n\nProperties `scrollLeft/scrollTop` are the width/height of the hidden, scrolled out part of the element.\n\nOn the picture below we can see `scrollHeight` and `scrollTop` for a block with a vertical scroll.\n\n![](metric-scroll-top.png)\n\nIn other words, `scrollTop` is \"how much is scrolled up\".\n\n````smart header=\"`scrollLeft/scrollTop` can be modified\"\nMost geometry properties that are read-only, but `scrollLeft/scrollTop` can be changed, and the browser will scroll the element.\n\n```online\nIf you click the element below, the code `elem.scrollTop += 10` executes. That makes the element content scroll `10px` down.\n\n<div onclick=\"this.scrollTop+=10\" style=\"cursor:pointer;border:1px solid black;width:100px;height:80px;overflow:auto\">Click<br>Me<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</div>\n```\n\nSetting `scrollTop` to `0` or `Infinity` will make the element scroll to the very top/bottom respectively.\n````\n\n## Don't take width/height from CSS\n\nWe've just covered geometry properties of DOM elements. They are normally used to get widths, heights and calculate distances.\n\nBut as we know from the chapter <info:styles-and-classes>, we can read CSS-height and width using `getComputedStyle`.\n\nSo why not to read the width of an element like this?\n\n```js run\nlet elem = document.body;\n\nalert( getComputedStyle(elem).width ); // show CSS width for elem\n```\n\nWhy should we use geometry properties instead? There are two reasons:\n\n1. First, CSS width/height depend on another property: `box-sizing` that defines \"what is\" CSS width and height. A change in `box-sizing` for CSS purposes may break such JavaScript.\n2. Second, CSS `width/height` may be `auto`, for instance for an inline element:\n\n    ```html run\n    <span id=\"elem\">Hello!</span>\n\n    <script>\n    *!*\n      alert( getComputedStyle(elem).width ); // auto\n    */!*\n    </script>\n    ```\n\n    From the CSS standpoint, `width:auto` is perfectly normal, but in JavaScript we need an exact size in `px` that we can use in calculations. So here CSS width is useless at all.\n\nAnd there's one more reason: a scrollbar. Sometimes the code that works fine without a scrollbar starts to bug with it, because a scrollbar takes the space from the content in some browsers. So the real width available for the content is *less* than CSS width. And `clientWidth/clientHeight` take that into account.\n\n...But with `getComputedStyle(elem).width` the situation is different. Some browsers (e.g. Chrome) return the real inner width, minus the scrollbar, and some of them (e.g. Firefox) -- CSS width (ignore the scrollbar). Such cross-browser differences is the reason not to use `getComputedStyle`, but rather rely on geometry properties.\n\n```online\nIf your browser reserves the space for a scrollbar (most browsers for Windows do), then you can test it below.\n\n[iframe src=\"cssWidthScroll\" link border=1]\n\nThe element with text has CSS `width:300px`.\n\nOn a Desktop Windows OS, Firefox, Chrome, Edge all reserve the space for the scrollbar. But  Firefox shows `300px`, while Chrome and Edge show less. That's because Firefox returns the CSS width and other browsers return the \"real\" width.\n```\n\nPlease note that the described difference is only about reading `getComputedStyle(...).width` from JavaScript, visually everything is correct.\n\n## Summary\n\nElements have the following geometry properties:\n\n- `offsetParent` -- is the nearest positioned ancestor or `td`, `th`, `table`, `body`.\n- `offsetLeft/offsetTop` -- coordinates relative to the left-upper edge of `offsetParent`.\n- `offsetWidth/offsetHeight` -- \"outer\" width/height of an element including borders.\n- `clientLeft/clientTop` -- the distance from the left-upper outer corner to its left-upper inner corner. For left-to-right OS they are always the widths of left/top borders. For right-to-left OS the vertical scrollbar is on the left so `clientLeft` includes its width too.\n- `clientWidth/clientHeight` -- the width/height of the content including paddings, but without the scrollbar.\n- `scrollWidth/scrollHeight` -- the width/height of the content including the scrolled out parts. Also includes paddings, but not the scrollbar.\n- `scrollLeft/scrollTop` -- width/height of the scrolled out part of the element, starting from its left-upper corner.\n\nAll properties are read-only except `scrollLeft/scrollTop`. They make the browser scroll the element if changed.","libs":[],"children":["get-scroll-height-bottom","scrollbar-width","put-ball-in-center","width-vs-clientwidth"],"parent":"document"}},"get-scroll-height-bottom":{"type":"Task","value":{"title":"What's the scroll from the bottom?","slug":"get-scroll-height-bottom","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/09-size-and-scroll/1-get-scroll-height-bottom","weight":1,"libs":[],"importance":5,"content":"\nThe `elem.scrollTop` property is the size of the scrolled out part from the top. How to get \"`scrollBottom`\" -- the size from the bottom?\n\nWrite the code that works for an arbitrary `elem`.\n\nP.S. Please check your code: if there's no scroll or the element is fully scrolled down, then it should return `0`.","solution":"The solution is:\n\n```js\nlet scrollBottom = elem.scrollHeight - elem.scrollTop - elem.clientHeight;\n```\n\nIn other words: (full height) minus (scrolled out top part) minus (visible part) -- that's exactly the scrolled out bottom part.","parent":"size-and-scroll"}},"scrollbar-width":{"type":"Task","value":{"title":"What is the scrollbar width?","slug":"scrollbar-width","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/09-size-and-scroll/2-scrollbar-width","weight":2,"libs":[],"importance":3,"content":"\nWrite the code that returns the width of a standard scrollbar.\n\nFor Windows it usually varies between `12px` and `20px`. If the browser doesn't reserves any space for it, then it may be `0px`.\n\nP.S. The code should work for any HTML document, do not depend on its content.","solution":"To get the scrollbar width, we can create an element with the scroll, but without borders and paddings.\n\nThen the difference between its full width `offsetWidth` and the inner content area width `clientWidth` will be exactly the scrollbar:\n\n```js run\n// create a div with the scroll\nlet div = document.createElement('div');\n\ndiv.style.overflowY = 'scroll';\ndiv.style.width = '50px';\ndiv.style.height = '50px';\n\n// must put it in the document, otherwise sizes will be 0\ndocument.body.append(div);\nlet scrollWidth = div.offsetWidth - div.clientWidth;\n\ndiv.remove();\n\nalert(scrollWidth);\n```","parent":"size-and-scroll"}},"put-ball-in-center":{"type":"Task","value":{"title":"Place the ball in the field center","slug":"put-ball-in-center","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/09-size-and-scroll/4-put-ball-in-center","weight":4,"libs":[],"importance":5,"content":"\nHere's how the source document looks:\n\n[iframe src=\"source\" edit link height=180]\n\nWhat are coordinates of the field center?\n\nCalculate them and use to place the ball into the center of the field:\n\n[iframe src=\"solution\" height=180]\n\n- The element should be moved by JavaScript, not CSS.\n- The code should work with any ball size (`10`, `20`, `30` pixels) and any field size, not be bound to the given values.\n\nP.S. Sure, centering could be done with CSS, but here we want exactly JavaScript. Further we'll meet other topics and more complex situations when JavaScript must be used. Here we do a \"warm-up\".","solution":"The ball has `position:absolute`. It means that its `left/top` coordinates are measured from the nearest positioned element, that is `#field` (because it has `position:relative`).\n\nThe coordinates start from the inner left-upper corner of the field:\n\n![](field.png)\n\nThe inner field width/height is `clientWidth/clientHeight`. So the field center has coordinates `(clientWidth/2, clientHeight/2)`.\n\n...But if we set `ball.style.left/top` to such values, then not the ball as a whole, but the left-upper edge of the ball would be in the center:\n\n```js\nball.style.left = Math.round(field.clientWidth / 2) + 'px';\nball.style.top = Math.round(field.clientHeight / 2) + 'px';\n```\n\nHere's how it looks:\n\n[iframe height=180 src=\"ball-half\"]\n\nTo align the ball center with the center of the field, we should move the ball to the half of its width to the left and to the half of its height to the top:\n\n```js\nball.style.left = Math.round(field.clientWidth / 2 - ball.offsetWidth / 2) + 'px';\nball.style.top = Math.round(field.clientHeight / 2 - ball.offsetHeight / 2) + 'px';\n```\n\n**Attention: the pitfall!**\n\nThe code won't work reliably while `<img>` has no width/height:\n\n```html\n<img src=\"ball.png\" id=\"ball\">\n```\n\nWhen the browser does not know the width/height of an image (from tag attributes or CSS), then it assumes them to equal `0` until the image finishes loading.\n\nIn real life after the first load browser usually caches the image, and on next loads it will have the size immediately.\n\nBut on the first load the value of `ball.offsetWidth` is `0`. That leads to wrong coordinates.\n\nWe should fix that by adding `width/height` to `<img>`:\n\n```html\n<img src=\"ball.png\" *!*width=\"40\" height=\"40\"*/!* id=\"ball\">\n```\n\n...Or provide the size in CSS:\n\n```css\n#ball {\n  width: 40px;\n  height: 40px;\n}\n```","parent":"size-and-scroll"}},"width-vs-clientwidth":{"type":"Task","value":{"title":"The difference: CSS width versus clientWidth","slug":"width-vs-clientwidth","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/09-size-and-scroll/6-width-vs-clientwidth","weight":6,"libs":[],"importance":5,"content":"\nWhat's the difference between `getComputedStyle(elem).width` and `elem.clientWidth`?\n\nGive at least 3 differences. The more the better.","solution":"Differences:\n\n1. `clientWidth` is numeric, while `getComputedStyle(elem).width` returns a string with `px` at the end.\n2. `getComputedStyle` may return non-numeric width like `\"auto\"` for an inline element.\n3. `clientWidth` is the inner content area of the element plus paddings, while CSS width (with standard `box-sizing`) is the inner conand sometent area *without paddings*.\n4. If there's a scrollbar and the browser reserves the space for it, some browser substract that space from CSS width (cause it's not available for content any more), and some do not. The `clientWidth` property is always the same: scrollbar size is substracted if reserved.","parent":"size-and-scroll"}},"size-and-scroll-window":{"type":"Article","value":{"title":"Window sizes and scrolling","slug":"size-and-scroll-window","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/10-size-and-scroll-window/article.md","isFolder":false,"weight":10,"content":"\nHow to find out the width of the browser window? How to get the full height of the document, including the scrolled out part? How to scroll the page using JavaScript?\n\nFrom the DOM point of view, the root document element is `document.documentElement`. That element corresponds to `<html>` and has geometry properties described in the [previous chapter](info:size-and-scroll). For some cases we can use it, but there are additional methods and peculiarities important enough to consider.\n\n## Width/height of the window\n\nProperties `clientWidth/clientHeight` of `document.documentElement` is exactly what we want here:\n\n![](document-client-width-height.png)\n\n```online\nFor instance, this button shows the height of your window:\n\n<button onclick=\"alert(document.documentElement.clientHeight)\">alert(document.documentElement.clientHeight)</button>\n```\n\n````warn header=\"Not `window.innerWidth/Height`\"\nBrowsers also support properties `window.innerWidth/innerHeight`. They look like what we want. So what's the difference?\n\nIf there's a scrollbar occupying some space, `clientWidth/clientHeight` provide the width/height inside it. In other words, they return width/height of the visible part of the document, available for the content.\n\nAnd `window.innerWidth/innerHeight` ignore the scrollbar.\n\nIf there's a scrollbar, and it occupies some space, then these two lines show different values:\n```js run\nalert( window.innerWidth ); // full window width\nalert( document.documentElement.clientWidth ); // window width minus the scrollbar\n```\n\nIn most cases we need the *available* window width: to draw or position something. That is: inside scrollbars if there are any. So we should use `documentElement.clientHeight/Width`.\n````\n\n```warn header=\"`DOCTYPE` is important\"\nPlease note: top-level geometry properties may work a little bit differently when there's no `<!DOCTYPE HTML>` in HTML. Odd things are possible.\n\nIn modern HTML we should always write `DOCTYPE`. Generally that's not a JavaScript question, but here it affects JavaScript as well.\n```\n\n## Width/height of the document\n\nTheoretically, as the root document element is `documentElement.clientWidth/Height`, and it encloses all the content, we could measure its full size as `documentElement.scrollWidth/scrollHeight`.\n\nThese properties work well for regular elements. But for the whole page these properties do not work as intended. In Chrome/Safari/Opera if there's no scroll, then `documentElement.scrollHeight` may be even less than  `documentElement.clientHeight`! For regular elements that's a nonsense.\n\nTo have a reliable full window size, we should take the maximum of these properties:\n\n```js run\nlet scrollHeight = Math.max(\n  document.body.scrollHeight, document.documentElement.scrollHeight,\n  document.body.offsetHeight, document.documentElement.offsetHeight,\n  document.body.clientHeight, document.documentElement.clientHeight\n);\n\nalert('Full document height, with scrolled out part: ' + scrollHeight);\n```\n\nWhy so? Better don't ask. These inconsistencies come from ancient times, not a \"smart\" logic.\n\n## Get the current scroll [#page-scroll]\n\nRegular elements have their current scroll state in `elem.scrollLeft/scrollTop`.\n\nWhat's with the page? Most browsers provide `documentElement.scrollLeft/Top` for the document scroll, but Chrome/Safari/Opera have bugs (like [157855](https://code.google.com/p/chromium/issues/detail?id=157855), [106133](https://bugs.webkit.org/show_bug.cgi?id=106133)) and we should use  `document.body` instead of `document.documentElement` there.\n\nLuckily, we don't have to remember these peculiarities at all, because of the special properties `window.pageXOffset/pageYOffset`:\n\n```js run\nalert('Current scroll from the top: ' + window.pageYOffset);\nalert('Current scroll from the left: ' + window.pageXOffset);\n```\n\nThese properties are read-only.\n\n## Scrolling: scrollTo, scrollBy, scrollIntoView [#window-scroll]\n\n```warn\nTo scroll the page from JavaScript, its DOM must be fully built.\n\nFor instance, if we try to scroll the page from the script in `<head>`, it won't work.\n```\n\nRegular elements can be scrolled by changing `scrollTop/scrollLeft`.\n\nWe can do the same for the page:\n- For all browsers except Chrome/Safari/Opera: modify  `document.documentElement.scrollTop/Left`.\n- In Chrome/Safari/Opera: use `document.body.scrollTop/Left` instead.\n\nIt should work, but smells like cross-browser incompatibilities. Not good. Fortunately, there's a simpler, more universal solution: special methods  [window.scrollBy(x,y)](mdn:api/Window/scrollBy) and [window.scrollTo(pageX,pageY)](mdn:api/Window/scrollTo).\n\n- The method `scrollBy(x,y)` scrolls the page relative to its current position. For instance, `scrollBy(0,10)` scrolls the page `10px` down.\n\n    ```online\n    The button below demonstrates this:\n\n    <button onclick=\"window.scrollBy(0,10)\">window.scrollBy(0,10)</button>\n    ```\n- The method `scrollTo(pageX,pageY)` scrolls the page relative to the document top-left corner. It's like setting `scrollLeft/scrollTop`.\n\n    To scroll to the very beginning, we can use `scrollTo(0,0)`.\n\n    ```online\n    <button onclick=\"window.scrollTo(0,0)\">window.scrollTo(0,0)</button>\n    ```\n\nThese methods work for all browsers the same way.\n\n## scrollIntoView\n\nFor completeness, let's cover one more method:  [elem.scrollIntoView(top)](mdn:api/Element/scrollIntoView).\n\nThe call to `elem.scrollIntoView(top)` scrolls the page to make `elem` visible. It has one argument:\n\n- if `top=true` (that's the default), then the page will be scrolled to make `elem` appear on the top of the window. The upper edge of the element is aligned with the window top.\n- if `top=false`, then the page scrolls to make `elem` appear at the bottom. The bottom edge of the element is aligned with the window bottom.\n\n```online\nThe button below scrolls the page to make itself show at the window top:\n\n<button onclick=\"this.scrollIntoView()\">this.scrollIntoView()</button>\n\nAnd this button scrolls the page to show it at the bottom:\n\n<button onclick=\"this.scrollIntoView(false)\">this.scrollIntoView(false)</button>\n```\n\n## Forbid the scrolling\n\nSometimes we need to make the document \"unscrollable\". For instance, when we need to cover it with a large message requiring immediate attention, and we want the visitor to interact with that message, not with the document.\n\nTo make the document unscrollable, its enough to set `document.body.style.overflow = \"hidden\"`. The page will freeze on its current scroll.\n\n```online\nTry it:\n\n<button onclick=\"document.body.style.overflow = 'hidden'\">`document.body.style.overflow = 'hidden'`</button>\n\n<button onclick=\"document.body.style.overflow = ''\">`document.body.style.overflow = ''`</button>\n\nThe first button freezes the scroll, the second one resumes it.\n```\n\nWe can use the same technique to \"freeze\" the scroll for other elements, not just for `document.body`.\n\nThe drawback of the method is that the scrollbar disappears. If it occupied some space, then that space is now free, and the content \"jumps\" to fill it.\n\nThat looks a bit odd, but can be worked around if we compare `clientWidth` before and after the freeze, and if it increased (the scrollbar disappeared) then add `padding` to `document.body` in place of the scrollbar, to keep the content width same.\n\n## Summary\n\nGeometry:\n\n- Width/height of the visible part of the document (content area width/height): `document.documentElement.clientWidth/Height`\n- Width/height of the whole document, with the scrolled out part:\n\n    ```js\n    let scrollHeight = Math.max(\n      document.body.scrollHeight, document.documentElement.scrollHeight,\n      document.body.offsetHeight, document.documentElement.offsetHeight,\n      document.body.clientHeight, document.documentElement.clientHeight\n    );\n    ```\n\nScrolling:\n\n- Read the current scroll: `window.pageYOffset/pageXOffset`.\n- Change the current scroll:\n\n    - `window.scrollTo(pageX,pageY)` -- absolute coordinates,\n    - `window.scrollBy(x,y)` -- scroll relative the current place,\n    - `elem.scrollIntoView(top)` -- scroll to make `elem` visible (align with the top/bottom of the window).","libs":[],"children":[],"parent":"document"}},"coordinates":{"type":"Article","value":{"title":"Coordinates","slug":"coordinates","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/11-coordinates/article.md","isFolder":false,"weight":11,"content":"\nTo move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\n1. Relative to the window(or another viewport) top/left.\n2. Relative to the document top/left.\n\nIt's important to understand the difference and which type is where.\n\n## Window coordinates: getBoundingClientRect\n\nWindow coordinates start at the left-upper corner of the window.\n\nThe method `elem.getBoundingClientRect()` returns window coordinates for `elem` as an object with properties:\n\n- `top` -- Y-coordinate for the top element edge,\n- `left` -- X-coordinate for the left element edge,\n- `right` -- X-coordinate for the right element edge,\n- `bottom` -- Y-coordinate for the bottom element edge.\n\nLike this:\n\n![](coords.png)\n\n\nWindow coordinates do not take the scrolled out part of the document into account, they are calculated from the window left-upper corner.\n\nIn other words, when we scroll the page, the element goes up or down, *its window coordinates change*. That's very important.\n\n```online\nClick the button to see its window coordinates:\n\n<input id=\"brTest\" type=\"button\" value=\"Show button.getBoundingClientRect() for this button\" onclick='showRect(this)'/>\n\n<script>\nfunction showRect(elem) {\n  let r = elem.getBoundingClientRect();\n  alert(\"{top:\"+r.top+\", left:\"+r.left+\", right:\"+r.right+\", bottom:\"+ r.bottom + \"}\");\n}\n</script>\n\nIf you scroll the page, the button position changes, and window coordinates as well.\n```\n\nAlso:\n\n- Coordinates may be decimal fractions. That's normal, internally browser uses them for calculations. We don't have to round them when setting to `style.position.left/top`, the browser is fine with fractions.\n- Coordinates may be negative. For instance, if the page is scrolled down and the `elem` top is now above the window then `elem.getBoundingClientRect().top` is negative.\n- Some browsers (like Chrome) also add to the result `getBoundingClientRect` properties `width` and `height`. We can get them also by subtraction: `height=bottom-top`, `width=right-left`.\n\n```warn header=\"Coordinates right/bottom are different from CSS properties\"\nIf we compare window coordinates versus CSS positioning, then there are obvious similarities to `position:fixed` -- also the position relative to the viewport.\n\nBut in CSS the `right` property means the distance from the right edge, and the `bottom` -- from the bottom edge.\n\nIf we just look at the picture above, we can see that in JavaScript it is not so. All window coordinates are counted from the upper-left corner, including these ones.\n```\n\n## elementFromPoint(x, y) [#elementFromPoint]\n\nThe call to `document.elementFromPoint(x, y)` returns the most nested element at window coordinates `(x, y)`.\n\nThe syntax is:\n\n```js\nlet elem = document.elementFromPoint(x, y);\n```\n\nFor instance, the code below highlights and outputs the tag of the element that is now in the middle of the window:\n\n```js run\nlet centerX = document.documentElement.clientWidth / 2;\nlet centerY = document.documentElement.clientHeight / 2;\n\nlet elem = document.elementFromPoint(centerX, centerY);\n\nelem.style.background = \"red\";\nalert(elem.tagName);\n```\n\nAs it uses window coordinates, the element may be different depending on the current scroll position.\n\n````warn header=\"For out-of-window coordinates the `elementFromPoint` returns `null`\"\nThe method `document.elementFromPoint(x,y)` only works if `(x,y)` are inside the visible area.\n\nIf any of the coordinates is negative or exceeds the window width/height, then it returns `null`.\n\nIn most cases such behavior is not a problem, but we should keep that in mind.\n\nHere's a typical error that may occur if we don't check for it:\n\n```js\nlet elem = document.elementFromPoint(x, y);\n// if the coordinates happen to be out of the window, then elem = null\n*!*\nelem.style.background = ''; // Error!\n*/!*\n```\n````\n\n## Using for position:fixed\n\nMost of time we need coordinates to position something. In CSS, to position an element relative to the viewport we use `position:fixed` together with `left/top` (or `right/bottom`).\n\nWe can use `getBoundingClientRect` to get coordinates of an element, and then to show something near it.\n\nFor instance, the function `createMessageUnder(elem, html)` below shows the message under `elem`:\n\n```js\nlet elem = document.getElementById(\"coords-show-mark\");\n\nfunction createMessageUnder(elem, html) {\n  // create message element\n  let message = document.createElement('div');\n  // better to use a css class for the style here\n  message.style.cssText = \"position:fixed; color: red\";\n\n*!*\n  // assign coordinates, don't forget \"px\"!\n  let coords = elem.getBoundingClientRect();\n\n  message.style.left = coords.left + \"px\";\n  message.style.top = coords.bottom + \"px\";\n*/!*\n\n  message.innerHTML = html;\n\n  return message;\n}\n\n// Usage:\n// add it for 5 seconds in the document\nlet message = createMessageUnder(elem, 'Hello, world!');\ndocument.body.append(message);\nsetTimeout(() => message.remove(), 5000);\n```\n\n```online\nClick the button to run it:\n\n<button id=\"coords-show-mark\">Button with id=\"coords-show-mark\", the message will appear under it</button>\n```\n\nThe code can be modified to show the message at the left, right, below, apply CSS animations to \"fade it in\" and so on. That's easy, as we have all the coordinates and sizes of the element.\n\nBut note the important detail: when the page is scrolled, the message flows away from the button.\n\nThe reason is obvious: the message element relies on `position:fixed`, so it remains at the same place of the window while the page scrolls away.\n\nTo change that, we need to use document-based coordinates and `position:absolute`.\n\n## Document coordinates\n\nDocument-relative coordinates start from the left-upper corner of the document, not the window.\n\nIn CSS, window coordinates correspond to `position:fixed`, while document coordinates are similar to `position:absolute` on top.\n\nWe can use `position:absolute` and `top/left` to put something at a certain place of the document, so that it remains there during a page scroll. But we need the right coordinates first.\n\nFor clarity we'll call window coordinates `(clientX,clientY)` and document coordinates `(pageX,pageY)`.\n\nWhen the page is not scrolled, then window coordinate and document coordinates are actually the same. Their zero points match too:\n\n![](document-window-coordinates-zero.png)\n\nAnd if we scroll it, then `(clientX,clientY)` change, because they are relative to the window, but `(pageX,pageY)` remain the same.\n\nHere's the same page after the vertical scroll:\n\n![](document-window-coordinates-scroll.png)\n\n- `clientY` of the header `\"From today's featured article\"` became `0`, because the element is now on window top.\n- `clientX` didn't change, as we didn't scroll horizontally.\n- `pageX` and `pageY` coordinates of the element are still the same, because they are relative to the document.\n\n## Getting document coordinates [#getCoords]\n\nThere's no standard method to get document coordinates of an element. But it's easy to write it.\n\nThe two coordinate systems are connected by the formula:\n- `pageY` = `clientY` + height of the scrolled-out vertical part of the document.\n- `pageX` = `clientX` + width of the scrolled-out horizontal part of the document.\n\nThe function `getCoords(elem)` will take window coordinates from `elem.getBoundingClientRect()` and add the current scroll to them:\n\n```js\n// get document coordinates of the element\nfunction getCoords(elem) {\n  let box = elem.getBoundingClientRect();\n\n  return {\n    top: box.top + pageYOffset,\n    left: box.left + pageXOffset\n  };\n}\n```\n\n## Summary\n\nAny point on the page has coordinates:\n\n1. Relative to the window -- `elem.getBoundingClientRect()`.\n2. Relative to the document -- `elem.getBoundingClientRect()` plus the current page scroll.\n\nWindow coordinates are great to use with `position:fixed`, and document coordinates do well with `position:absolute`.\n\nBoth coordinate systems have their \"pro\" and \"contra\", there are times we need one or the other one, just like CSS `position` `absolute` and `fixed`.","libs":[],"children":["find-point-coordinates","position-at","position-at-absolute","position-inside-absolute"],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,100,111,99,117,109,101,110,116,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,40,39,68,79,77,67,111,110,116,101,110,116,76,111,97,100,101,100,39,44,32,102,117,110,99,116,105,111,110,40,41,32,123,10,10,32,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,99,111,111,114,100,115,45,115,104,111,119,45,109,97,114,107,39,41,46,111,110,99,108,105,99,107,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,10,32,32,32,32,108,101,116,32,101,108,101,109,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,34,99,111,111,114,100,115,45,115,104,111,119,45,109,97,114,107,34,41,59,10,10,32,32,32,32,102,117,110,99,116,105,111,110,32,99,114,101,97,116,101,77,101,115,115,97,103,101,85,110,100,101,114,40,101,108,101,109,44,32,116,101,120,116,41,32,123,10,32,32,32,32,32,32,108,101,116,32,99,111,111,114,100,115,32,61,32,101,108,101,109,46,103,101,116,66,111,117,110,100,105,110,103,67,108,105,101,110,116,82,101,99,116,40,41,59,10,32,32,32,32,32,32,108,101,116,32,109,101,115,115,97,103,101,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,100,105,118,39,41,59,10,32,32,32,32,32,32,109,101,115,115,97,103,101,46,115,116,121,108,101,46,99,115,115,84,101,120,116,32,61,32,34,112,111,115,105,116,105,111,110,58,102,105,120,101,100,59,32,99,111,108,111,114,58,32,114,101,100,34,59,10,10,32,32,32,32,32,32,109,101,115,115,97,103,101,46,115,116,121,108,101,46,108,101,102,116,32,61,32,99,111,111,114,100,115,46,108,101,102,116,32,43,32,34,112,120,34,59,10,32,32,32,32,32,32,109,101,115,115,97,103,101,46,115,116,121,108,101,46,116,111,112,32,61,32,99,111,111,114,100,115,46,98,111,116,116,111,109,32,43,32,34,112,120,34,59,10,10,32,32,32,32,32,32,109,101,115,115,97,103,101,46,105,110,110,101,114,72,84,77,76,32,61,32,116,101,120,116,59,10,10,32,32,32,32,32,32,114,101,116,117,114,110,32,109,101,115,115,97,103,101,59,10,32,32,32,32,125,10,10,32,32,32,32,108,101,116,32,109,101,115,115,97,103,101,32,61,32,99,114,101,97,116,101,77,101,115,115,97,103,101,85,110,100,101,114,40,101,108,101,109,44,32,39,72,101,108,108,111,44,32,119,111,114,108,100,33,39,41,59,10,32,32,32,32,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,101,110,100,40,109,101,115,115,97,103,101,41,59,10,32,32,32,32,115,101,116,84,105,109,101,111,117,116,40,40,41,32,61,62,32,109,101,115,115,97,103,101,46,114,101,109,111,118,101,40,41,44,32,53,48,48,48,41,59,10,32,32,125,10,10,125,41,59,10,10,60,47,115,99,114,105,112,116,62,10]},"parent":"document"}},"find-point-coordinates":{"type":"Task","value":{"title":"Find window coordinates of the field","slug":"find-point-coordinates","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/11-coordinates/1-find-point-coordinates","weight":1,"libs":[],"importance":5,"content":"\nIn the iframe below you can see a document with the green \"field\".\n\nUse JavaScript to find window coordinates of corners pointed by with arrows.\n\nThere's a small feature implemented in the document for convenience. A click at any place shows coordinates there.\n\n[iframe border=1 height=360 src=\"source\" link edit]\n\nYour code should use DOM to get window coordinates of:\n\n1. Left-upper outer corner (that's simple).\n2. Right-bottom outer corner (simple too).\n3. Left-upper inner corner (a bit harder).\n4. Right-bottom inner corner (there are several ways, choose one).\n\nThe coordinates that you calculate should be the same as those returned by the mouse click.\n\nP.S. The code should also work if the element has another size or border, not bound to any fixed values.","solution":"# Outer corners\n\nOuter corners are basically what we get from  [elem.getBoundingClientRect()](https://developer.mozilla.org/en-US/docs/DOM/element.getBoundingClientRect).\n\nCoordinates of the upper-left corner `answer1` and the bottom-right corner `answer2`:\n\n```js\nlet coords = elem.getBoundingClientRect();\n\nlet answer1 = [coords.left, coords.top];\nlet answer2 = [coords.right, coords.bottom];\n```\n\n# Left-upper inner corner\n\nThat differs from the outer corner by the border width. A reliable way to get the distance is `clientLeft/clientTop`:\n\n```js\nlet answer3 = [coords.left + field.clientLeft, coords.top + field.clientTop];\n```\n\n# Right-bottom inner corner\n\nIn our case we need to substract the border size from the outer coordinates.\n\nWe could use CSS way:\n\n```js\nlet answer4 = [\n  coords.right - parseInt(getComputedStyle(field).borderRightWidth),\n  coords.bottom - parseInt(getComputedStyle(field).borderBottomWidth)\n];\n```\n\nAn alternative way would be to add `clientWidth/clientHeight` to coordinates of the left-upper corner. That's probably even better:\n\n```js\nlet answer4 = [\n  coords.left + elem.clientLeft + elem.clientWidth,\n  coords.top + elem.clientTop + elem.clientHeight\n];\n```","parent":"coordinates"}},"position-at":{"type":"Task","value":{"title":"Show a note near the element","slug":"position-at","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/11-coordinates/2-position-at","weight":2,"libs":[],"importance":5,"content":"\nCreate a function `positionAt(anchor, position, elem)` that positions `elem`, depending on  `position` either at the top (`\"top\"`), right (`\"right\"`) or bottom (`\"bottom\"`) of the element `anchor`.\n\nUse it to make a function `showNote(anchor, position, html)` that shows an element with the class `\"note\"` and the text `html` at the given position near the anchor.\n\nShow the notes like here:\n\n[iframe src=\"solution\" height=\"350\" border=\"1\" link]\n\nP.S. The note should have `position:fixed` for this task.","solution":"In this task we only need to accuracely calculate the coorindates. See the code for details.\n\nPlease note: the elements must be in the document to read `offsetHeight` and other properties.\nA hidden (`display:none`) or out of the document element has no size.","parent":"coordinates"}},"position-at-absolute":{"type":"Task","value":{"title":"Show a note near the element (absolute)","slug":"position-at-absolute","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/11-coordinates/3-position-at-absolute","weight":3,"libs":[],"importance":5,"content":"\nModify the solution of the [previous task](info:task/position-at) so that the note uses `position:absolute` instead of `position:fixed`.\n\nThat will prevent its \"runaway\" from the element when the page scrolls.\n\nTake the solution of that task as a starting point. To test the scroll, add the style `<body style=\"height: 2000px\">`.","solution":"The solution is actually pretty simple:\n\n- Use `position:absolute` in CSS instead of `position:fixed` for `.note`.\n- Use the function [getCoords()](info:coordinates#getCoords) from the chapter <info:coordinates> to get document-relative coordinates.","parent":"coordinates"}},"position-inside-absolute":{"type":"Task","value":{"title":"Position the note inside (absolute)","slug":"position-inside-absolute","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/1-document/11-coordinates/4-position-inside-absolute","weight":4,"libs":[],"importance":5,"content":"\nExtend the previous task <info:task/position-at-absolute>: teach the function  `positionAt(anchor, position, elem)` to insert `elem` inside the `anchor`.\n\nNew values for `position`:\n\n- `top-out`, `right-out`, `bottom-out` -- work the same as before, they insert the `elem` over/right/under `anchor`.\n- `top-in`, `right-in`, `bottom-in` -- insert `elem` inside the `anchor`: stick it to the upper/right/bottom edge.\n\nFor instance:\n\n```js\n// shows the note above blockquote\npositionAt(blockquote, \"top-out\", note);\n\n// shows the note inside blockquote, at the top\npositionAt(blockquote, \"top-in\", note);\n```\n\nThe result:\n\n[iframe src=\"solution\" height=\"310\" border=\"1\" link]\n\nAs the source code, take the solution of the task <info:task/position-at-absolute>.","solution":"","parent":"coordinates"}},"events":{"type":"Article","value":{"title":"Introduction into Events","slug":"events","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events","isFolder":true,"weight":2,"content":"\nAn introduction to browser events, event properties and handling patterns.","libs":[],"children":["introduction-browser-events","bubbling-and-capturing","event-delegation","default-browser-action","dispatch-events"],"parent":"ui"}},"introduction-browser-events":{"type":"Article","value":{"title":"Introduction to browser events","slug":"introduction-browser-events","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/article.md","isFolder":false,"weight":1,"content":"\n*An event* is a signal that something has happened. All DOM nodes generate such signals (but events are not limited to DOM).\n\nHere's a list of the most useful DOM events, just to take a look at:\n\n**Mouse events:**\n- `click` -- when the mouse clicks on an element (touchscreen devices generate it on a tap).\n- `contextmenu` -- when the mouse right-clicks on an element.\n- `mouseover` / `mouseout` -- when the mouse cursor comes over / leaves an element.\n- `mousedown` / `mouseup` -- when the mouse button is pressed / released over an element.\n- `mousemove` -- when the mouse is moved.\n\n**Form element events:**\n- `submit` -- when the visitor submits a `<form>`.\n- `focus` --  when the visitor focuses on an element, e.g. on an `<input>`.\n\n**Keyboard events:**\n- `keydown` and `keyup` -- when the visitor presses and then releases the button.\n\n**Document events**\n- `DOMContentLoaded` -- when the HTML is loaded and processed, DOM is fully built.\n\n**CSS events:**\n- `transitionend` -- when a CSS-animation finishes.\n\nThere are many other events. We'll get into more details of particular events in next chapters.\n\n## Event handlers\n\nTo react on events we can assign a *handler* -- a function that runs in case of an event.\n\nHandlers is a way to run JavaScript code in case of user actions.\n\nThere are several ways to assign a handler. Let's see them, starting from the simplest one.\n\n### HTML-attribute\n\nA handler can be set in HTML with an attribute named `on<event>`.\n\nFor instance, to assign a `click` handler for an `input`, we can use `onclick`, like here:\n\n```html run\n<input value=\"Click me\" *!*onclick=\"alert('Click!')\"*/!* type=\"button\">\n```\n\nOn mouse click, the code inside `onclick` runs.\n\nPlease note that inside `onclick` we use single quotes, because the attribute itself is in double quotes. If we forget that the code is inside the attribute and use double quotes inside, like this:  `onclick=\"alert(\"Click!\")\"`, then it won't work right.\n\nAn HTML-attribute is not a convenient place to write a lot of code, so we'd better create a JavaScript function and call it there.\n\nHere a click runs the function `countRabbits()`:\n\n```html autorun height=50\n<script>\n  function countRabbits() {\n    for(let i=1; i<=3; i++) {\n      alert(\"Rabbit number \" + i);\n    }\n  }\n</script>\n\n<input type=\"button\" *!*onclick=\"countRabbits()\"*/!* value=\"Count rabbits!\">\n```\n\nAs we know, HTML attribute names are not case-sensitive, so `ONCLICK` works as well as `onClick` and `onCLICK`... But usually attributes are lowercased: `onclick`.\n\n### DOM property\n\nWe can assign a handler using a DOM property `on<event>`.\n\nFor instance, `elem.onclick`:\n\n```html autorun\n<input id=\"elem\" type=\"button\" value=\"Click me\">\n<script>\n*!*\n  elem.onclick = function() {\n    alert('Thank you');\n  };\n*/!*\n</script>\n```\n\nIf the handler is assigned using an HTML-attribute then the browser reads it, creates a new function from the attribute content and writes it to the DOM property.\n\nSo this way is actually the same as the previous one.\n\n**The handler is always in the DOM property: the HTML-attribute is just one of the ways to initialize it.**\n\nThese two code pieces work the same:\n\n1. Only HTML:\n\n    ```html autorun height=50\n    <input type=\"button\" *!*onclick=\"alert('Click!')\"*/!* value=\"Button\">\n    ```\n2. HTML + JS:\n\n    ```html autorun height=50\n    <input type=\"button\" id=\"button\" value=\"Button\">\n    <script>\n    *!*\n      button.onclick = function() {\n        alert('Click!');\n      };\n    */!*\n    </script>\n    ```\n\n**As there's only one `onclick` property, we can't assign more than one event handler.**\n\nIn the example below adding a handler with JavaScript overwrites the existing handler:\n\n```html run height=50 autorun\n<input type=\"button\" id=\"elem\" onclick=\"alert('Before')\" value=\"Click me\">\n<script>\n*!*\n  elem.onclick = function() { // overwrites the existing handler\n    alert('After'); // only this will be shown\n  };\n*/!*\n</script>\n```\n\nBy the way, we can assign an existing function as a handler directly:\n\n```js\nfunction sayThanks() {\n  alert('Thanks!');\n}\n\nelem.onclick = sayThanks;\n```\n\nTo remove a handler -- assign `elem.onclick = null`.\n\n## Accessing the element: this\n\nThe value of `this` inside a handler is the element. The one which has the handler on it.\n\nIn the code below `button` shows its contents using `this.innerHTML`:\n\n```html height=50 autorun\n<button onclick=\"alert(this.innerHTML)\">Click me</button>\n```\n\n## Possible mistakes\n\nIf you're starting to work with event -- please note some subtleties.\n\n**The function should be assigned as `sayThanks`, not `sayThanks()`.**\n\n```js\n// right\nbutton.onclick = sayThanks;\n\n// wrong\nbutton.onclick = sayThanks();\n```\n\nIf we add brackets, then `sayThanks()` --  will be the *result* of the function execution, so `onclick` in the last code becomes `undefined` (the function returns nothing). That won't work.\n\n...But in the markup we do need the brackets:\n\n```html\n<input type=\"button\" id=\"button\" onclick=\"sayThanks()\">\n```\n\nThe difference is easy to explain. When the browser reads the attribute, it creates a handler function with the body from its content.\n\nSo the last example is the same as:\n```js\nbutton.onclick = function() {\n*!*\n  sayThanks(); // the attribute content\n*/!*\n};\n```\n\n**Use functions, not strings.**\n\nThe assignment `elem.onclick = \"alert(1)\"` would work too. It works for compatibility reasons, but strongly not recommended.\n\n**Don't use `setAttribute` for handlers.**\n\nSuch a call won't work:\n\n```js run no-beautify\n// a click on <body> will generate errors,\n// because attributes are always strings, function becomes a string\ndocument.body.setAttribute('onclick', function() { alert(1) });\n```\n\n**DOM-property case matters.**\n\nAssign a handler to `elem.onclick`, not `elem.ONCLICK`, because DOM properties are case-sensitive.\n\n## addEventListener\n\nThe fundamental problem of the aforementioned ways to assign handlers -- we can't assign multiple handlers to one event.\n\nFor instance, one part of our code wants to highlight a button on click, and another one wants to show a message.\n\nWe'd like to assign two event handlers for that. But a new DOM property will overwrite the existing one:\n\n```js no-beautify\ninput.onclick = function() { alert(1); }\n// ...\ninput.onclick = function() { alert(2); } // replaces the previous handler\n```\n\nWeb-standard developers understood that long ago and suggested an alternative way of managing handlers using special methods `addEventListener` and `removeEventListener`. They are free of such a problem.\n\nThe syntax to add a handler:\n\n```js\nelement.addEventListener(event, handler[, phase]);\n```\n\n`event`\n: Event name, e.g. `\"click\"`.\n\n`handler`\n: The handler function.\n\n`phase`\n: An optional argument, the \"phase\" for the handler to work. To be covered later. Usually we don't use it.\n\nTo remove the handler, use `removeEventListener`:\n\n\n```js\n// exactly the same arguments as addEventListener\nelement.removeEventListener(event, handler[, phase]);\n```\n\n````warn header=\"Removal requires the same function\"\nTo remove a handler we should pass exactly the same function as was assigned.\n\nThat doesn't work:\n\n```js no-beautify\nelem.addEventListener( \"click\" , () => alert('Thanks!'));\n// ....\nelem.removeEventListener( \"click\", () => alert('Thanks!'));\n```\n\nThe handler won't be removed, because `removeEventListener` gets another function -- with the same code, but that doesn't matter.\n\nHere's the right way:\n\n```js\nfunction handler() {\n  alert( 'Thanks!' );\n}\n\ninput.addEventListener(\"click\", handler);\n// ....\ninput.removeEventListener(\"click\", handler);\n```\n\nPlease note -- if we don't store the function in a variable, then we can't remove it. There's no way to \"read back\" handlers assigned by `addEventListener`.\n````\n\nMultiple calls to `addEventListener` allow to add multiple handlers, like this:\n\n```html run no-beautify\n<input id=\"elem\" type=\"button\" value=\"Click me\"/>\n\n<script>\n  function handler1() {\n    alert('Thanks!');\n  };\n\n  function handler2() {\n    alert('Thanks again!');\n  }\n\n*!*\n  elem.onclick = () => alert(\"Hello\");\n  elem.addEventListener(\"click\", handler1); // Thanks!\n  elem.addEventListener(\"click\", handler2); // Thanks again!\n*/!*\n</script>\n```\n\nAs we can see in the example above, we can set handlers *both* using a DOM-property and `addEventListener`. But generally we use only one of these ways.\n\n````warn header=\"For some events handlers only work with `addEventListener`\"\nThere exist events that can't be assigned via a DOM-property. Must use `addEventListener`.\n\nFor instance, the event `transitionend` (CSS animation finished) is like that.\n\nTry the code below. In most browsers only the second handler works, not the first one.\n\n```html run\n<style>\n  input {\n    transition: width 1s;\n    width: 100px;\n  }\n\n  .wide {\n    width: 300px;\n  }\n</style>\n\n<input type=\"button\" id=\"elem\" onclick=\"this.classList.toggle('wide')\" value=\"Click me\">\n\n<script>\n  elem.ontransitionend = function() {\n    alert(\"DOM property\"); // doesn't work\n  };\n\n*!*\n  elem.addEventListener(\"transitionend\", function() {\n    alert(\"addEventListener\"); // shows up when the animation finishes\n  });\n*/!*\n</script>\n```\n````\n\n## Event object\n\nTo properly handle an event we'd want to know more about what's happened. Not just a \"click\" or a \"keypress\", but what were the pointer coordinates? Which key was pressed? And so on.\n\nWhen an event happens, the browser creates an *event object*, puts details into it and passes it as an argument to the handler.\n\nHere's an example of getting mouse coordinates from the event object:\n\n```html run\n<input type=\"button\" value=\"Click me\" id=\"elem\">\n\n<script>\n  elem.onclick = function(*!*event*/!*) {\n    // show event type, element and coordinates of the click\n    alert(event.type + \" at \" + event.currentTarget);\n    alert(\"Coordinates: \" + event.clientX + \":\" + event.clientY);\n  };\n</script>\n```\n\nSome properties of `event` object:\n\n`event.type`\n: Event type, here it's `\"click\"`.\n\n`event.currentTarget`\n: Element that handled the event. That's exactly the same as `this`, unless you bind `this` to something else, and then `event.currentTarget` becomes useful.\n\n`event.clientX / event.clientY`\n: Window-relative coordinates of the cursor, for mouse events.\n\nThere are more properties. They depend on the event type, so we'll study them later when come to different events in details.\n\n````smart header=\"The event object is also accessible from HTML\"\nIf we assign a handler in HTML, we can also use the `event` object, like this:\n\n```html autorun height=60\n<input type=\"button\" onclick=\"*!*alert(event.type)*/!*\" value=\"Event type\">\n```\n\nThat's possible because when the browser reads the attribute, it creates a handler like this:  `function(event) { alert(event.type) }`. That is: its first argument is called `\"event\"`, and the body is taken from the attribute.\n````\n\n\n## Object handlers: handleEvent\n\nWe can assign an object as an event handler using `addEventListener`. When an event occurs, its `handleEvent` method is called with it.\n\nFor instance:\n\n\n```html run\n<button id=\"elem\">Click me</button>\n\n<script>\n  elem.addEventListener('click', {\n    handleEvent(event) {\n      alert(event.type + \" at \" + event.currentTarget);\n    }\n  });\n</script>\n```\n\nIn other words, when `addEventListener` receives an object as the handler, it calls `object.handleEvent(event)` in case of an event.\n\nWe could also use a class for that:\n\n\n```html run\n<button id=\"elem\">Click me</button>\n\n<script>\n  class Menu {\n    handleEvent(event) {\n      switch(event.type) {\n        case 'mousedown':\n          elem.innerHTML = \"Mouse button pressed\";\n          break;\n        case 'mouseup':\n          elem.innerHTML += \"...and released.\";\n          break;\n      }\n    }\n  }\n\n*!*\n  let menu = new Menu();\n  elem.addEventListener('mousedown', menu);\n  elem.addEventListener('mouseup', menu);\n*/!*\n</script>\n```\n\nHere the same object handles both events. Please note that we need to explicitly setup the events to listen using `addEventListener`. The `menu` object only gets `mousedown` and `mouseup` here, not any other types of events.\n\nThe method `handleEvent` does not have to do all the job by itself. It can call other event-specific methods instead, like this:\n\n```html run\n<button id=\"elem\">Click me</button>\n\n<script>\n  class Menu {\n    handleEvent(event) {\n      // mousedown -> onMousedown\n      let method = 'on' + event.type[0].toUpperCase() + event.type.slice(1);\n      this[method](event);\n    }\n\n    onMousedown() {\n      elem.innerHTML = \"Mouse button pressed\";\n    }\n\n    onMouseup() {\n      elem.innerHTML += \"...and released.\";\n    }\n  }\n\n  let menu = new Menu();\n  elem.addEventListener('mousedown', menu);\n  elem.addEventListener('mouseup', menu);\n</script>\n```\n\nNow event handlers are clearly separated, that may be easier to support.\n\n## Summary\n\nThere are 3 ways to assign event handlers:\n\n1. HTML attribute: `onclick=\"...\"`.\n2. DOM property: `elem.onclick = function`.\n3. Methods: `elem.addEventListener(event, handler[, phase])` to add, `removeEventListener` to remove.\n\nHTML attributes are used sparingly, because JavaScript in the middle of an HTML tag looks a little bit odd and alien. Also can't write lots of code in there.\n\nDOM properties are ok to use, but we can't assign more than one handler of the particular event. In many cases that limitation is not pressing.\n\nThe last way is the most flexible, but it is also the longest to write. There are few events that only work with it, for instance `transtionend` and `DOMContentLoaded` (to be covered). Also `addEventListener` supports objects as event handlers. In that case the method `handleEvent` is called in case of the event.\n\nNo matter how you assign the handler -- it gets an event object as the first argument. That object contains the details about what's happened.\n\nWe'll learn more about events in general and about different types of events in the next chapters.","libs":[],"children":["hide-other","hide-self-onclick","which-handlers-run","move-ball-field","sliding-menu","hide-message","carousel"],"headHtml":{"type":"Buffer","data":[60,115,116,121,108,101,62,10,47,42,10,46,100,48,32,123,32,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,109,97,114,103,105,110,58,97,117,116,111,59,32,125,10,46,100,49,32,112,32,123,32,109,97,114,103,105,110,58,32,48,32,125,10,46,100,49,32,123,10,109,97,114,103,105,110,58,50,101,109,59,10,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,103,114,101,101,110,59,10,119,105,100,116,104,58,49,51,101,109,59,10,104,101,105,103,104,116,58,49,51,101,109,59,10,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,10,125,10,46,100,49,32,46,110,117,109,98,101,114,32,123,10,32,32,108,105,110,101,45,104,101,105,103,104,116,58,32,50,101,109,59,10,125,10,46,100,50,32,123,10,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,10,109,97,114,103,105,110,58,97,117,116,111,59,10,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,98,108,117,101,59,10,119,105,100,116,104,58,57,101,109,59,10,104,101,105,103,104,116,58,57,101,109,59,10,125,10,46,100,49,32,46,100,50,32,44,110,117,109,98,101,114,32,123,10,32,32,108,105,110,101,45,104,101,105,103,104,116,58,32,50,101,109,59,10,125,10,46,100,51,32,123,10,116,101,120,116,45,97,108,105,103,110,58,99,101,110,116,101,114,59,10,109,97,114,103,105,110,58,97,117,116,111,59,10,98,97,99,107,103,114,111,117,110,100,45,99,111,108,111,114,58,114,101,100,59,10,119,105,100,116,104,58,53,101,109,59,10,104,101,105,103,104,116,58,53,101,109,59,10,125,10,46,100,49,32,46,100,50,32,46,100,51,32,46,110,117,109,98,101,114,32,123,10,32,32,108,105,110,101,45,104,101,105,103,104,116,58,32,53,101,109,59,10,125,10,46,100,49,32,46,100,50,32,46,100,50,97,32,123,10,32,32,99,111,108,111,114,58,119,104,105,116,101,59,10,32,32,108,105,110,101,45,104,101,105,103,104,116,58,32,50,101,109,59,10,125,10,42,47,10,60,47,115,116,121,108,101,62,10,60,115,99,114,105,112,116,62,10,47,42,10,102,117,110,99,116,105,111,110,32,104,105,103,104,108,105,103,104,116,77,101,40,101,108,101,109,41,32,123,10,32,32,32,32,101,108,101,109,46,115,116,121,108,101,46,98,97,99,107,103,114,111,117,110,100,67,111,108,111,114,61,39,121,101,108,108,111,119,39,10,32,32,32,32,97,108,101,114,116,40,101,108,101,109,46,99,108,97,115,115,78,97,109,101,41,10,32,32,32,32,101,108,101,109,46,115,116,121,108,101,46,98,97,99,107,103,114,111,117,110,100,67,111,108,111,114,32,61,32,39,39,10,125,10,10,102,117,110,99,116,105,111,110,32,104,105,103,104,108,105,103,104,116,77,101,50,40,101,41,32,123,10,32,32,32,32,104,105,103,104,108,105,103,104,116,77,101,40,101,46,99,117,114,114,101,110,116,84,97,114,103,101,116,41,59,10,125,10,42,47,10,60,47,115,99,114,105,112,116,62,10]},"parent":"events"}},"hide-other":{"type":"Task","value":{"title":"Hide on click","slug":"hide-other","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/01-hide-other","weight":1,"libs":[],"importance":5,"content":"\nAdd JavaScript to the `button` to make `<div id=\"text\">` disappear when we click it.\n\nThe demo:\n\n[iframe border=1 src=\"solution\" height=80]","solution":"","parent":"introduction-browser-events"}},"hide-self-onclick":{"type":"Task","value":{"title":"Hide self","slug":"hide-self-onclick","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/02-hide-self-onclick","weight":2,"libs":[],"importance":5,"content":"\nCreate a button that hides itself on click.\n\n```online\nLike this:\n<input type=\"button\" onclick=\"this.hidden=true\" value=\"Click to hide\">\n```","solution":"Can use `this` in the handler to reference \"itself\" here:\n\n```html run height=50\n<input type=\"button\" onclick=\"this.hidden=true\" value=\"Click to hide\">\n```","parent":"introduction-browser-events"}},"which-handlers-run":{"type":"Task","value":{"title":"Which handlers run?","slug":"which-handlers-run","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/03-which-handlers-run","weight":3,"libs":[],"importance":5,"content":"\nThere's a button in the variable. There are no handlers on it.\n\nWhich handlers run on click after the following code? Which alerts show up?\n\n```js no-beautify\nbutton.addEventListener(\"click\", () => alert(\"1\"));\n\nbutton.removeEventListener(\"click\", () => alert(\"1\"));\n\nbutton.onclick = () => alert(2);\n```","solution":"The answer: `1` and `2`.\n\nThe first handler triggers, because it's not removed by `removeEventListener`. To remove the handler we need to pass exactly the function that was assigned. And in the code a new function is passed, that looks the same, but is still another function.\n\nTo remove a function object, we need to store a reference to it, like this:\n\n```js\nfunction handler() {\n  alert(1);\n}\n\nbutton.addEventListener(\"click\", handler);\nbutton.removeEventListener(\"click\", handler);\n```\n\nThe handler `button.onclick` works independently and in addition to `addEventListener`.","parent":"introduction-browser-events"}},"move-ball-field":{"type":"Task","value":{"title":"Move the ball across the field","slug":"move-ball-field","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/04-move-ball-field","weight":4,"libs":[],"importance":5,"content":"\nMove the ball across the field to a click. Like this:\n\n[iframe src=\"solution\" height=\"260\" link]\n\nRequirements:\n\n- The ball center should come exactly under the pointer on click (if possible without crossing the field edge).\n- CSS-animation is welcome.\n- The ball must not cross field boundaries.\n- When the page is scrolled, nothing should break.\n\nNotes:\n\n- The code should also work with different ball and field sizes, not be bound to any fixed values.\n- Use properties `event.clientX/event.clientY` for click coordinates.","solution":"First we need to choose a method of positioning the ball.\n\nWe can't use `position:fixed` for it, because scrolling the page would move the ball from the field.\n\nSo we should use `position:absolute` and, to make the positioning really solid, make `field` itself positioned.\n\nThen the ball will be positioned relatively to the field:\n\n```css\n#field {\n  width: 200px;\n  height: 150px;\n  position: relative;\n}\n\n#ball {\n  position: absolute;\n  left: 0; /* relative to the closest positioned ancestor (field) */\n  top: 0;\n  transition: 1s all; /* CSS animation for left/top makes the ball fly */\n}\n```\n\nNext we need to assign the correct `ball.style.position.left/top`. They contain field-relative coordinates now.\n\nHere's the picture:\n\n![](move-ball-coords.png)\n\nWe have `event.clientX/clientY` -- window-relative coordinates of the click.\n\nTo get field-relative `left` coordinate of the click, we can substract the field left edge and the border width:\n\n```js\nlet left = event.clientX - fieldInnerCoords.left - field.clientLeft;\n```\n\nNormally, `ball.style.position.left` means the \"left edge of the element\" (the ball). So if we assign that `left`, then the ball edge would be under the mouse cursor.\n\nWe need to move the ball half-width left and half-height up to make it center.\n\nSo the final `left` would be:\n\n```js\nlet left = event.clientX - fieldInnerCoords.left - field.clientLeft - ball.offsetWidth/2;\n```\n\nThe vertical coordinate is calculated using the same logic.\n\nPlease note that the ball width/height must be known at the time we access `ball.offsetWidth`. Should be specified in HTML or CSS.","parent":"introduction-browser-events"}},"sliding-menu":{"type":"Task","value":{"title":"Create a menu sliding menu","slug":"sliding-menu","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/05-sliding-menu","weight":5,"libs":[],"importance":5,"content":"\nCreate a menu that opens/collapses on click:\n\n[iframe border=1 height=100 src=\"solution\"]\n\nP.S. HTML/CSS of the source document is to be modified.","solution":"# HTML/CSS\nFirst let's create HTML/CSS.\n\nA menu is a standalone graphical component on the page, so its better to put it into a single DOM element.\n\nA list of menu items can be layed out as a list `ul/li`.\n\nHere's the example structure:\n\n```html\n<div class=\"menu\">\n  <span class=\"title\">Sweeties (click me)!</span>\n  <ul>\n    <li>Cake</li>\n    <li>Donut</li>\n    <li>Honey</li>\n  </ul>\n</div>\n```\n\nWe use `<span>` for the title, because `<div>` has an implicit `display:block` on it, and it will occupy 100% of the horizontal width.\n\nLike this:\n\n```html autorun height=50\n<div style=\"border: solid red 1px\" onclick=\"alert(1)\">Sweeties (click me)!</div>\n```\n\nSo if we set `onclick` on it, then it will catch clicks to the right of the text.\n\n...but `<span>` has an implicit `display: inline`, so it occupies exactly enough place to fit all the text:\n\n```html autorun height=50\n<span style=\"border: solid red 1px\" onclick=\"alert(1)\">Sweeties (click me)!</span>\n```\n\n# Toggling the menu\n\nToggling the menu should change the arrow and show/hide the menu list.\n\nAll these changes are perfectly handled by CSS. In JavaScript we should label the current state of the menu by adding/removing the class `.open`.\n\nWithout it, the menu will be closed:\n\n```css\n.menu ul {\n  margin: 0;\n  list-style: none;\n  padding-left: 20px;\n  display: none;\n}\n\n.menu .title::before {\n  content: '▶ ';\n  font-size: 80%;\n  color: green;\n}\n```\n\n...And with `.open` the arrow changes and the list shows up:\n\n```css\n.menu.open .title::before {\n  content: '▼ ';\n}\n\n.menu.open ul {\n  display: block;\n}\n```","parent":"introduction-browser-events"}},"hide-message":{"type":"Task","value":{"title":"Add a closing button","slug":"hide-message","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/06-hide-message","weight":6,"libs":[],"importance":5,"content":"\nThere's a list of messages.\n\nUse JavaScript to add a closing button to the right-upper corner of each message.\n\nThe result should look like this:\n\n[iframe src=\"solution\" height=450]","solution":"To add the button we can use either `position:absolute` (and make the pane `position:relative`) or `float:right`. The `float:right` has the benefit that the button never overlaps the text, but `position:absolute` gives more freedom. So the choice is yours.\n\nThen for each pane the code can be like:\n```js\npane.insertAdjacentHTML(\"afterbegin\", '<button class=\"remove-button\">[x]</button>');\n```\n\nThen the `<button>` becomes `pane.firstChild`, so we can add a handler to it like this:\n\n```js\npane.firstChild.onclick = () => pane.remove();\n```","parent":"introduction-browser-events"}},"carousel":{"type":"Task","value":{"title":"Carousel","slug":"carousel","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/01-introduction-browser-events/07-carousel","weight":7,"libs":[],"importance":4,"content":"\nCreate a \"carousel\" -- a ribbon of images that can be scrolled by clicking on arrows.\n\n[iframe height=200 src=\"solution\"]\n\nLater we can add more features to it: infinite scrolling, dynamic loading etc.\n\nP.S. For this task HTML/CSS structure is actually 90% of the solution.","solution":"The images ribbon can be represented as `ul/li` list of images `<img>`.\n\nNormally, such a ribbon is wide, but we put a fixed-size `<div>` around to \"cut\" it, so that only a part of the ribbon is visibble:\n\n![](carousel1.png)\n\nTo make the list show horizontally we need to apply correct CSS properties for `<li>`, like `display: inline-block`.\n\nFor `<img>` we should also adjust `display`, because by default it's `inline`. There's extra space reserved under `inline` elements for \"letter tails\", so we can use `display:block` to remove it.\n\nTo do the scrolling, we can shift `<ul>`. There are many ways to do it, for instance by changing `margin-left` or (better performance) use `transform: translateX()`:\n\n![](carousel2.png)\n\nThe outer `<div>` has a fixed width, so \"extra\" images are cut.\n\nThe whole carousel is a self-contained \"graphical component\" on the page, so we'd better wrap it into a single `<div class=\"carousel\">` and style things inside it.","parent":"introduction-browser-events"}},"bubbling-and-capturing":{"type":"Article","value":{"title":"Bubbling and capturing","slug":"bubbling-and-capturing","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/02-bubbling-and-capturing/article.md","isFolder":false,"weight":2,"content":"\nLet's start with an example.\n\nThis handler is assigned to `<div>`, but also runs if you click any nested tag like `<em>` or `<code>`:\n\n```html autorun height=60\n<div onclick=\"alert('The handler!')\">\n  <em>If you click on <code>EM</code>, the handler on <code>DIV</code> runs.</em>\n</div>\n```\n\nIsn't it a bit strange? Why the handler on `<div>` runs if the actual click was on `<em>`?\n\n## Bubbling\n\nThe bubbling principle is simple.\n\n**When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.**\n\nLet's say, we have 3 nested elements `FORM > DIV > P` with a handler on each of them:\n\n```html run autorun\n<style>\n  body * {\n    margin: 10px;\n    border: 1px solid blue;\n  }\n</style>\n\n<form onclick=\"alert('form')\">FORM\n  <div onclick=\"alert('div')\">DIV\n    <p onclick=\"alert('p')\">P</p>\n  </div>\n</form>\n```\n\nA click on the inner `<p>` first runs `onclick`:\n1. On that `<p>`.\n2. Then on the outer `<div>`.\n3. Then on the outer `<form>`.\n4. And so on upwards till the `document` object.\n\n![](event-order-bubbling.png)\n\nSo if we click on `<p>`, then we'll see 3 alerts: `p` -> `div` -> `form`.\n\nThe process is called \"bubbling\", because events \"bubble\" from the inner element up through parents like a bubble in the water.\n\n```warn header=\"*Almost* all events bubble.\"\nThe key word in this phrase is \"almost\".\n\nFor instance, a `focus` event does not bubble. There are other examples too, we'll meet them. But still it's an exception, rather than a rule, most events do bubble.\n```\n\n## event.target\n\nA handler on a parent element can always get the details about where it actually happened.\n\n**The most deeply nested element that caused the event is called a *target* element, accessible as `event.target`.**\n\nNote the differences from `this` (=`event.currentTarget`):\n\n- `event.target` -- is the \"target\" element that initiated the event, it doesn't change through the bubbling process.\n- `this` -- is the \"current\" element, the one that has a currently running handler on it.\n\nFor instance, if we have a single handler `form.onclick`, then it can \"catch\" all clicks inside the form. No matter where the click happened, it bubbles up to `<form>` and runs the handler.\n\nIn `form.onclick` handler:\n\n- `this` (`=event.currentTarget`) is the `<form>` element, because the handler runs on it.\n- `event.target` is the concrete element inside the form that actually was clicked.\n\nCheck it out:\n\n[codetabs height=220 src=\"bubble-target\"]\n\nIt's possible that `event.target` equals `this` -- when the click is made directly on the `<form>` element.\n\n## Stopping bubbling\n\nA bubbling event goes from the target element straight up. Normally it goes upwards till `<html>`, and then to `document` object, and some events even reach `window`, calling all handlers on the path.\n\nBut any handler may decide that the event has been fully processed and stop the bubbling.\n\nThe method for it is `event.stopPropagation()`.\n\nFor instance, here `body.onclick` doesn't work if you click on `<button>`:\n\n```html run autorun height=60\n<body onclick=\"alert(`the bubbling doesn't reach here`)\">\n  <button onclick=\"event.stopPropagation()\">Click me</button>\n</body>\n```\n\n```smart header=\"event.stopImmediatePropagation()\"\nIf an element has multiple event handlers on a single event, then even if one of them stops the bubbling, the other ones still execute.\n\nIn other words, `event.stopPropagation()` stops the move upwards, but on the current element all other handlers will run.\n\nTo stop the bubbling and prevent handlers on the current element from running, there's a method `event.stopImmediatePropagation()`. After it no other handlers execute.\n```\n\n```warn header=\"Don't stop bubbling without a need!\"\nBubbling is convenient. Don't stop it without a real need: obvious and architecturally well-thought.\n\nSometimes `event.stopPropagation()` creates hidden pitfalls that later may become problems.\n\nFor instance:\n\n1. We create a nested menu. Each submenu handles clicks on its elements and calls `stopPropagation` so that outer menu don't trigger.\n2. Later we decide to catch clicks on the whole window, to track users' behavior (where people click). Some analytic systems do that. Usually the code uses `document.addEventListener('click'…)` to catch all clicks.\n3. Our analytic won't work over the area where clicks are stopped by `stopPropagation`. We've got a \"dead zone\".\n\nThere's usually no real need to prevent the bubbling. A task that seemingly requires that may be solved by other means. One of them is to use custom events, we'll cover them later. Also we can write our data into the `event` object in one handler and read it in another one, so we can pass to handlers on parents information about the processing below.\n```\n\n\n## Capturing\n\nThere's another phase of event processing called \"capturing\". It is rarely used in real code, but sometimes can be useful.\n\nThe standard [DOM Events](http://www.w3.org/TR/DOM-Level-3-Events/) describes 3 phases of event propagation:\n\n1. Capturing phase -- the event goes down to the element.\n2. Target phase -- the event reached the target element.\n3. Bubbling phase -- the event bubbles up from the element.\n\nHere's the picture of a click on `<td>` inside a table, taken from the specification:\n\n![](eventflow.png)\n\nThat is: for a click on `<td>` the event first goes through the ancestors chain down to the element (capturing), then it reaches the target, and then it goes up (bubbles), calling handlers on its way.\n\n**Before we only talked about bubbling, because the capturing phase is rarely used. Normally it is invisible to us.**\n\nHandlers added using `on<event>`-property or using HTML attributes or using `addEventListener(event, handler)` don't know anything about capturing, they only run on the 2nd and 3rd phases.\n\nTo catch an event on the capturing phase, we need to set the 3rd argument of `addEventListener` to `true`.\n\nThere are two possible values for that optional last argument:\n\n- If it's `false` (default), then the handler is set on the bubbling phase.\n- If it's `true`, then the handler is set on the capturing phase.\n\nNote that while formally there are 3 phases, the 2nd phase (\"target phase\": the event reached the element) is not handled separately: handlers on both capturing and bubbling phases trigger at that phase.\n\nIf one puts capturing and bubbling handlers on the target element, the capture handler triggers last in the capturing phase and the bubble handler triggers first in the bubbling phase.\n\nLet's see it in action:\n\n```html run autorun height=140 edit\n<style>\n  body * {\n    margin: 10px;\n    border: 1px solid blue;\n  }\n</style>\n\n<form>FORM\n  <div>DIV\n    <p>P</p>\n  </div>\n</form>\n\n<script>\n  for(let elem of document.querySelectorAll('*')) {\n    elem.addEventListener(\"click\", e => alert(`Capturing: ${elem.tagName}`), true);\n    elem.addEventListener(\"click\", e => alert(`Bubbling: ${elem.tagName}`));\n  }\n</script>\n```\n\nThe code sets click handlers on *every* element in the document to see which ones are working.\n\nIf you click on `<p>`, then the sequence is:\n\n1. `HTML` -> `BODY` -> `FORM` -> `DIV` -> `P` (capturing phase, the first listener), and then:\n2. `P` -> `DIV` -> `FORM` -> `BODY` -> `HTML` (bubbling phase, the second listener).\n\nPlease note that `P` shows up two times: at the end of capturing and at the start of bubbling.\n\nThere's a property `event.eventPhase` that tells us the number of the phase on which the event was caught. But it's rarely used, because we usually know it in the handler.\n\n## Summary\n\nThe event handling process:\n\n- When an event happens -- the most nested element where it happens gets labeled as the \"target element\" (`event.target`).\n- Then the event first moves from the document root down the `event.target`, calling handlers assigned with `addEventListener(...., true)` on the way.\n- Then the event moves from `event.target` up to the root, calling handlers assigned using  `on<event>` and `addEventListener` without the 3rd argument or with the 3rd argument `false`.\n\nEach handler can access `event` object properties:\n\n- `event.target` -- the deepest element that originated the event.\n- `event.currentTarget` (=`this`) -- the current element that handles the event (the one that has the handler on it)\n- `event.eventPhase` -- the current phase (capturing=1, bubbling=3).\n\nAny event handler can stop the event by calling `event.stopPropagation()`, but that's not recommended, because we can't really be sure we won't need it above, maybe for completely different things.\n\nThe capturing phase is used very rarely, usually we handle events on bubbling. And there's a logic behind that.\n\nIn real world, when an accident happens, local authorities react first. They know best the area where it happened. Then higher-level authorities if needed.\n\nThe same for event handlers. The code that set the handler on a particular element knows maximum  details about the element and what it does. A handler on a particular `<td>` may be suited for that exactly `<td>`, it knows everything about it, so it should get the chance first. Then its immediate parent also knows about the context, but a little bit less, and so on till the very top element that handles general concepts and runs the last.\n\nBubbling and capturing lay the foundation for \"event delegation\" -- an extremely powerful event handling pattern that we study in the next chapter.","libs":[],"children":[],"parent":"events"}},"event-delegation":{"type":"Article","value":{"title":"Event delegation","slug":"event-delegation","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/03-event-delegation/article.md","isFolder":false,"weight":3,"content":"\nCapturing and bubbling allow us to implement one of most powerful event handling patterns called *event delegation*.\n\nThe idea is that if we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them -- we put a single handler on their common ancestor.\n\nIn the handler we get `event.target`, see where the event actually happened and handle it.\n\nLet's see an example -- the [Ba-Gua diagram](http://en.wikipedia.org/wiki/Ba_gua) reflecting the ancient Chinese philosophy.\n\nHere it is:\n\n[iframe height=350 src=\"bagua\" edit link]\n\nThe HTML is like this:\n\n```html\n<table>\n  <tr>\n    <th colspan=\"3\"><em>Bagua</em> Chart: Direction, Element, Color, Meaning</th>\n  </tr>\n  <tr>\n    <td>...<strong>Northwest</strong>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n  <tr>...2 more lines of this kind...</tr>\n  <tr>...2 more lines of this kind...</tr>\n</table>\n```\n\nThe table has 9 cells, but there could be 99 or 9999, doesn't matter.\n\n**Our task is to highlight a cell `<td>` on click.**\n\nInstead of assign an `onclick` handler to each `<td>` (can be many) -- we'll setup the \"catch-all\" handler on `<table>` element.\n\nIt will use `event.target` to get the clicked element and highlight it.\n\nThe code:\n\n```js\nlet selectedTd;\n\n*!*\ntable.onclick = function(event) {\n  let target = event.target; // where was the click?\n\n  if (target.tagName != 'TD') return; // not on TD? Then we're not interested\n\n  highlight(target); // highlight it\n};\n*/!*\n\nfunction highlight(td) {\n  if (selectedTd) { // remove the existing highlight if any\n    selectedTd.classList.remove('highlight');\n  }\n  selectedTd = td;\n  selectedTd.classList.add('highlight'); // highlight the new td\n}\n```\n\nSuch a code doesn't care how many cells there are in the table. We can add/remove `<td>` dynamically at any time and the highlighting will still work.\n\nStill, there's a drawback.\n\nThe click may occur not on the `<td>`, but inside it.\n\nIn our case if we take a look inside the HTML, we can see nested tags inside `<td>`, like `<strong>`:\n\n```html\n<td>\n*!*\n  <strong>Northwest</strong>\n*/!*\n  ...\n</td>\n```\n\nNaturally, if a click happens on that `<strong>` then it becomes the value of `event.target`.\n\n![](bagua-bubble.png)\n\nIn the handler `table.onclick` we should take such `event.target` and find out whether the click was inside `<td>` or not.\n\nHere's the improved code:\n\n```js\ntable.onclick = function(event) {\n  let td = event.target.closest('td'); // (1)\n\n  if (!td) return; // (2)\n\n  if (!table.contains(td)) return; // (3)\n\n  highlight(td); // (4)\n};\n```\n\nExplanations:\n1. The method `elem.closest(selector)` returns the nearest ancestor that matches the selector. In our case we look for `<td>` on the way up from the source element.\n2. If `event.target` is not inside any `<td>`, then the call returns `null`, and we don't have to do anything.\n3. In case of nested tables, `event.target` may be a `<td>` lying outside of the current table. So we check if that's actually *our table's* `<td>`.\n4. And, if it's so, then highlight it.\n\n## Delegation example: actions in markup\n\nThe event delegation may be used to optimize event handling. We use a single handler for similar actions on many elements. Like we did it for highlighting `<td>`.\n\nBut we can also use a single handler as an entry point for many different things.\n\nFor instance, we want to make a menu with buttons \"Save\", \"Load\", \"Search\" and so on. And there's an object with methods `save`, `load`, `search`....\n\nThe first idea may be to assign a separate handler to each button. But there's a more elegant solution. We can add a handler for the whole menu and `data-action` attributes for buttons that has the method to call:\n\n```html\n<button *!*data-action=\"save\"*/!*>Click to Save</button>\n```\n\nThe handler reads the attribute and executes the method. Take a look at the working example:\n\n```html autorun height=60 run\n<div id=\"menu\">\n  <button data-action=\"save\">Save</button>\n  <button data-action=\"load\">Load</button>\n  <button data-action=\"search\">Search</button>\n</div>\n\n<script>\n  class Menu {\n    constructor(elem) {\n      this._elem = elem;\n      elem.onclick = this.onClick.bind(this); // (*)\n    }\n\n    save() {\n      alert('saving');\n    }\n\n    load() {\n      alert('loading');\n    }\n\n    search() {\n      alert('searching');\n    }\n\n    onClick(event) {\n*!*\n      let action = event.target.dataset.action;\n      if (action) {\n        this[action]();\n      }\n*/!*\n    };\n  }\n\n  new Menu(menu);\n</script>\n```\n\nPlease note that `this.onClick` is bound to `this` in `(*)`. That's important, because otherwise `this` inside it would reference the DOM element (`elem`), not the menu object, and `this[action]` would not be what we need.\n\nSo, what the delegation gives us here?\n\n```compare\n+ We don't need to write the code to assign a handler to each button. Just make a method and put it in the markup.\n+ The HTML structure is flexible, we can add/remove buttons at any time.\n```\n\nWe could also use classes `.action-save`, `.action-load`, but an attribute `data-action` is better semantically. And we can use it in CSS rules too.\n\n## The \"behavior\" pattern\n\nWe can also use event delegation to add \"behaviors\" to elements *declaratively*, with special attributes and classes.\n\nThe pattern has two parts:\n1. We add a special attribute to an element.\n2. A document-wide handler tracks events, and if an event happens on an attributed element -- performs the action.\n\n### Counter\n\nFor instance, here the attribute `data-counter` adds a behavior: \"increase on click\" to buttons:\n\n```html run autorun height=60\nCounter: <input type=\"button\" value=\"1\" data-counter>\nOne more counter: <input type=\"button\" value=\"2\" data-counter>\n\n<script>\n  document.addEventListener('click', function(event) {\n\n    if (event.target.dataset.counter != undefined) { // if the attribute exists...\n      event.target.value++;\n    }\n\n  });\n</script>\n```\n\nIf we click a button -- its value is increased. Not buttons, but the general approach is important here.\n\nThere can be as many attributes with `data-counter` as we want. We can add new ones to HTML at any moment. Using the event delegation we \"extended\" HTML, added an attribute that describes a new behavior.\n\n```warn header=\"For document-level handlers -- always `addEventListener`\"\nWhen we assign an event handler to the `document` object, we should always use `addEventListener`, not `document.onclick`, because the latter will cause conflicts: new handlers overwrite old ones.\n\nFor real projects it's normal that there are many handlers on `document` set by different parts of the code.\n```\n\n### Toggler\n\nOne more example. A click on an element with the attribute `data-toggle-id` will show/hide the element with the given `id`:\n\n```html autorun run height=60\n<button *!*data-toggle-id=\"subscribe-mail\"*/!*>\n  Show the subscription form\n</button>\n\n<form id=\"subscribe-mail\" hidden>\n  Your mail: <input type=\"email\">\n</form>\n\n<script>\n*!*\n  document.addEventListener('click', function(event) {\n    let id = event.target.dataset.toggleId;\n    if (!id) return;\n\n    let elem = document.getElementById(id);\n\n    elem.hidden = !elem.hidden;\n  });\n*/!*\n</script>\n```\n\nLet's note once again what we did. Now, to add toggling functionality to an element -- there's no need to know JavaScript, just use the attribute `data-toggle-id`.\n\nThat may become really convenient -- no need to write JavaScript for every such element. Just use the behavior. The document-level handler makes it work for any element of the page.\n\nWe can combine multiple behaviors on a single element as well.\n\nThe \"behavior\" pattern can be an alternative of mini-fragments of JavaScript.\n\n## Summary\n\nEvent delegation is really cool! It's one of the most helpful patterns for DOM events.\n\nIt's often used to add same handling for many similar elements, but not only for that.\n\nThe algorithm:\n\n1. Put a single handler on the container.\n2. In the handler -- check the source element `event.target`.\n3. If the event happened inside an element that interests us, then handle the event.\n\nBenefits:\n\n```compare\n+ Simplifies initialization and saves memory: no need to add many handlers.\n+ Less code: when adding or removing elements, no need to add/remove handlers.\n+ DOM modifications: we can mass add/remove elements with `innerHTML` and alike.\n```\n\nThe delegation has its limitations of course:\n\n```compare\n- First, the event must be bubbling. Some events do not bubble. Also, low-level handlers should not use `event.stopPropagation()`.\n- Second, the delegation may add CPU load, because the container-level handler reacts on events in any place of the container, no matter if they interest us or not. But usually the load is negligible, so we don't take it into account.\n```","libs":[],"children":["hide-message-delegate","sliding-tree","sortable-table","behavior-tooltip"],"parent":"events"}},"hide-message-delegate":{"type":"Task","value":{"title":"Hide messages with delegation","slug":"hide-message-delegate","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/03-event-delegation/1-hide-message-delegate","weight":1,"libs":[],"importance":5,"content":"\nThere's a list of messages with removal buttons `[x]`. Make the buttons work.\n\nLike this:\n\n[iframe src=\"solution\" height=420]\n\nP.S. Should be only one event listener on the container, use event delegation.","solution":"","parent":"event-delegation"}},"sliding-tree":{"type":"Task","value":{"title":"Tree menu","slug":"sliding-tree","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/03-event-delegation/2-sliding-tree","weight":2,"libs":[],"importance":5,"content":"\nCreate a tree that shows/hides node children on click:\n\n[iframe border=1 src=\"solution\"]\n\nRequirements:\n\n- Only one event handler (use delegation)\n- A click outside the node title (on an empty space) should not do anything.","solution":"The solution has two parts.\n\n1. Wrap every tree node title into `<span>`. Then we can CSS-style them on `:hover` and handle clicks exactly on text, because `<span>` width is exactly the text width (unlike without it).\n2. Set a handler to the `tree` root node and handle clicks on that `<span>` titles.","parent":"event-delegation"}},"sortable-table":{"type":"Task","value":{"title":"Sortable table","slug":"sortable-table","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/03-event-delegation/3-sortable-table","weight":3,"libs":[],"importance":4,"content":"\nMake the table sortable: clicks on `<th>` elements should sort it by corresponding column.\n\nEach `<th>` has the type in the attribute, like this:\n\n```html\n<table id=\"grid\">\n  <thead>\n    <tr>\n*!*\n      <th data-type=\"number\">Age</th>\n      <th data-type=\"string\">Name</th>\n*/!*\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5</td>\n      <td>John</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>Ann</td>\n    </tr>\n    ...\n  </tbody>\n</table>\n```\n\nIn the example above the first column has numbers, and the second one -- strings. The sorting function should handle sort according to the type.\n\nOnly `\"string\"` and `\"number\"` types should be supported.\n\nThe working example:\n\n[iframe border=1 src=\"solution\" height=190]\n\nP.S. The table can be big, with any number of rows and columns.","solution":"","parent":"event-delegation"}},"behavior-tooltip":{"type":"Task","value":{"title":"Tooltip behavior","slug":"behavior-tooltip","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/03-event-delegation/4-behavior-tooltip","weight":4,"libs":[],"importance":5,"content":"\nCreate JS-code for the tooltip behavior.\n\nWhen a mouse comes over an element with `data-tooltip`, the tooltip should appear over it, and when it's gone then hide.\n\nAn example of annotated HTML:\n```html\n<button data-tooltip=\"the tooltip is longer than the element\">Short button</button>\n<button data-tooltip=\"HTML<br>tooltip\">One more button</button>\n```\n\nShould work like this:\n\n[iframe src=\"solution\" height=200 border=1]\n\nIn this task we assume that all elements with `data-tooltip` have only text inside. No nested tags.\n\nDetails:\n\n- The tooltip should not cross window edges. Normally it should be above the element, but if the element is at the page top and there's no space for the tooltip, then below it.\n- The tooltip is given in the `data-tooltip` attribute. It can be arbitrary HTML.\n\nYou'll need two events here:\n- `mouseover` triggers when a pointer comes over an element.\n- `mouseout` triggers when a pointer leaves an element.\n\nPlease use event delegation: set up two handlers on `document` to track all \"overs\" and \"outs\" from elements with `data-tooltip` and manage tooltips from there.\n\nAfter the behavior is implemented, even people unfamiliar with JavaScript can add annotated elements.\n\nP.S. To keep things natural and simple: only one tooltip may show up at a time.","solution":"","parent":"event-delegation"}},"default-browser-action":{"type":"Article","value":{"title":"Browser default actions","slug":"default-browser-action","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/04-default-browser-action/article.md","isFolder":false,"weight":4,"content":"\nMany events automatically lead to browser actions.\n\nFor instance:\n\n- A click on a link -- initiates going to its URL.\n- A click on submit button inside a form -- initiates its submission to the server.\n- Pressing a mouse button over a text and moving it -- selects the text.\n\nIf we handle an event in JavaScript, often we don't want browser actions. Fortunately, it can be prevented.\n\n## Preventing browser actions\n\nThere are two ways to tell the browser we don't want it to act:\n\n- The main way is to use the `event` object. There's a method `event.preventDefault()`.\n- If the handler is assigned using `on<event>` (not by `addEventListener`), then we can just return `false` from it.\n\nIn the example below there a click to links don't lead to URL change:\n\n```html autorun height=60 no-beautify\n<a href=\"/\" onclick=\"return false\">Click here</a>\nor\n<a href=\"/\" onclick=\"event.preventDefault()\">here</a>\n```\n\n```warn header=\"Not necessary to return `true`\"\nThe value returned by an event handler is usually ignored.\n\nThe only exception -- is `return false` from a handler assigned using `on<event>`.\n\nIn all other cases, the return is not needed and it's not processed anyhow.\n```\n\n### Example: the menu\n\nConsider a site menu, like this:\n\n```html\n<ul id=\"menu\" class=\"menu\">\n  <li><a href=\"/html\">HTML</a></li>\n  <li><a href=\"/javascript\">JavaScript</a></li>\n  <li><a href=\"/css\">CSS</a></li>\n</ul>\n```\n\nHere's how it looks with some CSS:\n\n[iframe height=70 src=\"menu\" link edit]\n\nMenu items are links `<a>`, not buttons. There are several benefits, for instance:\n\n- Many people like to use \"right click\" -- \"open in a new window\". If we use `<button>` or `<span>`, that doesn't work.\n- Search engines follow `<a href=\"...\">` links while indexing.\n\nSo we use `<a>` in the markup. But normally we intend to handle clicks in JavaScript. So we should prevent the default browser action.\n\nLike here:\n\n```js\nmenu.onclick = function(event) {\n  if (event.target.nodeName != 'A') return;\n\n  let href = event.target.getAttribute('href');\n  alert( href ); // ...can be loading from the server, UI generation etc\n\n*!*\n  return false; // prevent browser action (don't go to the URL)\n*/!*\n};\n```\n\nIf we omit `return false`, then after our code executes the browser will do its \"default action\" -- following to the URL in `href`.\n\nBy the way, using event delegation here makes our menu flexible. We can add nested lists and style them using CSS to \"slide down\".\n\n\n## Prevent further events\n\nCertain events flow one into another. If we prevent the first event, there will be no second.\n\nFor instance, `mousedown` on an `<input>` field leads to focusing in it, and the `focus` event. If we prevent the `mousedown` event, there's no focus.\n\nTry to click on the first `<input>` below -- the `focus` event happens. That's normal.\n\nBut if you click the second one, there's no focus.\n\n```html run autorun\n<input value=\"Focus works\" onfocus=\"this.value=''\">\n<input *!*onmousedown=\"return false\"*/!* onfocus=\"this.value=''\" value=\"Click me\">\n```\n\nThat's because the browser action is canceled on `mousedown`. The focusing is still possible if we use another way to enter the input. For instance, the `key:Tab` key to switch from the 1st input into the 2nd. But not with the mouse click any more.\n\n\n## event.defaultPrevented\n\nThe property `event.defaultPrevented` is `true` if the default action was prevented, and `false` otherwise.\n\nThere's an interesting use case for it.\n\nYou remember in the chapter <info:bubbling-and-capturing> we talked about `event.stopPropagation()`  and why stopping bubbling is bad?\n\nSometimes we can use `event.defaultPrevented` instead.\n\nLet's see a practical example where stopping the bubbling looks necessary, but actually we can do well without it.\n\nBy default the browser on `contextmenu` event (right mouse click) shows a context menu with standard options. We can prevent it and show our own, like this:\n\n```html autorun height=50 no-beautify run\n<button>Right-click for browser context menu</button>\n\n<button *!*oncontextmenu=\"alert('Draw our menu'); return false\"*/!*>\n  Right-click for our context menu\n</button>\n```\n\nNow let's say we want to implement our own document-wide context menu, with our options. And inside the document we may have other elements with their own context menus:\n\n```html autorun height=80 no-beautify run\n<p>Right-click here for the document context menu</p>\n<button id=\"elem\">Right-click here for the button context menu</button>\n\n<script>\n  elem.oncontextmenu = function(event) {\n    event.preventDefault();\n    alert(\"Button context menu\");\n  };\n\n  document.oncontextmenu = function(event) {\n    event.preventDefault();\n    alert(\"Document context menu\");\n  };\n</script>\n```\n\nThe problem is that when we click on `elem`, we get two menus: the button-level and (the event bubbles up) the document-level menu.\n\nHow to fix it? One of solutions is to think like: \"We fully handle the event in the button handler, let's stop it\" and use `event.stopPropagation()`:\n\n```html autorun height=80 no-beautify run\n<p>Right-click for the document menu</p>\n<button id=\"elem\">Right-click for the button menu (fixed with event.stopPropagation)</button>\n\n<script>\n  elem.oncontextmenu = function(event) {\n    event.preventDefault();\n*!*\n    event.stopPropagation();\n*/!*\n    alert(\"Button context menu\");\n  };\n\n  document.oncontextmenu = function(event) {\n    event.preventDefault();\n    alert(\"Document context menu\");\n  };\n</script>\n```\n\nNow the button-level menu works as intended. But the price is high. We forever deny access to information about right-clicks for any outer code, including counters that gather statistics and so on. That's quite unwise.\n\nAn alternative solution would be to check in the `document` handler if the default action was prevented? If it is so, then the event was handled, and we don't need to react on it.\n\n\n```html autorun height=80 no-beautify run\n<p>Right-click for the document menu (fixed with event.defaultPrevented)</p>\n<button id=\"elem\">Right-click for the button menu</button>\n\n<script>\n  elem.oncontextmenu = function(event) {\n    event.preventDefault();\n    alert(\"Button context menu\");\n  };\n\n  document.oncontextmenu = function(event) {\n*!*\n    if (event.defaultPrevented) return;\n*/!*\n\n    event.preventDefault();\n    alert(\"Document context menu\");\n  };\n</script>\n```\n\nNow everything also works correctly. If we have nested elements, and each of them has a context menu of its own, that would also work. Just make sure to check for `event.defaultPrevented` in each `contextmenu` handler.\n\n```smart header=\"event.stopPropagation() and event.preventDefault()\"\nAs we can clearly see, `event.stopPropagation()` and `event.preventDefault()` (also known as `return false`) are two different things. They are not related to each other.\n```\n\n```smart header=\"Nested context menus architecture\"\nThere are also alternative ways to implement nested context menus. One of them is to have a special global object with a method that handles `document.oncontextmenu`, and also methods that allow to store various \"lower-level\" handlers in it.\n\nThe object will catch any right-click, look through stored handlers and run the appropriate one.\n\nBut then each piece of code that wants a context menu should know about that object and use its help instead of the own `contextmenu` handler.\n```\n\n## Summary\n\nThere are many default browser actions:\n\n- `mousedown` -- starts the selection (move the mouse to select).\n- `click` on `<input type=\"checkbox\">` -- checks/unchecks the `input`.\n- `submit` -- clicking an `<input type=\"submit\">` or hitting `key:Enter` inside a form field causes this event to happen, and the browser submits the form after it.\n- `wheel` -- rolling a mouse wheel event has scrolling as the default action.\n- `keydown` -- pressing a key may lead to adding a character into a field, or other actions.\n- `contextmenu` -- the event happens on a right-click, the action is to show the browser context menu.\n- ...there are more...\n\nAll the default actions can be prevented if we want to handle the event exclusively by JavaScript.\n\nTo prevent a default action -- use either `event.preventDefault()` or  `return false`. The second method works only for handlers assigned with `on<event>`.\n\nIf the default action was prevented, the value of `event.defaultPrevented` becomes `true`, otherwise it's `false`.\n\n```warn header=\"Stay semantic, don't abuse\"\nTechnically, by preventing default actions and adding JavaScript we can customize the behavior of any elements. For instance, we can make a link `<a>` work like a button, and a button `<button>` behave as a link (redirect to another URL or so).\n\nBut we should generally keep the semantic meaning of HTML elements. For instance, `<a>` should preform navigation, not a button.\n\nBesides being \"just a good thing\", that makes your HTML better in terms of accessibility.\n\nAlso if we consider the example with `<a>`, then please note: a browser allows to open such links in a new window (by right-clicking them and other means). And people like that. But if we make a button behave as a link using JavaScript and even look like a link using CSS, then `<a>`-specific browser features still won't work for it.\n```","libs":[],"children":["why-return-false-fails","catch-link-navigation","image-gallery"],"parent":"events"}},"why-return-false-fails":{"type":"Task","value":{"title":"Why \"return false\" doesn't work?","slug":"why-return-false-fails","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/04-default-browser-action/1-why-return-false-fails","weight":1,"libs":[],"importance":3,"content":"\nWhy in the code below `return false` doesn't work at all?\n\n```html autorun run\n<script>\n  function handler() {\n    alert( \"...\" );\n    return false;\n  }\n</script>\n\n<a href=\"http://w3.org\" onclick=\"handler()\">the browser will go to w3.org</a>\n```\n\nThe browser follows the URL on click, but we don't want it.\n\nHow to fix?","solution":"When the browser reads the `on*` attribute like `onclick`, it creates the handler from its content.\n\nFor `onclick=\"handler()\"` the function will be:\n\n```js\nfunction(event) {\n  handler() // the content of onclick\n}\n```\n\nNow we can see that the value returned by `handler()` is not used and does not affect the result.\n\nThe fix is simple:\n\n```html run\n<script>\n  function handler() {\n    alert(\"...\");\n    return false;\n  }\n</script>\n\n<a href=\"http://w3.org\" onclick=\"*!*return handler()*/!*\">w3.org</a>\n```\n\nAlso we can use `event.preventDefault()`, like this:\n\n```html run\n<script>\n*!*\n  function handler(event) {\n    alert(\"...\");\n    event.preventDefault();\n  }\n*/!*\n</script>\n\n<a href=\"http://w3.org\" onclick=\"*!*handler(event)*/!*\">w3.org</a>\n```","parent":"default-browser-action"}},"catch-link-navigation":{"type":"Task","value":{"title":"Catch links in the element","slug":"catch-link-navigation","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/04-default-browser-action/2-catch-link-navigation","weight":2,"libs":[],"importance":5,"content":"\nMake all links inside the element with `id=\"contents\"` ask the user if he really wants to leave. And if he doesn't then don't follow.\n\nLike this:\n\n[iframe height=100 border=1 src=\"solution\"]\n\nDetails:\n\n- HTML inside the element may be loaded or regenerated dynamically at any time, so we can't find all links and put handlers on them. Use the event delegation.\n- The content may have nested tags. Inside links too, like `<a href=\"..\"><i>...</i></a>`.","solution":"That's a great use of the event delegation pattern.\n\nIn real life instead of asking we can send a \"logging\" request to the server that saves the information about where the visitor left. Or we can load the content and show it right in the page (if allowable).\n\nAll we need is to catch the `contents.onclick` and use `confirm` to ask the user. A good idea would be to use `link.getAttribute('href')` instead of `link.href` for the URL. See the solution for details.","parent":"default-browser-action"}},"image-gallery":{"type":"Task","value":{"title":"Image gallery","slug":"image-gallery","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/04-default-browser-action/3-image-gallery","weight":3,"libs":[],"importance":5,"content":"\nCreate an image gallery where the main image changes by the click on a thumbnail.\n\nLike this:\n\n[iframe src=\"solution\" height=600]\n\nP.S. Use event delegation.","solution":"The solution is to assign the handler to the container and track clicks. If a click is on the `<a>` link, then change `src` of `#largeImg` to the `href` of the thumbnail.","parent":"default-browser-action"}},"dispatch-events":{"type":"Article","value":{"title":"Dispatching custom events","slug":"dispatch-events","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/2-events/05-dispatch-events/article.md","isFolder":false,"weight":5,"content":"\nWe can not only assign handlers, but also generate events from JavaScript.\n\nCustom events can be used to create \"graphical components\". For instance, a root element of the menu may trigger events telling what happens with the menu: `open` (menu open),  `select` (an item is selected) and so on.\n\nAlso we can generate built-in events like `click`, `mousedown` etc, that may be good for testing.\n\n## Event constructor\n\nEvents form a hierarchy, just like DOM element classes. The root is the built-in [Event](http://www.w3.org/TR/dom/#event) class.\n\nWe can create `Event` objects like this:\n\n```js\nlet event = new Event(event type[, options]);\n```\n\nArguments:\n\n- *event type* -- may be any string, like `\"click\"` or our own like `\"hey-ho!\"`.\n- *options* -- the object with two optional properties:\n  - `bubbles: true/false` -- if `true`, then the event bubbles.\n  - `cancelable: true/false` -- if `true`, then the \"default action\"  may be prevented. Later we'll see what it means for custom events.\n\n  By default both are false: `{bubbles: false, cancelable: false}`.\n\n## dispatchEvent\n\nAfter an event object is created, we should \"run\" it on an element using the call  `elem.dispatchEvent(event)`.\n\nThen handlers react on it as if it were a regular built-in event. If the event was created with the `bubbles` flag, then it bubbles.\n\nIn the example below the `click` event is initiated in JavaScript. The handler works same way as if the button was clicked:\n\n```html run no-beautify\n<button id=\"elem\" onclick=\"alert('Click!');\">Autoclick</button>\n\n<script>\n  let event = new Event(\"click\");\n  elem.dispatchEvent(event);\n</script>\n```\n\n```smart header=\"event.isTrusted\"\nThere is a way to tell a \"real\" user event from a script-generated one.\n\nThe property `event.isTrusted` is `true` for events that come from real user actions and `false` for script-generated events.\n```\n\n## Bubbling example\n\nWe can create a bubbling event with the name `\"hello\"` and catch it on `document`.\n\nAll we need is to set `bubbles` to `true`:\n\n```html run no-beautify\n<h1 id=\"elem\">Hello from the script!</h1>\n\n<script>\n  // catch on document...\n  document.addEventListener(\"hello\", function(event) { // (1)\n    alert(\"Hello from \" + event.target.tagName); // Hello from H1\n  });\n\n  // ...dispatch on elem!\n  let event = new Event(\"hello\", {bubbles: true}); // (2)\n  elem.dispatchEvent(event);\n</script>\n```\n\nNotes:\n\n1. We should use `addEventListener` for our custom events, because `on<event>` only exists for built-in events, `document.onhello` doesn't work.\n2. Must set `bubbles:true`, otherwise the event won't bubble up.\n\nThe bubbling mechanics is the same for built-in (`click`) and custom (`hello`) events. There are also capturing and bubbling stages.\n\n## MouseEvent, KeyboardEvent and others\n\nHere's a short list of classes for UI Events from the [UI Event specification](https://www.w3.org/TR/uievents):\n\n- `UIEvent`\n- `FocusEvent`\n- `MouseEvent`\n- `WheelEvent`\n- `KeyboardEvent`\n- ...\n\nWe should use them instead of `new Event` if we want to create such events. For instance, `new MouseEvent(\"click\")`.\n\nThe right constructor allows to specify standard properties for that type of event.\n\nLike `clientX/clientY` for a mouse event:\n\n```js run\nlet event = new MouseEvent(\"click\", {\n  bubbles: true,\n  cancelable: true,\n  clientX: 100,\n  clientY: 100\n});\n\n*!*\nalert(event.clientX); // 100\n*/!*\n```\n\nPlease note: the generic `Event` constructor does not allow that.\n\nLet's try:\n\n```js run\nlet event = new Event(\"click\", {\n  bubbles: true, // only bubbles and cancelable\n  cancelable: true, // work in the Event constructor\n  clientX: 100,\n  clientY: 100\n});\n\n*!*\nalert(event.clientX); // undefined, the unknown property is ignored!\n*/!*\n```\n\nTechnically, we can work around that by assigning directly `event.clientX=100` after creation. So that's a matter of convenience and following the rules. Browser-generated events always have the right type.\n\nThe full list of properties for different UI events is in the specification, for instance  [MouseEvent](https://www.w3.org/TR/uievents/#mouseevent).\n\n## Custom events\n\nFor our own, custom events like `\"hello\"` we should use `new CustomEvent`. Technically [CustomEvent](https://dom.spec.whatwg.org/#customevent) is the same as `Event`, with one exception.\n\nIn the second argument (object) we can add an additional property `detail` for any custom information that we want to pass with the event.\n\nFor instance:\n\n```html run refresh\n<h1 id=\"elem\">Hello for John!</h1>\n\n<script>\n  // additional details come with the event to the handler\n  elem.addEventListener(\"hello\", function(event) {\n    alert(*!*event.detail.name*/!*);\n  });\n\n  elem.dispatchEvent(new CustomEvent(\"hello\", {\n*!*\n    detail: { name: \"John\" }\n*/!*\n  });\n</script>\n```\n\nThe `detail` property can have any data. Technically we could live without, because we can assign any properties into a regular `new Event` object after its creation. But `CustomEvent` provides the special `detail` field for it to evade conflicts with other event properties.\n\nThe event class tells something about \"what kind of event\" it is, and if the event is custom, then we should use `CustomEvent` just to be clear about what it is.\n\n## event.preventDefault()\n\nWe can call `event.preventDefault()` on a script-generated event if `cancelable:true` flag is specified.\n\nOf course, if the event has a non-standard name, then it's not known to the browser, and there's no \"default browser action\" for it.\n\nBut the event-generating code may plan some actions after `dispatchEvent`.\n\nThe call of `event.preventDefault()` is a way for the handler to send a signal that those actions shouldn't be performed.\n\nIn that case the call to `elem.dispatchEvent(event)` returns `false`. And the event-generating code knows that the processing shouldn't continue.\n\nFor instance, in the example below there's a `hide()` function. It generates the `\"hide\"` event on the element `#rabbit`, notifying all interested parties that the rabbit is going to hide.\n\nA handler set by `rabbit.addEventListener('hide',...)` will learn about that and, if it wants, can prevent that action by calling `event.preventDefault()`. Then the rabbit won't hide:\n\n```html run refresh\n<pre id=\"rabbit\">\n  |\\   /|\n   \\|_|/\n   /. .\\\n  =\\_Y_/=\n   {>o<}\n</pre>\n\n<script>\n  // hide() will be called automatically in 2 seconds\n  function hide() {\n    let event = new CustomEvent(\"hide\", {\n      cancelable: true // without that flag preventDefault doesn't work\n    });\n    if (!rabbit.dispatchEvent(event)) {\n      alert('the action was prevented by a handler');\n    } else {\n      rabbit.hidden = true;\n    }\n  }\n\n  rabbit.addEventListener('hide', function(event) {\n    if (confirm(\"Call preventDefault?\")) {\n      event.preventDefault();\n    }\n  });\n\n  // hide in 2 seconds\n  setTimeout(hide, 2000);\n\n</script>\n```\n\n\n## Events-in-events are synchronous\n\nUsually events are processed asynchronously. That is: if the browser is processing `onclick` and in the process a new event occurs, then it awaits till `onclick` processing is finished.\n\nThe exception is when one event is initiated from within another one.\n\nThen the control jumps to the nested event handler, and after it goes back.\n\nFor instance, here the nested `menu-open` event is processed synchronously, during the `onclick`:\n\n```html run\n<button id=\"menu\">Menu (click me)</button>\n\n<script>\n  // 1 -> nested -> 2\n  menu.onclick = function() {\n    alert(1);\n\n    // alert(\"nested\")\n    menu.dispatchEvent(new CustomEvent(\"menu-open\", {\n      bubbles: true\n    }));\n\n    alert(2);\n  };\n\n  document.addEventListener('menu-open', () => alert('nested'))\n</script>\n```    \n\nPlease note that the nested event `menu-open` bubbles up and is handled on the `document`. The propagation of the nested event is fully finished before the processing gets back to the outer code (`onclick`).\n\nThat's not only about `dispatchEvent`, there are other cases. JavaScript in an event handler can call methods that lead to other events -- they are too processed synchronously.\n\nIf we don't like it, we can either put the `dispatchEvent` (or other event-triggering call) at the end of `onclick` or, if inconvenient, wrap it in `setTimeout(...,0)`:\n\n```html run\n<button id=\"menu\">Menu (click me)</button>\n\n<script>\n  // 1 -> 2 -> nested\n  menu.onclick = function() {\n    alert(1);\n\n    // alert(2)\n    setTimeout(() => menu.dispatchEvent(new CustomEvent(\"menu-open\", {\n      bubbles: true\n    })), 0);\n\n    alert(2);\n  };\n\n  document.addEventListener('menu-open', () => alert('nested'))\n</script>\n```    \n\n## Summary\n\nTo generate an event, we first need to create an event object.\n\nThe generic `Event(name, options)` constructor accepts an arbitrary event name and the `options` object with two properties:\n  - `bubbles: true` if the event should bubble.\n  - `cancelable: true` is the `event.preventDefault()` should work.\n\nOther constructors of native events like `MouseEvent`, `KeyboardEvent` and so on accept properties specific to that event type. For instance, `clientX` for mouse events.\n\nFor custom events we should use `CustomEvent` constructor. It has an additional option named `detail`, we should assign the event-specific data to it. Then all handlers can access it as `event.detail`.\n\nDespite the technical possibility to generate browser events like `click` or `keydown`, we should use with the great care.\n\nWe shouldn't generate browser events as it's a hacky way to run handlers. That's a bad architecture most of the time.\n\nNative events might be generated:\n\n- As a dirty hack to make 3rd-party libraries work the needed way, if they don't provide other means of interaction.\n- For automated testing, to \"click the button\" in the script and see if the interface reacts correctly.\n\nCustom events with our own names are often generated for architectural purposes, to signal what happens inside our menus, sliders, carousels etc.","libs":[],"children":[],"parent":"events"}},"event-details":{"type":"Article","value":{"title":"Events in details","slug":"event-details","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details","isFolder":true,"weight":3,"content":"\nHere we cover most important events and details of working with them.","libs":[],"children":["mouse-events-basics","mousemove-mouseover-mouseout-mouseenter-mouseleave","mouse-drag-and-drop","keyboard-events","onscroll","onload-ondomcontentloaded","onload-onerror"],"parent":"ui"}},"mouse-events-basics":{"type":"Article","value":{"title":"Mouse events basics","slug":"mouse-events-basics","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/1-mouse-events-basics/article.md","isFolder":false,"weight":1,"content":"\nMouse events come not only from \"mouse manipulators\", but are also emulated on touch devices, to make them compatible.\n\nIn this chapter we'll get into more details about mouse events and their properties.\n\n## Mouse event types\n\nWe can split mouse events into two categories: \"simple\" and \"complex\"\n\n### Simple events\n\nThe most used simple events are:\n\n`mousedown/mouseup`\n: Mouse button is clicked/released over an element.\n\n`mouseover/mouseout`\n: Mouse pointer comes over/out from an element.\n\n`mousemove`\n: Every mouse move over an element triggers that event.\n\n...There are several other event types too, we'll cover them later.\n\n### Complex events\n\n`click`\n: Triggers after `mousedown` and then `mouseup` over the same element if the left mouse button was used.\n\n`contextmenu`\n: Triggers after `mousedown` if the right mouse button was used.\n\n`dblclick`\n: Triggers after a double click over an element.\n\nComplex events are made of simple ones, so in theory we could live without them. But they exist, and that's good, because they are convenient.\n\n### Events order\n\nAn action may trigger multiple events.\n\nFor instance, a click first triggers `mousedown`, when the button is pressed, then `mouseup` and `click` when it's released.\n\nIn cases when a single action initiates multiple events, their order is fixed. That is, the handlers are called in the order `mousedown` -> `mouseup` -> `click`. Events are handled in the same sequence:  `onmouseup` finishes before `onclick` runs.\n\n```online\nClick the button below and you'll see the events. Try double-click too.\n\nOn the teststand below all mouse events are logged, and if there are more than 1 second delay between them, then they are separated by a horizontal ruler.\n\nAlso we can see the `which` property that allows to detect the mouse button.\n\n<input onmousedown=\"return logMouse(event)\" onmouseup=\"return logMouse(event)\" onclick=\"return logMouse(event)\" oncontextmenu=\"return logMouse(event)\" ondblclick=\"return logMouse(event)\" value=\"Click me with the right or the left mouse button\" type=\"button\"> <input onclick=\"logClear('test')\" value=\"Clear\" type=\"button\"> <form id=\"testform\" name=\"testform\"> <textarea style=\"font-size:12px;height:150px;width:360px;\"></textarea></form>\n```\n\n## Getting the button: which\n\nClick-related events always have the `which` property, which allows to get the exact mouse button.\n\nIt is not used for `click` and `contextmenu` events, because the former happens only on left-click, and the latter -- only on right-click.\n\nBut if we track `mousedown` and `mouseup`, then we need it, because these events trigger on any button, so `which` allows to distinguish between \"right-mousedown\" and \"left-mousedown\".\n\nThere are the three possible values:\n\n- `event.which == 1` -- the left button\n- `event.which == 2` - the middle button\n- `event.which == 3` - the right button\n\nThe middle button is somewhat exotic right now and is very rarely used.\n\n## Modifiers: shift, alt, ctrl and meta\n\nAll mouse events include the information about pressed modifier keys.\n\nThe properties are:\n\n- `shiftKey`\n- `altKey`\n- `ctrlKey`\n- `metaKey` (`key:Cmd` for Mac)\n\nFor instance, the button below only works on `key:Alt+Shift`+click:\n\n```html autorun height=60\n<button id=\"button\">Alt+Shift+Click on me!</button>\n\n<script>\n  button.onclick = function(event) {\n*!*\n    if (event.altKey && event.shiftKey) {\n*/!*\n      alert('Hooray!');\n    }\n  };\n</script>\n```\n\n```warn header=\"Attention: on Mac it's usually `Cmd` instead of `Ctrl`\"\nOn Windows and Linux there are modifier keys `key:Alt`, `key:Shift` and `key:Ctrl`. On Mac there's one more: `key:Cmd`, it corresponds to the property `metaKey`.\n\nIn most cases when Windows/Linux uses `key:Ctrl`, on Mac people use `key:Cmd`. So where a Windows user presses `key:Ctrl+Enter` or `key:Ctrl+A`, a Mac user would press `key:Cmd+Enter` or `key:Cmd+A`, and so on, most apps use `key:Cmd` instead of `key:Ctrl`.\n\nSo if we want to support combinations like `key:Ctrl`+click, then for Mac it makes sense to use  `key:Cmd`+click. That's more comfortable for Mac users.\n\nEven if we'd like to force Mac users to `key:Ctrl`+click -- that's kind of difficult. The problem is: a left-click with `key:Ctrl` is interpreted as a *right-click* on Mac, and it generates the `contextmenu` event, not `click` like Windows/Linux.\n\nSo if we want users of all operational systems to feel comfortable, then together with `ctrlKey` we should use `metaKey`.\n\nFor JS-code it means that we should check `if (event.ctrlKey || event.metaKey)`.\n```\n\n```warn header=\"There are also mobile devices\"\nKeyboard combinations are good as an addition to the workflow. So that if the visitor has a\n keyboard -- it works. And if your device doesn't have it -- then there's another way to do the same.\n```\n\n## Coordinates: clientX/Y, pageX/Y\n\nAll mouse events have coordinates in two flavours:\n\n1. Window-relative: `clientX` and `clientY`.\n2. Document-relative: `pageX` and `pageY`.\n\nFor instance, if we have a window of the size 500x500, and the mouse is in the left-upper corner, then `clientX` and `clientY` are `0`. And if the mouse is in the center, then `clientX` and `clientY` are `250`, no matter what place in the document it is. They are similar to `position:fixed`.\n\n````online\nMove the mouse over the input field to see `clientX/clientY` (it's in the `iframe`, so coordinates are relative to that `iframe`):\n\n```html autorun height=50\n<input onmousemove=\"this.value=event.clientX+':'+event.clientY\" value=\"Mouse over me\">\n```\n````\n\nDocument-relative coordinates are counted from the left-upper corner of the document, not the window.\nCoordinates `pageX`, `pageY` are similar to `position:absolute` on the document level.\n\nYou can read more about coordinates in the chapter <info:coordinates>.\n\n## No selection on mousedown\n\nMouse clicks have a side-effect that may be disturbing. A double click selects the text.\n\nIf we want to handle click events ourselves, then the \"extra\" selection doesn't look good.\n\nFor instance, a double-click on the text below selects it in addition to our handler:\n\n```html autorun height=50\n<b ondblclick=\"alert('dblclick')\">Double-click me</b>\n```\n\nThere's a CSS way to stop the selection: the `user-select` property from [CSS UI Draft](https://www.w3.org/TR/css-ui-4/).\n\nMost browsers support it with prefixes:\n\n```html autorun height=50\n<style>\n  b {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n</style>\n\nBefore...\n<b ondblclick=\"alert('Test')\">\n  Unselectable\n</b>\n...After\n```\n\nNow if you double-click on \"Unselectable\", it doesn't get selected. Seems to work.\n\n...But there is a potential problem! The text became truly unselectable. Even if a user starts the selection from \"Before\" and ends with \"After\", the selection skips \"Unselectable\" part. Do we really want to make our text unselectable?\n\nMost of time, we don't. A user may have valid reasons to select the text, for copying or other needs. That may be inconvenient if we don't allow him to do it. So this solution is not that good.\n\nWhat we want is to prevent the selection on double-click, that's it.\n\nA text selection is the default browser action on `mousedown` event. So the alternative solution would be to handle `mousedown` and prevent it, like this:\n\n```html autorun height=50\nBefore...\n<b ondblclick=\"alert('Click!')\" *!*onmousedown=\"return false\"*/!*>\n  Double-click me\n</b>\n...After\n```\n\nNow the bold element is not selected on double clicks.\n\nThe text inside it is still selectable. However, the selection should start not on the text itself, but before or after it. Usually that's fine though.\n\n````smart header=\"Canceling the selection\"\nInstead of *preventing* the selection, we can cancel it \"post-factum\" in the event handler.\n\nHere's how:\n\n```html autorun height=50\nBefore...\n<b ondblclick=\"*!*getSelection().removeAllRanges()*/!*\">\n  Double-click me\n</b>\n...After\n```\n\nIf you double-click on the bold element, then the selection appears and then is immediately removed. That doesn't look nice though.\n````\n\n````smart header=\"Preventing copying\"\nIf we want to disable selection to protect our content from copy-pasting, then we can use another event: `oncopy`.\n\n```html autorun height=80 no-beautify\n<div *!*oncopy=\"alert('Copying forbidden!');return false\"*/!*>\n  Dear user,\n  The copying is forbidden for you.\n  If you know JS or HTML, then you can get everything from the page source though.\n</div>\n```\nIf you try to copy a piece of text in the `<div>`, that won't work, because the default action `oncopy` is prevented.\n\nSurely that can't stop the user from opening HTML-source, but not everyone knows how to do it.\n````\n\n## Summary\n\nMouse events have the following properties:\n\n- Button: `which`.\n- Modifier keys (`true` if pressed): `altKey`, `ctrlKey`, `shiftKey` and `metaKey` (Mac).\n  - If you want to handle `key:Ctrl`, then don't forget Mac users, they use `key:Cmd`, so it's better to check `if (e.metaKey || e.ctrlKey)`.\n\n- Window-relative coordinates: `clientX/clientY`.\n- Document-relative coordinates: `pageX/pageY`.\n\nIt's also important to deal with text selection as an unwanted side-effect of clicks.\n\nThere are several ways to do this, for instance:\n1. The CSS-property `user-select:none` (with browser prefixes) completely disables text-selection.\n2. Cancel the selection post-factum using `getSelection().removeAllRanges()`.\n3. Handle `mousedown` and prevent the default action (usually the best).","libs":[],"children":["selectable-list"],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,123,10,32,32,108,101,116,32,116,105,109,101,114,32,61,32,48,59,10,10,32,32,102,117,110,99,116,105,111,110,32,115,104,111,119,109,101,115,103,40,116,44,32,102,111,114,109,41,32,123,10,10,32,32,32,32,32,105,102,32,40,116,105,109,101,114,61,61,48,41,32,116,105,109,101,114,32,61,32,110,101,119,32,68,97,116,101,40,41,10,10,32,32,32,32,32,108,101,116,32,116,109,32,61,32,110,101,119,32,68,97,116,101,40,41,10,32,32,32,32,32,105,102,32,40,116,109,45,116,105,109,101,114,32,62,32,51,48,48,41,32,123,10,32,32,9,116,32,61,32,39,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,92,110,39,43,116,10,32,32,32,32,32,125,10,10,32,32,32,32,32,108,101,116,32,97,114,101,97,32,61,32,100,111,99,117,109,101,110,116,46,102,111,114,109,115,91,102,111,114,109,43,39,102,111,114,109,39,93,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,39,116,101,120,116,97,114,101,97,39,41,91,48,93,10,10,32,32,32,32,32,97,114,101,97,46,118,97,108,117,101,32,43,61,32,116,32,43,32,39,92,110,39,59,10,32,32,32,32,32,97,114,101,97,46,115,99,114,111,108,108,84,111,112,32,61,32,97,114,101,97,46,115,99,114,111,108,108,72,101,105,103,104,116,10,10,32,32,32,32,32,116,105,109,101,114,32,61,32,116,109,10,32,32,125,10,10,32,32,102,117,110,99,116,105,111,110,32,108,111,103,77,111,117,115,101,40,101,41,32,123,10,32,32,32,32,32,108,101,116,32,101,118,116,32,61,32,101,46,116,121,112,101,59,10,32,32,32,32,32,119,104,105,108,101,32,40,101,118,116,46,108,101,110,103,116,104,32,60,32,49,49,41,32,101,118,116,32,43,61,32,39,32,39,59,10,32,32,32,32,32,115,104,111,119,109,101,115,103,40,101,118,116,43,34,32,119,104,105,99,104,61,34,43,101,46,119,104,105,99,104,44,32,39,116,101,115,116,39,41,10,32,32,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,59,10,32,32,125,10,10,32,32,102,117,110,99,116,105,111,110,32,107,101,121,118,97,108,40,110,41,32,123,10,32,32,32,32,32,105,102,32,40,110,32,61,61,32,110,117,108,108,41,32,114,101,116,117,114,110,32,39,117,110,100,101,102,105,110,101,100,39,59,10,32,32,32,32,32,108,101,116,32,115,32,61,32,39,39,32,43,32,110,59,10,32,32,32,32,32,105,102,32,40,110,32,62,61,32,51,50,32,38,38,32,110,32,60,32,49,50,55,41,32,115,32,43,61,32,39,32,39,32,43,32,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,101,40,110,41,59,10,32,32,32,32,32,119,104,105,108,101,32,40,115,46,108,101,110,103,116,104,32,60,32,54,41,32,115,32,43,61,32,39,32,39,59,10,32,32,32,32,32,114,101,116,117,114,110,32,115,59,10,32,32,125,10,10,10,32,32,102,117,110,99,116,105,111,110,32,108,111,103,67,108,101,97,114,40,102,111,114,109,41,32,123,10,32,32,9,116,105,109,101,114,32,61,32,48,59,10,32,32,9,100,111,99,117,109,101,110,116,46,102,111,114,109,115,91,102,111,114,109,43,39,102,111,114,109,39,93,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,39,116,101,120,116,97,114,101,97,39,41,91,48,93,46,118,97,108,117,101,32,61,39,39,59,10,32,32,9,108,105,110,101,115,32,61,32,48,59,10,32,32,125,10,10,32,32,119,105,110,100,111,119,46,108,111,103,67,108,101,97,114,32,61,32,108,111,103,67,108,101,97,114,59,10,32,32,119,105,110,100,111,119,46,108,111,103,77,111,117,115,101,32,61,32,108,111,103,77,111,117,115,101,59,10,125,10,60,47,115,99,114,105,112,116,62,10]},"parent":"event-details"}},"selectable-list":{"type":"Task","value":{"title":"Selectable list","slug":"selectable-list","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/1-mouse-events-basics/01-selectable-list","weight":1,"libs":[],"importance":5,"content":"\nCreate a list where elements are selectable, like in file-managers.\n\n- A click on a list element selects only that element (adds the class `.selected`), deselects all others.\n- If a click is made with `key:Ctrl` (`key:Cmd` for Mac), then the selection is toggled on the element, but other elements are not modified.\n\nThe demo:\n\n[iframe border=\"1\" src=\"solution\" height=180]\n\nP.S. For this task we can assume that list items are text-only. No nested tags.\nP.P.S. Prevent the native browser selection of the text on clicks.","solution":"","parent":"mouse-events-basics"}},"onload-ondomcontentloaded":{"type":"Article","value":{"title":"Page lifecycle: DOMContentLoaded, load, beforeunload, unload","slug":"onload-ondomcontentloaded","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/10-onload-ondomcontentloaded/article.md","isFolder":false,"weight":10,"content":"\nThe lifecycle of an HTML page has three important events:\n\n- `DOMContentLoaded` -- the browser fully loaded HTML, and the DOM tree is built, but external resources like pictures `<img>` and stylesheets may be not yet loaded.  \n- `load` -- the browser loaded all resources (images, styles etc).\n- `beforeunload/unload` -- when the user is leaving the page.\n\nEach event may be useful:\n\n- `DOMContentLoaded` event -- DOM is ready, so the handler can lookup DOM nodes, initialize the interface.\n- `load` event -- additional resources are loaded, we can get image sizes (if not specified in HTML/CSS) etc.\n- `beforeunload/unload` event -- the user is leaving: we can check if the user saved the changes and  ask him whether he really wants to leave.\n\nLet's explore the details of these events.\n\n## DOMContentLoaded\n\nThe `DOMContentLoaded` event happens on the `document` object.\n\nWe must use `addEventListener` to catch it:\n\n```js\ndocument.addEventListener(\"DOMContentLoaded\", ready);\n```\n\nFor instance:\n\n```html run height=200 refresh\n<script>\n  function ready() {\n    alert('DOM is ready');\n\n    // image is not yet loaded (unless was cached), so the size is 0x0\n    alert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n  }\n\n*!*\n  document.addEventListener(\"DOMContentLoaded\", ready);\n*/!*\n</script>\n\n<img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&cache=0\">\n```\n\nIn the example the `DOMContentLoaded` handler runs when the document is loaded, not waits for the page load. So `alert` shows zero sizes.\n\nAt the first sight `DOMContentLoaded` event is very simple. The DOM tree is ready -- here's the event. But there are few peculiarities.\n\n### DOMContentLoaded and scripts\n\nWhen the browser initially loads HTML and comes across a `<script>...</script>` in the text, it can't continue building DOM. It must execute the script right now. So `DOMContentLoaded` may only happen after all such scripts are executed.\n\nExternal scripts (with `src`) also put DOM building to pause while the script is loading and executing. So `DOMContentLoaded` waits for external scripts as well.\n\nThe only exception are external scripts with `async` and `defer` attributes. They tell the browser to continue processing without waiting for the scripts. So the user can see the page before scripts finish loading, good for performance.\n\n```smart header=\"A word about `async` and `defer`\"\nAttributes `async` and `defer` work only for external scripts. They are ignored if there's no `src`.\n\nBoth of them tell the browser that it may go on working with the page, and load the script \"in background\", then run the script when it loads. So the script doesn't block DOM building and page rendering.\n\nThere are two differences between them.\n\n|         | `async` | `defer` |\n|---------|---------|---------|\n| Order | Scripts with `async` execute *in the load-first order*. Their document order doesn't matter -- which loads first runs first. | Scripts with `defer` always execute *in the document order* (as they go in the document). |\n| `DOMContentLoaded` | Scripts with `async` may load and execute while the document has not yet been fully downloaded. That happens if scripts are small or cached, and the document is long enough. | Scripts with `defer` execute after the document is loaded and parsed (they wait if needed), right before `DOMContentLoaded`. |\n\nSo `async` is used for totally independent scripts.\n\n```\n\n### DOMContentLoaded and styles\n\nExternal style sheets don't affect DOM, and so `DOMContentLoaded` does not wait for them.\n\nBut there's a pitfall: if we have a script after the style, then that script must wait for the stylesheet to execute:\n\n```html\n<link type=\"text/css\" rel=\"stylesheet\" href=\"style.css\">\n<script>\n  // the script doesn't not execute until the stylesheet is loaded\n  alert(getComputedStyle(document.body).marginTop);\n</script>\n```\n\nThe reason is that the script may want to get coordinates and other style-dependent properties of elements, like in the example above. Naturally, it has to wait for styles to load.\n\nAs `DOMContentLoaded` waits for scripts, it now waits for styles before them as well.\n\n### Built-in browser autofill\n\nFirefox, Chrome and Opera autofill forms on `DOMContentLoaded`.\n\nFor instance, if the page has a form with login and password, and the browser remembered the values, then on `DOMContentLoaded` it may try to autofill them (if approved by the user).\n\nSo if `DOMContentLoaded` is postponed by long-loading scripts, then autofill also awaits. You probably saw that on some sites (if you use browser autofill) -- the login/password fields don't get autofilled immediately, but there's a delay till the page fully loads. That's actually the delay until the `DOMContentLoaded` event.\n\nOne of minor benefits in using `async` and `defer` for external scripts -- they don't block `DOMContentLoaded` and don't delay browser autofill.\n\n## window.onload [#window-onload]\n\nThe `load` event on the `window` object triggers when the whole page is loaded including styles, images and other resources.\n\nThe example below correctly shows image sizes, because `window.onload` waits for all images:\n\n```html run height=200 refresh\n<script>\n  window.onload = function() {\n    alert('Page loaded');\n\n    // image is loaded at this time\n    alert(`Image size: ${img.offsetWidth}x${img.offsetHeight}`);\n  };\n</script>\n\n<img id=\"img\" src=\"https://en.js.cx/clipart/train.gif?speed=1&cache=0\">\n```\n\n## window.onunload\n\nWhen a visitor leaves the page, the `unload` event triggers on `window`. We can do something there that doesn't involve a delay, like closing related popup windows. But we can't cancel the transition to another page.\n\nFor that we should use another event -- `onbeforeunload`.\n\n## window.onbeforeunload [#window.onbeforeunload]\n\nIf a visitor initiated navigation away from the page or tries to close the window, the `beforeunload` handler asks for additional confirmation.\n\nIt may return a string with the question. Historically browsers used to show it, but as of now only some of them do. That's because certain webmasters abused this event handler by showing misleading and hackish messages.\n\nYou can try it by running this code and then reloading the page.\n\n```js run\nwindow.onbeforeunload = function() {\n  return \"There are unsaved changes. Leave now?\";\n};\n```\n\n```online\nOr you can click on the button in `<iframe>` below to set the handler, and then click the link:\n\n[iframe src=\"window-onbeforeunload\" border=\"1\" height=\"80\" link edit]\n```\n\n## readyState\n\nWhat happens if we set the `DOMContentLoaded` handler after the document is loaded?\n\nNaturally, it never runs.\n\nThere are cases when we are not sure whether the document is ready or not, for instance an external script with `async` attribute loads and runs asynchronously. Depending on the network, it may load and execute before the document is complete or after that, we can't be sure. So we should be able to know the current state of the document.\n\nThe `document.readyState` property gives us information about it. There are 3 possible values:\n\n- `\"loading\"` -- the document is loading.\n- `\"interactive\"` -- the document was fully read.\n- `\"complete\"` -- the document was fully read and all resources (like images) are loaded too.\n\nSo we can check `document.readyState` and setup a handler or execute the code immediately if it's ready.\n\nLike this:\n\n```js\nfunction work() { /*...*/ }\n\nif (document.readyState == 'loading') {\n  document.addEventListener('DOMContentLoaded', work);\n} else {\n  work();\n}\n```\n\nThere's a `readystatechange` event that triggers when the state changes, so we can print all these states like this:\n\n```js run\n// current state\nconsole.log(document.readyState);\n\n// print state changes\ndocument.addEventListener('readystatechange', () => console.log(document.readyState));\n```\n\nThe `readystatechange` event is an alternative mechanics of tracking the document loading state, it appeared long ago. Nowadays, it is rarely used, but let's cover it for completeness.\n\nWhat is the place of `readystatechange` among other events?\n\nTo see the timing, here's a document with `<iframe>`, `<img>` and handlers that log events:\n\n```html\n<script>\n  function log(text) { /* output the time and message */ }\n  log('initial readyState:' + document.readyState);\n\n  document.addEventListener('readystatechange', () => log('readyState:' + document.readyState));\n  document.addEventListener('DOMContentLoaded', () => log('DOMContentLoaded'));\n\n  window.onload = () => log('window onload');\n</script>\n\n<iframe src=\"iframe.html\" onload=\"log('iframe onload')\"></iframe>\n\n<img src=\"http://en.js.cx/clipart/train.gif\" id=\"img\">\n<script>\n  img.onload = () => log('img onload');\n</script>\n```\n\nThe working example is [in the sandbox](sandbox:readystate).\n\nThe typical output:\n1. [1] initial readyState:loading\n2. [2] readyState:interactive\n3. [2] DOMContentLoaded\n4. [3] iframe onload\n5. [4] readyState:complete\n6. [4] img onload\n7. [4] window onload\n\nThe numbers in square brackets denote the approximate time of when it happens. The real time is a bit greater, but events labeled with the same digit happen approximately at the same time (+- a few ms).\n\n- `document.readyState` becomes `interactive` right before `DOMContentLoaded`. These two events actually mean the same.\n- `document.readyState` becomes `complete` when all resources (`iframe` and `img`) are loaded. Here we can see that it happens in about the same time as `img.onload` (`img` is the last resource) and `window.onload`. Switching to `complete` state means the same as `window.onload`. The difference is that `window.onload` always works after all other `load` handlers.\n\n\n## Summary\n\nPage lifecycle events:\n\n- `DOMContentLoaded` event triggers on `document` when DOM is ready. We can apply JavaScript to elements at this stage.\n  - All scripts are executed except those that are external with `async` or `defer`\n  - Images and other resources may still continue loading.\n- `load` event on `window` triggers when the page and all resources are loaded. We rarely use it, because there's usually no need to wait for so long.\n- `beforeunload` event on `window` triggers when the user wants to leave the page. If it returns a string, the browser shows a question whether the user really wants to leave or not.\n- `unload` event on `window` triggers when the user is finally leaving, in the handler we can only do simple things that do not involve delays or asking a user. Because of that limitation, it's rarely used.\n- `document.readyState` is the current state of the document, changes can be tracked in the `readystatechange` event:\n  - `loading` -- the document is loading.\n  - `interactive` -- the document is parsed, happens at about the same time as `DOMContentLoaded`, but before it.\n  - `complete` -- the document and resources are loaded, happens at about the same time as `window.onload`, but before it.","libs":[],"children":[],"parent":"event-details"}},"onload-onerror":{"type":"Article","value":{"title":"Resource loading: onload and onerror","slug":"onload-onerror","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/11-onload-onerror/article.md","isFolder":false,"weight":11,"content":"\nThe browser allows to track the loading of external resources -- scripts, iframes, pictures and so on.\n\nThere are two events for it:\n\n- `onload` -- successful load,\n- `onerror` -- an error occurred.\n\n## Loading a script\n\nLet's say we need to call a function that resides in an external script.\n\nWe can load it dynamically, like this:\n\n```js\nlet script = document.createElement('script');\nscript.src = \"my.js\";\n\ndocument.head.append(script);\n```\n\n...But how to run the function that is declared inside that script? We need to wait until the script loads, and only then we can call it.\n\n### script.onload\n\nThe main helper is the `load` event. It triggers after the script was loaded and executed.\n\nFor instance:\n\n```js run untrusted\nlet script = document.createElement('script');\n\n// can load any script, from any domain\nscript.src = \"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js\"\ndocument.head.append(script);\n\n*!*\nscript.onload = function() {\n  // the script creates a helper function \"_\"\n  alert(_); // the function is available\n};\n*/!*\n```\n\nSo in `onload` we can use script variables, run functions etc.\n\n...And what if the loading failed? For instance, there's no such script (error 404) or the server or the server is down (unavailable).\n\n### script.onerror\n\nErrors that occur during the loading (but not execution) of the script can be tracked on `error` event.\n\nFor instance, let's request a script that doesn't exist:\n\n```js run\nlet script = document.createElement('script');\nscript.src = \"https://example.com/404.js\"; // no such script\ndocument.head.append(script);\n\n*!*\nscript.onerror = function() {\n  alert(\"Error loading \" + this.src); // Error loading https://example.com/404.js\n};\n*/!*\n```\n\nPlease note that we can't get error details here. We don't know was it error 404 or 500 or something else. Just that the loading failed.\n\n## Other resources\n\nThe `load` and `error` events also work for other resources. There may be minor differences though.\n\nFor instance:\n\n`<img>`, `<link>` (external stylesheets)\n: Both `load` and `error` events work as expected.\n\n`<iframe>`\n: Only `load` event when the iframe loading finished. It triggers both for successful load and in case of an error. That's for historical reasons.\n\n## Summary\n\nPictures `<img>`, external styles, scripts and other resources provide `load` and `error` events to track their loading:\n\n- `load` triggers on a successful load,\n- `error` triggers on a failed load.\n\nThe only exception is `<iframe>`: for historical reasons it always triggers `load`, for any load completion, even if the page is not found.\n\nThe `readystatechange` event also works for resources, but is rarely used, because `load/error` events are simpler.","libs":[],"children":["load-img-callback"],"parent":"event-details"}},"load-img-callback":{"type":"Task","value":{"title":"Load images with a callback","slug":"load-img-callback","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/11-onload-onerror/1-load-img-callback","weight":1,"libs":[],"importance":4,"content":"\nNormally, images are loaded when they are created. So i when we add `<img>` to the page, the user does not see the picture immediately. The browser needs to load it first.\n\nTo show an image immediately, we can create it \"in advance\", like this:\n\n```js\nlet img = document.createElement('img');\nimg.src = 'my.jpg';\n```\n\nThe browser starts loading the image and remembers it in the cache. Later, when the same image appears in the document (no matter how), it shows up immediately.\n\n**Create a function `preloadImages(sources, callback)` that loads all images from the array `sources` and, when ready, runs `callback`.**\n\nFor instance, this will show an `alert` after the images are loaded:\n\n```js\nfunction loaded() {\n  alert(\"Images loaded\")\n}\n\npreloadImages([\"1.jpg\", \"2.jpg\", \"3.jpg\"], loaded);\n```\n\nIn case of an error, the function should still assume the picture \"loaded\".\n\nIn other words, the `callback` is executed when all images are either loaded or errored out.\n\nThe function is useful, for instance, when we plan to show a gallery with many scrollable images, and want to be sure that all images are loaded.\n\nIn the source document you can find links to test images, and also the code to check whether they are loaded or not. It should output `300`.","solution":"The algorithm:\n1. Make `img` for every source.\n2. Add `onload/onerror` for every image.\n3. Increase the counter when either `onload` or `onerror` triggers.\n4. When the counter value equals to the sources count -- we're done: `callback()`.","parent":"onload-onerror"}},"mousemove-mouseover-mouseout-mouseenter-mouseleave":{"type":"Article","value":{"title":"Moving: mouseover/out, mouseenter/leave","slug":"mousemove-mouseover-mouseout-mouseenter-mouseleave","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/3-mousemove-mouseover-mouseout-mouseenter-mouseleave/article.md","isFolder":false,"weight":3,"content":"\nLet's dive into more details about events that happen when mouse moves between elements.\n\n## Mouseover/mouseout, relatedTarget\n\nThe `mouseover` event occurs when a mouse pointer comes over an element, and `mouseout` -- when it leaves.\n\n![](mouseover-mouseout.png)\n\nThese events are special, because they have a `relatedTarget`.\n\nFor `mouseover`:\n\n- `event.target` -- is the element where the mouse came over.\n- `event.relatedTarget` -- is the element from which the mouse came.\n\nFor `mouseout` the reverse:\n\n- `event.target` -- is the element that mouse left.\n- `event.relatedTarget` -- is the new under-the-pointer element (that mouse left for).\n\n```online\nIn the example below each face feature is an element. When you move the mouse, you can see mouse events in the text area.\n\nEach event has the information about where the element came and where it came from.\n\n[codetabs src=\"mouseoverout\" height=280]\n```\n\n```warn header=\"`relatedTarget` can be `null`\"\nThe `relatedTarget` property can be `null`.\n\nThat's normal and just means that the mouse came not from another element, but from out of the window. Or that it left the window.\n\nWe should keep that possibility in mind when using `event.relatedTarget` in our code. If we access `event.relatedTarget.tagName`, then there will be an error.\n```\n\n## Events frequency\n\nThe `mousemove` event triggers when the mouse moves. But that doesn't mean that every pixel leads to an event.\n\nThe browser checks the mouse position from time to time. And if it notices changes then triggers the events.\n\nThat means that if the visitor is moving the mouse very fast then DOM-elements may be skipped:\n\n![](mouseover-mouseout-over-elems.png)\n\nIf the mouse moves very fast from `#FROM` to `#TO` elements as painted above, then intermediate `<div>` (or some of them) may be skipped. The `mouseout` event may trigger on `#FROM` and then immediately `mouseover` on `#TO`.\n\nIn practice that's helpful, because if there may be many intermediate elements. We don't really want to process in and out of each one.\n\nFrom the other side, we should keep in mind that we can't assume that the mouse slowly moves from one event to another. No, it can \"jump\".\n\nIn particular it's possible that the cursor jumps right inside the middle of the page from out of the window. And `relatedTarget=null`, because it came from \"nowhere\":\n\n![](mouseover-mouseout-from-outside.png)\n\n<div style=\"display:none\">\nIn case of a fast move, intermediate elements may trigger no events. But if the mouse enters the element (`mouseover`), when we're guaranteed to have `mouseout` when it leaves it.\n</div>\n\n```online\nCheck it out \"live\" on a teststand below.\n\nThe HTML is two nested `<div>` elements. If you move the mouse fast over them, then there may be no events at all, or maybe only the red div triggers events, or maybe the green one.\n\nAlso try to move the pointer over the red `div`, and then move it out quickly down through the green one. If the movement is fast enough then the parent element is ignored.\n\n[codetabs height=360 src=\"mouseoverout-fast\"]\n```\n\n## \"Extra\" mouseout when leaving for a child\n\nImagine -- a mouse pointer entered an element. The `mouseover` triggered. Then the cursor goes into a child element. The interesting fact is that `mouseout` triggers in that case. The cursor is still in the element, but we have a `mouseout` from it!\n\n![](mouseover-to-child.png)\n\nThat seems strange, but can be easily explained.\n\n**According to the browser logic, the mouse cursor may be only over a *single* element at any time -- the most nested one (and top by z-index).**\n\nSo if it goes to another element (even a descendant), then it leaves the previous one. That simple.\n\nThere's a funny consequence that we can see on the example below.\n\nThe red `<div>` is nested inside the blue one. The blue `<div>` has `mouseover/out` handlers that log all events in the textarea below.\n\nTry entering the blue element and then moving the mouse on the red one -- and watch the events:\n\n[codetabs height=360 src=\"mouseoverout-child\"]\n\n1. On entering the blue one -- we get `mouseover [target: blue]`.\n2. Then after moving from the blue to the red one -- we get `mouseout [target: blue]` (left the parent).\n3. ...And immediately `mouseover [target: red]`.\n\nSo, for a handler that does not take `target` into account, it looks like we left the parent in `mouseout` in `(2)` and returned back to it by `mouseover` in `(3)`.\n\nIf we perform some actions on entering/leaving the element, then we'll get a lot of extra \"false\" runs. For simple stuff may be unnoticeable. For complex things that may bring unwanted side-effects.\n\nWe can fix it by using `mouseenter/mouseleave` events instead.\n\n## Events mouseenter and mouseleave\n\nEvents `mouseenter/mouseleave` are like `mouseover/mouseout`. They also trigger when the mouse pointer enters/leaves the element.\n\nBut there are two differences:\n\n1. Transitions inside the element are not counted.\n2. Events `mouseenter/mouseleave` do not bubble.\n\nThese events are intuitively very clear.\n\nWhen the pointer enters an element -- the `mouseenter` triggers, and then doesn't matter where it goes while inside the element. The `mouseleave` event only triggers when the cursor leaves it.\n\nIf we make the same example, but put `mouseenter/mouseleave` on the blue `<div>`, and do the same -- we can see that events trigger only on entering and leaving the blue `<div>`. No extra events when going to the red one and back. Children are ignored.\n\n[codetabs height=340 src=\"mouseleave\"]\n\n## Event delegation\n\nEvents `mouseenter/leave` are very simple and easy to use. But they do not bubble. So we can't use event delegation with them.\n\nImagine we want to handle mouse enter/leave for table cells. And there are hundreds of cells.\n\nThe natural solution would be -- to set the handler on `<table>` and process events there. But `mouseenter/leave` don't bubble. So if such event happens on `<td>`, then only a handler on that `<td>` can catch it.\n\nHandlers for `mouseenter/leave` on `<table>` only trigger on entering/leaving the whole table. It's impossible to get any information about transitions inside it.\n\nNot a problem -- let's use `mouseover/mouseout`.\n\nA simple handler may look like this:\n\n```js\n// let's highlight cells under mouse\ntable.onmouseover = function(event) {\n  let target = event.target;\n  target.style.background = 'pink';\n};\n\ntable.onmouseout = function(event) {\n  let target = event.target;\n  target.style.background = '';\n};\n```\n\n```online\n[codetabs height=480 src=\"mouseenter-mouseleave-delegation\"]\n```\n\nThese handlers work when going from any element to any inside the table.\n\nBut we'd like to handle only transitions in and out of `<td>` as a whole. And highlight the cells as a whole. We don't want to handle transitions that happen between the children of `<td>`.\n\nOne of solutions:\n\n- Remember the currently highlighted `<td>` in a variable.\n- On `mouseover` -- ignore the event if we're still inside the current `<td>`.\n- On `mouseout` -- ignore if we didn't leave the current `<td>`.\n\nThat filters out \"extra\" events when we are moving between the children of `<td>`.\n\n```offline\nThe details are in the [full example](sandbox:mouseenter-mouseleave-delegation-2).\n```\n\n```online\nHere's the full example with all details:\n\n[codetabs height=380 src=\"mouseenter-mouseleave-delegation-2\"]\n\nTry to move the cursor in and out of table cells and inside them. Fast or slow -- doesn't better. Only `<td>` as a whole is highlighted unlike the example before.\n```\n\n\n## Summary\n\nWe covered events `mouseover`, `mouseout`, `mousemove`, `mouseenter` and `mouseleave`.\n\nThings that are good to note:\n\n- A fast mouse move can make `mouseover, mousemove, mouseout` to skip intermediate elements.\n- Events `mouseover/out` and `mouseenter/leave` have an additional target: `relatedTarget`. That's the element that we are coming from/to, complementary to `target`.\n- Events `mouseover/out` trigger even when we go from the parent element to a child element. They assume that the mouse can be only over one element at one time -- the deepest one.\n- Events `mouseenter/leave` do not bubble and do not trigger when the mouse goes to a child element. They only track whether the mouse comes inside and outside the element as a whole.","libs":[],"children":["behavior-nested-tooltip","hoverintent"],"parent":"event-details"}},"behavior-nested-tooltip":{"type":"Task","value":{"title":"Improved tooltip behavior","slug":"behavior-nested-tooltip","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/3-mousemove-mouseover-mouseout-mouseenter-mouseleave/1-behavior-nested-tooltip","weight":1,"libs":[],"importance":5,"content":"\nWrite JavaScript that shows a tooltip over an element with the attribute `data-tooltip`.\n\nThat's like the task <info:task/behavior-tooltip>, but here the annotated elements can be nested. The most deeply nested tooltip is shown.\n\nFor instance:\n\n```html\n<div data-tooltip=\"Here – is the house interior\" id=\"house\">\n  <div data-tooltip=\"Here – is the roof\" id=\"roof\"></div>\n  ...\n  <a href=\"https://en.wikipedia.org/wiki/The_Three_Little_Pigs\" data-tooltip=\"Read on…\">Hover over me</a>\n</div>\n```\n\nThe result in iframe:\n\n[iframe src=\"solution\" height=300 border=1]\n\nP.S. Hint: only one tooltip may show up at the same time.","solution":"","parent":"mousemove-mouseover-mouseout-mouseenter-mouseleave"}},"hoverintent":{"type":"Task","value":{"title":"\"Smart\" tooltip","slug":"hoverintent","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/3-mousemove-mouseover-mouseout-mouseenter-mouseleave/2-hoverintent","weight":2,"libs":[],"importance":5,"content":"\nWrite a function that shows a tooltip over an element only if the visitor moves the mouse *over it*, but not *through it*.\n\nIn other words, if the visitor moves the mouse on the element and stopped -- show the tooltip. And if he just moved the mouse through fast, then no need, who wants extra blinking?\n\nTechnically, we can measure the mouse speed over the element, and if it's slow then we assume that it comes \"over the element\" and show the tooltip, if it's fast -- then we ignore it.\n\nMake a universal object `new HoverIntent(options)` for it. With `options`:\n\n- `elem` -- element to track.\n- `over` -- a function to call if the mouse is slowly moving the element.\n- `out` -- a function to call when the mouse leaves the element (if `over` was called).\n\nAn example of using such object for the tooltip:\n\n```js\n// a sample tooltip\nlet tooltip = document.createElement('div');\ntooltip.className = \"tooltip\";\ntooltip.innerHTML = \"Tooltip\";\n\n// the object will track mouse and call over/out\nnew HoverIntent({\n  elem,\n  over() {\n    tooltip.style.left = elem.getBoundingClientRect().left + 'px';\n    tooltip.style.top = elem.getBoundingClientRect().bottom + 5 + 'px';\n    document.body.append(tooltip);\n  },\n  out() {\n    tooltip.remove();\n  }\n});\n```\n\nThe demo:\n\n[iframe src=\"solution\" height=140]\n\nIf you move the mouse over the \"clock\" fast then nothing happens, and if you do it slow or stop on them, then there will be a tooltip.\n\nPlease note: the tooltip doesn't \"blink\" when the cursor moves between the clock subelements.","solution":"The algorithm looks simple:\n1. Put `onmouseover/out` handlers on the element. Also can use `onmouseenter/leave` here, but they are less universal, won't work if we introduce delegation.\n2. When a mouse cursor entered the element, start measuring the speed on `mousemove`.\n3. If the speed is slow, then run `over`.\n4. Later if we're out of the element, and `over` was executed, run `out`.\n\nThe question is: \"How to measure the speed?\"\n\nThe first idea would be: to run our function every `100ms` and measure the distance between previous and new coordinates. If it's small, then the speed is small.\n\nUnfortunately, there's no way to get \"current mouse coordinates\" in JavaScript. There's no function like `getCurrentMouseCoordinates()`.\n\nThe only way to get coordinates is to listen to mouse events, like `mousemove`.\n\nSo we can set a handler on `mousemove` to track coordinates and remember them. Then we can compare them, once per `100ms`.\n\nP.S. Please note: the solution tests use `dispatchEvent` to see if the tooltip works right.","parent":"mousemove-mouseover-mouseout-mouseenter-mouseleave"}},"mouse-drag-and-drop":{"type":"Article","value":{"title":"Drag'n'Drop with mouse events","slug":"mouse-drag-and-drop","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/4-mouse-drag-and-drop/article.md","isFolder":false,"weight":4,"content":"\nDrag'n'Drop is a great interface solution. Taking something, dragging and dropping is a clear and simple way to do many things, from copying and moving (see file managers) to ordering (drop into cart).\n\nIn the modern HTML standard there's a [section about Drag Events](https://html.spec.whatwg.org/multipage/interaction.html#dnd).\n\nThey are interesting, because they allow to solve simple tasks easily, and also allow to handle drag'n'drop of \"external\" files into the browser. So we can take a file in the OS file-manager and drop it into the browser window. Then JavaScript gains access to its contents.\n\nBut native Drag Events also have limitations. For instance, we can limit dragging by a certain area. Also we can't make it \"horizontal\" or \"vertical\" only. There are other drag'n'drop tasks that can't be implemented using that API.\n\nSo here we'll see how to implement Drag'n'Drop using mouse events. Not that hard either.\n\n## Drag'n'Drop algorithm\n\nThe basic Drag'n'Drop algorithm looks like this:\n\n1. Catch `mousedown` on a draggable element.\n2. Prepare the element to moving (maybe create a copy of it or whatever).\n3. Then on `mousemove` move it by changing `left/top` and `position:absolute`.\n4. On `mouseup` (button release) -- perform all actions related to a finished Drag'n'Drop.\n\nThese are the basics. We can extend it, for instance, by highlighting droppable (available for the drop) elements when hovering over them.\n\nHere's the algorithm for drag'n'drop of a ball:\n\n```js\nball.onmousedown = function(event) { // (1) start the process\n\n  // (2) prepare to moving: make absolute and on top by z-index\n  ball.style.position = 'absolute';\n  ball.style.zIndex = 1000;\n  // move it out of any current parents directly into body\n  // to make it positioned relative to the body\n  document.body.append(ball);  \n  // ...and put that absolutely positioned ball under the cursor\n\n  moveAt(event.pageX, event.pageY);\n\n  // centers the ball at (pageX, pageY) coordinates\n  function moveAt(pageX, pageY) {\n    ball.style.left = pageX - ball.offsetWidth / 2 + 'px';\n    ball.style.top = pageY - ball.offsetHeight / 2 + 'px';\n  }\n\n  function onMouseMove(event) {\n    moveAt(event.pageX, event.pageY);\n  }\n\n  // (3) move the ball on mousemove\n  document.addEventListener('mousemove', onMouseMove);\n\n  // (4) drop the ball, remove unneeded handlers\n  ball.onmouseup = function() {\n    document.removeEventListener('mousemove', onMouseMove);\n    ball.onmouseup = null;\n  };\n\n};\n```\n\nIf we run the code, we can notice something strange. On the beginning of the drag'n'drop, the ball \"forks\": we start to dragging it's \"clone\".\n\n```online\nHere's an example in action:\n\n[iframe src=\"ball\" height=230]\n\nTry to drag'n'drop the mouse and you'll see the strange behavior.\n```\n\nThat's because the browser has its own Drag'n'Drop for images and some other elements that runs automatically and conflicts with ours.\n\nTo disable it:\n\n```js\nball.ondragstart = function() {\n  return false;\n};\n```\n\nNow everything will be all right.\n\n```online\nIn action:\n\n[iframe src=\"ball2\" height=230]\n```\n\nAnother important aspect -- we track `mousemove` on `document`, not on `ball`. From the first sight it may seem that the mouse is always over the ball, and we can put `mousemove` on it.\n\nBut as we remember, `mousemove` triggers often, but not for every pixel. So after swift move the cursor can jump from the ball somewhere in the middle of document (or even outside of the window).\n\nSo we should listen on `document` to catch it.\n\n## Correct positioning\n\nIn the examples above the ball is always centered under the pointer:\n\n```js\nball.style.left = pageX - ball.offsetWidth / 2 + 'px';\nball.style.top = pageY - ball.offsetHeight / 2 + 'px';\n```\n\nNot bad, but there's a side-effect. To initiate the drag'n'drop can we `mousedown` anywhere on the ball. If do it at the edge, then the ball suddenly \"jumps\" to become centered.\n\nIt would be better if we keep the initial shift of the element relative to the pointer.\n\nFor instance, if we start dragging by the edge of the ball, then the cursor should remain over the edge while dragging.\n\n![](ball_shift.png)\n\n1. When a visitor presses the button (`mousedown`) -- we can remember the distance from the cursor to the left-upper corner of the ball in variables `shiftX/shiftY`. We should keep that distance while dragging.\n\n    To get these shifts we can substract the coordinates:\n\n    ```js\n    // onmousedown\n    let shiftX = event.clientX - ball.getBoundingClientRect().left;\n    let shiftY = event.clientY - ball.getBoundingClientRect().top;\n    ```\n\n    Please note that there's no method to get document-relative coordinates in JavaScript, so we use window-relative coordinates here.\n\n2. Then while dragging we position the ball on the same shift relative to the pointer, like this:\n\n    ```js\n    // onmousemove\n    // ball has position:absoute\n    ball.style.left = event.pageX - *!*shiftX*/!* + 'px';\n    ball.style.top = event.pageY - *!*shiftY*/!* + 'px';\n    ```\n\nThe final code with better positioning:\n\n```js\nball.onmousedown = function(event) {\n\n*!*\n  let shiftX = event.clientX - ball.getBoundingClientRect().left;\n  let shiftY = event.clientY - ball.getBoundingClientRect().top;\n*/!*\n\n  ball.style.position = 'absolute';\n  ball.style.zIndex = 1000;\n  document.body.append(ball);\n\n  moveAt(event.pageX, event.pageY);\n\n  // centers the ball at (pageX, pageY) coordinates\n  function moveAt(pageX, pageY) {\n    ball.style.left = pageX - *!*shiftX*/!* + 'px';\n    ball.style.top = pageY - *!*shiftY*/!* + 'px';\n  }\n\n  function onMouseMove(event) {\n    moveAt(event.pageX, event.pageY);\n  }\n\n  // (3) move the ball on mousemove\n  document.addEventListener('mousemove', onMouseMove);\n\n  // (4) drop the ball, remove unneeded handlers\n  ball.onmouseup = function() {\n    document.removeEventListener('mousemove', onMouseMove);\n    ball.onmouseup = null;\n  };\n\n};\n\nball.ondragstart = function() {\n  return false;\n};\n```\n\n```online\nIn action (inside `<iframe>`):\n\n[iframe src=\"ball3\" height=230]\n```\n\nThe difference is especially noticeable if we drag the ball by it's right-bottom corner. In the previous example the ball \"jumps\" under the pointer. Now it fluently follows the cursor from the current position.\n\n## Detecting droppables\n\nIn previous examples the ball could be dropped just \"anywhere\" to stay. In real-life we usually take one element and drop it onto another. For instance, a file into a folder, or a user into a trash can or whatever.\n\nAbstractly, we take a \"draggable\" element and drop it onto \"droppable\" element.\n\nWe need to know the target droppable at the end of Drag'n'Drop -- to do the corresponding action, and, preferably, during the dragging process, to highlight it.\n\nThe solution is kind-of interesting and just a little bit tricky, so let's cover it here.\n\nWhat's the first idea? Probably to put `onmouseover/mouseup` handlers on potential droppables and detect when the mouse pointer appears over them. And then we know that we are dragging/dropping on that element.\n\nBut that doesn't work.\n\nThe problem is that, while we're dragging, the draggable element is always above other elements. And mouse events only happen on the top element, not on those below it.\n\nFor instance, below are two `<div>` elements, red on top of blue. There's no way to catch an event on the blue one, because the red is on top:\n\n```html run autorun height=60\n<style>\n  div {\n    width: 50px;\n    height: 50px;\n    position: absolute;\n    top: 0;\n  }\n</style>\n<div style=\"background:blue\" onmouseover=\"alert('never works')\"></div>\n<div style=\"background:red\" onmouseover=\"alert('over red!')\"></div>\n```\n\nThe same with a draggable element. The ball in always on top over other elements, so events happen on it. Whatever handlers we set on lower elements, they won't work.\n\nThat's why the initial idea to put handlers on potential droppables doesn't work in practice. They won't run.\n\nSo, what to do?\n\nThere's a method called `document.elementFromPoint(clientX, clientY)`. It returns the most nested element on given window-relative coordinates (or `null` if coordinates are out of the window).\n\nSo in any of our mouse event handlers we can detect the potential droppable under the pointer like this:\n\n```js\n// in a mouse event handler\nball.hidden = true; // (*)\nlet elemBelow = document.elementFromPoint(event.clientX, event.clientY);\nball.hidden = false;\n// elemBelow is the element below the ball. If it's droppable, we can handle it.\n```\n\nPlease note: we need to hide the ball before the call `(*)`. Otherwise we'll usually have a ball on these coordinates, as it's the top element under the pointer: `elemBelow=ball`.\n\nWe can use that code to check what we're \"flying over\" at any time. And handle the drop when it happens.\n\nAn extended code of `onMouseMove` to find \"droppable\" elements:\n\n```js\nlet currentDroppable = null; // potential droppable that we're flying over right now\n\nfunction onMouseMove(event) {\n  moveAt(event.pageX, event.pageY);\n\n  ball.hidden = true;\n  let elemBelow = document.elementFromPoint(event.clientX, event.clientY);\n  ball.hidden = false;\n\n  // mousemove events may trigger out of the window (when the ball is dragged off-screen)\n  // if clientX/clientY are out of the window, then elementfromPoint returns null\n  if (!elemBelow) return;\n\n  // potential droppables are labeled with the class \"droppable\" (can be other logic)\n  let droppableBelow = elemBelow.closest('.droppable');\n\n  if (currentDroppable != droppableBelow) { // if there are any changes\n    // we're flying in or out...\n    // note: both values can be null\n    //   currentDroppable=null if we were not over a droppable (e.g over an empty space)\n    //   droppableBelow=null if we're not over a droppable now, during this event\n\n    if (currentDroppable) {\n      // the logic to process \"flying out\" of the droppable (remove highlight)\n      leaveDroppable(currentDroppable);\n    }\n    currentDroppable = droppableBelow;\n    if (currentDroppable) {\n      // the logic to process \"flying in\" of the droppable\n      enterDroppable(currentDroppable);\n    }\n  }\n}\n```\n\nIn the example below when the ball is dragged over the soccer gate, the gate is highlighted.\n\n[codetabs height=250 src=\"ball4\"]\n\nNow we have the current \"drop target\" in the variable `currentDroppable` during the whole process and can use it to highlight or any other stuff.\n\n## Summary\n\nWe considered a basic `Drag'n'Drop` algorithm.\n\nThe key components:\n\n1. Events flow: `ball.mousedown` -> `document.mousemove` -> `ball.mouseup` (cancel native `ondragstart`).\n2. At the drag start -- remember the initial shift of the pointer relative to the element: `shiftX/shiftY` and keep it during the dragging.\n3. Detect droppable elements under the pointer using `document.elementFromPoint`.\n\nWe can lay a lot on this foundation.\n\n- On `mouseup` we can finalize the drop: change data, move elements around.\n- We can highlight the elements we're flying over.\n- We can limit dragging by a certain area or direction.\n- We can use event delegation for `mousedown/up`. A large-area event handler that checks  `event.target` can manage Drag'n'Drop for hundreds of elements.\n- And so on.\n\nThere are frameworks that build architecture over it: `DragZone`, `Droppable`, `Draggable` and other classes. Most of them do the similar stuff to described above, so it should be easy to understand them now. Or roll our own, because you already know how to handle the process, and it may be more flexible than to adapt something else.","libs":[],"children":["slider","drag-heroes"],"parent":"event-details"}},"slider":{"type":"Task","value":{"title":"Slider","slug":"slider","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/4-mouse-drag-and-drop/1-slider","weight":1,"libs":[],"importance":5,"content":"\nCreate a slider:\n\n[iframe src=\"solution\" height=60 border=1]\n\nDrag the blue thumb with the mouse and move it.\n\nImportant details:\n\n- When the mouse button is pressed, during the dragging the mouse may go over or below the slider. The slider will still work (convenient for the user).\n- If the mouse moves very fast to the left or to the right, the thumb should stop exactly at the edge.","solution":"We have a horizontal Drag'n'Drop here.\n\nTo position the element we use `position:relative` and slider-relative coordinates for the thumb. Here it's more convenient here than `position:absolute`.","parent":"mouse-drag-and-drop"}},"drag-heroes":{"type":"Task","value":{"title":"Drag superheroes around the field","slug":"drag-heroes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/4-mouse-drag-and-drop/2-drag-heroes","weight":2,"libs":[],"importance":5,"content":"\nThis task can help you to check understanding of several aspects of Drag'n'Drop and DOM.\n\nMake all elements with class `draggable` -- draggable. Like a ball in the chapter.\n\nRequirements:\n\n- Use event delegation to track drag start: a single event handler on `document` for `mousedown`.\n- If elements are dragged to top/bottom window edges -- the page scrolls up/down to allow further dragging.\n- There is no horizontal scroll.\n- Draggable elements should never leave the window, even after swift mouse moves.\n\nThe demo is too big to fit it here, so here's the link.\n\n[demo src=\"solution\"]","solution":"To drag the element we can use `position:fixed`, it makes coordinates easier to manage. At the end we should switch it back to `position:absolute`.\n\nThen, when coordinates are at window top/bottom, we use `window.scrollTo` to scroll it.\n\nMore details in the code, in comments.","parent":"mouse-drag-and-drop"}},"keyboard-events":{"type":"Article","value":{"title":"Keyboard: keydown and keyup","slug":"keyboard-events","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/5-keyboard-events/article.md","isFolder":false,"weight":5,"content":"\nBefore we get to keyboard, please note that on modern devices there are other ways to \"input something\". For instance, people use speech recognition (especially on mobile devices) or copy/paste with the mouse.\n\nSo if we want to track any input into an `<input>` field, then keyboard events are not enough. There's another event named `input` to handle changes of an `<input>` field, by any means. And it may be a better choice for such task. We'll cover it later in the chapter <info:events-change-input>.\n\nKeyboard events should be used when we want to handle keyboard actions (virtual keyboard also counts). For instance, to react on arrow keys `key:Up` and `key:Down` or hotkeys (including combinations of keys).\n\n\n## Teststand [#keyboard-test-stand]\n\n```offline\nTo better understand keyboard events, you can use the [teststand](sandbox:keyboard-dump).\n```\n\n```online\nTo better understand keyboard events, you can use the teststand below.\n\nTry different key combinations in the text field.\n\n[codetabs src=\"keyboard-dump\" height=480]\n```\n\n\n## Keydown and keyup\n\nThe `keydown` events happens when a key is pressed down, and then `keyup` -- when it's released.\n\n### event.code and event.key\n\nThe `key` property of the event object allows to get the character, while the `code` property of the event object allows to get the \"physical key code\".\n\nFor instance, the same key `key:Z` can be pressed with or without `Shift`. That gives us two different characters: lowercase `z` and uppercase `Z`.\n\nThe `event.key` is exactly the character, and it will be different. But `event.code` is the same:\n\n| Key          | `event.key` | `event.code` |\n|--------------|-------------|--------------|\n| `key:Z`      |`z` (lowercase)         |`KeyZ`        |\n| `key:Shift+Z`|`Z` (uppercase)          |`KeyZ`        |\n\n\nIf a user works with different languages, then switching to another language would make a totally different character instead of `\"Z\"`. That will become the value of `event.key`, while `event.code` is always the same: `\"KeyZ\"`.\n\n```smart header=\"\\\"KeyZ\\\" and other key codes\"\nEvery key has the code that depends on its location on the keyboard. Key codes described in the [UI Events code specification](https://www.w3.org/TR/uievents-code/).\n\nFor instance:\n- Letter keys have codes `\"Key<letter>\"`: `\"KeyA\"`, `\"KeyB\"` etc.\n- Digit keys have codes: `\"Digit<number>\"`: `\"Digit0\"`, `\"Digit1\"` etc.\n- Special keys are coded by their names: `\"Enter\"`, `\"Backspace\"`, `\"Tab\"` etc.\n\nThere are several widespread keyboard layouts, and the specification gives key codes for each of them.\n\nSee [alphanumeric section of the spec](https://www.w3.org/TR/uievents-code/#key-alphanumeric-section) for more codes, or just try the [teststand](#keyboard-test-stand) above.\n```\n\n```warn header=\"Case matters: `\\\"KeyZ\\\"`, not `\\\"keyZ\\\"`\"\nSeems obvious, but people still make mistakes.\n\nPlease evade mistypes: it's `KeyZ`, not `keyZ`. The check like `event.code==\"keyZ\"` won't work: the first letter of `\"Key\"` must be uppercase.\n```\n\n\nWhat if a key does not give any character? For instance, `key:Shift` or `key:F1` or others. For those keys `event.key` is approximately the same as `event.code`:\n\n\n| Key          | `event.key` | `event.code` |\n|--------------|-------------|--------------|\n| `key:F1`      |`F1`          |`F1`        |\n| `key:Backspace`      |`Backspace`          |`Backspace`        |\n| `key:Shift`|`Shift`          |`ShiftRight` or `ShiftLeft`        |\n\nPlease note that `event.code` specifies exactly which key is pressed. For instance, most keyboards have two `key:Shift` keys: on the left and on the right side. The `event.code` tells us exactly which one was pressed, and `event.key` is responsible for the \"meaning\" of the key: what it is (a \"Shift\").\n\nLet's say, we want to handle a hotkey: `key:Ctrl+Z` (or `key:Cmd+Z` for Mac). Most text editors hook the \"Undo\" action on it. We can set a listener on `keydown` and check which key is pressed -- to detect when we have the hotkey.\n\nPlease answer the question -- in such a listener, should we check the value of `event.key` or `event.code`?\n\nPlease, pause and answer.\n\nMade up your mind?\n\nIf you've got an understanding, then the answer is, of course, `event.code`, as we don't want `event.key` there. The value of `event.key` can change depending on the language or `CapsLock` enabled. The value of `event.code` is strictly bound to the key, so here we go:\n\n```js run\ndocument.addEventListener('keydown', function(event) {\n  if (event.code == 'KeyZ' && (event.ctrlKey || event.metaKey)) {\n    alert('Undo!')\n  }\n});\n```\n\n## Auto-repeat\n\nIf a key is being pressed for a long enough time, it starts to repeat: the `keydown` triggers again and again, and then when it's released we finally get `keyup`. So it's kind of normal to have many `keydown` and a single `keyup`.\n\nFor all repeating keys the event object has `event.repeat` property set to `true`.\n\n\n## Default actions\n\nDefault actions vary, as there are many possible things that may be initiated by the keyboard.\n\nFor instance:\n\n- A character appears on the screen (the most obvious outcome).\n- A character is deleted (`key:Delete` key).\n- The page is scrolled (`key:PageDown` key).\n- The browser opens the \"Save Page\" dialog (`key:Ctrl+S`)\n-  ...and so on.\n\nPreventing the default action on `keydown` can cancel most of them, with the exception of OS-based special keys. For instance, on Windows `key:Alt+F4` closes the current browser window. And there's no way to stop it by preventing the default action in JavaScript.\n\nFor instance, the `<input>` below expects a phone number, so it does not accept keys except digits, `+`, `()` or `-`:\n\n```html autorun height=60 run\n<script>\nfunction checkPhoneKey(key) {\n  return (key >= '0' && key <= '9') || key == '+' || key == '(' || key == ')' || key == '-';\n}\n</script>\n<input *!*onkeydown=\"return checkPhoneKey(event.key)\"*/!* placeholder=\"Phone, please\" type=\"tel\">\n```\n\nPlease note that special keys like `key:Backspace`, `key:Left`, `key:Right`, `key:Ctrl+V` do not work in the input. That's a side-effect effect of the strict filter `checkPhoneKey`.\n\nLet's relax it a little bit:\n\n\n```html autorun height=60 run\n<script>\nfunction checkPhoneKey(key) {\n  return (key >= '0' && key <= '9') || key == '+' || key == '(' || key == ')' || key == '-' ||\n    key == 'ArrowLeft' || key == 'ArrowRight' || key == 'Delete' || key == 'Backspace';\n}\n</script>\n<input onkeydown=\"return checkPhoneKey(event.key)\" placeholder=\"Phone, please\" type=\"tel\">\n```\n\nNow arrows and deletion works well.\n\n...But we still can enter anything by using a mouse and right-click + Paste. So the filter is not 100% reliable. We can just let it be like that, because most of time it works. Or an alternative approach would be to track the `input` event -- it triggers after any modification. There we can check the new value and highlight/modify it when it's invalid.\n\n## Legacy\n\nIn the past, there was a `keypress` event, and also `keyCode`, `charCode`, `which` properties of the event object.\n\nThere were so many browser incompatibilities that developers of the specification decided to deprecate all of them. The old code still works, as the browser keep supporting them, but there's totally no need to use those any more.\n\nThere was time when this chapter included their detailed description. But as of now we can forget about those.\n\n\n## Summary\n\nPressing a key always generates a keyboard event, be it symbol keys or special keys like `key:Shift` or `key:Ctrl` and so on. The only exception is `key:Fn` key that sometimes presents on a laptop keyboard. There's no keyboard event for it, because it's often implemented on lower level than OS.\n\nKeyboard events:\n\n- `keydown` -- on pressing the key (auto-repeats if the key is pressed for long),\n- `keyup` -- on releasing the key.\n\nMain keyboard event properties:\n\n- `code` -- the \"key code\" (`\"KeyA\"`, `\"ArrowLeft\"` and so on), specific to the physical location of the key on keyboard.\n- `key` -- the character (`\"A\"`, `\"a\"` and so on), for non-character keys usually has the same value  as `code`.\n\nIn the past, keyboard events were sometimes used to track user input in form fields. That's not reliable, because the input can come from various sources. We have `input` and `change` events to handle any input (covered later in the chapter <info:events-change-input>). They trigger after any input, including mouse or speech recognition.\n\nWe should use keyboard events when we really want keyboard. For example, to react on hotkeys or special keys.","libs":[],"children":["check-sync-keydown"],"parent":"event-details"}},"check-sync-keydown":{"type":"Task","value":{"title":"Extended hotkeys","slug":"check-sync-keydown","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/5-keyboard-events/2-check-sync-keydown","weight":2,"libs":[],"importance":5,"content":"\nCreate a function `runOnKeys(func, code1, code2, ... code_n)` that runs `func` on simultaneous pressing of keys with codes `code1`, `code2`, ..., `code_n`.\n\nFor instance, the code below shows `alert` when `\"Q\"` and `\"W\"` are pressed together (in any language, with or without CapsLock)\n\n```js no-beautify\nrunOnKeys(\n  () => alert(\"Hello!\"),\n  \"KeyQ\",\n  \"KeyW\"\n);\n```\n\n[demo src=\"solution\"]","solution":"We should use two handlers: `document.onkeydown` and `document.onkeyup`.\n\nThe set `pressed` should keep currently pressed keys.\n\nThe first handler adds to it, while the second one removes from it. Every time on `keydown` we check if we have enough keys pressed, and run the function if it is so.","parent":"keyboard-events"}},"onscroll":{"type":"Article","value":{"title":"Scrolling","slug":"onscroll","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/8-onscroll/article.md","isFolder":false,"weight":8,"content":"\nScroll events allow to react on a page or element scrolling. There are quite a few good things we can do here.\n\nFor instance:\n- Show/hide additional controls or information depending on where in the document the user is.\n- Load more data when the user scrolls down till the end of the page.\n\nHere's a small function to show the current scroll:\n\n```js autorun\nwindow.addEventListener('scroll', function() {\n  document.getElementById('showScroll').innerHTML = pageYOffset + 'px';\n});\n```\n\n```online\nIn action:\n\nCurrent scroll = <b id=\"showScroll\">scroll the window</b>\n```\n\nThe `scroll` event works both on the `window` and on scrollable elements.\n\n## Prevent scrolling\n\nHow do we make something unscrollable? We can't prevent scrolling by using `event.preventDefault()` in `onscroll` listener, because it triggers *after* the scroll has already happened.\n\nBut we can prevent scrolling by `event.preventDefault()` on an event that causes the scroll.\n\nFor instance:\n- `wheel` event -- a mouse wheel roll (a \"scrolling\" touchpad action generates it too).\n- `keydown` event for `key:pageUp` and `key:pageDown`.\n\nSometimes that may help. But there are more ways to scroll, so it's quite hard to handle all of them. So it's more reliable to use CSS to make something unscrollable, like `overflow` property.\n\nHere are few tasks that you can solve or look through to see the applications on `onscroll`.","libs":[],"children":["endless-page","updown-button","load-visible-img"],"parent":"event-details"}},"endless-page":{"type":"Task","value":{"title":"Endless page","slug":"endless-page","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/8-onscroll/1-endless-page","weight":1,"libs":[],"importance":5,"content":"\nCreate an endless page. When a visitor scrolls it to the end, it auto-appends current date-time to the text (so that a visitor can scroll more).\n\nLike this:\n\n[iframe src=\"solution\" height=200]\n\nPlease note two important features of the scroll:\n\n1. **The scroll is \"elastic\".** We can scroll a little beyond the document start or end in some browsers/devices (empty space below is shown, and then the document will automatically \"bounces back\" to normal).\n2. **The scroll is imprecise.** When we scroll to page end, then we may be in fact like 0-50px away from the real document bottom.\n\nSo, \"scrolling to the end\" should mean that the visitor is no more than 100px away from the document end.\n\nP.S. In real life we may want to show \"more messages\" or \"more goods\".","solution":"The core of the solution is a function that adds more dates to the page (or loads more stuff in real-life) while we're at the page end.\n\nWe can call it immediately and add as a `window.onscroll` handler.\n\nThe most important question is: \"How do we detect that the page is scrolled to bottom?\"\n\nLet's use window-relative coordinates.\n\nThe document is represented (and contained) within `<html>` tag, that is `document.documentElement`.\n\nWe can get window-relative coordinates of the whole document as `document.documentElement.getBoundingClientRect()`. And the `bottom` property will be window-relative coordinate of the document end.\n\nFor instance, if the height of the whole HTML document is 2000px, then:\n\n```js\n// When we're on the top of the page\n// window-relative top = 0\ndocument.documentElement.getBoundingClientRect().top = 0\n\n// window-relative bottom = 2000\n// the document is long, so that is probably far beyond the window bottom\ndocument.documentElement.getBoundingClientRect().bottom = 2000\n```\n\nIf we scroll `500px` below, then:\n\n```js\n// document top is above the window 500px\ndocument.documentElement.getBoundingClientRect().top = -500\n// document bottom is 500px closer\ndocument.documentElement.getBoundingClientRect().bottom = 1500\n```\n\nWhen we scroll till the end, assuming that the window height is `600px`:\n\n\n```js\n// document top is above the window 500px\ndocument.documentElement.getBoundingClientRect().top = -1400\n// document bottom is 500px closer\ndocument.documentElement.getBoundingClientRect().bottom = 600\n```\n\nPlease note that the bottom can't be 0, because it never reaches the window top. The lowest limit of the bottom coordinate is the window height, we can't scroll it any more up.\n\nAnd the window height is `document.documentElement.clientHeight`.\n\nWe want the document bottom be no more than `100px` away from it.\n\nSo here's the function:\n\n```js\nfunction populate() {\n  while(true) {\n    // document bottom\n    let windowRelativeBottom = document.documentElement.getBoundingClientRect().bottom;\n\n    // if it's greater than window height + 100px, then we're not at the page back\n    // (see examples above, big bottom means we need to scroll more)\n    if (windowRelativeBottom > document.documentElement.clientHeight + 100) break;\n\n    // otherwise let's add more data\n    document.body.insertAdjacentHTML(\"beforeend\", `<p>Date: ${new Date()}</p>`);\n  }\n}\n```","parent":"onscroll"}},"updown-button":{"type":"Task","value":{"title":"Up/down button","slug":"updown-button","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/8-onscroll/2-updown-button","weight":2,"libs":[],"importance":5,"content":"\nCreate a \"to the top\" button to help with page scrolling.\n\nIt should work like this:\n- While the page is not scrolled down at least for the window height -- it's invisible.\n- When the page is scrolled down more than the window height -- there appears an \"upwards\" arrow in the left-top corner. If the page is scrolled back, it disappears.\n- When the arrow is clicked, the page scrolls to the top.\n\nLike this:\n\n[iframe border=\"1\" height=\"200\" link src=\"solution\"]","solution":"","parent":"onscroll"}},"load-visible-img":{"type":"Task","value":{"title":"Load visible images","slug":"load-visible-img","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/3-event-details/8-onscroll/3-load-visible-img","weight":3,"libs":[],"importance":4,"content":"\nLet's say we have a slow-speed client and want to save his mobile traffic.\n\nFor that purpose we decide not to show images immediately, but rather replace them with placeholders, like this:\n\n```html\n<img *!*src=\"placeholder.svg\"*/!* width=\"128\" height=\"128\" *!*data-src=\"real.jpg\"*/!*>\n```\n\nSo, initially all images are `placeholder.svg`. When the page scrolls to the position where the user can see the image -- we change `src` to the one in `data-src`, and so the image loads.\n\nHere's an example in `iframe`:\n\n[iframe src=\"solution\"]\n\nScroll it to see images load \"on-demand\".\n\nRequirements:\n- When the page loads, those images that are on-screen should load immediately, prior to any scrolling.\n- Some images may be regular, without `data-src`. The code should not touch them.\n- Once an image is loaded, it should not reload any more when scrolled in/out.\n\nP.S. If you can, make a more advanced solution that would \"preload\" images that are one page below/after the current position.\n\nP.P.S. Only vertical scroll is to be handled, no horizontal scrolling.","solution":"The `onscroll` handler should check which images are visible and show them.\n\nWe also may want to run it when the page loads, to detect immediately visible images prior to any scrolling and load them.\n\nIf we put it at the `<body>` bottom, then it runs when the page content is loaded.\n\n```js\n// ...the page content is above...\n\nfunction isVisible(elem) {\n\n  let coords = elem.getBoundingClientRect();\n\n  let windowHeight = document.documentElement.clientHeight;\n\n  // top elem edge is visible OR bottom elem edge is visible\n  let topVisible = coords.top > 0 && coords.top < windowHeight;\n  let bottomVisible = coords.bottom < windowHeight && coords.bottom > 0;\n\n  return topVisible || bottomVisible;\n}\n\n*!*\nshowVisible();\nwindow.onscroll = showVisible;\n*/!*\n```\n\nFor visible images we can take `img.dataset.src` and assign it to `img.src` (if not did it yet).\n\nP.S. The solution also has a variant of `isVisible` that \"pre-loads\" images that are within 1 page  above/below (the page height is `document.documentElement.clientHeight`).","parent":"onscroll"}},"forms-controls":{"type":"Article","value":{"title":"Forms, controls","slug":"forms-controls","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls","isFolder":true,"weight":4,"content":"\nSpecial properties and events for forms `<form>` and controls: `<input>`, `<select>` and other.","libs":[],"children":["form-elements","focus-blur","events-change-input","forms-submit"],"parent":"ui"}},"form-elements":{"type":"Article","value":{"title":"Form properties and methods","slug":"form-elements","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/1-form-elements/article.md","isFolder":false,"weight":1,"content":"\nForms and control elements, such as `<input>` have a lot of special properties and events.\n\nWorking with forms can be much more convenient if we know them.\n\n## Navigation: form and elements\n\nDocument forms are members of the special collection `document.forms`.\n\nThat's a *named* collection: we can use both the name and the number to get the form.\n\n```js no-beautify\ndocument.forms.my - the form with name=\"my\"\ndocument.forms[0] - the first form in the document\n```\n\nWhen we have a form, then any element is available in the named collection `form.elements`.\n\nFor instance:\n\n```html run height=40\n<form name=\"my\">\n  <input name=\"one\" value=\"1\">\n  <input name=\"two\" value=\"2\">\n</form>\n\n<script>\n  // get the form\n  let form = document.forms.my; // <form name=\"my\"> element\n\n  // get the element\n  let elem = form.elements.one; // <input name=\"one\"> element\n\n  alert(elem.value); // 1\n</script>\n```\n\nThere may be multiple elements with the same name, that's often the case with radio buttons.\n\nIn that case `form.elements[name]` is a collection, for instance:\n\n```html run height=40\n<form>\n  <input type=\"radio\" *!*name=\"age\"*/!* value=\"10\">\n  <input type=\"radio\" *!*name=\"age\"*/!* value=\"20\">\n</form>\n\n<script>\nlet form = document.forms[0];\n\nlet ageElems = form.elements.age;\n\nalert(ageElems[0].value); // 10, the first input value\n</script>\n```\n\nThese navigation properties do not depend on the tag structure. All elements, no matter how deep they are in the form, are available in `form.elements`.\n\n\n````smart header=\"Fieldsets as \\\"subforms\\\"\"\nA form may have one or many `<fieldset>` elements inside it. They also support the `elements` property.\n\nFor instance:\n\n```html run height=80\n<body>\n  <form id=\"form\">\n    <fieldset name=\"userFields\">\n      <legend>info</legend>\n      <input name=\"login\" type=\"text\">\n    </fieldset>\n  </form>\n\n  <script>\n    alert(form.elements.login); // <input name=\"login\">\n\n*!*\n    let fieldset = form.elements.userFields;\n    alert(fieldset); // HTMLFieldSetElement\n\n    // we can get the input both from the form and from the fieldset\n    alert(fieldset.elements.login == form.elements.login); // true\n*/!*\n  </script>\n</body>\n```\n````\n\n````warn header=\"Shorter notation: `form.name`\"\nThere's a shorter notation: we can access the element as `form[index/name]`.\n\nInstead of `form.elements.login` we can write `form.login`.\n\nThat also works, but there's a minor issue: if we access an element, and then change its `name`, then it is still available under the old name (as well as under the new one).\n\nThat's easy to see in an example:\n\n```html run height=40\n<form id=\"form\">\n  <input name=\"login\">\n</form>\n\n<script>\n  alert(form.elements.login == form.login); // true, the same <input>\n\n  form.login.name = \"username\"; // change the name of the input\n\n  // form.elements updated the name:\n  alert(form.elements.login); // undefined\n  alert(form.elements.username); // input\n\n*!*\n  // the direct access now can use both names: the new one and the old one\n  alert(form.username == form.login); // true\n*/!*\n</script>\n```\n\nThat's usually not a problem, because we rarely change names of form elements.\n\n````\n\n## Backreference: element.form\n\nFor any element, the form is available as `element.form`. So a form references all elements, and elements\nreference the form.\n\nHere's the picture:\n\n![](form-navigation.png)\n\nFor instance:\n\n```html run height=40\n<form id=\"form\">\n  <input type=\"text\" name=\"login\">\n</form>\n\n<script>\n*!*\n  // form -> element\n  let login = form.login;\n\n  // element -> form\n  alert(login.form); // HTMLFormElement\n*/!*\n</script>\n```\n\n## Form elements\n\nLet's talk about form controls, pay attention to their specific features.\n\n### input and textarea\n\nNormally, we can access the value as `input.value` or `input.checked` for checkboxes.\n\nLike this:\n\n```js\ninput.value = \"New value\";\ntextarea.value = \"New text\";\n\ninput.checked = true; // for a checkbox or radio button\n```\n\n```warn header=\"Use `textarea.value`, not `textarea.innerHTML`\"\nPlease note that we should never use `textarea.innerHTML`: it stores only the HTML that was initially on the page, not the current value.\n```\n\n### select and option\n\nA `<select>` element has 3 important properties:\n\n1. `select.options` -- the collection of `<option>` elements,\n2. `select.value` -- the value of the chosen option,\n3. `select.selectedIndex` -- the number of the selected option.\n\nSo we have three ways to set the value of a `<select>`:\n\n1. Find the needed `<option>` and set `option.selected` to `true`.\n2. Set `select.value` to the value.\n3. Set `select.selectedIndex` to the number of the option.\n\nThe first way is the most obvious, but `(2)` and `(3)` are usually more convenient.\n\nHere is an example:\n\n```html run\n<select id=\"select\">\n  <option value=\"apple\">Apple</option>\n  <option value=\"pear\">Pear</option>\n  <option value=\"banana\">Banana</option>\n</select>\n\n<script>\n  // all three lines do the same thing\n  select.options[2].selected = true;\n  select.selectedIndex = 2;\n  select.value = 'banana';\n</script>\n```\n\nUnlike most other controls, `<select multiple>` allows multiple choice. In that case we need to walk over `select.options` to get all selected values.\n\nLike this:\n\n```html run\n<select id=\"select\" *!*multiple*/!*>\n  <option value=\"blues\" selected>Blues</option>\n  <option value=\"rock\" selected>Rock</option>\n  <option value=\"classic\">Classic</option>\n</select>\n\n<script>\n  // get all selected values from multi-select\n  let selected = Array.from(select.options)\n    .filter(option => option.selected)\n    .map(option => option.value);\n\n  alert(selected); // blues,rock  \n</script>\n```\n\nThe full specification of the `<select>` element is available at <https://html.spec.whatwg.org/multipage/forms.html#the-select-element>.\n\n### new Option\n\nIn the specification of [the option element](https://html.spec.whatwg.org/multipage/forms.html#the-option-element) there's a nice short syntax to create `<option>` elements:\n\n```js\noption = new Option(text, value, defaultSelected, selected);\n```\n\nParameters:\n\n- `text` -- the text inside the option,\n- `value` -- the option value,\n- `defaultSelected` -- if `true`, then `selected` attribute is created,\n- `selected` -- if `true`, then the option is selected.\n\nFor instance:\n\n```js\nlet option = new Option(\"Text\", \"value\");\n// creates <option value=\"value\">Text</option>\n```\n\nThe same element selected:\n\n```js\nlet option = new Option(\"Text\", \"value\", true, true);\n```\n\n```smart header=\"Additional properties of `<option>`\"\nOption elements have additional properties:\n\n`selected`\n: Is the option selected.\n\n`index`\n: The number of the option among the others in its `<select>`.\n\n`text`\n: Text content of the option (seen by what the visitor).\n```\n\n## Summary\n\nForm navigation:\n\n`document.forms`\n: A form is available as `document.forms[name/index]`.\n\n`form.elements`  \n: Form elements are available as `form.elements[name/index]`, or can use just `form[name/index]`. The `elements` property also works for `<fieldset>`.\n\n`element.form`\n: Elements reference their form in the `form` property.\n\nValue is available as `input.value`, `textarea.value`, `select.value` etc, or `input.checked` for checkboxes and radio buttons.\n\nFor `<select>` we can also get the value by the index `select.selectedIndex` or through the options collection `select.options`. The full specification of this and other elements is at <https://html.spec.whatwg.org/multipage/forms.html>.\n\nThese are the basics to start working with forms. In the next chapter we'll cover `focus` and `blur` events that may occur on any element, but are mostly handled on forms.","libs":[],"children":["add-select-option"],"parent":"forms-controls"}},"add-select-option":{"type":"Task","value":{"title":"Add an option to select","slug":"add-select-option","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/1-form-elements/1-add-select-option","weight":1,"libs":[],"importance":5,"content":"\nThere's a `<select>`:\n\n```html\n<select id=\"genres\">\n  <option value=\"rock\">Rock</option>\n  <option value=\"blues\" selected>Blues</option>\n</select>\n```\n\nUse JavaScript to:\n\n1. Show the value and the text of the selected option.\n2. Add an option: `<option value=\"classic\">Classic</option>`.\n3. Make it selected.","solution":"The solution, step by step:\n\n```html run\n<select id=\"genres\">\n  <option value=\"rock\">Rock</option>\n  <option value=\"blues\" selected>Blues</option>\n</select>\n\n<script>\n  // 1)\n  let selectedOption = genres.options[select.selectedIndex];\n  alert( selectedOption.value );\n\n  // 2)\n  let newOption = new Option(\"classic\", \"Classic\");\n  select.append(newOption);\n\n  // 3)\n  newOption.selected = true;\n</script>\n```","parent":"form-elements"}},"focus-blur":{"type":"Article","value":{"title":"Focusing: focus/blur","slug":"focus-blur","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/2-focus-blur/article.md","isFolder":false,"weight":2,"content":"\nAn element receives a focus when the user either clicks on it or uses the `key:Tab` key on the keyboard. There's also an `autofocus` HTML attribute that puts the focus into an element by default when a page loads and other means of getting a focus.\n\nFocusing generally means: \"prepare to accept the data here\", so that's the moment when we can run the code to initialize or load something.\n\nThe moment of losing the focus (\"blur\") can be even more important. That's when a user clicks somewhere else or presses `key:Tab` to go to the next form field, or there are other means as well.\n\nLosing the focus generally means: \"the data has been entered\", so we can run the code to check it or even to save it to the server and so on.\n\nThere are important peculiarities when working with focus events. We'll do the best to cover them here.\n\n## Events focus/blur\n\nThe `focus` event is called on focusing, and `blur` -- when the element loses the focus.\n\nLet's use them for validation of an input field.\n\nIn the example below:\n\n- The `blur` handler checks if the field the email is entered, and if not -- shows an error.\n- The `focus` handler hides the error message (on `blur` it will be checked again):\n\n```html run autorun height=60\n<style>\n  .invalid { border-color: red; }\n  #error { color: red }\n</style>\n\nYour email please: <input type=\"email\" id=\"input\">\n\n<div id=\"error\"></div>\n\n<script>\n*!*input.onblur*/!* = function() {\n  if (!input.value.includes('@')) { // not email\n    input.classList.add('invalid');\n    error.innerHTML = 'Please enter a correct email.'\n  }\n};\n\n*!*input.onfocus*/!* = function() {\n  if (this.classList.contains('invalid')) {\n    // remove the \"error\" indication, because the user wants to re-enter something\n    this.classList.remove('invalid');\n    error.innerHTML = \"\";\n  }\n};\n</script>\n```\n\nModern HTML allows to do many validations using input attributes: `required`, `pattern` and so on. And sometimes they are just what we need. JavaScript can be used when we want more flexibility. Also we could automatically send the changed value on the server if it's correct.\n\n\n## Methods focus/blur\n\nMethods `elem.focus()` and `elem.blur()` set/unset the focus on the element.\n\nFor instance, let's make the visitor unable to leave the input if the value is invalid:\n\n```html run autorun height=80\n<style>\n  .error {\n    background: red;\n  }\n</style>\n\nYour email please: <input type=\"email\" id=\"input\">\n<input type=\"text\" style=\"width:220px\" placeholder=\"make email invalid and try to focus here\">\n\n<script>\n  input.onblur = function() {\n    if (!this.value.includes('@')) { // not email\n      // show the error\n      this.classList.add(\"error\");\n*!*\n      // ...and put the focus back\n      input.focus();\n*/!*\n    } else {\n      this.classList.remove(\"error\");\n    }\n  };\n</script>\n```\n\nIt works in all browsers except Firefox ([bug](https://bugzilla.mozilla.org/show_bug.cgi?id=53579)).\n\nIf we enter something into the input and then try to use `key:Tab` or click away from the `<input>`, then `onblur` returns the focus back.\n\nPlease note that we can't \"prevent losing focus\" by calling `event.preventDefault()` in `onblur`, because `onblur` works *after* the element lost the focus.\n\n```warn header=\"JavaScript-initiated focus loss\"\nA focus loss can occur for many reasons.\n\nOne of them is when the visitor clicks somewhere else. But also JavaScript itself may cause it, for instance:\n\n- An `alert` moves focus to itself, so it causes the focus loss at the element (`blur` event), and when the `alert` is dismissed, the focus comes back (`focus` event).\n- If an element is removed from DOM, then it also causes the focus loss. If it is reinserted later, then the focus doesn't return.\n\nThese features sometimes cause `focus/blur` handlers to misbehave -- to trigger when they are not needed.\n\nThe best recipe is to be careful when using these events. If we want to track user-initiated focus-loss, then we should evade causing it by ourselves.\n```\n## Allow focusing on any element: tabindex\n\nBy default many elements do not support focusing.\n\nThe list varies between browsers, but one thing is always correct: `focus/blur` support is guaranteed for elements that a visitor can interact with: `<button>`, `<input>`, `<select>`, `<a>` and so on.\n\nFrom the other hand, elements that exist to format something like `<div>`, `<span>`, `<table>` -- are unfocusable by default. The method `elem.focus()` doesn't work on them, and `focus/blur` events are never triggered.\n\nThis can be changed using HTML-attribute `tabindex`.\n\nThe purpose of this attribute is to specify the order number of the element when `key:Tab` is used to switch between them.\n\nThat is: if we have two elements, the first has `tabindex=\"1\"`, and the second has `tabindex=\"2\"`, then pressing `key:Tab` while in the first element -- moves us to the second one.\n\nThere are two special values:\n\n- `tabindex=\"0\"` makes the element the last one.\n- `tabindex=\"-1\"` means that `key:Tab` should ignore that element.\n\n**Any element supports focusing if it has `tabindex`.**\n\nFor instance, here's a list. Click the first item and press `key:Tab`:\n\n```html autorun no-beautify\nClick the first item and press Tab. Keep track of the order. Please note that many subsequent Tabs can move the focus out of the iframe with the example.\n<ul>\n  <li tabindex=\"1\">One</li>\n  <li tabindex=\"0\">Zero</li>\n  <li tabindex=\"2\">Two</li>\n  <li tabindex=\"-1\">Minus one</li>\n</ul>\n\n<style>\n  li { cursor: pointer; }\n  :focus { outline: 1px dashed green; }\n</style>\n```\n\nThe order is like this: `1 - 2 - 0` (zero is always the last). Normally, `<li>` does not support focusing, but `tabindex` full enables it, along with events and styling with `:focus`.\n\n```smart header=\"`elem.tabIndex` works too\"\nWe can add `tabindex` from JavaScript by using the `elem.tabIndex` property. That has the same effect.\n```\n\n## Delegation: focusin/focusout\n\nEvents `focus` and `blur` do not bubble.\n\nFor instance, we can't put `onfocus` on the `<form>` to highlight it, like this:\n\n```html autorun height=80\n<!-- on focusing in the form -- add the class -->\n<form *!*onfocus=\"this.className='focused'\"*/!*>\n  <input type=\"text\" name=\"name\" value=\"Name\">\n  <input type=\"text\" name=\"surname\" value=\"Surname\">\n</form>\n\n<style> .focused { outline: 1px solid red; } </style>\n```\n\nThe example above doesn't work, because when user focuses on an `<input>`, the `focus` event triggers on that input only. It doesn't bubble up. So `form.onfocus` never triggers.\n\nThere are two solutions.\n\nFirst, there's a funny historical feature: `focus/blur` do not bubble up, but propagate down on the capturing phase.\n\nThis will work:\n\n```html autorun height=80\n<form id=\"form\">\n  <input type=\"text\" name=\"name\" value=\"Name\">\n  <input type=\"text\" name=\"surname\" value=\"Surname\">\n</form>\n\n<style> .focused { outline: 1px solid red; } </style>\n\n<script>\n*!*\n  // put the handler on capturing phase (last argument true)\n  form.addEventListener(\"focus\", () => form.classList.add('focused'), true);\n  form.addEventListener(\"blur\", () => form.classList.remove('focused'), true);\n*/!*\n</script>\n```\n\nSecond, there are `focusin` and `focusout` events -- exactly the same as `focus/blur`, but they bubble.\n\nNote that they must be assigned using `elem.addEventListener`, not `on<event>`.\n\nSo here's another working variant:\n\n```html autorun height=80\n<form id=\"form\">\n  <input type=\"text\" name=\"name\" value=\"Name\">\n  <input type=\"text\" name=\"surname\" value=\"Surname\">\n</form>\n\n<style> .focused { outline: 1px solid red; } </style>\n\n<script>\n*!*\n  // put the handler on capturing phase (last argument true)\n  form.addEventListener(\"focusin\", () => form.classList.add('focused'));\n  form.addEventListener(\"focusout\", () => form.classList.remove('focused'));\n*/!*\n</script>\n```\n\n## Summary\n\nEvents `focus` and `blur` trigger on focusing/losing focus on the element.\n\nTheir specials are:\n- They do not bubble. Can use capturing state instead or `focusin/focusout`.\n- Most elements do not support focus by default. Use `tabindex` to make anything focusable.\n\nThe current focused element is available as `document.activeElement`.","libs":[],"children":["editable-div","edit-td-click","keyboard-mouse"],"parent":"forms-controls"}},"editable-div":{"type":"Task","value":{"title":"Editable div","slug":"editable-div","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/2-focus-blur/3-editable-div","weight":3,"libs":[],"importance":5,"content":"\nCreate a `<div>` that turns into `<textarea>` when clicked.\n\nThe textarea allows to edit the HTML in the `<div>`.\n\nWhen the user presses `key:Enter` or it looses focus, the `<textarea>` turns back into `<div>`, and its content becomes HTML in `<div>`.\n\n[demo src=\"solution\"]","solution":"","parent":"focus-blur"}},"edit-td-click":{"type":"Task","value":{"title":"Edit TD on click","slug":"edit-td-click","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/2-focus-blur/4-edit-td-click","weight":4,"libs":[],"importance":5,"content":"\nMake table cells editable on click.\n\n- On click -- the cell should became \"editable\" (textarea appears inside), we can change HTML. There should be no resize, all geometry should remain the same.\n- Buttons OK and CANCEL appear below the cell to finish/cancel the editing.\n- Only one cell may be editable at a moment. While a `<td>` is in \"edit mode\", clicks on other cells are ignored.\n- The table may have many cells. Use event delegation.\n\nThe demo:\n\n[iframe src=\"solution\" height=400]","solution":"1. On click -- replace `innerHTML` of the cell by `<textarea>` with same sizes and no border. Can use JavaScript or CSS to set the right size.\n2. Set `textarea.value` to `td.innerHTML`.\n3. Focus on the textarea.\n4. Show buttons OK/CANCEL under the cell, handle clicks on them.","parent":"focus-blur"}},"keyboard-mouse":{"type":"Task","value":{"title":"Keyboard-driven mouse","slug":"keyboard-mouse","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/2-focus-blur/5-keyboard-mouse","weight":5,"libs":[],"importance":4,"content":"\nFocus on the mouse. Then use arrow keys to move it:\n\n[demo src=\"solution\"]\n\nP.S. Don't put event handlers anywhere except the `#mouse` element.\nP.P.S. Don't modify HTML/CSS, the approach should be generic and work with any element.","solution":"We can use `mouse.onclick` to handle the click and make the mouse \"moveable\" with `position:fixed`, then then `mouse.onkeydown` to handle arrow keys.\n\nThe only pitfall is that `keydown` only triggers on elements with focus. So we need to add `tabindex` to the element.  As we're forbidden to change HTML, we can use `mouse.tabIndex` property for that.\n\nP.S. We also can replace `mouse.onclick` with `mouse.onfocus`.","parent":"focus-blur"}},"events-change-input":{"type":"Article","value":{"title":"Events: change, input, cut, copy, paste","slug":"events-change-input","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/3-events-change-input/article.md","isFolder":false,"weight":3,"content":"\nLet's discuss various events that accompany data updates.\n\n## Event: change\n\nThe [change](http://www.w3.org/TR/html5/forms.html#event-input-change) event triggers when the element has finished changing.\n\nFor text inputs that means that the event occurs when it looses focus.\n\nFor instance, while we are typing in the text field below -- there's no event. But when we move the focus somewhere else, for instance, click on a button -- there will be a `change` event:\n\n```html autorun height=40 run\n<input type=\"text\" onchange=\"alert(this.value)\">\n<input type=\"button\" value=\"Button\">\n```\n\nFor other elements: `select`, `input type=checkbox/radio` it triggers right after the selection changes.\n\n## Event: input\n\nThe `input` event triggers every time a value is modified.\n\nFor instance:\n\n```html autorun height=40 run\n<input type=\"text\" id=\"input\"> oninput: <span id=\"result\"></span>\n<script>\n  input.oninput = function() {\n    result.innerHTML = input.value;\n  };\n</script>\n```\n\nIf we want to handle every modification of an `<input>` then this event is the best choice.\n\nUnlike keyboard events it works on any value change, even those that does not involve keyboard actions: pasting with a mouse or using speech recognition to dictate the text.\n\n```smart header=\"Can't prevent anything in `oninput`\"\nThe `input` event occurs after the value is modified.\n\nSo we can't use `event.preventDefault()` there -- it's just too late, there would be no effect.\n```\n\n## Events: cut, copy, paste\n\nThese events occur on cutting/copying/pasting a value.\n\nThey belong to [ClipboardEvent](https://www.w3.org/TR/clipboard-apis/#clipboard-event-interfaces) class and provide access to the data that is copied/pasted.\n\nWe also can use `event.preventDefault()` to abort the action.\n\nFor instance, the code below prevents all such events and shows what we are trying to cut/copy/paste:\n\n```html autorun height=40 run\n<input type=\"text\" id=\"input\">\n<script>\n  input.oncut = input.oncopy = input.onpaste = function(event) {\n    alert(event.type + ' - ' + event.clipboardData.getData('text/plain'));\n    return false;\n  };\n</script>\n```\n\nTechnically, we can copy/paste everything. For instance, we can copy and file in the OS file manager, and paste it.\n\nThere's a list of methods [in the specification](https://www.w3.org/TR/clipboard-apis/#dfn-datatransfer) to work with different data types, read/write to the clipboard.\n\nBut please note that clipboard is a \"global\" OS-level thing. Most browsers allow read/write access to the clipboard only in the scope of certain user actions for the safety. Also it is forbidden to create \"custom\" clipboard events in all browsers except Firefox.\n\n## Summary\n\nData change events:\n\n| Event | Description | Specials |\n|---------|----------|-------------|\n| `change`| A value was changed. | For text inputs triggers on focus loss. |\n| `input` | For text inputs on every change. | Triggers immediately unlike `change`. |\n| `cut/copy/paste` | Cut/copy/paste actions. | The action can be prevented. The `event.clipboardData` property gives read/write access to the clipboard. |","libs":[],"children":["deposit-calculator"],"parent":"forms-controls"}},"deposit-calculator":{"type":"Task","value":{"title":"Deposit calculator","slug":"deposit-calculator","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/3-events-change-input/1-deposit-calculator","weight":1,"libs":[],"importance":5,"content":"\nCreate an interface that allows to enter a sum of bank deposit and percentage, then calculates how much it will be after given periods of time.\n\nHere's the demo:\n\n[iframe src=\"solution\" height=\"350\" border=\"1\"]\n\nAny input change should be processed immediately.\n\nThe formula is:\n```js\n// initial: the initial money sum\n// interest: e.g. 0.05 means 5% per year\n// years: how many years to wait\nlet result = Math.round(initial * (1 + interest * years));\n```","solution":"","parent":"events-change-input"}},"forms-submit":{"type":"Article","value":{"title":"Form submission: event and method submit","slug":"forms-submit","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/4-forms-submit/article.md","isFolder":false,"weight":4,"content":"\nThe `submit` event triggers when the form is submitted, it is usually used to validate the form before sending it to the server or to abort the submission and process it in JavaScript.\n\nThe method `form.submit()` allows to initiate form sending from JavaScript. We can use it to dynamically create and send our own forms to server.\n\nLet's see more details of them.\n\n## Event: submit\n\nThere are two main ways to submit a form:\n\n1. The first -- to click `<input type=\"submit\">` or `<input type=\"image\">`.\n2. The second -- press `key:Enter` on an input field.\n\nBoth actions lead to `submit` event on the form. The handler can check the data, and if there are errors, show them and call `event.preventDefault()`, then the form won't be sent to the server.\n\nIn the form below:\n1. Go into the text field and press `key:Enter`.\n2. Click `<input type=\"submit\">`.\n\nBoth actions show `alert` and the form is not sent anywhere due to `return false`:\n\n```html autorun height=60 no-beautify\n<form onsubmit=\"alert('submit!');return false\">\n  First: Enter in the input field <input type=\"text\" value=\"text\"><br>\n  Second: Click \"submit\": <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n````smart header=\"Relation between `submit` and `click`\"\nWhen a form is sent using `key:Enter` on an input field, a `click` event triggers on the `<input type=\"submit\">`.\n\nThat's rather funny, because there was no click at all.\n\nHere's the demo:\n```html autorun height=60\n<form onsubmit=\"return false\">\n <input type=\"text\" size=\"30\" value=\"Focus here and press enter\">\n <input type=\"submit\" value=\"Submit\" *!*onclick=\"alert('click')\"*/!*>\n</form>\n```\n\n````\n\n## Method: submit\n\nTo submit a form to the server manually, we can call `form.submit()`.\n\nThen the `submit` event is not generated. It is assumed that if the programmer calls `form.submit()`, then the script already did all related processing.\n\nSometimes that's used to manually create and send a form, like this:\n\n```js run\nlet form = document.createElement('form');\nform.action = 'https://google.com/search';\nform.method = 'GET';\n\nform.innerHTML = '<input name=\"q\" value=\"test\">';\n\n// the form must be in the document to submit it\ndocument.body.append(form);\n\nform.submit();\n```","libs":[],"children":["modal-dialog"],"parent":"forms-controls"}},"modal-dialog":{"type":"Task","value":{"title":"Modal form","slug":"modal-dialog","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/2-ui/4-forms-controls/4-forms-submit/1-modal-dialog","weight":1,"libs":[],"importance":5,"content":"\nCreate a function `showPrompt(html, callback)` that shows a form with the message `html`, an input field and buttons `OK/CANCEL`.\n\n- A user should type something into a text field and press `key:Enter` or the OK button, then `callback(value)` is called with the value he entered.\n- Otherwise if the user presses `key:Esc` or CANCEL, then `callback(null)` is called.\n\nIn both cases that ends the input process and removes the form.\n\nRequirements:\n\n- The form should be in the center of the window.\n- The form is *modal*. In other words, no interaction with the rest of the page is possible until the user closes it.\n- When the form is shown, the focus should be inside the `<input>` for the user.\n- Keys `key:Tab`/`key:Shift+Tab` should shift the focus between form fields, don't allow it to leave for other page elements.\n\nUsage example:\n\n```js\nshowPrompt(\"Enter something<br>...smart :)\", function(value) {\n  alert(value);\n});\n```\n\nA demo in the iframe:\n\n[iframe src=\"solution\" height=160 border=1]\n\nP.S. The source document has HTML/CSS for the form with fixed positioning, but it's up to you to make it modal.","solution":"A modal window can be implemented using a half-transparent `<div id=\"cover-div\">` that covers the whole window, like this:\n\n```css\n#cover-div {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 9000;\n  width: 100%;\n  height: 100%;\n  background-color: gray;\n  opacity: 0.3;\n}\n```\n\nBecause the `<div>` covers everything, it gets all clicks, not the page below it.\n\nAlso we can prevent page scroll by setting `body.style.overflowY='hidden'`.\n\nThe form should be not in the `<div>`, but next to it, because we don't want it to have `opacity`.","parent":"forms-submit"}},"animation":{"type":"Article","value":{"title":"Animation","slug":"animation","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation","isFolder":true,"weight":3,"content":"\nCSS and JavaScript animations.","libs":[],"children":["bezier-curve","css-animations","js-animation"]}},"bezier-curve":{"type":"Article","value":{"title":"Bezier curve","slug":"bezier-curve","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/1-bezier-curve/article.md","isFolder":false,"weight":1,"content":"\nBezier curves are used in computer graphics to draw shapes, for CSS animation and in many other places.\n\nThey are actually a very simple thing, worth to study once and then feel comfortable in the world of vector graphics and advanced animations.\n\n## Control points\n\nA [bezier curve](https://en.wikipedia.org/wiki/B%C3%A9zier_curve) is defined by control points.\n\nThere may be 2, 3, 4 or more.\n\nFor instance, two points curve:\n\n![](bezier2.png)\n\nThree points curve:\n\n![](bezier3.png)\n\nFour points curve:\n\n![](bezier4.png)\n\nIf you look closely at these curves, you can immediately notice:\n\n1. **Points are not always on curve.** That's perfectly normal, later we'll see how the curve is built.\n2. **The curve order equals the number of points minus one**.\nFor two points we have a linear curve (that's a straight line), for three points -- quadratic curve (parabolic), for four points -- cubic curve.\n3. **A curve is always inside the [convex hull](https://en.wikipedia.org/wiki/Convex_hull) of control points:**\n\n    ![](bezier4-e.png) ![](bezier3-e.png)\n\nBecause of that last property, in computer graphics it's possible to optimize intersection tests. If convex hulls do not intersect, then curves do not either. So checking for the convex hulls intersection first can give a very fast \"no intersection\" result. Checking the intersection or convex hulls is much easier, because they are rectangles, triangles and so on (see the picture above), much simpler figures than the curve.\n\nThe main value of Bezier curves for drawing -- by moving the points the curve is changing *in intuitively obvious way*.\n\nTry to move control points using a mouse in the example below:\n\n[iframe src=\"demo.svg?nocpath=1&p=0,0,0.5,0,0.5,1,1,1\" height=370]\n\n**As you can notice, the curve stretches along the tangential lines 1 -> 2 and 3 -> 4.**\n\nAfter some practice it becomes obvious how to place points to get the needed curve. And by connecting several curves we can get practically anything.\n\nHere are some examples:\n\n![](bezier-car.png) ![](bezier-letter.png) ![](bezier-vase.png)\n\n## De Casteljau's algorithm\n\nThere's a mathematical formula for Bezier curves, but let's cover it a bit later, because\n[De Casteljau's algorithm](https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm) it is identical to the mathematical definition and visually shows how it is constructed.\n\nFirst let's see the 3-points example.\n\nHere's the demo, and the explanation follow.\n\nPoints can be moved by the mouse. Press the \"play\" button to run it.\n\n[iframe src=\"demo.svg?p=0,0,0.5,1,1,0&animate=1\" height=370]\n\n**De Casteljau's algorithm of building the 3-point bezier curve:**\n\n1. Draw control points. In the demo above they are labeled: `1`, `2`, `3`.\n2. Build segments between control points 1 -> 2 -> 3. In the demo above they are <span style=\"color:#825E28\">brown</span>.\n3. The parameter `t` moves from `0` to `1`. In the example above the step `0.05` is used: the loop goes over `0, 0.05, 0.1, 0.15, ... 0.95, 1`.\n\n    For each of these values of `t`:\n\n    - On each <span style=\"color:#825E28\">brown</span> segment we take a point located on the distance proportional to `t` from its beginning. As there are two segments, we have two points.\n\n        For instance, for `t=0` -- both points will be at the beginning of segments, and for `t=0.25` -- on the 25% of segment length from the beginning, for `t=0.5` -- 50%(the middle), for `t=1` -- in the end of segments.\n\n    - Connect the points. On the picture below the connecting segment is painted <span style=\"color:#167490\">blue</span>.\n\n\n| For `t=0.25`             | For `t=0.5`            |\n| ------------------------ | ---------------------- |\n| ![](bezier3-draw1.png)   | ![](bezier3-draw2.png) |\n\n4. Now in the <span style=\"color:#167490\">blue</span> segment take a point on the distance proportional to the same value of `t`. That is, for `t=0.25` (the left picture) we have a point at the end of the left quarter of the segment, and for `t=0.5` (the right picture) -- in the middle of the segment. On pictures above that point is <span style=\"color:red\">red</span>.\n\n5. As `t` runs from `0` to `1`, every value of `t` adds a point to the curve. The set of such points forms the Bezier curve. It's red and parabolic on the pictures above.\n\nThat was a process for 3 points. But the same is for 4 points.\n\nThe demo for 4 points (points can be moved by a mouse):\n\n[iframe src=\"demo.svg?p=0,0,0.5,0,0.5,1,1,1&animate=1\" height=370]\n\nThe algorithm for 4 points:\n\n- Connect control points by segments: 1 -> 2, 2 -> 3, 3 -> 4. There will be 3 <span style=\"color:#825E28\">brown</span> segments.\n- For each `t` in the interval from `0` to `1`:\n    - We take points on these segments on the distance proportional to `t` from the beginning. These points are connected, so that we have two <span style=\"color:#0A0\">green segments</span>.\n    - On these segments we take points proportional to `t`. We get one <span style=\"color:#167490\">blue segment</span>.\n    - On the blue segment we take a point proportional to `t`. On the example above it's <span style=\"color:red\">red</span>.\n- These points together form the curve.\n\nThe algorithm is recursive and can be generalized for any number of control points.\n\nGiven N of control points:\n\n1. We connect them to get initially N-1 segments.\n2. Then for each `t` from `0` to `1`, we take a point on each segment on the distance proportional to `t` and connect them. There will be N-2 segments.\n3. Repeat step 2 until there is only one point.\n\nThese points make the curve.\n\n```online\n**Run and pause examples to clearly see the segments and how the curve is built.**\n```\n\n\nA curve that looks like `y=1/t`:\n\n[iframe src=\"demo.svg?p=0,0,0,0.75,0.25,1,1,1&animate=1\" height=370]\n\n\nWith zig-zag control points:\n\n[iframe src=\"demo.svg?p=0,0,1,0.5,0,0.5,1,1&animate=1\" height=370]\n\nLoop form:\n\n[iframe src=\"demo.svg?p=0,0,1,0.5,0,1,0.5,0&animate=1\" height=370]\n\nA non-smooth Bezier curve (yeah, that's possible too):\n\n[iframe src=\"demo.svg?p=0,0,1,1,0,1,1,0&animate=1\" height=370]\n\nAs the algorithm is recursive, we can build Bezier curves of any order: using 5, 6 or more control points. But in practice many points are less useful. Usually we take 2-3 points, and for complex lines glue several curves together. That's simpler to develop and calculate.\n\n```smart header=\"How to draw a curve *through* given points?\"\nWe use control points for a Bezier curve. As we can see, they are not on the curve. Or, to be precise, the first and the last ones do belong to curve, but others don't.\n\nSometimes we have another task: to draw a curve *through several points*, so that all of them are on a single smooth curve. That task is called  [interpolation](https://en.wikipedia.org/wiki/Interpolation), and here we don't cover it.\n\nThere are mathematical formulas for such curves, for instance [Lagrange polynomial](https://en.wikipedia.org/wiki/Lagrange_polynomial).\n\nIn computer graphics [spline interpolation](https://en.wikipedia.org/wiki/Spline_interpolation) is often used to build smooth curves that connect many points.\n```\n\n\n## Maths\n\nA Bezier curve can be described using a mathematical formula.\n\nAs we saw -- there's actually no need to know it. But for completeness -- here it is.\n\nGiven the coordinates of control points <code>P<sub>i</sub></code>: the first control point has coordinates <code>P<sub>1</sub> = (x<sub>1</sub>, y<sub>1</sub>)</code>, the second: <code>P<sub>2</sub> = (x<sub>2</sub>, y<sub>2</sub>)</code>, and so on, the curve coordinates are described by the equation that depends on the parameter `t` from the segment `[0,1]`.\n\n- The formula for a 2-points curve:\n\n    <code>P = (1-t)P<sub>1</sub> + tP<sub>2</sub></code>\n- For three points:\n\n    <code>P = (1−t)<sup>2</sup>P<sub>1</sub> + 2(1−t)tP<sub>2</sub> + t<sup>2</sup>P<sub>3</sub></code>\n- For four points:\n\n    <code>P = (1−t)<sup>3</sup>P<sub>1</sub> + 3(1−t)<sup>2</sup>tP<sub>2</sub>  +3(1−t)t<sup>2</sup>P<sub>3</sub> + t<sup>3</sup>P<sub>4</sub></code>\n\n\nThese are vector equations. In other words, we can put `x` and `y` instead of `P` to get corresponding coordinates.\n\nFor instance, the 3-point curve is formed by points `(x,y)` calculated as:\n\n- <code>x = (1−t)<sup>2</sup>x<sub>1</sub> + 2(1−t)tx<sub>2</sub> + t<sup>2</sup>x<sub>3</sub></code>\n- <code>y = (1−t)<sup>2</sup>y<sub>1</sub> + 2(1−t)ty<sub>2</sub> + t<sup>2</sup>y<sub>3</sub></code>\n\nInstead of <code>x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>, x<sub>3</sub>, y<sub>3</sub></code> we should put coordinates of 3 control points, and then as `t` moves from `0` to `1`, for each value of `t` we'll have `(x,y)` of the curve.\n\nFor instance, if control points are  `(0,0)`, `(0.5, 1)` and `(1, 0)`, the equations become:\n\n- <code>x = (1−t)<sup>2</sup> * 0 + 2(1−t)t * 0.5 + t<sup>2</sup> * 1 = (1-t)t + t<sup>2</sup> = t</code>\n- <code>y = (1−t)<sup>2</sup> * 0 + 2(1−t)t * 1 + t<sup>2</sup> * 0 = 2(1-t)t = –t<sup>2</sup> + 2t</code>\n\nNow as `t` runs from `0` to `1`, the set of values `(x,y)` for each `t` forms the curve for such control points.\n\n## Summary\n\nBezier curves are defined by their control points.\n\nWe saw two definitions of Bezier curves:\n\n1. Using a mathematical formulas.\n2. Using a drawing process: De Casteljau's algorithm\n\nGood properties of Bezier curves:\n\n- We can draw smooth lines with a mouse by moving around control points.\n- Complex shapes can be made of several Bezier curves.\n\nUsage:\n\n- In computer graphics, modeling, vector graphic editors. Fonts are described by Bezier curves.\n- In web development -- for graphics on Canvas and in the SVG format. By the way, \"live\" examples above are written in SVG. They are actually a single SVG document that is given different points as parameters. You can open it in a separate window and see the source: [demo.svg](demo.svg?p=0,0,1,0.5,0,0.5,1,1&animate=1).\n- In CSS animation to describe the path and speed of animation.","libs":[],"children":[],"parent":"animation"}},"css-animations":{"type":"Article","value":{"title":"CSS-animations","slug":"css-animations","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/2-css-animations/article.md","isFolder":false,"weight":2,"content":"\nCSS animations allow to do simple animations without JavaScript at all.\n\nJavaScript can be used to control CSS animation and make them even better with a little of code.\n\n## CSS transitions [#css-transition]\n\nThe idea of CSS transitions is simple. We describe a property and how its changes should be animated. When the property changes, the browser paints the animation.\n\nThat is: all we need is to change the property. And the fluent transition is made by the browser.\n\nFor instance, the CSS below animates changes of `background-color` for 3 seconds:\n\n```css\n.animated {\n  transition-property: background-color;\n  transition-duration: 3s;\n}\n```\n\nNow if an element has `.animated` class, any change of `background-color` is animated during 3 seconds.\n\nClick the button below to animate the background:\n\n```html run autorun height=60\n<button id=\"color\">Click me</button>\n\n<style>\n  #color {\n    transition-property: background-color;\n    transition-duration: 3s;\n  }\n</style>\n\n<script>\n  color.onclick = function() {\n    this.style.backgroundColor = 'red';\n  };\n</script>\n```\n\nThere are 5 properties to describe CSS transitions:\n\n- `transition-property`\n- `transition-duration`\n- `transition-timing-function`\n- `transition-delay`\n\nWe'll cover them in a moment, for now let's note that the common `transition` property allows to declare them together in the order: `property duration timing-function delay`, and also animate multiple properties at once.\n\nFor instance, this button animates both `color` and `font-size`:\n\n```html run height=80 autorun no-beautify\n<button id=\"growing\">Click me</button>\n\n<style>\n#growing {\n*!*\n  transition: font-size 3s, color 2s;\n*/!*\n}\n</style>\n\n<script>\ngrowing.onclick = function() {\n  this.style.fontSize = '36px';\n  this.style.color = 'red';\n};\n</script>\n```\n\nNow let's cover animation properties one by one.\n\n## transition-property\n\nIn `transition-property` we write a list of property to animate, for instance: `left`, `margin-left`, `height`, `color`.\n\nNot all properties can be animated, but [many of them](http://www.w3.org/TR/css3-transitions/#animatable-properties-). The value `all` means \"animate all properties\".\n\n## transition-duration\n\nIn `transition-duration` we can specify how long the animation should take. The time should be in [CSS time format](http://www.w3.org/TR/css3-values/#time): in seconds `s` or milliseconds `ms`.\n\n## transition-delay\n\nIn `transition-delay` we can specify the delay *before* the animation. For instance, if  `transition-delay: 1s`, then animation starts after 1 second after the change.\n\nNegative values are also possible. Then the animation starts from the middle. For instance, if `transition-duration` is `2s`, and the delay is `-1s`, then the animation takes 1 second and starts from the half.\n\nHere's the animation shifts numbers from `0` to `9` using CSS `translate` property:\n\n[codetabs src=\"digits\"]\n\nThe `transform` property is animated like this:\n\n```css\n#stripe.animate {\n  transform: translate(-90%);\n  transition-property: transform;\n  transition-duration: 9s;\n}\n```\n\nIn the example above JavaScript adds the class `.animate` to the element -- and the animation starts:\n\n```js\nstripe.classList.add('animate');\n```\n\nWe can also start it \"from the middle\", from the exact number, e.g. corresponding to the current second, using the negative `transition-delay`.\n\nHere if you click the digit -- it starts the animation from the current second:\n\n[codetabs src=\"digits-negative-delay\"]\n\nJavaScript does it by an extra line:\n\n```js\nstripe.onclick = function() {\n  let sec = new Date().getSeconds() % 10;\n*!*\n  // for instance, -3s here starts the animation from the 3rd second\n  stripe.style.transitionDelay = '-' + sec + 's';\n*/!*\n  stripe.classList.add('animate');\n};\n```\n\n## transition-timing-function\n\nTiming function describes how the animation process is distributed along the time. Will it start slowly and then go fast or vise versa.\n\nThat's the most complicated property from the first sight. But it becomes very simple if we devote a bit time to it.\n\nThat property accepts two kinds of values: a Bezier curve or steps. Let's start from the curve, as it's used more often.\n\n### Bezier curve\n\nThe timing function can be set as a [Bezier curve](/bezier-curve) with 4 control points that satisfies the conditions:\n\n1. First control point: `(0,0)`.\n2. Last control point: `(1,1)`.\n3. For intermediate points values of `x` must be in the interval `0..1`, `y` can be anything.\n\nThe syntax for a Bezier curve in CSS: `cubic-bezier(x2, y2, x3, y3)`. Here we need to specify only 2nd and 3rd control points, because the 1st one is fixed to `(0,0)` and the 4th one is `(1,1)`.\n\nThe timing function describes how fast the animation process goes in time.\n\n- The `x` axis is the time: `0` -- the starting moment, `1` -- the last moment of `transition-duration`.\n- The `y` axis specifies the completion of the process: `0` -- the starting value of the property, `1` -- the final value.\n\nThe simplest variant is when the animation goes uniformly, with the same linear speed. That can be specified by the curve `cubic-bezier(0, 0, 1, 1)`.\n\nHere's how that curve looks:\n\n![](bezier-linear.png)\n\n...As we can see, it's just a straight line. As the time (`x`) passes, the completion (`y`) of the animation steadily goes from `0` to `1`.\n\nThe train in the example below goes from left to right with the permanent speed (click it):\n\n[codetabs src=\"train-linear\"]\n\nThe CSS `transition` is based on that curve:\n\n```css\n.train {\n  left: 0;\n  transition: left 5s cubic-bezier(0, 0, 1, 1);\n  /* JavaScript sets left to 450px */\n}\n```\n\n...And how can we show a train slowing down?\n\nWe can use another Bezier curve: `cubic-bezier(0.0, 0.5, 0.5 ,1.0)`.\n\nThe graph:\n\n![](train-curve.png)\n\nAs we can see, the process starts fast: the curve soars up high, and then slower and slower.\n\nHere's the timing function in action (click the train):\n\n[codetabs src=\"train\"]\n\nCSS:\n```css\n.train {\n  left: 0;\n  transition: left 5s cubic-bezier(0, .5, .5, 1);\n  /* JavaScript sets left to 450px */\n}\n```\n\nThere are several built-in curves: `linear`, `ease`, `ease-in`, `ease-out` and `ease-in-out`.\n\nThe `linear` is a shorthand for `cubic-bezier(0, 0, 1, 1)` -- a straight line, we saw it already.\n\nOther names are shorthands for the following `cubic-bezier`:\n\n| <code>ease</code><sup>*</sup> | <code>ease-in</code> | <code>ease-out</code> | <code>ease-in-out</code> |\n|-------------------------------|----------------------|-----------------------|--------------------------|\n| <code>(0.25, 0.1, 0.25, 1.0)</code> | <code>(0.42, 0, 1.0, 1.0)</code> | <code>(0, 0, 0.58, 1.0)</code> | <code>(0.42, 0, 0.58, 1.0)</code> |\n| ![ease, figure](ease.png) | ![ease-in, figure](ease-in.png) | ![ease-out, figure](ease-out.png) | ![ease-in-out, figure](ease-in-out.png) |\n\n`*` -- by default, if there's no timing function, `ease` is used.\n\nSo we could use `ease-out` for our slowing down train:\n\n\n```css\n.train {\n  left: 0;\n  transition: left 5s ease-out;\n  /* transition: left 5s cubic-bezier(0, .5, .5, 1); */\n}\n```\n\nBut it looks a bit differently.\n\n**A Bezier curve can make the animation \"jump out\" of its range.**\n\nThe control points on the curve can have any `y` coordinates: even negative or huge. Then the Bezier curve would also jump very low or high, making the animation go beyond its normal range.\n\nIn the example below the animation code is:\n```css\n.train {\n  left: 100px;\n  transition: left 5s cubic-bezier(.5, -1, .5, 2);\n  /* JavaScript sets left to 400px */\n}\n```\n\nThe property `left` should animate from `100px` to `400px`.\n\nBut if you click the train, you'll see that:\n\n- First, the train goes *back*: `left` becomes less than `100px`.\n- Then it goes forward, a little bit farther than `400px`.\n- And then back again -- to `400px`.\n\n[codetabs src=\"train-over\"]\n\nWhy it happens -- pretty obvious if we look at the graph of the given Bezier curve:\n\n![](bezier-train-over.png)\n\nWe moved the `y` coordinate of the 2nd point below zero, and for the 3rd point we made put it over `1`, so the curve goes out of the \"regular\" quadrant. The `y` is out of the \"standard\" range `0..1`.\n\nAs we know, `y` measures \"the completion of the animation process\". The value `y = 0` corresponds to the starting property value and `y = 1` -- the ending value. So values `y<0` move the property lower than the starting `left` and `y>1` -- over the final `left`.\n\nThat's a \"soft\" variant for sure. If we put `y` values like `-99` and `99` then the train would jump out of the range much more.\n\nBut how to make the Bezier curve for a specific task? There are many tools. For instance, we can do it on the site <http://cubic-bezier.com/>.\n\n### Steps\n\nTiming function `steps(number of steps[, start/end])` allows to split animation into steps.\n\nLet's see that in an example with digits. We'll make the digits change not in a smooth, but in a discrete way.\n\nFor that we split the animation into 9 steps:\n\n```css\n#stripe.animate  {\n  transform: translate(-90%);\n  transition: transform 9s *!*steps(9, start)*/!*;\n}\n```\n\nIn action `step(9, start)`:\n\n[codetabs src=\"step\"]\n\nThe first argument of `steps` is the number of steps. The transform will be split into 9 parts (10% each). The time interval is divided as well: 9 seconds split into 1 second intervals.\n\nThe second argument is one of two words: `start` or `end`.\n\nThe `start` means that in the beginning of animation we need to do make the first step immediately.\n\nWe can observe that during the animation: when we click on the digit it changes to `1` (the first step) immediately, and then changes in the beginning of the next second.\n\nThe process is progressing like this:\n\n- `0s` -- `-10%` (first change in the beginning of the 1st second, immediately)\n- `1s` -- `-20%`\n- ...\n- `8s` -- `-80%`\n- (the last second shows the final value).\n\nThe alternative value `end` would mean that the change should be applied not in the beginning, but at the end of each second.\n\nSo the process would go like this:\n\n- `0s` -- `0`\n- `1s` -- `-10%` (first change at the end of the 1st second)\n- `2s` -- `-20%`\n- ...\n- `9s` -- `-90%`\n\nIn action `step(9, end)`:\n\n[codetabs src=\"step-end\"]\n\nThere are also shorthand values:\n\n- `step-start` -- is the same as `steps(1, start)`. That is, the animation starts immediately and takes 1 step. So it starts and finishes immediately, as if there were no animation.\n- `step-end` -- the same as `steps(1, end)`: make the animation in a single step at the end of `transition-duration`.\n\nThese values are rarely used, because that's not really animation, but rather a single-step change.\n\n## Event transitionend\n\nWhen the CSS animation finishes the `transitionend` event triggers.\n\nIt is widely used to do an action after the animation is done. Also we can join animations.\n\nFor instance, the ship in the example below starts to swim there and back on click, each time farther and farther to the right:\n\n[iframe src=\"boat\" height=300 edit link]\n\nThe animation is initiated by the function `go` that re-runs each time when the transition finishes and flips the direction:\n\n```js\nboat.onclick = function() {\n  //...\n  let times = 1;\n\n  function go() {\n    if (times % 2) {\n      // swim to the right\n      boat.classList.remove('back');\n      boat.style.marginLeft = 100 * times + 200 + 'px';\n    } else {\n      // swim to the left\n      boat.classList.add('back');\n      boat.style.marginLeft = 100 * times - 200 + 'px';\n    }\n\n  }\n\n  go();\n\n  boat.addEventListener('transitionend', function() {\n    times++;\n    go();\n  });\n};\n```\n\nThe event object for `transitionend` has few specific properties:\n\n`event.propertyName`\n: The property that has finished animating. Can be good if we animate multiple properties simultaneously.\n\n`event.elapsedTime`\n: The time (in seconds) that the animation took, without `transition-delay`.\n\n## Keyframes\n\nWe can join multiple simple animations together using the `@keyframes` CSS rule.\n\nIt specifies the \"name\" of the animation and rules: what, when and where to animate. Then using the `animation` property we attach the animation to the element and specify additional parameters for it.\n\nHere's an example with explanations:\n\n```html run height=60 autorun=\"no-epub\" no-beautify\n<div class=\"progress\"></div>\n\n<style>\n*!*\n  @keyframes go-left-right {        /* give it a name: \"go-left-right\" */\n    from { left: 0px; }             /* animate from left: 0px */\n    to { left: calc(100% - 50px); } /* animate to left: 100%-50px */\n  }\n*/!*\n\n  .progress {\n*!*\n    animation: go-left-right 3s infinite alternate;\n    /* apply the animation \"go-left-right\" to the element\n       duration 3 seconds\n       number of times: infinite\n       alternate direction every time\n    */\n*/!*\n\n    position: relative;\n    border: 2px solid green;\n    width: 50px;\n    height: 20px;\n    background: lime;\n  }\n</style>\n```\n\nThere are many articles about `@keyframes` and a [detailed specification](https://drafts.csswg.org/css-animations/).\n\nProbably you won't need `@keyframes` often, unless everything is in the constant move on your sites.\n\n## Summary\n\nCSS animations allow to smoothly (or not) animate changes of one or multiple CSS properties.\n\nThey are good for most animation tasks. We're also able to use JavaScript for animations, the next chapter is devoted to that.\n\nLimitations of CSS animations compared to JavaScript animations:\n\n```compare plus=\"CSS animations\" minus=\"JavaScript animations\"\n+ Simple things done simply.\n+ Fast and lightweight for CPU.\n- JavaScript animations are flexible. They can implement any animation logic, like an \"explosion\" of an element.\n- Not just property changes. We can create new elements in JavaScript for purposes of animation.\n```\n\nThe majority of animations can be implemented using CSS as described in this chapter. And  `transitionend` event allows to run JavaScript after the animation, so it integrates fine with the code.\n\nBut in the next chapter we'll do some JavaScript animations to cover more complex cases.","libs":[],"children":["animate-logo-css","animate-logo-bezier-css","animate-circle"],"parent":"animation"}},"animate-logo-css":{"type":"Task","value":{"title":"Animate a plane (CSS)","slug":"animate-logo-css","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/2-css-animations/1-animate-logo-css","weight":1,"libs":[],"importance":5,"content":"\nShow the animation like on the picture below (click the plane):\n\n[iframe src=\"solution\" height=300]\n\n- The picture grows on click from `40x24px` to `400x240px` (10 times larger).\n- The animation takes 3 seconds.\n- At the end output: \"Done!\".\n- During the animation process, there may be more clicks on the plane. They shouldn't \"break\" anything.","solution":"CSS to animate both `width` and `height`:\n```css\n/* original class */\n\n#flyjet {\n  transition: all 3s;\n}\n\n/* JS adds .growing */\n#flyjet.growing {\n  width: 400px;\n  height: 240px;\n}\n```\n\nPlease note that `transitionend` triggers two times -- once for every property. So if we don't perform an additional check then the message would show up 2 times.","parent":"css-animations"}},"animate-logo-bezier-css":{"type":"Task","value":{"title":"Animate the flying plane (CSS)","slug":"animate-logo-bezier-css","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/2-css-animations/2-animate-logo-bezier-css","weight":2,"libs":[],"importance":5,"content":"\nModify the solution of the previous task <info:task/animate-logo-css> to make the plane grow more than it's original size 400x240px (jump out), and then return to that size.\n\nHere's how it should look (click on the plane):\n\n[iframe src=\"solution\" height=350]\n\nTake the solution of the previous task as the source.","solution":"We need to choose the right Bezier curve for that animation. It should have `y>1` somewhere for the plane to \"jump out\".\n\nFor instance, we can take both control points with `y>1`, like: `cubic-bezier(0.25, 1.5, 0.75, 1.5)`.\n\nThe graph:\n\n![](bezier-up.png)","parent":"css-animations"}},"animate-circle":{"type":"Task","value":{"title":"Animated circle","slug":"animate-circle","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/2-css-animations/3-animate-circle","weight":3,"libs":[],"importance":5,"content":"\nCreate a function `showCircle(cx, cy, radius)` that shows an animated growing circle.\n\n- `cx,cy` are window-relative coordinates of the center of the circle,\n- `radius` is the radius of the circle.\n\nClick the button below to see how it should look like:\n\n[iframe src=\"solution\" height=260]\n\nThe source document has an example of a circle with right styles, so the task is precisely to do the animation right.","solution":"","parent":"css-animations"}},"js-animation":{"type":"Article","value":{"title":"JavaScript animations","slug":"js-animation","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/3-js-animation/article.md","isFolder":false,"weight":3,"content":"\nJavaScript animations can handle things that CSS can't.\n\nFor instance, moving along a complex path, with a timing function different from Bezier curves, or an animation on a canvas.\n\n## setInterval\n\nFrom the HTML/CSS point of view, an animation is a gradual change of the style property. For instance, changing `style.left` from `0px` to `100px` moves the element.\n\nAnd if we increase it in `setInterval`, by making 50 small changes per second, then it looks smooth. That's the same principle as in the cinema: 24 or more frames per second is enough to make it look smooth.\n\nThe pseudo-code can look like this:\n\n```js\nlet delay = 1000 / 50; // in 1 second 50 frames\nlet timer = setInterval(function() {\n  if (animation complete) clearInterval(timer);\n  else increase style.left\n}, delay)\n```\n\nMore complete example of the animation:\n\n```js\nlet start = Date.now(); // remember start time\n\nlet timer = setInterval(function() {\n  // how much time passed from the start?\n  let timePassed = Date.now() - start;\n\n  if (timePassed >= 2000) {\n    clearInterval(timer); // finish the animation after 2 seconds\n    return;\n  }\n\n  // draw the animation at the moment timePassed\n  draw(timePassed);\n\n}, 20);\n\n// as timePassed goes from 0 to 2000\n// left gets values from 0px to 400px\nfunction draw(timePassed) {\n  train.style.left = timePassed / 5 + 'px';\n}\n```\n\nClick for the demo:\n\n[codetabs height=200 src=\"move\"]\n\n## requestAnimationFrame\n\nLet's imagine we have several animations running simultaneously.\n\nIf we run them separately, each one with its own `setInterval(..., 20)`, then the browser would have to repaint much more often than every `20ms`.\n\nEach `setInterval` triggers once per `20ms`, but they are independent, so we have several independent runs within `20ms`.\n\nThese several independent redraws should be grouped together, to make it easier for the browser.\n\nIn other words, this:\n\n```js\nsetInterval(function() {\n  animate1();\n  animate2();\n  animate3();\n}, 20)\n```\n\n...Is lighter than this:\n\n```js\nsetInterval(animate1, 20);\nsetInterval(animate2, 20);\nsetInterval(animate3, 20);\n```\n\nThere's one more thing to keep in mind. Sometimes when CPU is overloaded, or there are other reasons to  redraw less often. For instance, if the browser tab is hidden, then there's totally no point in drawing.\n\nThere's a standard [Animation timing](http://www.w3.org/TR/animation-timing/) that provides the function `requestAnimationFrame`.\n\nIt addresses all these issues and even more.\n\nThe syntax:\n```js\nlet requestId = requestAnimationFrame(callback)\n```\n\nThat schedules the `callback` function to run in the closest time when the browser wants to do animation.\n\nIf we do changes in elements in `callback` then they will be grouped together with other `requestAnimationFrame` callbacks and with CSS animations. So there will be one geometry recalculation and repaint instead of many.\n\nThe returned value `requestId` can be used to cancel the call:\n```js\n// cancel the scheduled execution of callback\ncancelAnimationFrame(requestId);\n```\n\nThe `callback` gets one argument -- the time passed from the beginning of the page load in microseconds. This time can also be obtained by calling [performance.now()](mdn:api/Performance/now).\n\nUsually `callback` runs very soon, unless the CPU is overloaded or the laptop battery is almost discharged, or there's another reason.\n\nThe code below shows the time between first 20 runs for `requestAnimationFrame`. Usually it's 10-20ms:\n\n```html run height=40 refresh\n<script>\n  let prev = performance.now();\n  let times = 0;\n\n  requestAnimationFrame(function measure(time) {\n    document.body.insertAdjacentHTML(\"beforeEnd\", Math.floor(time - prev) + \" \");\n    prev = time;\n\n    if (times++ < 10) requestAnimationFrame(measure);\n  })\n</script>\n```\n\n## Structured animation\n\nNow we can make a more universal animation function based on `requestAnimationFrame`:\n\n```js\nfunction animate({timing, draw, duration}) {\n\n  let start = performance.now();\n\n  requestAnimationFrame(function animate(time) {\n    // timeFraction goes from 0 to 1\n    let timeFraction = (time - start) / duration;\n    if (timeFraction > 1) timeFraction = 1;\n\n    // calculate the current animation state\n    let progress = timing(timeFraction)\n\n    draw(progress); // draw it\n\n    if (timeFraction < 1) {\n      requestAnimationFrame(animate);\n    }\n\n  });\n}\n```\n\nFunction `animate` accepts 3 parameters that essentially describes the animation:\n\n`duration`\n: Total time of animation. Like, `1000`.\n\n`timing(timeFraction)`\n: Timing function, like CSS-property `transition-timing-function` that gets the fraction of time that passed (`0` at start, `1` at the end) and returns the animation completion (like `y` on the Bezier curve).\n\n    For instance, a linear function means that the animation goes on uniformly with the same speed:\n\n    ```js\n    function linear(timeFraction) {\n      return timeFraction;\n    }\n    ```\n\n    It's graph:\n    ![](linear.png)\n\n    That's just like `transition-timing-function: linear`. There are more interesting variants shown below.\n\n`draw(progress)`\n: The function that takes the animation completion state and draws it. The value `progress=0` denotes the beginning animation state, and `progress=1` -- the end state.\n\n    This is that function that actually draws out the animation.\n\n    It can move the element:\n    ```js\n    function draw(progress) {\n      train.style.left = progress + 'px';\n    }\n    ```\n\n    ...Or do anything else, we can animate anything, in any way.\n\n\nLet's animate the element `width` from `0` to `100%` using our function.\n\nClick on the element for the demo:\n\n[codetabs height=60 src=\"width\"]\n\nThe code for it:\n\n```js\nanimate({\n  duration: 1000,\n  timing(timeFraction) {\n    return timeFraction;\n  },\n  draw(progress) {\n    elem.style.width = progress * 100 + '%';\n  }\n});\n```\n\nUnlike CSS animation, we can make any timing function and any drawing function here. The timing function is not limited by Bezier curves. And `draw` can go beyond properties, create new elements for like fireworks animation or something.\n\n## Timing functions\n\nWe saw the simplest, linear timing function above.\n\nLet's see more of them. We'll try movement animations with different timing functions to see how they work.\n\n### Power of n\n\nIf we want to speed up the animation, we can use `progress` in the power `n`.\n\nFor instance, a parabolic curve:\n\n```js\nfunction quad(timeFraction) {\n  return Math.pow(timeFraction, 2)\n}\n```\n\nThe graph:\n\n![](quad.png)\n\nSee in action (click to activate):\n\n[iframe height=40 src=\"quad\" link]\n\n...Or the cubic curve or event greater `n`. Increasing the power makes it speed up faster.\n\nHere's the graph for `progress` in the power `5`:\n\n![](quint.png)\n\nIn action:\n\n[iframe height=40 src=\"quint\" link]\n\n### The arc\n\nFunction:\n\n```js\nfunction circ(timeFraction) {\n  return 1 - Math.sin(Math.acos(timeFraction));\n}\n```\n\nThe graph:\n\n![](circ.png)\n\n[iframe height=40 src=\"circ\" link]\n\n### Back: bow shooting\n\nThis function does the \"bow shooting\". First we \"pull the bowstring\", and then \"shoot\".\n\nUnlike previous functions, it depends on an additional parameter `x`, the \"elasticity coefficient\". The distance of \"bowstring pulling\" is defined by it.\n\nThe code:\n\n```js\nfunction back(x, timeFraction) {\n  return Math.pow(timeFraction, 2) * ((x + 1) * timeFraction - x)\n}\n```\n\n**The graph for `x = 1.5`:**\n\n![](back.png)\n\nFor animation we use it with a specific value of `x`. Example for `x = 1.5`:\n\n[iframe height=40 src=\"back\" link]\n\n### Bounce\n\nImagine we are dropping a ball. It falls down, then bounces back a few times and stops.\n\nThe `bounce` function does the same, but in the reverse order: \"bouncing\" starts immediately. It uses few special coefficients for that:\n\n```js\nfunction bounce(timeFraction) {\n  for (let a = 0, b = 1, result; 1; a += b, b /= 2) {\n    if (timeFraction >= (7 - 4 * a) / 11) {\n      return -Math.pow((11 - 6 * a - 11 * timeFraction) / 4, 2) + Math.pow(b, 2)\n    }\n  }\n}\n```\n\nIn action:\n\n[iframe height=40 src=\"bounce\" link]\n\n### Elastic animation\n\nOne more \"elastic\" function that accepts an additional parameter `x` for the \"initial range\".\n\n```js\nfunction elastic(x, timeFraction) {\n  return Math.pow(2, 10 * (timeFraction - 1)) * Math.cos(20 * Math.PI * x / 3 * timeFraction)\n}\n```\n\n**The graph for `x=1.5`:**\n![](elastic.png)\n\nIn action for `x=1.5`:\n\n[iframe height=40 src=\"elastic\" link]\n\n## Reversal: ease*\n\nSo we have a collection of timing functions. Their direct application is called \"easeIn\".\n\nSometimes we need to show the animation in the reverse order. That's done with the \"easeOut\" transform.\n\n### easeOut\n\nIn the \"easeOut\" mode the `timing` function is put into a wrapper `timingEaseOut`:\n\n```js\ntimingEaseOut(timeFraction) = 1 - timing(1 - timeFraction)\n```\n\nIn other words, we have a \"transform\" function `makeEaseOut` that takes a \"regular\" timing function and returns the wrapper around it:\n\n```js\n// accepts a timing function, returns the transformed variant\nfunction makeEaseOut(timing) {\n  return function(timeFraction) {\n    return 1 - timing(1 - timeFraction);\n  }\n}\n```\n\nFor instance, we can take the `bounce` function described above and apply it:\n\n```js\nlet bounceEaseOut = makeEaseOut(bounce);\n```\n\nThen the bounce will be not in the beginning, but at the end of the animation. Looks even better:\n\n[codetabs src=\"bounce-easeout\"]\n\nHere we can see how the transform changes the behavior of the function:\n\n![](bounce-inout.png)\n\nIf there's an animation effect in the beginning, like bouncing -- it will be shown at the end.\n\nIn the graph above the <span style=\"color:#EE6B47\">regular bounce</span> has the red color, and the <span style=\"color:#62C0DC\">easeOut bounce</span> is blue.\n\n- Regular bounce -- the object bounces at the bottom, then at the end sharply jumps to the top.\n- After `easeOut` -- it first jumps to the top, then bounces there.\n\n### easeInOut\n\nWe also can show the effect both in the beginning and the end of the animation. The transform is called \"easeInOut\".\n\nGiven the timing function, we calculate the animation state like this:\n\n```js\nif (timeFraction <= 0.5) { // first half of the animation\n  return timing(2 * timeFraction) / 2;\n} else { // second half of the animation\n  return (2 - timing(2 * (1 - timeFraction))) / 2;\n}\n```\n\nThe wrapper code:\n\n```js\nfunction makeEaseInOut(timing) {\n  return function(timeFraction) {\n    if (timeFraction < .5)\n      return timing(2 * timeFraction) / 2;\n    else\n      return (2 - timing(2 * (1 - timeFraction))) / 2;\n  }\n}\n\nbounceEaseInOut = makeEaseInOut(bounce);\n```\n\nIn action, `bounceEaseInOut`:\n\n[codetabs src=\"bounce-easeinout\"]\n\nThe \"easeInOut\" transform joins two graphs into one: `easeIn` (regular) for the first half of the animation and `easeOut` (reversed) -- for the second part.\n\nThe effect is clearly seen if we compare the graphs of `easeIn`, `easeOut` and `easeInOut` of the `circ` timing function:\n\n![](circ-ease.png)\n\n- <span style=\"color:#EE6B47\">Red</span> is the regular variantof `circ` (`easeIn`).\n- <span style=\"color:#8DB173\">Green</span> -- `easeOut`.\n- <span style=\"color:#62C0DC\">Blue</span> -- `easeInOut`.\n\nAs we can see, the graph of the first half of the animation is the scaled down `easeIn`, and the second half is the scaled down `easeOut`. As a result, the animation starts and finishes with the same effect.\n\n## More interesting \"draw\"\n\nInstead of moving the element we can do something else. All we need is to write the write the proper `draw`.\n\nHere's the animated \"bouncing\" text typing:\n\n[codetabs src=\"text\"]\n\n## Summary\n\nJavaScript animation should be implemented via `requestAnimationFrame`. That built-in method allows to setup a callback function to run when the browser will be preparing a repaint. Usually that's very soon, but the exact time depends on the browser.\n\nWhen a page is in the background, there are no repaints at all, so the callback won't run: the animation will be suspended and won't consume resources. That's great.\n\nHere's the helper `animate` function to setup most animations:\n\n```js\nfunction animate({timing, draw, duration}) {\n\n  let start = performance.now();\n\n  requestAnimationFrame(function animate(time) {\n    // timeFraction goes from 0 to 1\n    let timeFraction = (time - start) / duration;\n    if (timeFraction > 1) timeFraction = 1;\n\n    // calculate the current animation state\n    let progress = timing(timeFraction);\n\n    draw(progress); // draw it\n\n    if (timeFraction < 1) {\n      requestAnimationFrame(animate);\n    }\n\n  });\n}\n```\n\nOptions:\n\n- `duration` -- the total animation time in ms.\n- `timing` -- the function to calculate animation progress. Gets a time fraction from 0 to 1, returns the animation progress, usually from 0 to 1.\n- `draw` -- the function to draw the animation.\n\nSurely we could improve it, add more bells and whistles, but JavaScript animations are not applied on a daily basis. They are used to do something interesting and non-standard. So you'd want to add the features that you need when you need them.\n\nJavaScript animations can use any timing function. We covered a lot of examples and transformations to make them even more versatile. Unlike CSS, we are not limited to Bezier curves here.\n\nThe same is about `draw`: we can animate anything, not just CSS properties.","libs":[],"children":["animate-ball","animate-ball-hops"],"parent":"animation"}},"animate-ball":{"type":"Task","value":{"title":"Animate the bouncing ball","slug":"animate-ball","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/3-js-animation/1-animate-ball","weight":1,"libs":[],"importance":5,"content":"\nMake a bouncing ball. Click to see how it should look:\n\n[iframe height=250 src=\"solution\"]","solution":"To bounce we can use CSS property `top` and `position:absolute` for the ball inside the field with `position:relative`.\n\nThe bottom coordinate of the field is `field.clientHeight`. But the `top` property gives coordinates for the top of the ball, the edge position is `field.clientHeight - ball.clientHeight`.\n\nSo we animate the `top` from `0` to `field.clientHeight - ball.clientHeight`.\n\nNow to get the \"bouncing\" effect we can use the timing function `bounce` in `easeOut` mode.\n\nHere's the final code for the animation:\n\n```js\nlet to = field.clientHeight - ball.clientHeight;\n\nanimate({\n  duration: 2000,\n  timing: makeEaseOut(bounce),\n  draw(progress) {\n    ball.style.top = to * progress + 'px'\n  }\n});\n```","parent":"js-animation"}},"animate-ball-hops":{"type":"Task","value":{"title":"Animate the ball bouncing to the left","slug":"animate-ball-hops","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/3-animation/3-js-animation/2-animate-ball-hops","weight":2,"libs":[],"importance":5,"content":"\nMake the ball bounce to the left. Like this:\n\n[iframe height=250 src=\"solution\"]\n\nWrite the animation code. The distance to the right is `100px`.\n\nTake the solution of the previous task <info:task/animate-ball> as the source.","solution":"In the task <info:task/animate-ball> we had only one property to animate. Now we need one more: `elem.style.left`.\n\nThe horizontal coordinate changes by another law: it does not \"bounce\", but gradually increases shifting the ball to the right.\n\nWe can write one more `animate` for it.\n\nAs the time function we could use `linear`, but something like `makeEaseOut(quad)` looks much better.\n\nThe code:\n\n```js\nlet height = field.clientHeight - ball.clientHeight;\nlet width = 100;\n\n// animate top (bouncing)\nanimate({\n  duration: 2000,\n  timing: makeEaseOut(bounce),\n  draw: function(progress) {\n    ball.style.top = height * progress + 'px'\n  }\n});\n\n// animate left (moving to the right)\nanimate({\n  duration: 2000,\n  timing: makeEaseOut(quad),\n  draw: function(progress) {\n    ball.style.left = width * progress + \"px\"\n  }\n});\n```","parent":"js-animation"}},"frames-and-windows":{"type":"Article","value":{"title":"Frames and windows","slug":"frames-and-windows","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/4-frames-and-windows","isFolder":true,"weight":4,"content":"","libs":[],"children":["popup-windows","cross-window-communication","clickjacking"]}},"popup-windows":{"type":"Article","value":{"title":"Popups and window methods","slug":"popup-windows","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/4-frames-and-windows/01-popup-windows/article.md","isFolder":false,"weight":1,"content":"\nA popup window is one of the oldest methods to show additional document to user.\n\nBasically, you just run:\n```js\nwindow.open('http://javascript.info/')\n```\n\n... And it will open a new window with given URL. Most modern browsers are configured to open new tabs instead of separate windows.\n\n## Popup blocking\n\nPopups exist from really ancient times. The initial idea was to show another content without closing the main window. As of now, there are other ways to do that: JavaScript is able to send requests for server, so popups are rarely used. But sometimes they are still handy.\n\nIn the past evil sites abused popups a lot. A bad page could open tons of popup windows with ads. So now most browsers try to block popups and protect the user.\n\n**Most browsers block popups if they are called outside of user-triggered event handlers like `onclick`.**\n\nIf you think about it, that's a bit tricky. If the code is directly in an `onclick` handler, then that's easy. But what is the popup opens in `setTimeout`?\n\nTry this code:\n\n```js run\n// open after 3 seconds\nsetTimeout(() => window.open('http://google.com'), 3000);\n```\n\nThe popup opens in Chrome, but gets blocked in Firefox.\n\n...And this works in Firefox too:\n\n```js run\n// open after 1 seconds\nsetTimeout(() => window.open('http://google.com'), 1000);\n```\n\nThe difference is that Firefox treats a timeout of 2000ms or less are acceptable, but after it -- removes the \"trust\", assuming that now it's \"outside of the user action\". So the first one is blocked, and the second one is not.\n\n## Modern usage\n\nAs of now, we have many methods to load and show data on-page with JavaScript. But there are still situations when a popup works best.\n\nFor instance, many shops use online chats for consulting people. A visitor clicks on the button, it runs `window.open` and opens the popup with the chat.\n\nWhy a popup is good here, why not in-page?\n\n1. A popup is a separate window with its own independent JavaScript environment. So a chat service doesn't need to integrate with scripts of the main shop site.\n2. A popup is very simple to attach to a site, little to no overhead. It's only a small button, without additional scripts.\n3. A popup may persist even if the user left the page. For example, a consult advices the user to visit the page of a new \"Super-Cooler\" goodie. The user goes there in the main window without leaving the chat.\n\n## window.open\n\nThe syntax to open a popup is: `window.open(url, name, params)`:\n\nurl\n: An URL to load into the new window.\n\nname\n: A name of the new window. Each window has a `window.name`, and here we can specify which window to use for the popup. If there's already a window with such name -- the given URL opens in it, otherwise a new window is opened.\n\nparams\n: The configuration string for the new window. It contains settings, delimited by a comma. There must be no spaces in params, for instance: `width:200,height=100`.\n\nSettings for `params`:\n\n- Position:\n  - `left/top` (numeric) -- coordinates of the window top-left corner on the screen. There is a limitation: a new window cannot be positioned offscreen.\n  - `width/height` (numeric) -- width and height of a new window. There is a limit on minimal width/height, so it's impossible to create an invisible window.\n- Window features:\n  - `menubar` (yes/no) -- shows or hides the browser menu on the new window.\n  - `toolbar` (yes/no) -- shows or hides the browser navigation bar (back, forward, reload etc) on the new window.\n  - `location` (yes/no) -- shows or hides the URL field in the new window. FF and IE don't allow to hide it by default.\n  - `status` (yes/no) -- shows or hides the status bar. Again, most browsers force it to show.\n  - `resizable` (yes/no) -- allows to disable the resize for the new window. Not recommended.\n  - `scrollbars` (yes/no) -- allows to disable the scrollbars for the new window. Not recommended.\n\n\nThere is also a number of less supported browser-specific features, which are usually not used. Check <a href=\"https://developer.mozilla.org/en/DOM/window.open\">window.open in MDN</a> for examples.\n\n## Example: a minimalistic window   \n\nLet's open a window with minimal set of features just to see which of them browser allows to disable:\n\n```js run\nlet params = `scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,\nwidth=0,height=0,left=-1000,top=-1000`;\n\nopen('/', 'test', params);\n```\n\nHere most \"window features\" are disabled and window is positioned offscreen. Run it and see what really happens. Most browsers \"fix\" odd things like zero `width/height` and offscreen `left/top`. For instance, Chrome open such a window with full width/height, so that it occupies the full screen.\n\nLet's add normal positioning options and reasonable `width`, `height`, `left`, `top` coordinates:\n\n```js run\nlet params = `scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,\nwidth=600,height=300,left=100,top=100`;\n\nopen('/', 'test', params);\n```\n\nMost browsers show the example above as required.\n\nRules for omitted settings:\n\n- If there is no 3rd argument in the `open` call, or it is empty, then the default window parameters are used.\n- If there is a string of params, but some yes/no features are omitted, then the omitted features are disabled, if the browser allows that. So if you specify params, make sure you explicitly set all required features to yes.\n- If there is no `left/top` in params, then the browser tries to open a new window near the last opened window.\n- If there is no `width/height`, then the new window will be the same size as the last opened.\n\n## Accessing a popup\n\nThe `open` call returns a reference to the new window. It can be used to manipulate it's properties, change location and even more.\n\nIn the example below, the contents of the new window is modified after loading.\n\n```js run\nlet newWindow = open('/', 'example', 'width=300,height=300')\nnewWindow.focus();\n\nnewWindow.onload = function() {\n  let html = `<div style=\"font-size:30px\">Welcome!</div>`;\n*!*\n  newWindow.document.body.insertAdjacentHTML('afterbegin', html);\n*/!*\n};\n```\n\nPlease note that external `document` content is only accessible for windows from the same origin (the same protocol://domain:port).\n\nFor windows with URLs from another sites, we are able to change the location by assigning `newWindow.location=...`, but we can't read the location or access the content. That's for user safety, so that an evil page can't open a popup with `http://gmail.com` and read the data. We'll talk more about it later.\n\n## Accessing the opener window   \n\nA popup may access the \"opener\" window as well. A JavaScript in it may use `window.opener` to access the window that opened it. It is `null` for all windows except popups.\n\nSo both the main window and the popup have a reference to each other. They may modify each other freely assuming that they come from the same origin. If that's not so, then there are still means to communicate, to be covered in the next chapter <info:cross-window-communication>.\n\n## Closing a popup\n\nIf we don't need a popup any more, we can call `newWindow.close()` on it.\n\nTechnically, the `close()` method is available for any `window`, but `window.close()` is ignored by most browsers if `window` is not created with `window.open()`.\n\nThe `newWindow.closed` is `true` if the window is closed. That's useful to check if the popup (or the main window) is still open or not. A user could close it, and our code should take that possibility into account.\n\nThis code loads and then closes the window:\n\n```js run\nlet newWindow = open('/', 'example', 'width=300,height=300')\nnewWindow.onload = function() {\n  newWindow.close();\n  alert(newWindow.closed); // true\n};\n```\n\n## Focus/blur on a popup\n\nTheoretically, there are `window.focus()` and `window.blur()` methods to focus/unfocus on a window.  Also there are `focus/blur` events that allow to focus a window and catch the moment when the visitor switches elsewhere.\n\nIn the past evil pages abused those. For instance, look at this code:\n\n```js run\nwindow.onblur = () => window.focus();\n```\n\nWhen a user attempts to switch out of the window (`blur`), it brings it back to focus. The intention is to \"lock\" the user within the `window`.\n\nSo, there are limitations that forbid the code like that. There are many limitations to protect the user from ads and evils pages. They depend on the browser.\n\nFor instance, a mobile browser usually ignores that call completely. Also focusing doesn't work when a popup opens in a separate tab rather than a new window.\n\nStill, there are some things that can be done.\n\nFor instance:\n\n- When we open a popup, it's might be a good idea to run a `newWindow.focus()` on it. Just in case, for some OS/browser combinations it ensures that the user is in the new window now.\n- If we want to track when a visitor actually uses our web-app, we can track `window.onfocus/onblur`. That allows us to suspend/resume in-page activities, animations etc. But please note that the `blur` event means that the visitor switched out from the window, but he still may observe it. The window is in the background, but still may be visible.\n\n## Summary   \n\n- A popup can be opened by the `open(url, name, params)` call. It returns the reference to the newly opened window.\n- By default, browsers block `open` calls from the code outside of user actions. Usually a notification appears, so that a user may allow them.\n- The popup may access the opener window using the `window.opener` property, so the two are connected.\n- If the main window and the popup come from the same origin, they can freely read and modify each other. Otherwise, they can change location of each other and communicate using messages (to be covered).\n- To close the popup: use `close()` call. Also the user may close them (just like any other windows). The `window.closed` is `true` after that.\n- Methods `focus()` and `blur()` allow to focus/unfocus a window. Sometimes.\n- Events `focus` and `blur` allow to track switching in and out of the window. But please note that a  window may still be visible even in the background state, after `blur`.\n\nAlso if we open a popup, a good practice is to notify the user about it. An icon with the opening window can help the visitor to survive the focus shift and keep both windows in mind.","libs":[],"children":[],"parent":"frames-and-windows"}},"cross-window-communication":{"type":"Article","value":{"title":"Cross-window communication","slug":"cross-window-communication","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/4-frames-and-windows/03-cross-window-communication/article.md","isFolder":false,"weight":3,"content":"\nThe \"Same Origin\" (same site) policy limits access of windows and frame to each other.\n\nThe idea is that if we have two windows open: one from `john-smith.com`, and another one is `gmail.com`, then we wouldn't want a script from `john-smith.com` to read our mail.\n\n## Same Origin [#same-origin]\n\nTwo URLs are said to have the \"same origin\" if they have the same protocol, domain and port.\n\nThese URLs all share the same origin:\n\n- `http://site.com`\n- `http://site.com/`\n- `http://site.com/my/page.html`\n\nThese ones do not:\n\n- <code>http://<b>www.</b>site.com</code> (another domain: `www.` matters)\n- <code>http://<b>site.org</b></code> (another domain: `.org` matters)\n- <code><b>https://</b>site.com</code> (another protocol: `https`)\n- <code>http://site.com:<b>8080</b></code> (another port: `8080`)\n\nIf we have a reference to another window (a popup or iframe), and that window comes from the same origin, then we can do everything with it.\n\nIf it comes from another origin, then we can only change its location. Please note: not *read* the location, but *modify* it, redirect it to another place. That's safe, because the URL may contain sensitive parameters, so reading it from another origin is prohibited, but changing is not.\n\nAlso such windows may exchange messages. Soon about that later.\n\n````warn header=\"Exclusion: subdomains may be same-origin\"\n\nThere's an important exclusion in the same-origin policy.\n\nIf windows share the same second-level domain, for instance `john.site.com`, `peter.site.com` and `site.com`, we can use JavaScript to assign to `document.domain` their common second-level domain `site.com`. Then these windows are treated as having the same origin.\n\nIn other words, all such documents (including the one from `site.com`) should have the code:\n\n```js\ndocument.domain = 'site.com';\n```\n\nThen they can interact without limitations.\n\nThat's only possible for pages with the same second-level domain.\n````\n\n## Accessing an iframe contents\n\nAn `<iframe>` is a two-faced beast. From one side it's a tag, just like `<script>` or `<img>`. From the other side it's a window-in-window.\n\nThe embedded window has a separate `document` and `window` objects.\n\nWe can access them like using the properties:\n\n- `iframe.contentWindow` is a reference to the window inside the `<iframe>`.\n- `iframe.contentDocument` is a reference to the document inside the `<iframe>`.\n\nWhen we access an embedded window, the browser checks if the iframe has the same origin. If that's not so then the access is denied (with exclusions noted above).\n\nFor instance, here's an `<iframe>` from another origin:\n\n```html run\n<iframe src=\"https://example.com\" id=\"iframe\"></iframe>\n\n<script>\n  iframe.onload = function() {\n    // we can get the reference to the inner window\n    let iframeWindow = iframe.contentWindow;\n\n    try {\n      // ...but not to the document inside it\n      let doc = iframe.contentDocument;\n    } catch(e) {\n      alert(e); // Security Error (another origin)\n    }\n\n    // also we can't read the URL of the page in it\n    try {\n      alert(iframe.contentWindow.location);\n    } catch(e) {\n      alert(e); // Security Error\n    }\n\n    // ...but we can change it (and thus load something else into the iframe)!\n    iframe.contentWindow.location = '/'; // works\n\n    iframe.onload = null; // clear the handler, to run this code only once\n  };\n</script>\n```\n\nThe code above shows errors for any operations except:\n\n- Getting the reference to the inner window `iframe.contentWindow`\n- Changing its `location`.\n\n```smart header=\"`iframe.onload` vs `iframe.contentWindow.onload`\"\nThe `iframe.onload` event is actually the same as `iframe.contentWindow.onload`. It triggers when the embedded window fully loads with all resources.\n\n...But `iframe.onload` is always available, while `iframe.contentWindow.onload` needs the same origin.\n```\n\nAnd now an example with the same origin. We can do anything with the embedded window:\n\n```html run\n<iframe src=\"/\" id=\"iframe\"></iframe>\n\n<script>\n  iframe.onload = function() {\n    // just do anything\n    iframe.contentDocument.body.prepend(\"Hello, world!\");\n  };\n</script>\n```\n\n### Please wait until the iframe loads\n\nWhen an iframe is created, it immediately has a document. But that document is different from the one that finally loads into it!\n\nHere, look:\n\n\n```html run\n<iframe src=\"/\" id=\"iframe\"></iframe>\n\n<script>\n  let oldDoc = iframe.contentDocument;\n  iframe.onload = function() {\n    let newDoc = iframe.contentDocument;\n*!*\n    // the loaded document is not the same as initial!\n    alert(oldDoc == newDoc); // false\n*/!*\n  };\n</script>\n```\n\nThat's actually a well-known pitfall for novice developers. We shouldn't work with the document immediately, because that's the *wrong document*. If we set any event handlers on it, they will be ignored.\n\n...But the `onload` event triggers when the whole iframe with all resources is loaded. What if we want to act sooner, on `DOMContentLoaded` of the embedded document?\n\nThat's not possible if the iframe comes from another origin. But for the same origin we can try to catch the moment when a new document appears, and then setup necessary handlers, like this:\n\n```html run\n<iframe src=\"/\" id=\"iframe\"></iframe>\n\n<script>\n  let oldDoc = iframe.contentDocument;\n\n  // every 100 ms check if the document is the new one\n  let timer = setInterval(() => {\n    if (iframe.contentDocument == oldDoc) return;\n\n    // new document, let's set handlers\n    iframe.contentDocument.addEventListener('DOMContentLoaded', () => {\n      iframe.contentDocument.body.prepend('Hello, world!');\n    });\n\n    clearInterval(timer); // cancel setInterval, don't need it any more\n  }, 100);\n</script>\n```\n\nLet me know in comments if you know a better solution here.\n\n## window.frames\n\nAn alternative way to get a window object for `<iframe>` -- is to get it from the named collection  `window.frames`:\n\n- By number: `window.frames[0]` -- the window object for the first frame in the document.\n- By name: `window.frames.iframeName` -- the window object for the frame with  `name=\"iframeName\"`.\n\nFor instance:\n\n```html run\n<iframe src=\"/\" style=\"height:80px\" name=\"win\" id=\"iframe\"></iframe>\n\n<script>\n  alert(iframe.contentWindow == frames[0]); // true\n  alert(iframe.contentWindow == frames.win); // true\n</script>\n```\n\nAn iframe may have other iframes inside. The corresponding `window` objects form a hierarchy.\n\nNavigation links are:\n\n- `window.frames` -- the collection of \"children\" windows (for nested frames).\n- `window.parent` -- the reference to the \"parent\" (outer) window.\n- `window.top` -- the reference to the topmost parent window.\n\nFor instance:\n\n```js run\nwindow.frames[0].parent === window; // true\n```\n\nWe can use the `top` property to check if the current document is open inside a frame or not:\n\n```js run\nif (window == top) { // current window == window.top?\n  alert('The script is in the topmost window, not in a frame');\n} else {\n  alert('The script runs in a frame!');\n}\n```\n\n## The sandbox attribute\n\nThe `sandbox` attribute allows to forbid certain actions inside an `<iframe>`, to run an untrusted code. It \"sandboxes\" the iframe by treating it as coming from another origin and/or applying other limitations.\n\nBy default, for `<iframe sandbox src=\"...\">` the \"default set\" of restrictions is applied to the iframe. But we can provide a space-separated list of \"excluded\" limitations as a value of the attribute, like this: `<iframe sandbox=\"allow-forms allow-popups\">`. The listed limitations are not applied.\n\nIn other words, an empty `\"sandbox\"` attribute puts the strictest limitations possible, but we can put a space-delimited list of those that we want to lift.\n\nHere's a list of limitations:\n\n`allow-same-origin`\n: By default `\"sandbox\"` forces the \"different origin\" policy for the iframe. In other words, it makes the browser to treat the `iframe` as coming from another origin, even if its `src` points to the same site. With all implied restrictions for scripts. This option removes that feature.\n\n`allow-top-navigation`\n: Allows the `iframe` to change `parent.location`.\n\n`allow-forms`\n: Allows to submit forms from `iframe`.\n\n`allow-scripts`\n: Allows to run scripts from the `iframe`.\n\n`allow-popups`\n: Allows to `window.open` popups from the `iframe`\n\nSee [the manual](mdn:/HTML/Element/iframe) for more.\n\nThe example below demonstrates a sandboxed iframe with the default set of restrictions: `<iframe sandbox src=\"...\">`. It has some JavaScript and a form.\n\nPlease note that nothing works. So the default set is really harsh:\n\n[codetabs src=\"sandbox\" height=140]\n\n\n```smart\nThe purpose of the `\"sandbox\"` attribute is only to *add more* restrictions. It cannot remove them. In particular, it can't relax same-origin restrictions if the iframe comes from another origin.\n```\n\n## Cross-window messaging\n\nThe `postMessage` interface allows windows to talk to each other no matter which origin they are from.\n\nIt has two parts.\n\n### postMessage\n\nThe window that wants to send a message calls [postMessage](mdn:api/Window.postMessage) method of the receiving window. In other words, if we want to send the message to `win`, we should call  `win.postMessage(data, targetOrigin)`.\n\nArguments:\n\n`data`\n: The data to send. Can be any object, the data is cloned using the \"structured cloning algorithm\". IE supports only strings, so we should `JSON.stringify` complex objects to support that browser.\n\n`targetOrigin`\n: Specifies the origin for the target window, so that only a window from the given origin will get the message.\n\nThe `targetOrigin` is a safety measure. Remember, if the target window comes from another origin, we can't read it's `location`. So we can't be sure which site is open in the intended window right now: the user could navigate away.\n\nSpecifying `targetOrigin` ensures that the window only receives the data if it's still at that site. Good when the data is sensitive.\n\nFor instance, here `win` will only receive the message if it has a document from the origin `http://example.com`:\n\n```html no-beautify\n<iframe src=\"http://example.com\" name=\"example\">\n\n<script>\n  let win = window.frames.example;\n\n  win.postMessage(\"message\", \"http://example.com\");\n</script>\n```\n\nIf we don't want that check, we can set `targetOrigin` to `*`.\n\n```html no-beautify\n<iframe src=\"http://example.com\" name=\"example\">\n\n<script>\n  let win = window.frames.example;\n\n*!*\n  win.postMessage(\"message\", \"*\");\n*/!*\n</script>\n```\n\n\n### onmessage\n\nTo receive a message, the target window should have a handler on the `message` event. It triggers when `postMessage` is called (and `targetOrigin` check is successful).\n\nThe event object has special properties:\n\n`data`\n: The data from `postMessage`.\n\n`origin`\n: The origin of the sender, for instance `http://javascript.info`.\n\n`source`\n: The reference to the sender window. We can immediately `postMessage` back if we want.\n\nTo assign that handler, we should use `addEventListener`, a short syntax `window.onmessage` does not work.\n\nHere's an example:\n\n```js\nwindow.addEventListener(\"message\", function(event) {\n  if (event.origin != 'http://javascript.info') {\n    // something from an unknown domain, let's ignore it\n    return;\n  }\n\n  alert( \"received: \" + event.data );\n});\n```\n\nThe full example:\n\n[codetabs src=\"postmessage\" height=120]\n\n```smart header=\"There's no delay\"\nThere's totally no delay between `postMessage` and the `message` event. That happens synchronously, even faster than `setTimeout(...,0)`.\n```\n\n## Summary\n\nTo call methods and access the content of another window, we should first have a reference to it.\n\nFor popups we have two properties:\n- `window.open` -- opens a new window and returns a reference to it,\n- `window.opener` -- a reference to the opener window from a popup\n\nFor iframes, we can access parent/children windows using:\n- `window.frames` -- a collection of nested window objects,\n- `window.parent`, `window.top` are the references to parent and top windows,\n- `iframe.contentWindow` is the window inside an `<iframe>` tag.\n\nIf windows share the same origin (host, port, protocol), then windows can do whatever they want with each other.\n\nOtherwise, only possible actions are:\n- Change the location of another window (write-only access).\n- Post a message to it.\n\nExclusions are:\n- Windows that share the same second-level domain: `a.site.com` and `b.site.com`. Then setting `document.domain='site.com'` in both of them puts them into the \"same origin\" state.\n- If an iframe has a `sandbox` attribute, it is forcefully put into the \"different origin\" state, unless the `allow-same-origin` is specified in the attribute value. That can be used to run untrusted code in iframes from the same site.\n\nThe `postMessage` interface allows two windows to talk with security checks:\n\n1. The sender calls `targetWin.postMessage(data, targetOrigin)`.\n2. If `targetOrigin` is not `'*'`, then the browser checks if window `targetWin` has the URL from  `targetWin` site.\n3. If it is so, then `targetWin` triggers the `message` event with special properties:\n    - `origin` -- the origin of the sender window (like `http://my.site.com`)\n    - `source` -- the reference to the sender window.\n    - `data` -- the data, any object in everywhere except IE that supports only strings.\n\n    We should use `addEventListener` to set the handler for this event inside the target window.","libs":[],"children":[],"parent":"frames-and-windows"}},"clickjacking":{"type":"Article","value":{"title":"The clickjacking attack","slug":"clickjacking","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/4-frames-and-windows/06-clickjacking/article.md","isFolder":false,"weight":6,"content":"\nThe \"clickjacking\" attack allows an evil page to click on a \"victim site\" *on behalf of the visitor*.\n\nMany sites were hacked this way, including Twitter, Facebook, Paypal and other sites. They are all fixed, of course.\n\n## The idea\n\nThe idea is very simple.\n\nHere's how clickjacking was done with Facebook:\n\n1. A visitor is lured to the evil page. It doesn't matter how.\n2. The page has a harmless-looking link on it (like \"get rich now\" or \"click here, very funny\").\n3. Over that link the evil page positions a transparent `<iframe>` with `src` from facebook.com, in such a way that the \"Like\" button is right above that link. Usually that's done with `z-index`.\n4. In attempting to click the link, the visitor in fact clicks the button.\n\n## The demo\n\nHere's how the evil page looks. To make things clear, the `<iframe>` is half-transparent (in real evil pages it's fully transparent):\n\n```html run height=120 no-beautify\n<style>\niframe { /* iframe from the victim site */\n  width: 400px;\n  height: 100px;\n  position: absolute;\n  top:0; left:-20px;\n*!*\n  opacity: 0.5; /* in real opacity:0 */\n*/!*\n  z-index: 1;\n}\n</style>\n\n<div>Click to get rich now:</div>\n\n<!-- The url from the victim site -->\n*!*\n<iframe src=\"/clickjacking/facebook.html\"></iframe>\n\n<button>Click here!</button>\n*/!*\n\n<div>...And you're cool (I'm a cool hacker actually)!</div>\n```\n\nThe full demo of the attack:\n\n[codetabs src=\"clickjacking-visible\" height=160]\n\nHere we have a half-transparent `<iframe src=\"facebook.html\">`, and in the example we can see it hovering over the button. A click on the button actually clicks on the iframe, but that's not visible to the user, because the iframe is transparent.\n\nAs a result, if the visitor is authorized on Facebook (\"remember me\" is usually turned on), then it adds a \"Like\". On Twitter that would be a \"Follow\" button.\n\nHere's the same example, but closer to reality, with `opacity:0` for `<iframe>`:\n\n[codetabs src=\"clickjacking\" height=160]\n\nAll we need to attack -- is to position the `<iframe>` on the evil page in such a way that the button is right over the link. That's usually possible with CSS.\n\n```smart header=\"Clickjacking is for clicks, not for keyboard\"\nThe attack only affects mouse actions.\n\nTechnically, if we have a text field to hack, then we can position an iframe in such a way that text fields overlap each other. So when a visitor tries to focus on the input he sees on the page, he actually focuses on the input inside the iframe.\n\nBut then there's a problem. Everything that the visitor types will be hidden, because the iframe is not visible.\n\nPeople will usually stop typing when they can't see their new characters printing on the screen.\n```\n\n## Old-school defences (weak)\n\nThe oldest defence is a bit of JavaScript which forbids opening the page in a frame (so-called \"framebusting\").\n\nThat looks like this:\n\n```js\nif (top != window) {\n  top.location = window.location;\n}\n```\n\nThat is: if the window finds out that it's not on top, then it automatically makes itself the top.\n\nThis not a reliable defence, because there are many ways to hack around it. Let's cover a few.\n\n### Blocking top-navigation\n\nWe can block the transition caused by changing `top.location` in the [beforeunload](info:onload-ondomcontentloaded#window.onbeforeunload) event.\n\nThe top page (belonging to the hacker) sets a handler to it, and when the `iframe` tries to change `top.location` the visitor gets a message asking him whether he wants to leave.\n\nLike this:\n```js\nwindow.onbeforeunload = function() {\n  window.onbeforeunload = null;\n  return \"Want to leave without learning all the secrets (he-he)?\";\n};\n```\n\nIn most cases the visitor would answer negatively, because he doesn't know about the iframe, all he can see is the top page, leading him to think there is no reason to leave. So `top.location` won't change!\n\nIn action:\n\n[codetabs src=\"top-location\"]\n\n### Sandbox attribute\n\nOne of the things restricted by the `sandbox` attribute is navigation. A sandboxed iframe may not change `top.location`.\n\nSo we can add the iframe with `sandbox=\"allow-scripts allow-forms\"`. That would relax the restrictions, permitting scripts and forms. But we omit `allow-top-navigation` so that changing `top.location` is forbidden.\n\nHere's the code:\n\n```html\n<iframe *!*sandbox=\"allow-scripts allow-forms\"*/!* src=\"facebook.html\"></iframe>\n```\n\nThere are other ways to work around that simple protection too.\n\n## X-Frame-Options\n\nThe server-side header `X-Frame-Options` can permit or forbid displaying the page inside a frame.\n\nIt must be sent *by the server*: the browser will ignore it if found in a `<meta>` tag. So, `<meta http-equiv=\"X-Frame-Options\"...>` won't do anything.\n\nThe header may have 3 values:\n\n\n`DENY`\n: Never ever show the page inside a frame.\n\n`SAMEORIGIN`\n: Allow inside a frame if the parent document comes from the same origin.\n\n`ALLOW-FROM domain`\n: Allow inside a frame if the parent document is from the given domain.\n\nFor instance, Twitter uses `X-Frame-Options: SAMEORIGIN`. Here's the result:\n\n```html\n<iframe src=\"https://twitter.com\"></iframe>\n```\n\n<iframe src=\"https://twitter.com\"></iframe>\n\nDepending on your browser, the `iframe` above is either empty or alerting you that the browser won't permit that page to be navigating in this way.\n\n## Showing with disabled functionality\n\nThe `X-Frame-Options` header has a side-effect. Other sites won't be able to show our page in a frame, even if they have good reasons to do so.\n\nSo there are other solutions... For instance, we can \"cover\" the page with a `<div>` with `height: 100%; width: 100%;`, so that it intercepts all clicks. That `<div>` should disappear if `window == top` or if we figure out that we don't need the protection.\n\nSomething like this:\n\n```html\n<style>\n  #protector {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 99999999;\n  }\n</style>\n\n<div id=\"protector\">\n  <a href=\"/\" target=\"_blank\">Go to the site</a>\n</div>\n\n<script>\n  // there will be an error if top window is from the different origin\n  // but that's ok here\n  if (top.document.domain == document.domain) {\n    protector.remove();\n  }\n</script>\n```\n\nThe demo:\n\n[codetabs src=\"protector\"]\n\n## Summary\n\nClickjacking is a way to \"trick\" users into clicking on a malicious site without even knowing what's happening. That's dangerous if there are important click-activated actions.\n\nA hacker can post a link to his evil page in a message, or lure visitors to his page by some other means. There are many variations.\n\nFrom one perspective -- the attack is \"not deep\": all a hacker is doing is intercepting a single click. But from another perspective, if the hacker knows that after the click another control will appear, then he may use cunning messages to coerce the user into clicking on them as well.\n\nThe attack is quite dangerous, because when we engineer the UI we usually don't anticipate that a hacker may click on behalf of the visitor. So vulnerabilities can be found in totally unexpected places.\n\n- It is recommended to use `X-Frame-Options: SAMEORIGIN` on pages (or whole websites) which are not intended to be viewed inside frames.\n- Use a covering `<div>` if we want to allow our pages to be shown in iframes, but still stay safe.","libs":[],"children":[],"parent":"frames-and-windows"}},"regular-expressions":{"type":"Article","value":{"title":"Regular expressions","slug":"regular-expressions","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions","isFolder":true,"weight":5,"content":"\nRegular expressions is a powerful way of doing search and replace in strings.","libs":[],"children":["regexp-introduction","regexp-methods","regexp-character-classes","regexp-escaping","regexp-character-sets-and-ranges","regexp-unicode","regexp-quantifiers","regexp-greedy-and-lazy","regexp-groups","regexp-backreferences","regexp-alternation","regexp-anchors","regexp-multiline-mode","regexp-lookahead","regexp-infinite-backtracking-problem"]}},"regexp-introduction":{"type":"Article","value":{"title":"Patterns and flags","slug":"regexp-introduction","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/01-regexp-introduction/article.md","isFolder":false,"weight":1,"content":"\nRegular expressions is a powerful way of searching and replacing inside a string.\n\nIn JavaScript regular expressions are implemented using objects of a built-in `RegExp` class and integrated with strings.\n\nPlease note that regular expressions vary between programming languages. In this tutorial we concentrate on JavaScript. Of course there's a lot in common, but they are a somewhat different in Perl, Ruby, PHP etc.\n\n## Regular expressions\n\nA regular expression (also \"regexp\", or just \"reg\") consists of a *pattern* and optional *flags*.\n\nThere are two syntaxes to create a regular expression object.\n\nThe long syntax:\n\n```js\nregexp = new RegExp(\"pattern\", \"flags\");\n```\n\n...And the short one, using slashes `\"/\"`:\n\n```js\nregexp = /pattern/; // no flags\nregexp = /pattern/gmi; // with flags g,m and i (to be covered soon)\n```\n\nSlashes `\"/\"` tell JavaScript that we are creating a regular expression. They play the same role as quotes for strings.\n\n## Usage\n\nTo search inside a string, we can use method [search](mdn:js/String/search).\n\nHere's an example:\n\n```js run\nlet str = \"I love JavaScript!\"; // will search here\n\nlet regexp = /love/;\nalert( str.search(regexp) ); // 2\n```\n\nThe `str.search` method looks for the pattern `pattern:/love/` and returns the position inside the string. As we might guess, `pattern:/love/` is the simplest possible pattern. What it does is a simple substring search.\n\nThe code above is the same as:\n\n```js run\nlet str = \"I love JavaScript!\"; // will search here\n\nlet substr = 'love';\nalert( str.search(substr) ); // 2\n```\n\nSo searching for `pattern:/love/` is the same as searching for `\"love\"`.\n\nBut that's only for now. Soon we'll create more complex regular expressions with much searching more power.\n\n```smart header=\"Colors\"\nFrom here on the color scheme is:\n\n- regexp -- `pattern:red`\n- string (where we search) -- `subject:blue`\n- result -- `match:green`\n```\n\n\n````smart header=\"When to use `new RegExp`?\"\nNormally we use the short syntax `/.../`. But it does not allow any variables insertions, so we must know the exact regexp at the time of writing the code.\n\nFrom the other hand, `new RegExp` allows to construct a pattern dynamically from a string.\n\nSo we can figure out what we need to search and create `new RegExp` from it:\n\n```js run\nlet search = prompt(\"What you want to search?\", \"love\");\nlet regexp = new RegExp(search);\n\n// find whatever the user wants\nalert( \"I love JavaScript\".search(regexp));\n```\n````\n\n\n## Flags\n\nRegular expressions may have flags that affect the search.\n\nThere are only 5 of them in JavaScript:\n\n`i`\n: With this flag the search is case-insensitive: no difference between `A` and `a` (see the example below).\n\n`g`\n: With this flag the search looks for all matches, without it -- only the first one (we'll see uses in the next chapter).\n\n`m`\n: Multiline mode (covered in the chapter <info:regexp-multiline>).\n\n`u`\n: Enables full unicode support. The flag enables correct processing of surrogate pairs. More about that in the chapter <info:regexp-unicode>.\n\n`y`\n: Sticky mode (covered in the [next chapter](info:regexp-methods#y-flag))\n\n\n## The \"i\" flag\n\nThe simplest flag is `i`.\n\nAn example with it:\n\n```js run\nlet str = \"I love JavaScript!\";\n\nalert( str.search(/LOVE/) ); // -1 (not found)\nalert( str.search(/LOVE/i) ); // 2\n```\n\n1. The first search returns `-1` (not found), because the search is case-sensitive by default.\n2. With the flag `pattern:/LOVE/i` the search found `match:love` at position 2.\n\nSo the `i` flag already makes regular expressions more powerful than a simple substring search. But there's so much more. We'll cover other flags and features in the next chapters.\n\n\n## Summary\n\n- A regular expression consists of a pattern and optional flags: `g`, `i`, `m`, `u`, `y`.\n- Without flags and special symbols that we'll study later, the search by a regexp is the same as a  substring search.\n- The method `str.search(regexp)` returns the index where the match is found or `-1` if there's no match.","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-methods":{"type":"Article","value":{"title":"Methods of RegExp and String","slug":"regexp-methods","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/02-regexp-methods/article.md","isFolder":false,"weight":2,"content":"\nThere are two sets of methods to deal with regular expressions.\n\n1. First, regular expressions are objects of the built-in [RegExp](mdn:js/RegExp) class, it provides many methods.\n2. Besides that, there are methods in regular strings can work with regexps.\n\nThe structure is a bit messed up, so we'll first consider methods separately, and then -- practical recipes for common tasks.\n\n## str.search(reg)\n\nWe've seen this method already. It returns the position of the first match or `-1` if none found:\n\n```js run\nlet str = \"A drop of ink may make a million think\";\n\nalert( str.search( *!*/a/i*/!* ) ); // 0 (the first position)\n```\n\n**The important limitation: `search` always looks for the first match.**\n\nWe can't find next positions using `search`, there's just no syntax for that. But there are other methods that can.\n\n## str.match(reg), no \"g\" flag\n\nThe method `str.match` behavior varies depending on the `g` flag. First let's see the case without it.\n\nThen `str.match(reg)` looks for the first match only.\n\nThe result is an array with that match and additional properties:\n\n- `index` -- the position of the match inside the string,\n- `input` -- the subject string.\n\nFor instance:\n\n```js run\nlet str = \"Fame is the thirst of youth\";\n\nlet result = str.match( *!*/fame/i*/!* );\n\nalert( result[0] );    // Fame (the match)\nalert( result.index ); // 0 (at the zero position)\nalert( result.input ); // \"Fame is the thirst of youth\" (the string)\n```\n\nThe array may have more than one element.\n\n**If a part of the pattern is delimited by parentheses `(...)`, then it becomes a separate element of the array.**\n\nFor instance:\n\n```js run\nlet str = \"JavaScript is a programming language\";\n\nlet result = str.match( *!*/JAVA(SCRIPT)/i*/!* );\n\nalert( result[0] ); // JavaScript (the whole match)\nalert( result[1] ); // script (the part of the match that corresponds to the parentheses)\nalert( result.index ); // 0\nalert( result.input ); // JavaScript is a programming language\n```\n\nDue to the `i` flag the search is case-insensitive, so it finds `match:JavaScript`. The part of the match that corresponds to `pattern:SCRIPT` becomes a separate array item.\n\nWe'll be back to parentheses later in the chapter <info:regexp-groups>. They are great for search-and-replace.\n\n## str.match(reg) with \"g\" flag\n\nWhen there's a `\"g\"` flag, then `str.match` returns an array of all matches. There are no additional properties in that array, and parentheses do not create any elements.\n\nFor instance:\n\n```js run\nlet str = \"HO-Ho-ho!\";\n\nlet result = str.match( *!*/ho/ig*/!* );\n\nalert( result ); // HO, Ho, ho (all matches, case-insensitive)\n```\n\nWith parentheses nothing changes, here we go:\n\n```js run\nlet str = \"HO-Ho-ho!\";\n\nlet result = str.match( *!*/h(o)/ig*/!* );\n\nalert( result ); // HO, Ho, ho\n```\n\nSo, with `g` flag the `result` is a simple array of matches. No additional properties.\n\nIf we want to get information about match positions and use parentheses then we should use  [RegExp#exec](mdn:js/RegExp/exec) method that we'll cover below.\n\n````warn header=\"If there are no matches, the call to `match` returns `null`\"\nPlease note, that's important. If there were no matches, the result is not an empty array, but `null`.\n\nKeep that in mind to evade pitfalls like this:\n\n```js run\nlet str = \"Hey-hey-hey!\";\n\nalert( str.match(/ho/gi).length ); // error! there's no length of null\n```\n````\n\n## str.split(regexp|substr, limit)\n\nSplits the string using the regexp (or a substring) as a delimiter.\n\nWe already used `split` with strings, like this:\n\n```js run\nalert('12-34-56'.split('-')) // [12, 34, 56]\n```\n\nBut we can also pass a regular expression:\n\n```js run\nalert('12-34-56'.split(/-/)) // [12, 34, 56]\n```\n\n## str.replace(str|reg, str|func)\n\nThe swiss army knife for search and replace in strings.\n\nThe simplest use -- search and replace a substring, like this:\n\n```js run\n// replace a dash by a colon\nalert('12-34-56'.replace(\"-\", \":\")) // 12:34-56\n```\n\nWhen the first argument of `replace` is a string, it only looks for the first match.\n\nTo find all dashes, we need to use not the string `\"-\"`, but a regexp `pattern:/-/g`, with an obligatory `g` flag:\n\n```js run\n// replace all dashes by a colon\nalert( '12-34-56'.replace( *!*/-/g*/!*, \":\" ) )  // 12:34:56\n```\n\nThe second argument is a replacement string.\n\nWe can use special characters in it:\n\n| Symbol | Inserts |\n|--------|--------|\n|`$$`|`\"$\"` |\n|`$&`|the whole match|\n|<code>$&#096;</code>|a part of the string before the match|\n|`$'`|a part of the string after the match|\n|`$n`|if `n` is a 1-2 digit number, then it means the contents of n-th parentheses counting from left to right|\n\nFor instance let's use `$&` to replace all entries of `\"John\"` by `\"Mr.John\"`:\n\n```js run\nlet str = \"John Doe, John Smith and John Bull.\";\n\n// for each John - replace it with Mr. and then John\nalert(str.replace(/John/g, 'Mr.$&'));\n// \"Mr.John Doe, Mr.John Smith and Mr.John Bull.\";\n```\n\nParentheses are very often used together with `$1`, `$2`, like this:\n\n```js run\nlet str = \"John Smith\";\n\nalert(str.replace(/(John) (Smith)/, '$2, $1')) // Smith, John\n```\n\n**For situations that require \"smart\" replacements, the second argument can be a function.**\n\nIt will be called for each match, and its result will be inserted as a replacement.\n\nFor instance:\n\n```js run\nlet i = 0;\n\n// replace each \"ho\" by the result of the function\nalert(\"HO-Ho-ho\".replace(/ho/gi, function() {\n  return ++i;\n})); // 1-2-3\n```\n\nIn the example above the function just returns the next number every time, but usually the result is based on the match.\n\nThe function is called with arguments `func(str, p1, p2, ..., pn, offset, s)`:\n\n1. `str` -- the match,\n2. `p1, p2, ..., pn` -- contents of parentheses (if there are any),\n3. `offset` -- position of the match,\n4. `s` -- the source string.\n\nIf there are no parentheses in the regexp, then the function always has 3 arguments: `func(str, offset, s)`.\n\nLet's use it to show full information about matches:\n\n```js run\n// show and replace all matches\nfunction replacer(str, offset, s) {\n  alert(`Found ${str} at position ${offset} in string ${s}`);\n  return str.toLowerCase();\n}\n\nlet result = \"HO-Ho-ho\".replace(/ho/gi, replacer);\nalert( 'Result: ' + result ); // Result: ho-ho-ho\n\n// shows each match:\n// Found HO at position 0 in string HO-Ho-ho\n// Found Ho at position 3 in string HO-Ho-ho\n// Found ho at position 6 in string HO-Ho-ho\n```\n\nIn the example below there are two parentheses, so `replacer` is called with 5 arguments: `str` is the full match, then parentheses, and then `offset` and `s`:\n\n```js run\nfunction replacer(str, name, surname, offset, s) {\n  // name is the first parentheses, surname is the second one\n  return surname + \", \" + name;\n}\n\nlet str = \"John Smith\";\n\nalert(str.replace(/(John) (Smith)/, replacer)) // Smith, John\n```\n\nUsing a function gives us the ultimate replacement power, because it gets all the information about the match, has access to outer variables and can do everything.\n\n## regexp.test(str)\n\nLet's move on to the methods of `RegExp` class, that are callable on regexps themselves.\n\nThe `test` method looks for any match and returns `true/false` whether he found it.\n\nSo it's basically the same as `str.search(reg) != -1`, for instance:\n\n```js run\nlet str = \"I love JavaScript\";\n\n// these two tests do the same\nalert( *!*/love/i*/!*.test(str) ); // true\nalert( str.search(*!*/love/i*/!*) != -1 ); // true\n```\n\nAn example with the negative answer:\n\n```js run\nlet str = \"Bla-bla-bla\";\n\nalert( *!*/love/i*/!*.test(str) ); // false\nalert( str.search(*!*/love/i*/!*) != -1 ); // false\n```\n\n## regexp.exec(str)\n\nWe've already seen these searching methods:\n\n- `search` -- looks for the position of the match,\n- `match` -- if there's no `g` flag, returns the first match with parentheses,\n- `match` -- if there's a `g` flag -- returns all matches, without separating parentheses.\n\nThe `regexp.exec` method is a bit harder to use, but it allows to search all matches with parentheses and positions.\n\nIt behaves differently depending on whether the regexp has the `g` flag.\n\n- If there's no `g`, then `regexp.exec(str)` returns the first match, exactly as `str.match(reg)`.\n- If there's `g`, then `regexp.exec(str)` returns the first match and *remembers* the position after it in `regexp.lastIndex` property. The next call starts to search from `regexp.lastIndex` and returns the next match. If there are no more matches then `regexp.exec` returns `null` and `regexp.lastIndex` is set to `0`.\n\nAs we can see, the method gives us nothing new if we use it without the `g` flag, because `str.match` does exactly the same.\n\nBut the `g` flag allows to get all matches with their positions and parentheses groups.\n\nHere's the example how subsequent `regexp.exec` calls return matches one by one:\n\n```js run\nlet str = \"A lot about JavaScript at https://javascript.info\";\n\nlet regexp = /JAVA(SCRIPT)/ig;\n\n*!*\n// Look for the first match\n*/!*\nlet matchOne = regexp.exec(str);\nalert( matchOne[0] ); // JavaScript\nalert( matchOne[1] ); // script\nalert( matchOne.index ); // 12 (the position of the match)\nalert( matchOne.input ); // the same as str\n\nalert( regexp.lastIndex ); // 22 (the position after the match)\n\n*!*\n// Look for the second match\n*/!*\nlet matchTwo = regexp.exec(str); // continue searching from regexp.lastIndex\nalert( matchTwo[0] ); // javascript\nalert( matchTwo[1] ); // script\nalert( matchTwo.index ); // 34 (the position of the match)\nalert( matchTwo.input ); // the same as str\n\nalert( regexp.lastIndex ); // 44 (the position after the match)\n\n*!*\n// Look for the third match\n*/!*\nlet matchThree = regexp.exec(str); // continue searching from regexp.lastIndex\nalert( matchThree ); // null (no match)\n\nalert( regexp.lastIndex ); // 0 (reset)\n```\n\nAs we can see, each `regexp.exec` call returns the match in a \"full format\": as an array with parentheses, `index` and `input` properties.\n\nThe main use case for `regexp.exec` is to find all matches in a loop:\n\n```js run\nlet str = 'A lot about JavaScript at https://javascript.info';\n\nlet regexp = /javascript/ig;\n\nlet result;\n\nwhile (result = regexp.exec(str)) {\n  alert( `Found ${result[0]} at ${result.index}` );\n}\n```\n\nThe loop continues until `regexp.exec` returns `null` that means \"no more matches\".\n\n````smart header=\"Search from the given position\"\nWe can force `regexp.exec` to start searching from the given position by setting `lastIndex` manually:\n\n```js run\nlet str = 'A lot about JavaScript at https://javascript.info';\n\nlet regexp = /javascript/ig;\nregexp.lastIndex = 30;\n\nalert( regexp.exec(str).index ); // 34, the search starts from the 30th position\n```\n````\n\n## The \"y\" flag [#y-flag]\n\nThe `y` flag means that the search should find a match exactly at the position specified by the property `regexp.lastIndex` and only there.\n\nIn other words, normally the search is made in the whole string: `pattern:/javascript/` looks for \"javascript\" everywhere in the string.\n\nBut when a regexp has the `y` flag, then it only looks for the match at the position specified in `regexp.lastIndex` (`0` by default).\n\nFor instance:\n\n```js run\nlet str = \"I love JavaScript!\";\n\nlet reg = /javascript/iy;\n\nalert( reg.lastIndex ); // 0 (default)\nalert( str.match(reg) ); // null, not found at position 0\n\nreg.lastIndex = 7;\nalert( str.match(reg) ); // JavaScript (right, that word starts at position 7)\n\n// for any other reg.lastIndex the result is null\n```\n\nThe regexp `pattern:/javascript/iy` can only be found if we set `reg.lastIndex=7`, because due to `y` flag the engine only tries to find it in the single place within a string -- from the `reg.lastIndex` position.\n\nSo, what's the point? Where do we apply that?\n\nThe reason is performance.\n\nThe `y` flag works great for parsers -- programs that need to \"read\" the text and build in-memory syntax structure or perform actions from it. For that we move along the text and apply regular expressions to see what we have next: a string? A number? Something else?\n\nThe `y` flag allows to apply a regular expression (or many of them one-by-one) exactly at the given position and when we understand what's there, we can move on -- step by step examining the text.\n\nWithout the flag the regexp engine always searches till the end of the text, that takes time, especially if the text is large. So our parser would be very slow. The `y` flag is exactly the right thing here.\n\n## Summary, recipes\n\nMethods become much easier to understand if we separate them by their use in real-life tasks.\n\nTo search for the first match only:\n: - Find the position of the first match -- `str.search(reg)`.\n- Find the full match -- `str.match(reg)`.\n- Check if there's a match -- `regexp.test(str)`.\n- Find the match from the given position -- `regexp.exec(str)`, set `regexp.lastIndex` to position.\n\nTo search for all matches:\n: - An array of matches -- `str.match(reg)`, the regexp with `g` flag.\n- Get all matches with full information about each one -- `regexp.exec(str)` with `g` flag in the loop.\n\nTo search and replace:\n: - Replace with another string or a function result -- `str.replace(reg, str|func)`\n\nTo split the string:\n: - `str.split(str|reg)`\n\nWe also covered two flags:\n\n- The `g` flag to find all matches (global search),\n- The `y` flag to search at exactly the given position inside the text.\n\nNow we know the methods and can use regular expressions. But we need to learn their syntax, so let's move on.","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-character-classes":{"type":"Article","value":{"title":"Character classes","slug":"regexp-character-classes","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/03-regexp-character-classes/article.md","isFolder":false,"weight":3,"content":"\nConsider a practical task -- we have a phone number `\"+7(903)-123-45-67\"`, and we need to find all digits in that string. Other characters do not interest us.\n\nA character class is a special notation that matches any symbol from the set.\n\nFor instance, there's a \"digit\" class. It's written as `\\d`. We put it in the pattern, and during the search any digit matches it.\n\nFor instance, the regexp `pattern:/\\d/` looks for a single digit:\n\n```js run\nlet str = \"+7(903)-123-45-67\";\n\nlet reg = /\\d/;\n\nalert( str.match(reg) ); // 7\n```\n\nThe regexp is not global in the example above, so it only looks for the first match.\n\nLet's add the `g` flag to look for all digits:\n\n```js run\nlet str = \"+7(903)-123-45-67\";\n\nlet reg = /\\d/g;\n\nalert( str.match(reg) ); // array of matches: 7,9,0,3,1,2,3,4,5,6,7\n```\n\n## Most used classes: \\d \\s \\w\n\nThat was a character class for digits. There are other character classes as well.\n\nMost used are:\n\n`\\d` (\"d\" is from \"digit\")\n: A digit: a character from `0` to `9`.\n\n`\\s` (\"s\" is from \"space\")\n: A space symbol: that includes spaces, tabs, newlines.\n\n`\\w` (\"w\" is from \"word\")\n: A \"wordly\" character: either a letter of English alphabet or a digit or an underscore. Non-english letters (like cyrillic or hindi) do not belong to `\\w`.\n\nFor instance, `pattern:\\d\\s\\w` means a digit followed by a space character followed by a wordly character, like `\"1 Z\"`.\n\nA regexp may contain both regular symbols and character classes.\n\nFor instance, `pattern:CSS\\d` matches a string `match:CSS` with a digit after it:\n\n```js run\nlet str = \"CSS4 is cool\";\nlet reg = /CSS\\d/\n\nalert( str.match(reg) ); // CSS4\n```\n\nAlso we can use many character classes:\n\n```js run\nalert( \"I love HTML5!\".match(/\\s\\w\\w\\w\\w\\d/) ); // 'HTML5'\n```\n\nThe match (each character class corresponds to one result character):\n\n![](love-html5-classes.png)\n\n## Word boundary: \\b\n\nThe word boundary `pattern:\\b` -- is a special character class.\n\nIt does not denote a character, but rather a boundary between characters.\n\nFor instance, `pattern:\\bJava\\b` matches `match:Java` in the string `subject:Hello, Java!`, but not in the script `subject:Hello, JavaScript!`.\n\n```js run\nalert( \"Hello, Java!\".match(/\\bJava\\b/) ); // Java\nalert( \"Hello, JavaScript!\".match(/\\bJava\\b/) ); // null\n```\n\nThe boundary has \"zero width\" in a sense that usually a character class means a character in the result (like a wordly or a digit), but not in this case.\n\nThe boundary is a test.\n\nWhen regular expression engine is doing the search, it's moving along the string in an attempt to find the match. At each string position it tries to find the pattern.\n\nWhen the pattern contains `pattern:\\b`, it tests that the position in string fits one of the conditions:\n\n- String start, and the first string character is `\\w`.\n- String end, and the last string character is `\\w`.\n- Inside the string: from one side is `\\w`, from the other side -- not `\\w`.\n\nFor instance, in the string `subject:Hello, Java!` the following positions match `\\b`:\n\n![](hello-java-boundaries.png)\n\nSo it matches `pattern:\\bHello\\b` and `pattern:\\bJava\\b`, but not `pattern:\\bHell\\b` (because there's no word boundary after `l`) and not `Java!\\b` (because the exclamation sign is not a wordly character, so there's no word boundary after it).\n\n```js run\nalert( \"Hello, Java!\".match(/\\bHello\\b/) ); // Hello\nalert( \"Hello, Java!\".match(/\\bJava\\b/) );  // Java\nalert( \"Hello, Java!\".match(/\\bHell\\b/) );  // null\nalert( \"Hello, Java!\".match(/\\bJava!\\b/) ); // null\n```\n\nOnce again let's note that `pattern:\\b` makes the searching engine to test for the boundary, so that `pattern:Java\\b` finds `match:Java` only when followed by a word boundary, but it does not add a letter to the result.\n\nUsually we use `\\b` to find standalone English words. So that if we want `\"Java\"` language then `pattern:\\bJava\\b` finds exactly a standalone word and ignores it when it's a part of `\"JavaScript\"`.\n\nAnother example: a regexp `pattern:\\b\\d\\d\\b` looks for standalone two-digit numbers. In other words, it requires that before and after `pattern:\\d\\d` must be a symbol different from `\\w` (or beginning/end of the string).\n\n```js run\nalert( \"1 23 456 78\".match(/\\b\\d\\d\\b/g) ); // 23,78\n```\n\n```warn header=\"Word boundary doesn't work for non-English alphabets\"\nThe word boundary check `\\b` tests for a boundary between `\\w` and something else. But `\\w` means an English letter (or a digit or an underscore), so the test won't work for other characters (like cyrillic or hieroglyphs).\n```\n\n\n## Reverse classes\n\nFor every character class there exists a \"reverse class\", denoted with the same letter, but uppercased.\n\nThe \"reverse\" means that it matches all other characters, for instance:\n\n`\\D`\n: Non-digit: any character except `\\d`, for instance a letter.\n\n`\\S`\n: Non-space: any character except `\\s`, for instance a letter.\n\n`\\W`\n: Non-wordly character: anything but `\\w`.\n\n`\\B`\n: Non-boundary: a test reverse to `\\b`.\n\nIn the beginning of the chapter we saw how to get all digits from the phone `subject:+7(903)-123-45-67`. Let's get a \"pure\" phone number from the string:\n\n```js run\nlet str = \"+7(903)-123-45-67\";\n\nalert( str.match(/\\d/g).join('') ); // 79031234567\n```\n\nAn alternative way would be to find non-digits and remove them from the string:\n\n\n```js run\nlet str = \"+7(903)-123-45-67\";\n\nalert( str.replace(/\\D/g, \"\") ); // 79031234567\n```\n\n## Spaces are regular characters\n\nPlease note that regular expressions may include spaces. They are treated like regular characters.  \n\nUsually we pay little attention to spaces. For us strings `subject:1-5` and `subject:1 - 5` are nearly identical.\n\nBut if a regexp does not take spaces into account, it won' work.\n\nLet's try to find digits separated by a dash:\n\n```js run\nalert( \"1 - 5\".match(/\\d-\\d/) ); // null, no match!\n```\n\nHere we fix it by adding spaces into the regexp:\n\n```js run\nalert( \"1 - 5\".match(/\\d - \\d/) ); // 1 - 5, now it works\n```\n\nOf course, spaces are needed only if we look for them. Extra spaces (just like any other extra characters) may prevent a match:\n\n```js run\nalert( \"1-5\".match(/\\d - \\d/) ); // null, because the string 1-5 has no spaces\n```\n\nIn other words, in a regular expression all characters matter. Spaces too.\n\n## A dot is any character\n\nThe dot `\".\"` is a special character class that matches *any character except a newline*.\n\nFor instance:\n\n```js run\nalert( \"Z\".match(/./) ); // Z\n```\n\nOr in the middle of a regexp:\n\n```js run\nlet reg = /CS.4/;\n\nalert( \"CSS4\".match(reg) ); // CSS4\nalert( \"CS-4\".match(reg) ); // CS-4\nalert( \"CS 4\".match(reg) ); // CS 4 (space is also a character)\n```\n\nPlease note that the dot means \"any character\", but not the \"absense of a character\". There must be a character to match it:\n\n```js run\nalert( \"CS4\".match(/CS.4/) ); // null, no match because there's no character for the dot\n```\n\n\n## Summary\n\nWe covered character classes:\n\n- `\\d` -- digits.\n- `\\D` -- non-digits.\n- `\\s` -- space symbols, tabs, newlines.\n- `\\S` -- all but `\\s`.\n- `\\w` -- English letters, digits, underscore `'_'`.\n- `\\W` -- all but `\\w`.\n- `'.'` -- any character except a newline.\n\nIf we want to search for a character that has a special meaning like a backslash or a dot, then we should escape it with a backslash: `pattern:\\.`\n\nPlease note that a regexp may also contain string special characters such as a newline `\\n`. There's no conflict with character classes, because other letters are used for them.","libs":[],"children":["find-time-hh-mm"],"parent":"regular-expressions"}},"find-time-hh-mm":{"type":"Task","value":{"title":"Find the time","slug":"find-time-hh-mm","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/03-regexp-character-classes/1-find-time-hh-mm","weight":1,"libs":[],"content":"\nThe time has a format: `hours:minutes`. Both hours and minutes has two digits, like `09:00`.\n\nMake a regexp to find time in the string: `subject:Breakfast at 09:00 in the room 123:456.`\n\nP.S. In this task there's no need to check time correctness yet, so `25:99` can also be a valid result.\nP.P.S. The regexp shouldn't match `123:456`.","solution":"The answer: `pattern:\\b\\d\\d:\\d\\d\\b`.\n\n```js run\nalert( \"Breakfast at 09:00 in the room 123:456.\".match( /\\b\\d\\d:\\d\\d\\b/ ) ); // 09:00\n```","parent":"regexp-character-classes"}},"regexp-escaping":{"type":"Article","value":{"title":"Escaping, special characters","slug":"regexp-escaping","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/04-regexp-escaping/article.md","isFolder":false,"weight":4,"content":"\nAs we've seen, a backslash `\"\\\"` is used to denote character classes. So it's a special character.\n\nThere are other special characters as well, that have special meaning in a regexp. They are used to do more powerful searches.\n\nHere's a full list of them: `pattern:[ \\ ^ $ . | ? * + ( )`.\n\nDon't try to remember it -- when we deal with each of them separately, you'll know it by heart automatically.\n\n## Escaping\n\nTo use a special character as a regular one, prepend it with a backslash.\n\nThat's also called \"escaping a character\".\n\nFor instance, we need to find a dot `pattern:'.'`. In a regular expression a dot means \"any character except a newline\", so if we really mean \"a dot\", let's put a backslash before it: `pattern:\\.`.\n\n```js run\nalert( \"Chapter 5.1\".match(/\\d\\.\\d/) ); // 5.1\n```\n\nParentheses are also special characters, so if we want them, we should use `pattern:\\(`. The example below looks for a string `\"g()\"`:\n\n```js run\nalert( \"function g()\".match(/g\\(\\)/) ); // \"g()\"\n```\n\nIf we're looking for a backslash `\\`, then we should double it:\n\n```js run\nalert( \"1\\\\2\".match(/\\\\/) ); // '\\'\n```\n\n## A slash\n\nThe slash symbol `'/'` is not a special character, but in JavaScript it is used to open and close the regexp: `pattern:/...pattern.../`, so we should escape it too.\n\nHere's what a search for a slash `'/'` looks like:\n\n```js run\nalert( \"/\".match(/\\//) ); // '/'\n```\n\nFrom the other hand, the alternative `new RegExp` syntaxes does not require escaping it:\n\n```js run\nalert( \"/\".match(new RegExp(\"/\")) ); // '/'\n```\n\n## new RegExp\n\nIf we are creating a regular expression with `new RegExp`, then we need to do some more escaping.\n\nFor instance, consider this:\n\n```js run\nlet reg = new RegExp(\"\\d\\.\\d\");\n\nalert( \"Chapter 5.1\".match(reg) ); // null\n```\n\nIt doesn't work, but why?\n\nThe reason is string escaping rules. Look here:\n\n```js run\nalert(\"\\d\\.\\d\"); // d.d\n```\n\nBackslashes are used for escaping inside a string and string-specific special characters like `\\n`. The quotes \"consume\" and interpret them, for instance:\n\n- `\\n` -- becomes a newline character,\n- `\\u1234` -- becomes the Unicode character with such code,\n- ...And when there's no special meaning: like `\\d` or `\\z`, then the backslash is simply removed.\n\nSo the call to `new RegExp` gets a string without backslashes.\n\nTo fix it, we need to double backslashes, because quotes turn `\\\\` into `\\`:\n\n```js run\n*!*\nlet regStr = \"\\\\d\\\\.\\\\d\";\n*/!*\nalert(regStr); // \\d\\.\\d (correct now)\n\nlet reg = new RegExp(regStr);\n\nalert( \"Chapter 5.1\".match(reg) ); // 5.1\n```","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-character-sets-and-ranges":{"type":"Article","value":{"title":"Sets and ranges [...]","slug":"regexp-character-sets-and-ranges","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/05-regexp-character-sets-and-ranges/article.md","isFolder":false,"weight":5,"content":"\nSeveral characters or character classes inside square brackets `[…]` mean to \"search for any character among given\".\n\n## Sets\n\nFor instance, `pattern:[eao]` means any of the 3 characters: `'a'`, `'e'`, or `'o'`.\n\nThat's called a *set*. Sets can be used in a regexp along with regular characters:\n\n```js run\n// find [t or m], and then \"op\"\nalert( \"Mop top\".match(/[tm]op/gi) ); // \"Mop\", \"top\"\n```\n\nPlease note that although there are multiple characters in the set, they correspond to exactly one character in the match.\n\nSo the example above gives no matches:\n\n```js run\n// find \"V\", then [o or i], then \"la\"\nalert( \"Voila\".match(/V[oi]la/) ); // null, no matches\n```\n\nThe pattern assumes:\n\n- `pattern:V`,\n- then *one* of the letters `pattern:[oi]`,\n- then `pattern:la`.\n\nSo there would be a match for `match:Vola` or `match:Vila`.\n\n## Ranges\n\nSquare brackets may also contain *character ranges*.\n\nFor instance, `pattern:[a-z]` is a character in range from `a` to `z`, and `pattern:[0-5]` is a digit from `0` to `5`.\n\nIn the example below we're searching for `\"x\"` followed by two digits or letters from `A` to `F`:\n\n```js run\nalert( \"Exception 0xAF\".match(/x[0-9A-F][0-9A-F]/g) ); // xAF\n```\n\nPlease note that in the word `subject:Exception` there's a substring `subject:xce`. It didn't match the pattern, because the letters are lowercase, while in the set `pattern:[0-9A-F]` they are uppercase.\n\nIf we want to find it too, then we can add a range `a-f`: `pattern:[0-9A-Fa-f]`. The `i` flag would allow lowercase too.\n\n**Character classes are shorthands for certain character sets.**\n\nFor instance:\n\n- **\\d** -- is the same as `pattern:[0-9]`,\n- **\\w** -- is the same as `pattern:[a-zA-Z0-9_]`,\n- **\\s** -- is the same as `pattern:[\\t\\n\\v\\f\\r ]` plus few other unicode space characters.\n\nWe can use character classes inside `[…]` as well.\n\nFor instance, we want to match all wordly characters or a dash, for words like \"twenty-third\". We can't do it with `pattern:\\w+`, because `pattern:\\w` class does not include a dash. But we can use `pattern:[\\w-]`.\n\nWe also can use a combination of classes to cover every possible character, like `pattern:[\\s\\S]`. That matches spaces or non-spaces -- any character. That's wider than a dot `\".\"`, because the dot matches any character except a newline.\n\n## Excluding ranges\n\nBesides normal ranges, there are \"excluding\" ranges that look like `pattern:[^…]`.\n\nThey are denoted by a caret character `^` at the start and match any character *except the given ones*.\n\nFor instance:\n\n- `pattern:[^aeyo]` -- any character except  `'a'`, `'e'`, `'y'` or `'o'`.\n- `pattern:[^0-9]` -- any character except a digit, the same as `\\D`.\n- `pattern:[^\\s]` -- any non-space character, same as `\\S`.\n\nThe example below looks for any characters except letters, digits and spaces:\n\n```js run\nalert( \"alice15@gmail.com\".match(/[^\\d\\sA-Z]/gi) ); // @ and .\n```\n\n## No escaping in […]\n\nUsually when we want to find exactly the dot character, we need to escape it like `pattern:\\.`. And if we need a backslash, then we use `pattern:\\\\`.\n\nIn square brackets the vast majority of special characters can be used without escaping:\n\n- A dot `pattern:'.'`.\n- A plus `pattern:'+'`.\n- Parentheses `pattern:'( )'`.\n- Dash `pattern:'-'` in the beginning or the end (where it does not define a range).\n- A caret `pattern:'^'` if not in the beginning (where it means exclusion).\n- And the opening square bracket `pattern:'['`.\n\nIn other words, all special characters are allowed except where they mean something for square brackets.\n\nA dot `\".\"` inside square brackets means just a dot. The pattern `pattern:[.,]` would look for one of characters: either a dot or a comma.\n\nIn the example below the regexp `pattern:[-().^+]` looks for one of the characters `-().^+`:\n\n```js run\n// No need to escape\nlet reg = /[-().^+]/g;\n\nalert( \"1 + 2 - 3\".match(reg) ); // Matches +, -\n```\n\n...But if you decide to escape them \"just in case\", then there would be no harm:\n\n```js run\n// Escaped everything\nlet reg = /[\\-\\(\\)\\.\\^\\+]/g;\n\nalert( \"1 + 2 - 3\".match(reg) ); // also works: +, -\n```","libs":[],"children":["find-range-1","find-time-2-formats"],"parent":"regular-expressions"}},"find-range-1":{"type":"Task","value":{"title":"Java[^script]","slug":"find-range-1","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/05-regexp-character-sets-and-ranges/1-find-range-1","weight":1,"libs":[],"content":"\nWe have a regexp `pattern:/Java[^script]/`.\n\nDoes it match anything in the string `subject:Java`? In the string `subject:JavaScript`?","solution":"Answers: **no, yes**.\n\n- In the script `subject:Java` it doesn't match anything, because `pattern:[^script]` means \"any character except given ones\". So the regexp looks for `\"Java\"` followed by one such symbol, but there's a string end, no symbols after it.\n\n    ```js run\n    alert( \"Java\".match(/Java[^script]/) ); // null\n    ```\n- Yes, because the regexp is case-insensitive, the `pattern:[^script]` part matches the character `\"S\"`.\n\n    ```js run\n    alert( \"JavaScript\".match(/Java[^script]/) ); // \"JavaS\"\n    ```","parent":"regexp-character-sets-and-ranges"}},"find-time-2-formats":{"type":"Task","value":{"title":"Find the time as hh:mm or hh-mm","slug":"find-time-2-formats","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/05-regexp-character-sets-and-ranges/2-find-time-2-formats","weight":2,"libs":[],"content":"\nThe time can be in the format `hours:minutes` or `hours-minutes`. Both hours and minutes have 2 digits:  `09:00` or `21-30`.\n\nWrite a regexp to find time:\n\n```js\nlet reg = /your regexp/g;\nalert( \"Breakfast at 09:00. Dinner at 21-30\".match(reg) ); // 09:00, 21-30\n```\n\nP.S. In this task we assume that the time is always correct, there's no need to filter out bad strings like \"45:67\". Later we'll deal with that too.","solution":"Answer: `pattern:\\d\\d[-:]\\d\\d`.\n\n```js run\nlet reg = /\\d\\d[-:]\\d\\d/g;\nalert( \"Breakfast at 09:00. Dinner at 21-30\".match(reg) ); // 09:00, 21-30\n```\n\nPlease note that the dash `pattern:'-'` has a special meaning in square brackets, but only between other characters, not when it's in the beginning or at the end, so we don't need to escape it.","parent":"regexp-character-sets-and-ranges"}},"regexp-unicode":{"type":"Article","value":{"title":"The unicode flag","slug":"regexp-unicode","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/06-regexp-unicode/article.md","isFolder":false,"weight":6,"content":"\nThe unicode flag `/.../u` enables the correct support of surrogate pairs.\n\nSurrogate pairs are explained in the chapter <info:string>.\n\nLet's briefly remind them here. In short, normally characters are encoded with 2 bytes. That gives us 65536 characters maximum. But there are more characters in the world.\n\nSo certain rare characters are encoded with 4 bytes, like `𝒳` (mathematical X) or `😄` (a smile).\n\nHere are the unicode values to compare:\n\n| Character  | Unicode | Bytes  |\n|------------|---------|--------|\n| `a` | 0x0061 |  2 |\n| `≈` | 0x2248 |  2 |\n|`𝒳`| 0x1d4b3 | 4 |\n|`𝒴`| 0x1d4b4 | 4 |\n|`😄`| 0x1f604 | 4 |\n\nSo characters like `a` and `≈` occupy 2 bytes, and those rare ones take 4.\n\nThe unicode is made in such a way that the 4-byte characters only have a meaning as a whole.\n\nIn the past JavaScript did not know about that, and many string methods still have problems. For instance, `length` thinks that here are two characters:\n\n```js run\nalert('😄'.length); // 2\nalert('𝒳'.length); // 2\n```\n\n...But we can see that there's only one, right? The point is that `length` treats 4 bytes as two 2-byte characters. That's incorrect, because they must be considered only together (so-called \"surrogate pair\").\n\nNormally, regular expressions also treat \"long characters\" as two 2-byte ones.\n\nThat leads to odd results, for instance let's try to find `pattern:[𝒳𝒴]` in the string `subject:𝒳`:\n\n```js run\nalert( '𝒳'.match(/[𝒳𝒴]/) ); // odd result\n```\n\nThe result would be wrong, because by default the regexp engine does not understand surrogate pairs. It thinks that `[𝒳𝒴]` are not two, but four characters: the left half of `𝒳` `(1)`, the right half of `𝒳` `(2)`, the left half of `𝒴` `(3)`, the right half of `𝒴` `(4)`.\n\nSo it finds the left half of `𝒳` in the string `𝒳`, not the whole symbol.\n\nIn other words, the search works like `'12'.match(/[1234]/)` -- the `1` is returned (left half of `𝒳`).\n\nThe `/.../u` flag fixes that. It enables surrogate pairs in the regexp engine, so the result is correct:\n\n```js run\nalert( '𝒳'.match(/[𝒳𝒴]/u) ); // 𝒳\n```\n\nThere's an error that may happen if we forget the flag:\n\n```js run\n'𝒳'.match(/[𝒳-𝒴]/); // SyntaxError: invalid range in character class\n```\n\nHere the regexp `[𝒳-𝒴]` is treated as `[12-34]` (where `2` is the right part of `𝒳` and `3` is the left part of `𝒴`), and the range between two halves `2` and `3` is unacceptable.\n\nUsing the flag would make it work right:\n\n```js run\nalert( '𝒴'.match(/[𝒳-𝒵]/u) ); // 𝒴\n```\n\nTo finalize, let's note that if we do not deal with surrogate pairs, then the flag does nothing for us. But in the modern world we often meet them.","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-quantifiers":{"type":"Article","value":{"title":"Quantifiers +, *, ? and {n}","slug":"regexp-quantifiers","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/07-regexp-quantifiers/article.md","isFolder":false,"weight":7,"content":"\nLet's say we have a string like `+7(903)-123-45-67` and want to find all numbers in it. But unlike before, we are interested in not digits, but full numbers: `7, 903, 123, 45, 67`.\n\nA number is a sequence of 1 or more digits `\\d`. The instrument to say how many we need is called *quantifiers*.\n\n## Quantity {n}\n\nThe most obvious quantifier is a number in figure quotes: `pattern:{n}`. A quantifier is put after a character (or a character class and so on) and specifies exactly how many we need.\n\nIt also has advanced forms, here we go with examples:\n\nExact count: `{5}`\n: `pattern:\\d{5}` denotes exactly 5 digits, the same as `pattern:\\d\\d\\d\\d\\d`.\n\n    The example below looks for a 5-digit number:\n\n    ```js run\n    alert( \"I'm 12345 years old\".match(/\\d{5}/) ); //  \"12345\"\n    ```\n\n    We can add `\\b` to exclude longer numbers: `pattern:\\b\\d{5}\\b`.\n\nThe count from-to: `{3,5}`\n: To find numbers from 3 to 5 digits we can put the limits into figure brackets: `pattern:\\d{3,5}`\n\n    ```js run\n    alert( \"I'm not 12, but 1234 years old\".match(/\\d{3,5}/) ); // \"1234\"\n    ```\n\n    We can omit the upper limit. Then a regexp `pattern:\\d{3,}` looks for numbers of `3` and more digits:\n\n    ```js run\n    alert( \"I'm not 12, but 345678 years old\".match(/\\d{3,}/) ); // \"345678\"\n    ```\n\nIn case with the string `+7(903)-123-45-67` we need numbers: one or more digits in a row. That is  `pattern:\\d{1,}`:\n\n```js run\nlet str = \"+7(903)-123-45-67\";\n\nlet numbers = str.match(/\\d{1,}/g);\n\nalert(numbers); // 7,903,123,45,67\n```\n\n## Shorthands\n\nMost often needed quantifiers have shorthands:\n\n`+`\n: Means \"one or more\", the same as `{1,}`.\n\n    For instance, `pattern:\\d+` looks for numbers:\n\n    ```js run\n    let str = \"+7(903)-123-45-67\";\n\n    alert( str.match(/\\d+/g) ); // 7,903,123,45,67\n    ```\n\n`?`\n: Means \"zero or one\", the same as `{0,1}`. In other words, it makes the symbol optional.\n\n    For instance, the pattern `pattern:ou?r` looks for `match:o` followed by zero or one `match:u`, and then `match:r`.\n\n    So it can find `match:or` in the word `subject:color` and `match:our` in `subject:colour`:\n\n    ```js run\n    let str = \"Should I write color or colour?\";\n\n    alert( str.match(/colou?r/g) ); // color, colour\n    ```\n\n`*`\n: Means \"zero or more\", the same as `{0,}`. That is, the character may repeat any times or be absent.\n\n    The example below looks for a digit followed by any number of zeroes:\n\n    ```js run\n    alert( \"100 10 1\".match(/\\d0*/g) ); // 100, 10, 1\n    ```\n\n    Compare it with `'+'` (one or more):\n\n    ```js run\n    alert( \"100 10 1\".match(/\\d0+/g) ); // 100, 10\n    ```\n\n## More examples\n\nQuantifiers are used very often. They are one of the main \"building blocks\" for complex regular expressions, so let's see more examples.\n\nRegexp \"decimal fraction\" (a number with a floating point): `pattern:\\d+\\.\\d+`\n: In action:\n    ```js run\n    alert( \"0 1 12.345 7890\".match(/\\d+\\.\\d+/g) ); // 12.345\n    ```\n\nRegexp \"open HTML-tag without attributes\", like `<span>` or `<p>`: `pattern:/<[a-z]+>/i`\n: In action:\n\n    ```js run\n    alert( \"<body> ... </body>\".match(/<[a-z]+>/gi) ); // <body>\n    ```\n\n    We look for character `pattern:'<'` followed by one or more English letters, and then  `pattern:'>'`.\n\nRegexp \"open HTML-tag without attributes\" (improved): `pattern:/<[a-z][a-z0-9]*>/i`\n: Better regexp: according to the standard, HTML tag name may have a digit at any position except the first one, like `<h1>`.\n\n    ```js run\n    alert( \"<h1>Hi!</h1>\".match(/<[a-z][a-z0-9]*>/gi) ); // <h1>\n    ```\n\nRegexp \"opening or closing HTML-tag without attributes\": `pattern:/<\\/?[a-z][a-z0-9]*>/i`\n: We added an optional slash `pattern:/?` before the tag. Had to escape it with a backslash, otherwise JavaScript would think it is the pattern end.\n\n    ```js run\n    alert( \"<h1>Hi!</h1>\".match(/<\\/?[a-z][a-z0-9]*>/gi) ); // <h1>, </h1>\n    ```\n\n```smart header=\"More precise means more complex\"\nWe can see one common rule in these examples: the more precise is the regular expression -- the longer and more complex it is.\n\nFor instance, HTML tags could use a simpler regexp: `pattern:<\\w+>`.\n\nBecause `pattern:\\w` means any English letter or a digit or `'_'`, the regexp also matches non-tags, for instance `match:<_>`. But it's much simpler than `pattern:<[a-z][a-z0-9]*>`.\n\nAre we ok with `pattern:<\\w+>` or we need `pattern:<[a-z][a-z0-9]*>`?\n\nIn real life both variants are acceptable. Depends on how tolerant we can be to \"extra\" matches and whether it's difficult or not to filter them out by other means.\n```","libs":[],"children":["find-text-manydots","find-html-colors-6hex"],"parent":"regular-expressions"}},"find-text-manydots":{"type":"Task","value":{"title":"How to find an ellipsis \"...\" ?","slug":"find-text-manydots","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/07-regexp-quantifiers/1-find-text-manydots","weight":1,"libs":[],"importance":5,"content":"\nCreate a regexp to find ellipsis: 3 (or more?) dots in a row.\n\nCheck it:\n\n```js\nlet reg = /your regexp/g;\nalert( \"Hello!... How goes?.....\".match(reg) ); // ..., .....\n```","solution":"Solution:\n\n```js run\nlet reg = /\\.{3,}/g;\nalert( \"Hello!... How goes?.....\".match(reg) ); // ..., .....\n```\n\nPlease note that the dot is a special character, so we have to escape it and insert as `\\.`.","parent":"regexp-quantifiers"}},"find-html-colors-6hex":{"type":"Task","value":{"title":"Regexp for HTML colors","slug":"find-html-colors-6hex","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/07-regexp-quantifiers/2-find-html-colors-6hex","weight":2,"libs":[],"content":"\nCreate a regexp to search HTML-colors written as `#ABCDEF`: first `#` and then 6 hexadimal characters.\n\nAn example of use:\n\n```js\nlet reg = /...your regexp.../\n\nlet str = \"color:#121212; background-color:#AA00ef bad-colors:f#fddee #fd2 #12345678\";\n\nalert( str.match(reg) )  // #121212,#AA00ef\n```\n\nP.S. In this task we do not need other color formats like `#123` or `rgb(1,2,3)` etc.","solution":"We need to look for `#` followed by 6 hexadimal characters.\n\nA hexadimal character can be described as `pattern:[0-9a-fA-F]`. Or if we use the `i` flag, then just  `pattern:[0-9a-f]`.\n\nThen we can look for 6 of them using the quantifier `pattern:{6}`.\n\nAs a result, we have the regexp: `pattern:/#[a-f0-9]{6}/gi`.\n\n```js run\nlet reg = /#[a-f0-9]{6}/gi;\n\nlet str = \"color:#121212; background-color:#AA00ef bad-colors:f#fddee #fd2\"\n\nalert( str.match(reg) );  // #121212,#AA00ef\n```\n\nThe problem is that it finds the color in longer sequences:\n\n```js run\nalert( \"#12345678\".match( /#[a-f0-9]{6}/gi ) ) // #12345678\n```\n\nTo fix that, we can add `pattern:\\b` to the end:\n\n```js run\n// color\nalert( \"#123456\".match( /#[a-f0-9]{6}\\b/gi ) ); // #123456\n\n// not a color\nalert( \"#12345678\".match( /#[a-f0-9]{6}\\b/gi ) ); // null\n```","parent":"regexp-quantifiers"}},"regexp-greedy-and-lazy":{"type":"Article","value":{"title":"Greedy and lazy quantifiers","slug":"regexp-greedy-and-lazy","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/08-regexp-greedy-and-lazy/article.md","isFolder":false,"weight":8,"content":"\nQuantifiers are very simple from the first sight, but in fact they can be tricky.\n\nWe should understand how the search works very well if we plan to look for something more complex than `pattern:/\\d+/`.\n\nLet's take the following task as an example.\n\nWe have a text and need to replace all quotes `\"...\"` with guillemet marks: `«...»`. They are preferred for typography in many countries.\n\nFor instance: `\"Hello, world\"` should become `«Hello, world»`.\n\nSome countries prefer `„Witam, świat!”` (Polish) or even `「你好，世界」` (Chinese) quotes. For different locales we can choose different replacements, but that all works the same, so let's start with `«...»`.\n\nTo make replacements we first need to find all quoted substrings.\n\nThe regular expression can look like this: `pattern:/\".+\"/g`. That is: we look for a quote followed by one or more characters, and then another quote.\n\n...But if we try to apply it, even in such a simple case...\n\n```js run\nlet reg = /\".+\"/g;\n\nlet str = 'a \"witch\" and her \"broom\" is one';\n\nalert( str.match(reg) ); // \"witch\" and her \"broom\"\n```\n\n...We can see that it works not as intended!\n\nInstead of finding two matches `match:\"witch\"` and `match:\"broom\"`, it finds one: `match:\"witch\" and her \"broom\"`.\n\nThat can be described as \"greediness is the cause of all evil\".\n\n## Greedy search\n\nTo find a match, the regular expression engine uses the following algorithm:\n\n- For every position in the string\n    - Match the pattern at that position.\n    - If there's no match, go to the next position.\n\nThese common words do not make it obvious why the regexp fails, so let's elaborate how the search works for the pattern `pattern:\".+\"`.\n\n1. The first pattern character is a quote `pattern:\"`.\n\n    The regular expression engine tries to find it at the zero position of the source string `subject:a \"witch\" and her \"broom\" is one`, but there's `subject:a` there, so there's immediately no match.\n\n    Then it advances: goes to the next positions in the source string and tries to find the first character of the pattern there, and finally finds the quote at the 3rd position:\n\n    ![](witch_greedy1.png)\n\n2. The quote is detected, and then the engine tries to find a match for the rest of the pattern. It tries to see if the rest of the subject string conforms to `pattern:.+\"`.\n\n    In our case the next pattern character is `pattern:.` (a dot). It denotes \"any character except a newline\", so the next string letter `match:'w'` fits:\n\n    ![](witch_greedy2.png)\n\n3. Then the dot repeats because of the quantifier `pattern:.+`. The regular expression engine builds the match by taking characters one by one while it is possible.\n\n    ...When it becomes impossible? All characters match the dot, so it only stops when it reaches the end of the string:\n\n    ![](witch_greedy3.png)\n\n4. Now the engine finished repeating for `pattern:.+` and tries to find the next character of the pattern. It's the quote `pattern:\"`. But there's a problem: the string has finished, there are no more characters!\n\n    The regular expression engine understands that it took too many `pattern:.+` and starts to *backtrack*.\n\n    In other words, it shortens the match for the quantifier by one character:\n\n    ![](witch_greedy4.png)\n\n    Now it assumes that `pattern:.+` ends one character before the end and tries to match the rest of the pattern from that position.\n\n    If there were a quote there, then that would be the end, but the last character is `subject:'e'`, so there's no match.\n\n5. ...So the engine decreases the number of repetitions of `pattern:.+` by one more character:\n\n    ![](witch_greedy5.png)\n\n    The quote `pattern:'\"'` does not match `subject:'n'`.\n\n6. The engine keep backtracking: it decreases the count of repetition for `pattern:'.'` until the rest of the pattern (in our case `pattern:'\"'`) matches:\n\n    ![](witch_greedy6.png)\n\n7. The match is complete.\n\n8. So the first match is `match:\"witch\" and her \"broom\"`. The further search starts where the first match ends, but there are no more quotes in the rest of the string `subject:is one`, so no more results.\n\nThat's probably not what we expected, but that's how it works.\n\n**In the greedy mode (by default) the quantifier is repeated as many times as possible.**\n\nThe regexp engine tries to fetch as many characters as it can by `pattern:.+`, and then shortens that one by one.\n\nFor our task we want another thing. That's what the lazy quantifier mode is for.\n\n## Lazy mode\n\nThe lazy mode of quantifier is an opposite to the greedy mode. It means: \"repeat minimal number of times\".\n\nWe can enable it by putting a question mark `pattern:'?'` after the quantifier, so that it becomes  `pattern:*?` or `pattern:+?` or even `pattern:??` for `pattern:'?'`.\n\nTo make things clear: usually a question mark `pattern:?` is a quantifier by itself (zero or one), but if added *after another quantifier (or even itself)* it gets another meaning -- it switches the matching mode from greedy to lazy.\n\nThe regexp `pattern:/\".+?\"/g` works as intended: it finds `match:\"witch\"` and `match:\"broom\"`:\n\n```js run\nlet reg = /\".+?\"/g;\n\nlet str = 'a \"witch\" and her \"broom\" is one';\n\nalert( str.match(reg) ); // witch, broom\n```\n\nTo clearly understand the change, let's trace the search step by step.\n\n1. The first step is the same: it finds the pattern start `pattern:'\"'` at the 3rd position:\n\n    ![](witch_greedy1.png)\n\n2. The next step is also similar: the engine finds a match for the dot `pattern:'.'`:\n\n    ![](witch_greedy2.png)\n\n3. And now the search goes differently. Because we have a lazy mode for `pattern:+?`, the engine doesn't try to match a dot one more time, but stops and tries to match the rest of the pattern  `pattern:'\"'` right now:\n\n    ![](witch_lazy3.png)\n\n    If there were a quote there, then the search would end, but there's `'i'`, so there's no match.\n4. Then the regular expression engine increases the number of repetitions for the dot and tries one more time:\n\n    ![](witch_lazy4.png)\n\n    Failure again. Then the number of repetitions is increased again and again...\n5. ...Till the match for the rest of the pattern is found:\n\n    ![](witch_lazy5.png)\n\n6. The next search starts from the end of the current match and yield one more result:\n\n    ![](witch_lazy6.png)\n\nIn this example we saw how the lazy mode works for `pattern:+?`. Quantifiers `pattern:+?` and `pattern:??` work the similar way -- the regexp engine increases the number of repetitions only if the rest of the pattern can't match on the given position.\n\n**Laziness is only enabled for the quantifier with `?`.**\n\nOther quantifiers remain greedy.\n\nFor instance:\n\n```js run\nalert( \"123 456\".match(/\\d+ \\d+?/g) ); // 123 4\n```\n\n1. The pattern `pattern:\\d+` tries to match as many numbers as it can (greedy mode), so it finds  `match:123` and stops, because the next character is a space `pattern:' '`.\n2. Then there's a space in pattern, it matches.\n3. Then there's `pattern:\\d+?`. The quantifier is in lazy mode, so it finds one digit `match:4` and tries to check if the rest of the pattern matches from there.\n\n    ...But there's nothing in the pattern after `pattern:\\d+?`.\n\n    The lazy mode doesn't repeat anything without a need. The pattern finished, so we're done. We have a match `match:123 4`.\n4. The next search starts from the character `5`.\n\n```smart header=\"Optimizations\"\nModern regular expression engines can optimize internal algorithms to work faster. So they may work a bit different from the described algorithm.\n\nBut to understand how regular expressions work and to build regular expressions, we don't need to know about that. They are only used internally to optimize things.\n\nComplex regular expressions are hard to optimize, so the search may work exactly as described as well.\n```\n\n## Alternative approach\n\nWith regexps, there's often more then one way to do the same thing.\n\nIn our case we can find quoted strings without lazy mode using the regexp `pattern:\"[^\"]+\"`:\n\n```js run\nlet reg = /\"[^\"]+\"/g;\n\nlet str = 'a \"witch\" and her \"broom\" is one';\n\nalert( str.match(reg) ); // witch, broom\n```\n\nThe regexp `pattern:\"[^\"]+\"` gives correct results, because it looks for a quote `pattern:'\"'` followed by one or more non-quotes `pattern:[^\"]`, and then the closing quote.\n\nWhen the regexp engine looks for `pattern:[^\"]+` it stops the repetitions when it meets the closing quote, and we're done.\n\nPlease note, that this logic does not replace lazy quantifiers!\n\nIt is just different. There are times when we need one or another.\n\nLet's see one more example where lazy quantifiers fail and this variant works right.\n\nFor instance, we want to find links of the form `<a href=\"...\" class=\"doc\">`, with any `href`.\n\nWhich regular expression to use?\n\nThe first idea might be: `pattern:/<a href=\".*\" class=\"doc\">/g`.\n\nLet's check it:\n```js run\nlet str = '...<a href=\"link\" class=\"doc\">...';\nlet reg = /<a href=\".*\" class=\"doc\">/g;\n\n// Works!\nalert( str.match(reg) ); // <a href=\"link\" class=\"doc\">\n```\n\n...But what if there are many links in the text?\n\n```js run\nlet str = '...<a href=\"link1\" class=\"doc\">... <a href=\"link2\" class=\"doc\">...';\nlet reg = /<a href=\".*\" class=\"doc\">/g;\n\n// Whoops! Two links in one match!\nalert( str.match(reg) ); // <a href=\"link1\" class=\"doc\">... <a href=\"link2\" class=\"doc\">\n```\n\nNow the result is wrong for the same reason as our \"witches\" example. The quantifier `pattern:.*` took too many characters.\n\nThe match looks like this:\n\n```html\n<a href=\".....................................\" class=\"doc\">\n<a href=\"link1\" class=\"doc\">... <a href=\"link2\" class=\"doc\">\n```\n\nLet's modify the pattern by making the quantifier `pattern:.*?` lazy:\n\n```js run\nlet str = '...<a href=\"link1\" class=\"doc\">... <a href=\"link2\" class=\"doc\">...';\nlet reg = /<a href=\".*?\" class=\"doc\">/g;\n\n// Works!\nalert( str.match(reg) ); // <a href=\"link1\" class=\"doc\">, <a href=\"link2\" class=\"doc\">\n```\n\nNow it works, there are two matches:\n\n```html\n<a href=\".....\" class=\"doc\">    <a href=\".....\" class=\"doc\">\n<a href=\"link1\" class=\"doc\">... <a href=\"link2\" class=\"doc\">\n```\n\nWhy it works -- should be obvious after all explanations above. So let's not stop on the details, but try one more text:\n\n```js run\nlet str = '...<a href=\"link1\" class=\"wrong\">... <p style=\"\" class=\"doc\">...';\nlet reg = /<a href=\".*?\" class=\"doc\">/g;\n\n// Wrong match!\nalert( str.match(reg) ); // <a href=\"link1\" class=\"wrong\">... <p style=\"\" class=\"doc\">\n```\n\nWe can see that the regexp matched not just a link, but also a lot of text after it, including `<p...>`.\n\nWhy it happens?\n\n1. First the regexp finds a link start `match:<a href=\"`.\n\n2. Then it looks for `pattern:.*?`, we take one character, then check if there's a match for the rest of the pattern, then take another one...\n\n    The quantifier `pattern:.*?` consumes characters until it meets `match:class=\"doc\">`.\n\n    ...And where can it find it? If we look at the text, then we can see that the only `match:class=\"doc\">` is beyond the link, in the tag `<p>`.\n\n3. So we have match:\n\n    ```html\n    <a href=\"...................................\" class=\"doc\">\n    <a href=\"link1\" class=\"wrong\">... <p style=\"\" class=\"doc\">\n    ```\n\nSo the laziness did not work for us here.\n\nWe need the pattern to look for `<a href=\"...something...\" class=\"doc\">`, but both greedy and lazy variants have problems.\n\nThe correct variant would be: `pattern:href=\"[^\"]*\"`. It will take all characters inside the `href` attribute till the nearest quote, just what we need.\n\nA working example:\n\n```js run\nlet str1 = '...<a href=\"link1\" class=\"wrong\">... <p style=\"\" class=\"doc\">...';\nlet str2 = '...<a href=\"link1\" class=\"doc\">... <a href=\"link2\" class=\"doc\">...';\nlet reg = /<a href=\"[^\"]*\" class=\"doc\">/g;\n\n// Works!\nalert( str1.match(reg) ); // null, no matches, that's correct\nalert( str2.match(reg) ); // <a href=\"link1\" class=\"doc\">, <a href=\"link2\" class=\"doc\">\n```\n\n## Summary\n\nQuantifiers have two modes of work:\n\nGreedy\n: By default the regular expression engine tries to repeat the quantifier as many times as possible. For instance, `pattern:\\d+` consumes all possible digits. When it becomes impossible to consume more (no more digits or string end), then it continues to match the rest of the pattern. If there's no match then it decreases the number of repetitions (backtracks) and tries again.\n\nLazy\n: Enabled by the question mark `pattern:?` after the quantifier. The regexp engine tries to match the rest of the pattern before each repetition of the quantifier.\n\nAs we've seen, the lazy mode is not a \"panacea\" from the greedy search. An alternative is a \"fine-tuned\" greedy search, with exclusions. Soon we'll see more examples of it.","libs":[],"children":["lazy-greedy","find-html-comments","find-html-tags-greedy-lazy"],"parent":"regular-expressions"}},"lazy-greedy":{"type":"Task","value":{"title":"A match for /d+? d+?/","slug":"lazy-greedy","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/08-regexp-greedy-and-lazy/1-lazy-greedy","weight":1,"libs":[],"content":"\nWhat's the match here?\n\n```js\n\"123 456\".match(/\\d+? \\d+?/g) ); // ?\n```","solution":"The result is: `match:123 4`.\n\nFirst the lazy `pattern:\\d+?` tries to take as little digits as it can, but it has to reach the space, so it takes  `match:123`.\n\nThen the second `\\d+?` takes only one digit, because that's enough.","parent":"regexp-greedy-and-lazy"}},"find-html-comments":{"type":"Task","value":{"title":"Find HTML comments","slug":"find-html-comments","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/08-regexp-greedy-and-lazy/3-find-html-comments","weight":3,"libs":[],"content":"\nFind all HTML comments in the text:\n\n```js\nlet reg = /your regexp/g;\n\nlet str = `... <!-- My -- comment\n test --> ..  <!----> .. \n`;\n\nalert( str.match(reg) ); // '<!-- My -- comment \\n test -->', '<!---->'\n```","solution":"We need to find the beginning of the comment `match:<!--`, then everything till the end of `match:-->`.\n\nThe first idea could be `pattern:<!--.*?-->` -- the lazy quantifier makes the dot stop right before  `match:-->`.\n\nBut a dot in Javascript means \"any symbol except the newline\". So multiline comments won't be found.\n\nWe can use `pattern:[\\s\\S]` instead of the dot to match \"anything\":\n\n```js run\nlet reg = /<!--[\\s\\S]*?-->/g;\n\nlet str = `... <!-- My -- comment\n test --> ..  <!----> ..\n`;\n\nalert( str.match(reg) ); // '<!-- My -- comment \\n test -->', '<!---->'\n```","parent":"regexp-greedy-and-lazy"}},"find-html-tags-greedy-lazy":{"type":"Task","value":{"title":"Find HTML tags","slug":"find-html-tags-greedy-lazy","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/08-regexp-greedy-and-lazy/4-find-html-tags-greedy-lazy","weight":4,"libs":[],"content":"\nCreate a regular expression to find all (opening and closing) HTML tags with their attributes.\n\nAn example of use:\n\n```js run\nlet reg = /your regexp/g;\n\nlet str = '<> <a href=\"/\"> <input type=\"radio\" checked> <b>';\n\nalert( str.match(reg) ); // '<a href=\"/\">', '<input type=\"radio\" checked>', '<b>'\n```\n\nLet's assume that may not contain `<` and `>` inside (in quotes too), that simplifies things a bit.","solution":"The solution is `pattern:<[^<>]+>`.\n\n```js run\nlet reg = /<[^<>]+>/g;\n\nlet str = '<> <a href=\"/\"> <input type=\"radio\" checked> <b>';\n\nalert( str.match(reg) ); // '<a href=\"/\">', '<input type=\"radio\" checked>', '<b>'\n```","parent":"regexp-greedy-and-lazy"}},"regexp-groups":{"type":"Article","value":{"title":"Capturing groups","slug":"regexp-groups","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/09-regexp-groups/article.md","isFolder":false,"weight":9,"content":"\nA part of the pattern can be enclosed in parentheses `pattern:(...)`. That's called a \"capturing group\".\n\nThat has two effects:\n\n1. It allows to place a part of the match into a separate array item when using  [String#match](mdn:js/String/match) or [RegExp#exec](mdn:/RegExp/exec) methods.\n2. If we put a quantifier after the parentheses, it applies to the parentheses as a whole, not the last character.\n\n## Example\n\nIn the example below the pattern `pattern:(go)+` finds one or more `match:'go'`:\n\n```js run\nalert( 'Gogogo now!'.match(/(go)+/i) ); // \"Gogogo\"\n```\n\nWithout parentheses, the pattern `pattern:/go+/` means `subject:g`, followed by `subject:o` repeated one or more times. For instance, `match:goooo` or `match:gooooooooo`.\n\nParentheses group the word `pattern:(go)` together.\n\nLet's make something more complex -- a regexp to match an email.\n\nExamples of emails:\n\n```\nmy@mail.com\njohn.smith@site.com.uk\n```\n\nThe pattern: `pattern:[-.\\w]+@([\\w-]+\\.)+[\\w-]{2,20}`.\n\n- The first part before `@` may include wordly characters, a dot and a dash `pattern:[-.\\w]+`, like `match:john.smith`.\n- Then `pattern:@`\n- And then the domain. May be a second-level domain `site.com` or with subdomains like `host.site.com.uk`. We can match it as \"a word followed by a dot\" repeated one or more times for subdomains: `match:mail.` or `match:site.com.`, and then \"a word\" for the last part: `match:.com` or `match:.uk`.\n\n    The word followed by a dot is `pattern:(\\w+\\.)+` (repeated). The last word should not have a dot at the end, so it's just `\\w{2,20}`. The quantifier `pattern:{2,20}` limits the length, because domain zones are like `.uk` or `.com` or `.museum`, but can't be longer than 20 characters.\n\n    So the domain pattern is `pattern:(\\w+\\.)+\\w{2,20}`. Now we replace `\\w` with `[\\w-]`, because dashes are also allowed in domains, and we get the final result.\n\nThat regexp is not perfect, but usually works. It's short and good enough to fix errors or occasional mistypes.\n\nFor instance, here we can find all emails in the string:\n\n```js run\nlet reg = /[-.\\w]+@([\\w-]+\\.)+[\\w-]{2,20}/g;\n\nalert(\"my@mail.com @ his@site.com.uk\".match(reg)); // my@mail.com,his@site.com.uk\n```\n\n\n## Contents of parentheses  \n\nParentheses are numbered from left to right. The search engine remembers the content of each and allows to reference it in the pattern or in the replacement string.\n\nFor instance, we can find an HTML-tag using a (simplified) pattern `pattern:<.*?>`. Usually we'd want to do something with the result after it.\n\nIf we enclose the inner contents of `<...>` into parentheses, then we can access it like this:\n\n```js run\nlet str = '<h1>Hello, world!</h1>';\nlet reg = /<(.*?)>/;\n\nalert( str.match(reg) ); // Array: [\"<h1>\", \"h1\"]\n```\n\nThe call to [String#match](mdn:js/String/match) returns groups only if the regexp has no `pattern:/.../g` flag.\n\nIf we need all matches with their groups then we can use [RegExp#exec](mdn:js/RegExp/exec) method as described in <info:regexp-methods>:\n\n```js run\nlet str = '<h1>Hello, world!</h1>';\n\n// two matches: opening <h1> and closing </h1> tags\nlet reg = /<(.*?)>/g;\n\nlet match;\n\nwhile (match = reg.exec(str)) {\n  // first shows the match: <h1>,h1\n  // then shows the match: </h1>,/h1\n  alert(match);\n}\n```\n\nHere we have two matches for `pattern:<(.*?)>`, each of them is an array with the full match and groups.\n\n## Nested groups\n\nParentheses can be nested. In this case the numbering also goes from left to right.\n\nFor instance, when searching a tag in `subject:<span class=\"my\">` we may be interested in:\n\n1. The tag content as a whole: `match:span class=\"my\"`.\n2. The tag name: `match:span`.\n3. The tag attributes: `match:class=\"my\"`.\n\nLet's add parentheses for them:\n\n```js run\nlet str = '<span class=\"my\">';\n\nlet reg = /<(([a-z]+)\\s*([^>]*))>/;\n\nlet result = str.match(reg);\nalert(result); // <span class=\"my\">, span class=\"my\", span, class=\"my\"\n```\n\nHere's how groups look:\n\n![](regexp-nested-groups.png)\n\nAt the zero index of the `result` is always the full match.\n\nThen groups, numbered from left to right. Whichever opens first gives the first group `result[1]`. Here it encloses the whole tag content.\n\nThen in `result[2]` goes the group from the second opening `pattern:(` till the corresponding `pattern:)` -- tag name, then we don't group spaces, but group attributes for `result[3]`.\n\n**If a group is optional and doesn't exist in the match, the corresponding `result` index is present (and equals `undefined`).**\n\nFor instance, let's consider the regexp `pattern:a(z)?(c)?`. It looks for `\"a\"` optionally followed by `\"z\"` optionally followed by `\"c\"`.\n\nIf we run it on the string with a single letter `subject:a`, then the result is:\n\n```js run\nlet match = 'a'.match(/a(z)?(c)?/);\n\nalert( match.length ); // 3\nalert( match[0] ); // a (whole match)\nalert( match[1] ); // undefined\nalert( match[2] ); // undefined\n```\n\nThe array has the length of `3`, but all groups are empty.\n\nAnd here's a more complex match for the string `subject:ack`:\n\n```js run\nlet match = 'ack'.match(/a(z)?(c)?/)\n\nalert( match.length ); // 3\nalert( match[0] ); // ac (whole match)\nalert( match[1] ); // undefined, because there's nothing for (z)?\nalert( match[2] ); // c\n```\n\nThe array length is permanent: `3`. But there's nothing for the group `pattern:(z)?`, so the result is `[\"ac\", undefined, \"c\"]`.\n\n## Non-capturing groups with ?:\n\nSometimes we need parentheses to correctly apply a quantifier, but we don't want their contents in the array.\n\nA group may be excluded by adding `pattern:?:` in the beginning.\n\nFor instance, if we want to find `pattern:(go)+`, but don't want to put remember the contents (`go`) in a separate array item, we can write: `pattern:(?:go)+`.\n\nIn the example below we only get the name \"John\" as a separate member of the `results` array:\n\n```js run\nlet str = \"Gogo John!\";\n*!*\n// exclude Gogo from capturing\nlet reg = /(?:go)+ (\\w+)/i;\n*/!*\n\nlet result = str.match(reg);\n\nalert( result.length ); // 2\nalert( result[1] ); // John\n```","libs":[],"children":["find-webcolor-3-or-6","find-decimal-positive-numbers","find-decimal-numbers","parse-expression"],"parent":"regular-expressions"}},"find-webcolor-3-or-6":{"type":"Task","value":{"title":"Find color in the format #abc or #abcdef","slug":"find-webcolor-3-or-6","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/09-regexp-groups/1-find-webcolor-3-or-6","weight":1,"libs":[],"content":"\nWrite a regexp that matches colors in the format `#abc` or `#abcdef`. That is: `#` followed by 3 or 6 hexadimal digits.\n\nUsage example:\n```js\nlet reg = /your regexp/g;\n\nlet str = \"color: #3f3; background-color: #AA00ef; and: #abcd\";\n\nalert( str.match(reg) ); // #3f3 #AA0ef\n```\n\nP.S. Should be exactly 3 or 6 hex digits: values like `#abcd` should not match.","solution":"A regexp to search 3-digit color `#abc`: `pattern:/#[a-f0-9]{3}/i`.\n\nWe can add exactly 3 more optional hex digits. We don't need more or less. Either we have them or we don't.\n\nThe simplest way to add them -- is to append to the regexp: `pattern:/#[a-f0-9]{3}([a-f0-9]{3})?/i`\n\nWe can do it in a smarter way though: `pattern:/#([a-f0-9]{3}){1,2}/i`.\n\nHere the regexp `pattern:[a-f0-9]{3}` is in parentheses to apply the quantifier  `pattern:{1,2}` to it as a whole.\n\nIn action:\n\n```js run\nlet reg = /#([a-f0-9]{3}){1,2}/gi;\n\nlet str = \"color: #3f3; background-color: #AA00ef; and: #abcd\";\n\nalert( str.match(reg) ); // #3f3 #AA0ef #abc\n```\n\nThere's minor problem here: the pattern found `match:#abc` in  `subject:#abcd`. To prevent that we can add `pattern:\\b` to the end:\n\n```js run\nlet reg = /#([a-f0-9]{3}){1,2}\\b/gi;\n\nlet str = \"color: #3f3; background-color: #AA00ef; and: #abcd\";\n\nalert( str.match(reg) ); // #3f3 #AA0ef\n```","parent":"regexp-groups"}},"find-decimal-positive-numbers":{"type":"Task","value":{"title":"Find positive numbers","slug":"find-decimal-positive-numbers","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/09-regexp-groups/3-find-decimal-positive-numbers","weight":3,"libs":[],"content":"\nCreate a regexp that looks for positive numbers, including those without a decimal point.\n\nAn example of use:\n```js\nlet reg = /your regexp/g;\n\nlet str = \"1.5 0 12. 123.4.\";\n\nalert( str.match(reg) );   // 1.5, 0, 12, 123.4\n```","solution":"An integer number is `pattern:\\d+`.\n\nA decimal part is: `pattern:\\.\\d+`.\n\nBecause the decimal part is optional, let's put it in parentheses with quantifier `pattern:'?'`.\n\nFinally we have the regexp: `pattern:\\d+(\\.\\d+)?`:\n\n```js run\nlet reg = /\\d+(\\.\\d+)?/g;\n\nlet str = \"1.5 0 12. 123.4.\";\n\nalert( str.match(reg) );   // 1.5, 0, 12, 123.4\n```","parent":"regexp-groups"}},"find-decimal-numbers":{"type":"Task","value":{"title":"Find all numbers","slug":"find-decimal-numbers","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/09-regexp-groups/4-find-decimal-numbers","weight":4,"libs":[],"content":"\nWrite a regexp that looks for all decimal numbers including integer ones, with the floating point and negative ones.\n\nAn example of use:\n\n```js\nlet reg = /your regexp/g;\n\nlet str = \"-1.5 0 2 -123.4.\";\n\nalert( str.match(re) ); // -1.5, 0, 2, -123.4\n```","solution":"A positive number with an optional decimal part is (per previous task): `pattern:\\d+(\\.\\d+)?`.\n\nLet's add an optional `-` in the beginning:\n\n```js run\nlet reg = /-?\\d+(\\.\\d+)?/g;\n\nlet str = \"-1.5 0 2 -123.4.\";\n\nalert( str.match(reg) );   // -1.5, 0, 2, -123.4\n```","parent":"regexp-groups"}},"parse-expression":{"type":"Task","value":{"title":"Parse an expression","slug":"parse-expression","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/09-regexp-groups/5-parse-expression","weight":5,"libs":[],"content":"\nAn arithmetical expression consists of 2 numbers and an operator between them, for instance:\n\n- `1 + 2`\n- `1.2 * 3.4`\n- `-3 / -6`\n- `-2 - 2`\n\nThe operator is one of: `\"+\"`, `\"-\"`, `\"*\"` or `\"/\"`.\n\nThere may be extra spaces at the beginning, at the end or between the parts.\n\nCreate a function `parse(expr)` that takes an expression and returns an array of 3 items:\n\n1. The first number.\n2. The operator.\n3. The second number.\n\nFor example:\n\n```js\nlet [a, op, b] = parse(\"1.2 * 3.4\");\n\nalert(a); // 1.2\nalert(op); // *\nalert(b); // 3.4\n```","solution":"A regexp for a number is: `pattern:-?\\d+(\\.\\d+)?`. We created it in previous tasks.\n\nAn operator is `pattern:[-+*/]`. We put a dash `pattern:-` the first, because in the middle it would mean a character range, we don't need that.\n\nNote that a slash should be escaped inside a JavaScript regexp `pattern:/.../`.\n\nWe need a number, an operator, and then another number. And optional spaces between them.\n\nThe full regular expression: `pattern:-?\\d+(\\.\\d+)?\\s*[-+*/]\\s*-?\\d+(\\.\\d+)?`.\n\nTo get a result as an array let's put parentheses around the data that we need: numbers and the operator: `pattern:(-?\\d+(\\.\\d+)?)\\s*([-+*/])\\s*(-?\\d+(\\.\\d+)?)`.\n\nIn action:\n\n```js run\nlet reg = /(-?\\d+(\\.\\d+)?)\\s*([-+*\\/])\\s*(-?\\d+(\\.\\d+)?)/;\n\nalert( \"1.2 + 12\".match(reg) );\n```\n\nThe result includes:\n\n- `result[0] == \"1.2 + 12\"` (full match)\n- `result[1] == \"1\"` (first parentheses)\n- `result[2] == \"2\"` (second parentheses -- the decimal part `(\\.\\d+)?`)\n- `result[3] == \"+\"` (...)\n- `result[4] == \"12\"` (...)\n- `result[5] == undefined` (the last decimal part is absent, so it's undefined)\n\nWe need only numbers and the operator. We don't need decimal parts.\n\nSo let's remove extra groups from capturing by added `pattern:?:`, for instance: `pattern:(?:\\.\\d+)?`.\n\nThe final solution:\n\n```js run\nfunction parse(expr) {\n  let reg = /(-?\\d+(?:\\.\\d+)?)\\s*([-+*\\/])\\s*(-?\\d+(?:\\.\\d+)?)/;\n\n  let result = expr.match(reg);\n\n  if (!result) return;\n  result.shift();\n\n  return result;\n}\n\nalert( parse(\"-1.23 * 3.45\") );  // -1.23, *, 3.45\n```","parent":"regexp-groups"}},"regexp-backreferences":{"type":"Article","value":{"title":"Backreferences: \\n and $n","slug":"regexp-backreferences","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/10-regexp-backreferences/article.md","isFolder":false,"weight":10,"content":"\nCapturing groups may be accessed not only in the result, but in the replacement string, and in the pattern too.\n\n## Group in replacement: $n\n\nWhen we are using `replace` method, we can access n-th group in the replacement string using `$n`.\n\nFor instance:\n\n```js run\nlet name = \"John Smith\";\n\nname = name.replace(/(\\w+) (\\w+)/i, *!*\"$2, $1\"*/!*);\nalert( name ); // Smith, John\n```\n\nHere `pattern:$1` in the replacement string means \"substitute the content of the first group here\", and `pattern:$2` means \"substitute the second group here\".\n\nReferencing a group in the replacement string allows us to reuse the existing text during the replacement.\n\n## Group in pattern: \\n\n\nA group can be referenced in the pattern using `\\n`.\n\nTo make things clear let's consider a task. We need to find a quoted string: either a single-quoted  `subject:'...'` or a double-quoted `subject:\"...\"` -- both variants need to match.\n\nHow to look for them?\n\nWe can put two kinds of quotes in the pattern: `pattern:['\"](.*?)['\"]`. That finds strings like  `match:\"...\"` and `match:'...'`, but it gives incorrect matches when one quote appears inside another one, like the string `subject:\"She's the one!\"`:\n\n```js run\nlet str = \"He said: \\\"She's the one!\\\".\";\n\nlet reg = /['\"](.*?)['\"]/g;\n\n// The result is not what we expect\nalert( str.match(reg) ); // \"She'\n```\n\nAs we can see, the pattern found an opening quote `match:\"`, then the text is consumed lazily till the other quote `match:'`, that closes the match.\n\nTo make sure that the pattern looks for the closing quote exactly the same as the opening one, let's make a group of it and use the backreference:\n\n```js run\nlet str = \"He said: \\\"She's the one!\\\".\";\n\nlet reg = /(['\"])(.*?)\\1/g;\n\nalert( str.match(reg) ); // \"She's the one!\"\n```\n\nNow everything's correct! The regular expression engine finds the first quote `pattern:(['\"])` and remembers the content of `pattern:(...)`, that's the first capturing group.\n\nFurther in the pattern `pattern:\\1` means \"find the same text as in the first group\".\n\nPlease note:\n\n- To reference a group inside a replacement string -- we use `$1`, while in the pattern -- a backslash `\\1`.\n- If we use `?:` in the group, then we can't reference it. Groups that are excluded from capturing `(?:...)` are not remembered by the engine.","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-alternation":{"type":"Article","value":{"title":"Alternation (OR) |","slug":"regexp-alternation","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/11-regexp-alternation/article.md","isFolder":false,"weight":11,"content":"\nAlternation is the term in regular expression that is actually a simple \"OR\".\n\nIn a regular expression it is denoted with a vertical line character `pattern:|`.\n\nFor instance, we need to find programming languages: HTML, PHP, Java or JavaScript.\n\nThe corresponding regexp: `pattern:html|php|java(script)?`.\n\nA usage example:\n\n```js run\nlet reg = /html|php|css|java(script)?/gi;\n\nlet str = \"First HTML appeared, then CSS, then JavaScript\";\n\nalert( str.match(reg) ); // 'HTML', 'CSS', 'JavaScript'\n```\n\nWe already know a similar thing -- square brackets. They allow to choose between multiple character, for instance `pattern:gr[ae]y` matches `match:gray` or `match:grey`.\n\nAlternation works not on a character level, but on expression level. A regexp `pattern:A|B|C` means one of expressions `A`, `B` or `C`.\n\nFor instance:\n\n- `pattern:gr(a|e)y` means exactly the same as `pattern:gr[ae]y`.\n- `pattern:gra|ey` means \"gra\" or \"ey\".\n\nTo separate a part of the pattern for alternation we usually enclose it in parentheses, like this: `pattern:before(XXX|YYY)after`.\n\n## Regexp for time\n\nIn previous chapters there was a task to build a regexp for searching time in the form `hh:mm`, for instance `12:00`. But a simple `pattern:\\d\\d:\\d\\d` is too vague. It accepts `25:99` as the time.\n\nHow can we make a better one?\n\nWe can apply more careful matching:\n\n- The first digit must be `0` or `1` followed by any digit.\n- Or `2` followed by `pattern:[0-3]`\n\nAs a regexp: `pattern:[01]\\d|2[0-3]`.\n\nThen we can add a colon and the minutes part.\n\nThe minutes must be from `0` to `59`, in the regexp language that means the first digit  `pattern:[0-5]` followed by any other digit `\\d`.\n\nLet's glue them together into the pattern: `pattern:[01]\\d|2[0-3]:[0-5]\\d`.\n\nWe're almost done, but there's a problem. The alternation `|` is between the `pattern:[01]\\d` and `pattern:2[0-3]:[0-5]\\d`. That's wrong, because it will match either the left or the right pattern:\n\n\n```js run\nlet reg = /[01]\\d|2[0-3]:[0-5]\\d/g;\n\nalert(\"12\".match(reg)); // 12 (matched [01]\\d)\n```\n\nThat's rather obvious, but still an often mistake when starting to work with regular expressions.\n\nWe need to add parentheses to apply alternation exactly to hours: `[01]\\d` OR `2[0-3]`.\n\nThe correct variant:\n\n```js run\nlet reg = /([01]\\d|2[0-3]):[0-5]\\d/g;\n\nalert(\"00:00 10:10 23:59 25:99 1:2\".match(reg)); // 00:00,10:10,23:59\n```","libs":[],"children":["find-programming-language","find-matching-bbtags","match-quoted-string","match-exact-tag"],"parent":"regular-expressions"}},"find-programming-language":{"type":"Task","value":{"title":"Find programming languages","slug":"find-programming-language","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/11-regexp-alternation/01-find-programming-language","weight":1,"libs":[],"content":"\nThere are many programming languages, for instance Java, JavaScript, PHP, C, C++.\n\nCreate a regexp that finds them in the string `subject:Java JavaScript PHP C++ C`:\n\n```js\nlet reg = /your regexp/g;\n\nalert(\"Java JavaScript PHP C++ C\".match(reg)); // Java JavaScript PHP C++ C\n```","solution":"The first idea can be to list the languages with `|` in-between.\n\nBut that doesn't work right:\n\n```js run\nlet reg = /Java|JavaScript|PHP|C|C\\+\\+/g;\n\nlet str = \"Java, JavaScript, PHP, C, C++\";\n\nalert( str.match(reg) ); // Java,Java,PHP,C,C\n```\n\nThe regular expression engine looks for alternations one-by-one. That is: first it checks if we have  `match:Java`, otherwise -- looks for `match:JavaScript` and so on.\n\nAs a result, `match:JavaScript` can never be found, just because `match:Java` is checked first.\n\nThe same with `match:C` and `match:C++`.\n\nThere are two solutions for that problem:\n\n1. Change the order to check the longer match first: `pattern:JavaScript|Java|C\\+\\+|C|PHP`.\n2. Merge variants with the same start: `pattern:Java(Script)?|C(\\+\\+)?|PHP`.\n\nIn action:\n\n```js run\nlet reg = /Java(Script)?|C(\\+\\+)?|PHP/g;\n\nlet str = \"Java, JavaScript, PHP, C, C++\";\n\nalert( str.match(reg) ); // Java,JavaScript,PHP,C,C++\n```","parent":"regexp-alternation"}},"find-matching-bbtags":{"type":"Task","value":{"title":"Find bbtag pairs","slug":"find-matching-bbtags","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/11-regexp-alternation/02-find-matching-bbtags","weight":2,"libs":[],"content":"\nA \"bb-tag\" looks like `[tag]...[/tag]`, where `tag` is one of: `b`, `url` or `quote`.\n\nFor instance:\n```\n[b]text[/b]\n[url]http://google.com[/url]\n```\n\nBB-tags can be nested. But a tag can't be nested into itself, for instance:\n\n```\nNormal:\n[url] [b]http://google.com[/b] [/url]\n[quote] [b]text[/b] [/quote]\n\nImpossible:\n[b][b]text[/b][/b]\n```\n\nTags can contain line breaks, that's normal:\n\n```\n[quote]\n  [b]text[/b]\n[/quote]\n```\n\nCreate a regexp to find all BB-tags with their contents.\n\nFor instance:\n\n```js\nlet reg = /your regexp/g;\n\nlet str = \"..[url]http://google.com[/url]..\";\nalert( str.match(reg) ); // [url]http://google.com[/url]\n```\n\nIf tags are nested, then we need the outer tag (if we want we can continue the search in its content):\n\n```js\nlet reg = /your regexp/g;\n\nlet str = \"..[url][b]http://google.com[/b][/url]..\";\nalert( str.match(reg) ); // [url][b]http://google.com[/b][/url]\n```","solution":"Opening tag is `pattern:\\[(b|url|quote)\\]`.\n\nThen to find everything till the closing tag -- let's the pattern `pattern:[\\s\\S]*?` to match any character including the newline and then a backreference to the closing tag.\n\nThe full pattern: `pattern:\\[(b|url|quote)\\][\\s\\S]*?\\[/\\1\\]`.\n\nIn action:\n\n```js run\nlet reg = /\\[(b|url|quote)\\][\\s\\S]*?\\[\\/\\1\\]/g;\n\nlet str = `\n  [b]hello![/b]\n  [quote]\n    [url]http://google.com[/url]\n  [/quote]\n`;\n\nalert( str.match(reg) ); // [b]hello![/b],[quote][url]http://google.com[/url][/quote]\n```\n\nPlease note that we had to escape a slash for the closing tag `pattern:[/\\1]`, because normally the slash closes the pattern.","parent":"regexp-alternation"}},"match-quoted-string":{"type":"Task","value":{"title":"Find quoted strings","slug":"match-quoted-string","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/11-regexp-alternation/03-match-quoted-string","weight":3,"libs":[],"content":"\nCreate a regexp to find strings in double quotes `subject:\"...\"`.\n\nThe important part is that strings should support escaping, in the same way as JavaScript strings do. For instance, quotes can be inserted as `subject:\\\"` a newline as `subject:\\n`, and the slash itself as `subject:\\\\`.\n\n```js\nlet str = \"Just like \\\"here\\\".\";\n```\n\nFor us it's important that an escaped quote `subject:\\\"` does not end a string.\n\nSo we should look from one quote to the other ignoring escaped quotes on the way.\n\nThat's the essential part of the task, otherwise it would be trivial.\n\nExamples of strings to match:\n```js\n.. *!*\"test me\"*/!* ..  \n.. *!*\"Say \\\"Hello\\\"!\"*/!* ... (escaped quotes inside)\n.. *!*\"\\\\\"*/!* ..  (double slash inside)\n.. *!*\"\\\\ \\\"\"*/!* ..  (double slash and an escaped quote inside)\n```\n\nIn JavaScript we need to double the slashes to pass them right into the string, like this:\n\n```js run\nlet str = ' .. \"test me\" .. \"Say \\\\\"Hello\\\\\"!\" .. \"\\\\\\\\ \\\\\"\" .. ';\n\n// the in-memory string\nalert(str); //  .. \"test me\" .. \"Say \\\"Hello\\\"!\" .. \"\\\\ \\\"\" ..\n```","solution":"The solution: `pattern:/\"(\\\\.|[^\"\\\\])*\"/g`.\n\nStep by step:\n\n- First we look for an opening quote `pattern:\"`\n- Then if we have a backslash `pattern:\\\\` (we technically have to double it in the pattern, because it is a special character, so that's a single backslash in fact), then any character is fine after it (a dot).\n- Otherwise we take any character except a quote (that would mean the end of the string) and a backslash (to prevent lonely backslashes, the backslash is only used with some other symbol after it): `pattern:[^\"\\\\]`\n- ...And so on till the closing quote.\n\nIn action:\n\n```js run\nlet reg = /\"(\\\\.|[^\"\\\\])*\"/g;\nlet str = ' .. \"test me\" .. \"Say \\\\\"Hello\\\\\"!\" .. \"\\\\\\\\ \\\\\"\" .. ';\n\nalert( str.match(reg) ); // \"test me\",\"Say \\\"Hello\\\"!\",\"\\\\ \\\"\"\n```","parent":"regexp-alternation"}},"match-exact-tag":{"type":"Task","value":{"title":"Find the full tag","slug":"match-exact-tag","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/11-regexp-alternation/04-match-exact-tag","weight":4,"libs":[],"content":"\nWrite a regexp to find the tag `<style...>`. It should match the full tag: it may have no attributes  `<style>` or have several of them `<style type=\"...\" id=\"...\">`.\n\n...But the regexp should not match `<styler>`!\n\nFor instance:\n\n```js\nlet reg = /your regexp/g;\n\nalert( '<style> <styler> <style test=\"...\">'.match(reg) ); // <style>, <style test=\"...\">\n```","solution":"The pattern start is obvious: `pattern:<style`.\n\n...But then we can't simply write `pattern:<style.*?>`, because `match:<styler>` would match it.\n\nWe need either a space after `match:<style` and then optionally something else or the ending `match:>`.\n\nIn the regexp language: `pattern:<style(>|\\s.*?>)`.\n\nIn action:\n\n```js run\nlet reg = /<style(>|\\s.*?>)/g;\n\nalert( '<style> <styler> <style test=\"...\">'.match(reg) ); // <style>, <style test=\"...\">\n```","parent":"regexp-alternation"}},"regexp-anchors":{"type":"Article","value":{"title":"String start ^ and finish $","slug":"regexp-anchors","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/12-regexp-anchors/article.md","isFolder":false,"weight":12,"content":"\nThe caret `pattern:'^'` and dollar `pattern:'$'` characters have special meaning in a regexp. They are called \"anchors\".\n\nThe caret `pattern:^` matches at the beginning of the text, and the dollar `pattern:$` -- in the end.\n\nFor instance, let's test if the text starts with `Mary`:\n\n```js run\nlet str1 = \"Mary had a little lamb, it's fleece was white as snow\";\nlet str2 = 'Everywhere Mary went, the lamp was sure to go';\n\nalert( /^Mary/.test(str1) ); // true\nalert( /^Mary/.test(str2) ); // false\n```\n\nThe pattern `pattern:^Mary` means: \"the string start and then Mary\".\n\nNow let's test whether the text ends with an email.\n\nTo match an email, we can use a regexp `pattern:[-.\\w]+@([\\w-]+\\.)+[\\w-]{2,20}`. It's not perfect, but mostly works.\n\nTo test whether the string ends with the email, let's add `pattern:$` to the pattern:\n\n```js run\nlet reg = /[-.\\w]+@([\\w-]+\\.)+[\\w-]{2,20}$/g;\n\nlet str1 = 'My email is mail@site.com';\nlet str2 = 'Everywhere Mary went, the lamp was sure to go';\n\nalert( reg.test(str1) ); // true\nalert( reg.test(str2) ); // false\n```\n\nWe can use both anchors together to check whether the string exactly follows the pattern. That's often used for validation.\n\nFor instance we want to check that `str` is exactly a color in the form `#` plus 6 hex digits. The pattern for the color is `pattern:#[0-9a-f]{6}`.\n\nTo check that the *whole string* exactly matches it, we add `pattern:^...$`:\n\n```js run\nlet str = \"#abcdef\";\n\nalert( /^#[0-9a-f]{6}$/i.test(str) ); // true\n```\n\nThe regexp engine looks for the text start, then the color, and then immediately the text end. Just what we need.\n\n```smart header=\"Anchors have zero length\"\nAnchors just like `\\b` are tests. They have zero-width.\n\nIn other words, they do not match a character, but rather force the regexp engine to check the condition (text start/end).\n```\n\nThe behavior of anchors changes if there's a flag `pattern:m` (multiline mode). We'll explore it in the next chapter.","libs":[],"children":["start-end","test-mac"],"parent":"regular-expressions"}},"start-end":{"type":"Task","value":{"title":"Regexp ^$","slug":"start-end","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/12-regexp-anchors/1-start-end","weight":1,"libs":[],"content":"\nWhich string matches the pattern `pattern:^$`?","solution":"The empty string is the only match: it starts and immediately finishes.\n\nThe task once again demonstrates that anchors are not characters, but tests.\n\nThe string is empty `\"\"`. The engine first matches the `pattern:^` (input start), yes it's there, and then immediately the end `pattern:$`, it's here too. So there's a match.","parent":"regexp-anchors"}},"test-mac":{"type":"Task","value":{"title":"Check MAC-address","slug":"test-mac","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/12-regexp-anchors/2-test-mac","weight":2,"libs":[],"content":"\n[MAC-address](https://en.wikipedia.org/wiki/MAC_address) of a network interface consists of 6 two-digit hex numbers separated by a colon.\n\nFor instance: `subject:'01:32:54:67:89:AB'`.\n\nWrite a regexp that checks whether a string is MAC-address.\n\nUsage:\n```js\nlet reg = /your regexp/;\n\nalert( reg.test('01:32:54:67:89:AB') ); // true\n\nalert( reg.test('0132546789AB') ); // false (no colons)\n\nalert( reg.test('01:32:54:67:89') ); // false (5 numbers, must be 6)\n\nalert( reg.test('01:32:54:67:89:ZZ') ) // false (ZZ ad the end)\n```","solution":"A two-digit hex number is `pattern:[0-9a-f]{2}` (assuming the `pattern:i` flag is enabled).\n\nWe need that number `NN`, and then `:NN` repeated 5 times (more numbers);\n\nThe regexp is: `pattern:[0-9a-f]{2}(:[0-9a-f]{2}){5}`\n\nNow let's show that the match should capture all the text: start at the beginning and end at the end. That's done by wrapping the pattern in `pattern:^...$`.\n\nFinally:\n\n```js run\nlet reg = /^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$/i;\n\nalert( reg.test('01:32:54:67:89:AB') ); // true\n\nalert( reg.test('0132546789AB') ); // false (no colons)\n\nalert( reg.test('01:32:54:67:89') ); // false (5 numbers, need 6)\n\nalert( reg.test('01:32:54:67:89:ZZ') ) // false (ZZ in the end)\n```","parent":"regexp-anchors"}},"regexp-multiline-mode":{"type":"Article","value":{"title":"Multiline mode, flag \"m\"","slug":"regexp-multiline-mode","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/13-regexp-multiline-mode/article.md","isFolder":false,"weight":13,"content":"\nThe multiline mode is enabled by the flag `pattern:/.../m`.\n\nIt only affects the behavior of `pattern:^` and `pattern:$`.\n\nIn the multiline mode they match not only at the beginning and end of the string, but also at start/end of line.\n\n## Line start ^\n\nIn the example below the text has multiple lines. The pattern `pattern:/^\\d+/gm` takes a number from the beginning of each one:\n\n```js run\nlet str = `1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`;\n\n*!*\nalert( str.match(/^\\d+/gm) ); // 1, 2, 33\n*/!*\n```\n\nWithout the flag  `pattern:/.../m` only the first number is matched:\n\n\n```js run\nlet str = `1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`;\n\n*!*\nalert( str.match(/^\\d+/g) ); // 1\n*/!*\n```\n\nThat's because by default a caret `pattern:^` only matches at the beginning of the text, and in the multiline mode -- at the start of a line.\n\nThe regular expression engine moves along the text and looks for a string start `pattern:^`, when finds -- continues to match the rest of the pattern `pattern:\\d+`.\n\n## Line end $\n\nThe dollar sign `pattern:$` behaves similarly.\n\nThe regular expression `pattern:\\w+$` finds the last word in every line\n\n```js run\nlet str = `1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`;\n\nalert( str.match(/\\w+$/gim) ); // Winnie,Piglet,Eeyore\n```\n\nWithout the `pattern:/.../m` flag the dollar `pattern:$` would only match the end of the whole string, so only the very last word would be found.\n\n## Anchors ^$ versus \\n\n\nTo find a newline, we can use not only `pattern:^` and `pattern:$`, but also the newline character `\\n`.\n\nThe first difference is that unlike anchors, the character `\\n` \"consumes\" the newline character and adds it to the result.\n\nFor instance, here we use it instead of `pattern:$`:\n\n```js run\nlet str = `1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`;\n\nalert( str.match(/\\w+\\n/gim) ); // Winnie\\n,Piglet\\n\n```\n\nHere every match is a word plus a newline character.\n\nAnd one more difference -- the newline `\\n` does not match at the string end. That's why `Eeyore` is not found in the example above.\n\nSo, anchors are usually better, they are closer to what we want to get.","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-lookahead":{"type":"Article","value":{"title":"Lookahead (in progress)","slug":"regexp-lookahead","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/14-regexp-lookahead/article.md","isFolder":false,"weight":14,"content":"\nThe article is under development, will be here when it's ready.","libs":[],"children":[],"parent":"regular-expressions"}},"regexp-infinite-backtracking-problem":{"type":"Article","value":{"title":"Infinite backtracking problem","slug":"regexp-infinite-backtracking-problem","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/5-regular-expressions/15-regexp-infinite-backtracking-problem/article.md","isFolder":false,"weight":15,"content":"\nSome regular expressions are looking simple, but can execute veeeeeery long time, and even \"hang\" the JavaScript engine.\n\nSooner or later most developers occasionally face such behavior.\n\nThe typical situation -- a regular expression works fine sometimes, but for certain strings it \"hangs\"  consuming 100% of CPU.\n\nThat may even be a vulnerability. For instance, if JavaScript is on the server, and it uses regular expressions to process user data, then such an input may cause denial of service. The author personally saw and reported such vulnerabilities even for well-known and widely used programs.\n\nSo the problem is definitely worth to deal with.\n\n## Example\n\nThe plan will be like this:\n\n1. First we see the problem how it may occur.\n2. Then we simplify the situation and see why it occurs.\n3. Then we fix it.\n\nFor instance let's consider searching tags in HTML.\n\nWe want to find all tags, with or without attributes -- like `subject:<a href=\"...\" class=\"doc\" ...>`. We need the regexp to work reliably, because HTML comes from the internet and can be messy.\n\nIn particular, we need it to match tags like `<a test=\"<>\" href=\"#\">` -- with `<` and `>` in attributes. That's allowed by [HTML standard](https://html.spec.whatwg.org/multipage/syntax.html#syntax-attributes).\n\nNow we can see that a simple regexp like `pattern:<[^>]+>` doesn't work, because it stops at the first `>`, and we need to ignore `<>` inside an attribute.\n\n```js run\n// the match doesn't reach the end of the tag - wrong!\nalert( '<a test=\"<>\" href=\"#\">'.match(/<[^>]+>/) ); // <a test=\"<>\n```\n\nWe need the whole tag.\n\nTo correctly handle such situations we need a more complex regular expression. It will have the form  `pattern:<tag (key=value)*>`.\n\nIn the regexp language that is: `pattern:<\\w+(\\s*\\w+=(\\w+|\"[^\"]*\")\\s*)*>`:\n\n1. `pattern:<\\w+` -- is the tag start,\n2. `pattern:(\\s*\\w+=(\\w+|\"[^\"]*\")\\s*)*` -- is an arbitrary number of pairs `word=value`, where the value can be either a word `pattern:\\w+` or a quoted string `pattern:\"[^\"]*\"`.\n\nThat doesn't yet support few details of HTML grammar, for instance strings in 'single' quotes, but they can be added later, so that's somewhat close to real life. For now we want the regexp to be simple.\n\nLet's try it in action:\n\n```js run\nlet reg = /<\\w+(\\s*\\w+=(\\w+|\"[^\"]*\")\\s*)*>/g;\n\nlet str='...<a test=\"<>\" href=\"#\">... <b>...';\n\nalert( str.match(reg) ); // <a test=\"<>\" href=\"#\">, <b>\n```\n\nGreat, it works! It found both the long tag `match:<a test=\"<>\" href=\"#\">` and the short one `match:<b>`.\n\nNow let's see the problem.\n\nIf you run the example below, it may hang the browser (or whatever JavaScript engine runs):\n\n```js run\nlet reg = /<\\w+(\\s*\\w+=(\\w+|\"[^\"]*\")\\s*)*>/g;\n\nlet str = `<tag a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  \n  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b`;\n\n*!*\n// The search will take a long long time\nalert( str.match(reg) );\n*/!*\n```\n\nSome regexp engines can handle that search, but most of them don't.\n\nWhat's the matter? Why a simple regular expression on such a small string \"hangs\"?\n\nLet's simplify the situation by removing the tag and quoted strings.\n\nHere we look only for attributes:\n\n```js run\n// only search for space-delimited attributes\nlet reg = /<(\\s*\\w+=\\w+\\s*)*>/g;\n\nlet str = `<a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b\n  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b`;\n\n*!*\n// the search will take a long, long time\nalert( str.match(reg) );\n*/!*\n```\n\nThe same problem persists.\n\nHere we end the demo of the problem and start looking into what's going on and why it hangs.\n\n## Backtracking\n\nTo make an example even simpler, let's consider `pattern:(\\d+)*$`.\n\nThis regular expression also has the same problem. In most regexp engines that search takes a very long time (careful -- can hang):\n\n```js run\nalert( '12345678901234567890123456789123456789z'.match(/(\\d+)*$/) );\n```\n\nSo what's wrong with the regexp?\n\nFirst, one may notice that the regexp is a little bit strange. The quantifier `pattern:*` looks extraneous. If we want a number, we can use `pattern:\\d+$`.\n\nIndeed, the regexp is artificial. But the reason why it is slow is the same as those we saw above. So let's understand it, and then return to the real-life examples.\n\nWhat happen during the search of `pattern:(\\d+)*$` in the line `subject:123456789z`?\n\n1. First, the regexp engine tries to find a number `pattern:\\d+`. The plus `pattern:+` is greedy by default, so it consumes all digits:\n\n    ```\n    \\d+.......\n    (123456789)z\n    ```\n2. Then it tries to apply the star around the parentheses `pattern:(\\d+)*`, but there are no more digits, so it the star doesn't give anything.\n\n    Then the pattern has the string end anchor `pattern:$`, and in the text we have `subject:z`.\n\n    ```\n               X\n    \\d+........$\n    (123456789)z\n    ```\n\n    No match!\n3. There's no match, so the greedy quantifier `pattern:+` decreases the count of repetitions (backtracks).\n\n    Now `\\d+` is not all digits, but all except the last one:\n    ```\n    \\d+.......\n    (12345678)9z\n    ```\n4. Now the engine tries to continue the search from the new position (`9`).\n\n    The start `pattern:(\\d+)*` can now be applied -- it gives the number `match:9`:\n\n    ```\n\n    \\d+.......\\d+\n    (12345678)(9)z\n    ```\n\n    The engine tries to match `$` again, but fails, because meets `subject:z`:\n\n    ```\n                 X\n    \\d+.......\\d+\n    (12345678)(9)z\n    ```\n\n    There's no match, so the engine will continue backtracking.\n5. Now the first number `pattern:\\d+` will have 7 digits, and the rest of the string `subject:89` becomes the second `pattern:\\d+`:\n\n    ```\n                 X\n    \\d+......\\d+\n    (1234567)(89)z\n    ```\n\n    ...Still no match for `pattern:$`.\n\n    The search engine backtracks again. Backtracking generally works like this: the last greedy quantifier decreases the number of repetitions until it can. Then the previous greedy quantifier decreases, and so on. In our case the last greedy quantifier is the second `pattern:\\d+`, from `subject:89` to `subject:8`, and then the star takes `subject:9`:\n\n    ```\n                   X\n    \\d+......\\d+\\d+\n    (1234567)(8)(9)z\n    ```\n6. ...Fail again. The second and third `pattern:\\d+` backtracked to the end, so the first quantifier shortens the match to `subject:123456`, and the star takes the rest:\n\n    ```\n                 X\n    \\d+.......\\d+\n    (123456)(789)z\n    ```\n\n    Again no match. The process repeats: the last greedy quantifier releases one character (`9`):\n\n    ```\n                   X\n    \\d+.....\\d+ \\d+\n    (123456)(78)(9)z\n    ```\n7. ...And so on.\n\nThe regular expression engine goes through all combinations of `123456789` and their subsequences. There are a lot of them, that's why it takes so long.\n\nA smart guy can say here: \"Backtracking? Let's turn on the lazy mode -- and no more backtracking!\".\n\nLet's replace `pattern:\\d+` with `pattern:\\d+?` and see if it works (careful, can hang the browser)\n\n```js run\n// sloooooowwwwww\nalert( '12345678901234567890123456789123456789z'.match(/(\\d+?)*$/) );\n```\n\nNo, it doesn't.\n\nLazy quantifiers actually do the same, but in the reverse order. Just think about how the search engine would work in this case.\n\nSome regular expression engines have tricky built-in checks to detect infinite backtracking or other means to work around them, but there's no universal solution.\n\nIn the example above, when we search `pattern:<(\\s*\\w+=\\w+\\s*)*>` in the string `subject:<a=b  a=b  a=b  a=b` -- the similar thing happens.\n\nThe string has no `>` at the end, so the match is impossible, but the regexp engine does not know about it. The search backtracks trying different combinations of `pattern:(\\s*\\w+=\\w+\\s*)`:\n\n```\n(a=b a=b a=b) (a=b)\n(a=b a=b) (a=b a=b)\n...\n```\n\n## How to fix?\n\nThe problem -- too many variants in backtracking even if we don't need them.\n\nFor instance, in the pattern `pattern:(\\d+)*$` we (people) can easily see that `pattern:(\\d+)` does not need to backtrack.\n\nDecreasing the count of `pattern:\\d+` can not help to find a match, there's no matter between these two:\n\n```\n\\d+........\n(123456789)z\n\n\\d+...\\d+....\n(1234)(56789)z\n```\n\nLet's get back to more real-life example: `pattern:<(\\s*\\w+=\\w+\\s*)*>`. We want it to find pairs `name=value` (as many as it can). There's no need in backtracking here.\n\nIn other words, if it found many `name=value` pairs and then can't find `>`, then there's no need to decrease the count of repetitions. Even if we match one pair less, it won't give us the closing `>`:\n\nModern regexp engines support so-called \"possessive\" quantifiers for that. They are like greedy, but don't backtrack at all. Pretty simple, they capture whatever they can, and the search continues. There's also another tool called \"atomic groups\" that forbid backtracking inside parentheses.\n\nUnfortunately, but both these features are not supported by JavaScript.\n\nAlthough we can get a similar affect using lookahead. There's more about the relation between possessive quantifiers and lookahead in articles [Regex: Emulate Atomic Grouping (and Possessive Quantifiers) with LookAhead](http://instanceof.me/post/52245507631/regex-emulate-atomic-grouping-with-lookahead) and [Mimicking Atomic Groups](http://blog.stevenlevithan.com/archives/mimic-atomic-groups).\n\nThe pattern to take as much repetitions as possible without backtracking is: `pattern:(?=(a+))\\1`.\n\nIn other words, the lookahead `pattern:?=` looks for the maximal count `pattern:a+` from the current position. And then they are \"consumed into the result\" by the backreference `pattern:\\1`.\n\nThere will be no backtracking, because lookahead does not backtrack. If it found like 5 times of `pattern:a+` and the further match failed, then it doesn't go back to 4.\n\nLet's fix the regexp for a tag with attributes from the beginning of the chapter`pattern:<\\w+(\\s*\\w+=(\\w+|\"[^\"]*\")\\s*)*>`. We'll use lookahead to prevent backtracking of `name=value` pairs:\n\n```js run\n// regexp to search name=value\nlet attrReg = /(\\s*\\w+=(\\w+|\"[^\"]*\")\\s*)/\n\n// use it inside the regexp for tag\nlet reg = new RegExp('<\\\\w+(?=(' + attrReg.source + '*))\\\\1>', 'g');\n\nlet good = '...<a test=\"<>\" href=\"#\">... <b>...';\n\nlet bad = `<tag a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b\n  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b  a=b`;\n\nalert( good.match(reg) ); // <a test=\"<>\" href=\"#\">, <b>\nalert( bad.match(reg) ); // null (no results, fast!)\n```\n\nGreat, it works! We found a long tag  `match:<a test=\"<>\" href=\"#\">` and a small one `match:<b>` and didn't hang the engine.\n\nPlease note the `attrReg.source` property. `RegExp` objects provide access to their source string in it. That's convenient when we want to insert one regexp into another.","libs":[],"children":[],"parent":"regular-expressions"}},"async":{"type":"Article","value":{"title":"Promises, async/await","slug":"async","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async","isFolder":true,"weight":6,"content":"","libs":[],"children":["callbacks","promise-basics","promise-chaining","promise-api","async-await"]}},"callbacks":{"type":"Article","value":{"title":"Introduction: callbacks","slug":"callbacks","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/01-callbacks/article.md","isFolder":false,"weight":1,"content":"\nMany actions in JavaScript are *asynchronous*.\n\nFor instance, take a look at the function `loadScript(src)`:\n\n```js\nfunction loadScript(src) {\n  let script = document.createElement('script');\n  script.src = src;\n  document.head.append(script);\n}\n```\n\nThe purpose of the function is to load a new script. When it adds the `<script src=\"…\">` to the document, the browser loads and executes it.\n\nWe can use it like this:\n\n```js\n// loads and executes the script\nloadScript('/my/script.js');\n```\n\nThe function is called \"asynchronously\", because the action (script loading) finishes not now, but later.\n\nThe call initiates the script loading, then the execution continues. While the script is loading, the code below may finish executing, and if the loading takes time, other scripts may run meanwhile too.\n\n```js\nloadScript('/my/script.js');\n// the code below loadScript doesn't wait for the script loading to finish\n// ...\n```\n\nNow let's say we want to use the new script when it loads. It probably declares new functions, so we'd like to run them.\n\nBut if we do that immediately after the `loadScript(…)` call, that wouldn't work:\n\n```js\nloadScript('/my/script.js'); // the script has \"function newFunction() {…}\"\n\n*!*\nnewFunction(); // no such function!\n*/!*\n```\n\nNaturally, the browser probably didn't have time to load the script. So the immediate call to the new function fails. As of now, `loadScript` function doesn't provide a way to track the load completion. The script loads and eventually runs, that's all. But we'd like to know when it happens, to use new functions and variables from that script.\n\nLet's add a `callback` function as a second argument to `loadScript` that should execute when the script loads:\n\n```js\nfunction loadScript(src, *!*callback*/!*) {\n  let script = document.createElement('script');\n  script.src = src;\n\n*!*\n  script.onload = () => callback(script);\n*/!*\n\n  document.head.append(script);\n}\n```\n\nNow if we want to call new functions from the script, we should write that in the callback:\n\n```js\nloadScript('/my/script.js', function() {\n  // the callback runs after the script is loaded\n  newFunction(); // so now it works\n  ...\n});\n```\n\nThat's the idea: the second argument is a function (usually anonymous) that runs when the action is completed.\n\nHere's a runnable example with a real script:\n\n```js run\nfunction loadScript(src, callback) {\n  let script = document.createElement('script');\n  script.src = src;\n  script.onload = () => callback(script);\n  document.head.append(script);\n}\n\n*!*\nloadScript('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js', script => {\n  alert(`Cool, the ${script.src} is loaded`);\n  alert( _ ); // function declared in the loaded script\n});\n*/!*\n```\n\nThat's called a \"callback-based\" style of asynchronous programming. A function that does something asynchronously should provide a `callback` argument where we put the function to run after it's complete.\n\nHere we did it in `loadScript`, but of course it's a general approach.\n\n## Callback in callback\n\nHow to load two scripts sequentially: the first one, and then the second one after it?\n\nThe natural solution would be to put the second `loadScript` call inside the callback, like this:\n\n```js\nloadScript('/my/script.js', function(script) {\n\n  alert(`Cool, the ${script.src} is loaded, let's load one more`);\n\n*!*\n  loadScript('/my/script2.js', function(script) {\n    alert(`Cool, the second script is loaded`);\n  });\n*/!*\n\n});\n```\n\nAfter the outer `loadScript` is complete, the callback initiates the inner one.\n\nWhat if we want one more script...?\n\n```js\nloadScript('/my/script.js', function(script) {\n\n  loadScript('/my/script2.js', function(script) {\n\n*!*\n    loadScript('/my/script3.js', function(script) {\n      // ...continue after all scripts are loaded\n    });\n*/!*\n\n  })\n\n});\n```\n\nSo, every new action is inside a callback. That's fine for few actions, but not good for many, so we'll see other variants soon.\n\n## Handling errors\n\nIn examples above we didn't consider errors. What if the script loading fails? Our callback should be able to react on that.\n\nHere's an improved version of `loadScript` that tracks loading errors:\n\n```js run\nfunction loadScript(src, callback) {\n  let script = document.createElement('script');\n  script.src = src;\n\n*!*\n  script.onload = () => callback(null, script);\n  script.onerror = () => callback(new Error(`Script load error for ${src}`));\n*/!*\n\n  document.head.append(script);\n}\n```\n\nIt calls `callback(null, script)` for successful load and `callback(error)` otherwise.\n\nThe usage:\n```js\nloadScript('/my/script.js', function(error, script) {\n  if (error) {\n    // handle error\n  } else {\n    // script loaded successfully\n  }\n});\n```\n\nOnce again, the recipe that we used for `loadScript` is actually quite common. It's called the \"error-first callback\" style.\n\nThe convention is:\n1. The first argument of `callback` is reserved for an error if it occurs. Then `callback(err)` is called.\n2. The second argument (and the next ones if needed) are for the successful result. Then `callback(null, result1, result2…)` is called.\n\nSo the single `callback` function is used both for reporting errors and passing back results.\n\n## Pyramid of doom\n\nFrom the first look it's a viable way of asynchronous coding. And indeed it is. For one or maybe two nested calls it looks fine.\n\nBut for multiple asynchronous actions that follow one after another we'll have code like this:\n\n```js\nloadScript('1.js', function(error, script) {\n\n  if (error) {\n    handleError(error);\n  } else {\n    // ...\n    loadScript('2.js', function(error, script) {\n      if (error) {\n        handleError(error);\n      } else {\n        // ...\n        loadScript('3.js', function(error, script) {\n          if (error) {\n            handleError(error);\n          } else {\n  *!*\n            // ...continue after all scripts are loaded (*)\n  */!*\n          }\n        });\n\n      }\n    })\n  }\n});\n```\n\nIn the code above:\n1. We load `1.js`, then if there's no error.\n2. We load `2.js`, then if there's no error.\n3. We load `3.js`, then if there's no error -- do something else `(*)`.\n\nAs calls become more nested, the code becomes deeper and increasingly more difficult to manage, especially if we have a real code instead of `...`, that may include more loops, conditional statements and so on.\n\nThat's sometimes called \"callback hell\" or \"pyramid of doom\".\n\n![](callback-hell.png)\n\nThe \"pyramid\" of nested calls grows to the right with every asynchronous action. Soon it spirals out of control.\n\nSo this way of coding isn't very good.\n\nWe can try to alleviate the problem by making every action a standalone function, like this:\n\n```js\nloadScript('1.js', step1);\n\nfunction step1(error, script) {\n  if (error) {\n    handleError(error);\n  } else {\n    // ...\n    loadScript('2.js', step2);\n  }\n}\n\nfunction step2(error, script) {\n  if (error) {\n    handleError(error);\n  } else {\n    // ...\n    loadScript('3.js', step3);\n  }\n}\n\nfunction step3(error, script) {\n  if (error) {\n    handleError(error);\n  } else {\n    // ...continue after all scripts are loaded (*)\n  }\n};\n```\n\nSee? It does the same, and there's no deep nesting now, because we made every action a separate top-level function.\n\nIt works, but the code looks like a torn apart spreadsheet. It's difficult to read, you probably noticed that. One needs to eye-jump between pieces while reading it. That's inconvenient, especially the reader is not familiar with the code and doesn't know where to eye-jump.\n\nAlso the functions named `step*` are all of a single use, they are created only to avoid the \"pyramid of doom\". No one is going to reuse them outside of the action chain. So there's a bit of a namespace cluttering here.\n\nWe'd like to have a something better.\n\nLuckily, there are other ways to avoid such pyramids. One of the best ways is to use \"promises\", described in the next chapter.","libs":[],"children":["animate-circle-callback"],"parent":"async"}},"animate-circle-callback":{"type":"Task","value":{"title":"Animated circle with callback","slug":"animate-circle-callback","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/01-callbacks/01-animate-circle-callback","weight":1,"libs":[],"content":"\nIn the task <info:task/animate-circle> an animated growing circle is shown.\n\nNow let's say we need not just a circle, but to show a message inside it. The message should appear *after* the animation is complete (the circle is fully grown), otherwise it would look ugly.\n\nIn the solution of the task, the function `showCircle(cx, cy, radius)` draws the circle, but gives no way to track when it's ready.\n\nAdd a callback argument: `showCircle(cx, cy, radius, callback)` to be called when the animation is complete. The `callback` should receive the circle `<div>` as an argument.\n\nHere's the example:\n\n```js\nshowCircle(150, 150, 100, div => {\n  div.classList.add('message-ball');\n  div.append(\"Hello, world!\");\n});\n```\n\nDemo:\n\n[iframe src=\"solution\" height=260]\n\nTake the solution of the task <info:task/animate-circle> as the base.","solution":"","parent":"callbacks"}},"promise-basics":{"type":"Article","value":{"title":"Promise","slug":"promise-basics","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/02-promise-basics/article.md","isFolder":false,"weight":2,"content":"\nImagine that you're a top singer, and fans ask day and night for your upcoming single.\n\nTo get some relief, you promise to send it to them when it's published. You give your fans a list to which they can subscribe for updates. They can fill in their email addresses, so that when the song becomes available, all subscribed parties instantly receive it. And even if something goes very wrong, say, if plans to publish the song are cancelled, they will still be notified.\n\nEveryone is happy: you, because the people don't crowd you any more, and fans, because they won't miss the single.\n\nThis is a real-life analogy for things we often have in programming:\n\n1. A \"producing code\" that does something and takes time. For instance, the code loads a remote script. That's a \"singer\".\n2. A \"consuming code\" that wants the result of the \"producing code\" once it's ready. Many functions  may need that result. These are the \"fans\".\n3. A *promise* is a special JavaScript object that links the \"producing code\" and the \"consuming code\" together. In terms of our analogy: this is the \"subscription list\". The \"producing code\" takes whatever time it needs to produce the promised result, and the \"promise\" makes that result available to all of the subscribed code when it's ready.\n\nThe analogy isn't terribly accurate, because JavaScript promises are more complex than a simple subscription list: they have additional features and limitations. But it's fine to begin with.\n\nThe constructor syntax for a promise object is:\n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // executor (the producing code, \"singer\")\n});\n```\n\nThe function passed to `new Promise` is called the *executor*. When the promise is created, this executor function runs automatically. It contains the producing code, that should eventually produce a result. In terms of the analogy above: the executor is the \"singer\".\n\nThe resulting `promise` object has internal properties:\n\n- `state` — initially \"pending\", then changes to either \"fulfilled\" or \"rejected\",\n- `result` — an arbitrary value of your choosing, initially `undefined`.\n\nWhen the executor finishes the job, it should call one of the functions that it gets as arguments:\n\n- `resolve(value)` — to indicate that the job finished successfully:\n    - sets `state` to `\"fulfilled\"`,\n    - sets `result` to `value`.\n- `reject(error)` — to indicate that an error occurred:\n    - sets `state` to `\"rejected\"`,\n    - sets `result` to `error`.\n\n![](promise-resolve-reject.png)\n\nLater we'll see how these changes become known to \"fans\".\n\nHere's an example of a Promise constructor and a simple executor function with its \"producing code\" (the `setTimeout`):\n\n```js run\nlet promise = new Promise(function(resolve, reject) {\n  // the function is executed automatically when the promise is constructed\n\n  // after 1 second signal that the job is done with the result \"done!\"\n  setTimeout(() => *!*resolve(\"done!\")*/!*, 1000);\n});\n```\n\nWe can see two things by running the code above:\n\n1. The executor is called automatically and immediately (by the `new Promise`).\n2. The executor receives two arguments: `resolve` and `reject` — these functions are pre-defined by the JavaScript engine. So we don't need to create them. Instead, we should write the executor to call them when ready.\n\nAfter one second of \"processing\" the executor calls `resolve(\"done\")` to produce the result:\n\n![](promise-resolve-1.png)\n\nThat was an example of a successful job completion, a \"fulfilled promise\".\n\nAnd now an example of the executor rejecting the promise with an error:\n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // after 1 second signal that the job is finished with an error\n  setTimeout(() => *!*reject(new Error(\"Whoops!\"))*/!*, 1000);\n});\n```\n\n![](promise-reject-1.png)\n\nTo summarize, the executor should do a job (something that takes time usually) and then call `resolve` or `reject` to change the state of the corresponding Promise object.\n\nThe Promise that is either resolved or rejected is called \"settled\", as opposed to a \"pending\" Promise.\n\n````smart header=\"There can be only a single result or an error\"\nThe executor should call only one `resolve` or `reject`. The promise's state change is final.\n\nAll further calls of `resolve` and `reject` are ignored:\n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  resolve(\"done\");\n\n  reject(new Error(\"…\")); // ignored\n  setTimeout(() => resolve(\"…\")); // ignored\n});\n```\n\nThe idea is that a job done by the executor may have only one result or an error.\n\nFurther, `resolve`/`reject` expect only one argument and will ignore additional arguments.\n````\n\n```smart header=\"Reject with `Error` objects\"\nIn case if something goes wrong, we can call `reject` with any type of argument (just like `resolve`). But it is recommended to use `Error` objects (or objects that inherit from `Error`). The reasoning for that will soon become apparent.\n```\n\n````smart header=\"Immediately calling `resolve`/`reject`\"\nIn practice, an executor usually does something asynchronously and calls `resolve`/`reject` after some time, but it doesn't have to. We also can call `resolve` or `reject` immediately, like this:\n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // not taking our time to do the job\n  resolve(123); // immediately give the result: 123\n});\n```\n\nFor instance, this might happen when we start to do a job but then see that everything has already been completed.\n\nThat's fine. We immediately have a resolved Promise, nothing wrong with that.\n````\n\n```smart header=\"The `state` and `result` are internal\"\nThe properties `state` and `result` of the Promise object are internal. We can't directly access them from our \"consuming code\". We can use the methods `.then`/`.catch` for that. They are described below.\n```\n\n## Consumers: \"then\" and \"catch\"\n\nA Promise object serves as a link between the executor (the \"producing code\" or \"singer) and the consuming functions (the \"fans\"), which will receive the result or error. Consuming functions can be registered (subscribed) using the methods `.then` and `.catch`.\n\nThe syntax of `.then` is:\n\n```js\npromise.then(\n  function(result) { *!*/* handle a successful result */*/!* },\n  function(error) { *!*/* handle an error */*/!* }\n);\n```\n\nThe first argument of `.then` is a function that:\n\n1. runs when the Promise is resolved, and\n2. receives the result.\n\nThe second argument of `.then` is a function that:\n\n1. runs when the Promise is rejected, and\n2. receives the error.\n\nFor instance, here's the reaction to a successfuly resolved promise:\n\n```js run\nlet promise = new Promise(function(resolve, reject) {\n  setTimeout(() => resolve(\"done!\"), 1000);\n});\n\n// resolve runs the first function in .then\npromise.then(\n*!*\n  result => alert(result), // shows \"done!\" after 1 second\n*/!*\n  error => alert(error) // doesn't run\n);\n```\n\nThe first function was executed.\n\nAnd in the case of a rejection -- the second one:\n\n```js run\nlet promise = new Promise(function(resolve, reject) {\n  setTimeout(() => reject(new Error(\"Whoops!\")), 1000);\n});\n\n// reject runs the second function in .then\npromise.then(\n  result => alert(result), // doesn't run\n*!*\n  error => alert(error) // shows \"Error: Whoops!\" after 1 second\n*/!*\n);\n```\n\nIf we're interested only in successful completions, then we can provide only one function argument to `.then`:\n\n```js run\nlet promise = new Promise(resolve => {\n  setTimeout(() => resolve(\"done!\"), 1000);\n});\n\n*!*\npromise.then(alert); // shows \"done!\" after 1 second\n*/!*\n```\n\nIf we're interested only in errors, then we can use `null` as the first argument: `.then(null, errorHandlingFunction)`. Or we can use `.catch(errorHandlingFunction)`, which is exactly the same:\n\n\n```js run\nlet promise = new Promise((resolve, reject) => {\n  setTimeout(() => reject(new Error(\"Whoops!\")), 1000);\n});\n\n*!*\n// .catch(f) is the same as promise.then(null, f)\npromise.catch(alert); // shows \"Error: Whoops!\" after 1 second\n*/!*\n```\n\nThe call `.catch(f)` is a complete analog of `.then(null, f)`, it's just a shorthand.\n\n````smart header=\"On settled promises `then` runs immediately\"\nIf a promise is pending, `.then/catch` handlers wait for the result. Otherwise, if a promise has already settled, they execute immediately:\n\n```js run\n// an immediately resolved promise\nlet promise = new Promise(resolve => resolve(\"done!\"));\n\npromise.then(alert); // done! (shows up right now)\n```\n\nSome tasks may sometimes require time and sometimes finish immediately. The good thing is: the `.then` handler is guaranteed to run in both cases.\n````\n\n````smart header=\"Handlers of `.then`/`.catch` are always asynchronous\"\nEven when the Promise is immediately resolved, code which occurs on lines *below* your `.then`/`.catch` may still execute first.\n\nThe JavaScript engine has an internal execution queue which gets all `.then/catch` handlers.\n\nBut it only looks into that queue when the current execution is finished.\n\nIn other words, `.then/catch` handlers are pending execution until the engine is done with the current code.\n\nFor instance, here:\n\n```js run\n// an \"immediately\" resolved Promise\nconst executor = resolve => resolve(\"done!\");\nconst promise = new Promise(executor);\n\npromise.then(alert); // this alert shows last (*)\n\nalert(\"code finished\"); // this alert shows first\n```\n\nThe promise becomes settled immediately, but the engine first finishes the current code, calls `alert`, and only *afterwards* looks into the queue to run `.then` handler.\n\nSo the code *after* `.then` ends up always running *before* the Promise's subscribers, even in the case of an immediately-resolved Promise.\n\nUsually that's unimportant, but in some scenarios the order may matter a great deal.\n````\n\nNext, let's see more practical examples of how promises can help us to write asynchronous code.\n\n## Example: loadScript\n\nWe've got the `loadScript` function for loading a script from the previous chapter.\n\nHere's the callback-based variant, just to remind us of it:\n\n```js\nfunction loadScript(src, callback) {\n  let script = document.createElement('script');\n  script.src = src;\n\n  script.onload = () => callback(null, script);\n  script.onerror = () => callback(new Error(`Script load error ` + src));\n\n  document.head.append(script);\n}\n```\n\nLet's rewrite it using Promises.\n\nThe new function `loadScript` will not require a callback. Instead, it will create and return a Promise object that resolves when the loading is complete. The outer code can add handlers (subscribing functions) to it using `.then`:\n\n```js run\nfunction loadScript(src) {  \n  return new Promise(function(resolve, reject) {\n    let script = document.createElement('script');\n    script.src = src;\n\n    script.onload = () => resolve(script);\n    script.onerror = () => reject(new Error(\"Script load error: \" + src));\n\n    document.head.append(script);\n  });\n}\n```\n\nUsage:\n\n```js run\nlet promise = loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js\");\n\npromise.then(\n  script => alert(`${script.src} is loaded!`),\n  error => alert(`Error: ${error.message}`)\n);\n\npromise.then(script => alert('One more handler to do something else!'));\n```\n\nWe can immediately see a few benefits over the callback-based pattern:\n\n```compare minus=\"Callbacks\" plus=\"Promises\"\n- We must have a ready `callback` function when calling `loadScript`. In other words, we must know what to do with the result *before* `loadScript` is called.\n- There can be only one callback.\n+ Promises allow us to do things in the natural order. First, we run `loadScript`, and `.then` we write what to do with the result.\n+ We can call `.then` on a Promise as many times as we want. Each time, we're adding a new \"fan\", a new subscribing function, to the \"subscription list\". More about this in the next section: [Promise Chaining](/promise-chaining).\n```\n\nSo Promises already give us better code flow and flexibility. But there's more. We'll see that in the next chapters.","libs":[],"children":["re-resolve","delay-promise","animate-circle-promise"],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,102,117,110,99,116,105,111,110,32,108,111,97,100,83,99,114,105,112,116,40,115,114,99,41,32,123,10,32,32,114,101,116,117,114,110,32,110,101,119,32,80,114,111,109,105,115,101,40,102,117,110,99,116,105,111,110,40,114,101,115,111,108,118,101,44,32,114,101,106,101,99,116,41,32,123,10,32,32,32,32,108,101,116,32,115,99,114,105,112,116,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,10,32,32,32,32,115,99,114,105,112,116,46,115,114,99,32,61,32,115,114,99,59,10,10,32,32,32,32,115,99,114,105,112,116,46,111,110,108,111,97,100,32,61,32,40,41,32,61,62,32,114,101,115,111,108,118,101,40,115,99,114,105,112,116,41,59,10,32,32,32,32,115,99,114,105,112,116,46,111,110,101,114,114,111,114,32,61,32,40,41,32,61,62,32,114,101,106,101,99,116,40,110,101,119,32,69,114,114,111,114,40,34,83,99,114,105,112,116,32,108,111,97,100,32,101,114,114,111,114,58,32,34,32,43,32,115,114,99,41,41,59,10,10,32,32,32,32,100,111,99,117,109,101,110,116,46,104,101,97,100,46,97,112,112,101,110,100,40,115,99,114,105,112,116,41,59,10,32,32,125,41,59,10,125,10,60,47,115,99,114,105,112,116,62,10]},"parent":"async"}},"re-resolve":{"type":"Task","value":{"title":"Re-resolve a promise?","slug":"re-resolve","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/02-promise-basics/01-re-resolve","weight":1,"libs":[],"content":"\n\nWhat's the output of the code below? \n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  resolve(1);\n\n  setTimeout(() => resolve(2), 1000);\n});\n\npromise.then(alert);\n```","solution":"The output is: `1`.\n\nThe second call to `resolve` is ignored, because only the first call of `reject/resolve` is taken into account. Further calls are ignored.","parent":"promise-basics"}},"delay-promise":{"type":"Task","value":{"title":"Delay with a promise","slug":"delay-promise","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/02-promise-basics/02-delay-promise","weight":2,"libs":[],"content":"\nThe built-in function `setTimeout` uses callbacks. Create a promise-based alternative.\n\nThe function `delay(ms)` should return a promise. That promise should resolve after `ms` milliseconds, so that we can add `.then` to it, like this:\n\n```js\nfunction delay(ms) {\n  // your code\n}\n\ndelay(3000).then(() => alert('runs after 3 seconds'));\n```","solution":"```js run\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ndelay(3000).then(() => alert('runs after 3 seconds'));\n```\n\nPlease note that in this task `resolve` is called without arguments. We don't return any value from `delay`, just ensure the delay.","parent":"promise-basics"}},"animate-circle-promise":{"type":"Task","value":{"title":"Animated circle with promise","slug":"animate-circle-promise","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/02-promise-basics/03-animate-circle-promise","weight":3,"libs":[],"content":"\nRewrite the `showCircle` function in the solution of the task <info:task/animate-circle-callback> so that it returns a promise instead of accepting a callback.\n\nThe new usage:\n\n```js\nshowCircle(150, 150, 100).then(div => {\n  div.classList.add('message-ball');\n  div.append(\"Hello, world!\");\n});\n```\n\nTake the solution of the task <info:task/animate-circle-callback> as the base.","solution":"","parent":"promise-basics"}},"promise-chaining":{"type":"Article","value":{"title":"Promises chaining","slug":"promise-chaining","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/03-promise-chaining/article.md","isFolder":false,"weight":3,"content":"\nLet's return to the problem mentioned in the chapter <info:callbacks>.\n\n- We have a sequence of asynchronous tasks to be done one after another. For instance, loading scripts.\n- How to code it well?\n\nPromises provide a couple of recipes to do that.\n\nIn this chapter we cover promise chaining.\n\nIt looks like this:\n\n```js run\nnew Promise(function(resolve, reject) {\n\n  setTimeout(() => resolve(1), 1000); // (*)\n\n}).then(function(result) { // (**)\n\n  alert(result); // 1\n  return result * 2;\n\n}).then(function(result) { // (***)\n\n  alert(result); // 2\n  return result * 2;\n\n}).then(function(result) {\n\n  alert(result); // 4\n  return result * 2;\n\n});\n```\n\nThe idea is that the result is passed through the chain of `.then` handlers.\n\nHere the flow is:\n1. The initial promise resolves in 1 second `(*)`,\n2. Then the `.then` handler is called `(**)`.\n3. The value that it returns is passed to the next `.then` handler `(***)`\n4. ...and so on.\n\nAs the result is passed along the chain of handlers, we can see a sequence of `alert` calls: `1` -> `2` -> `4`.\n\n![](promise-then-chain.png)\n\nThe whole thing works, because a call to `promise.then` returns a promise, so that we can call the next `.then` on it.\n\nWhen a handler returns a value, it becomes the result of that promise, so the next `.then` is called with it.\n\nTo make these words more clear, here's the start of the chain:\n\n```js run\nnew Promise(function(resolve, reject) {\n\n  setTimeout(() => resolve(1), 1000);\n\n}).then(function(result) {\n\n  alert(result);\n  return result * 2; // <-- (1)\n\n}) // <-- (2)\n// .then…\n```\n\nThe value returned by `.then` is a promise, that's why we are able to add another `.then` at `(2)`. When the value is returned in `(1)`, that promise becomes resolved, so the next handler runs with the value.\n\nUnlike the chaining, technically we can also add many `.then` to a single promise, like this:\n\n```js run\nlet promise = new Promise(function(resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n});\n\npromise.then(function(result) {\n  alert(result); // 1\n  return result * 2;\n});\n\npromise.then(function(result) {\n  alert(result); // 1\n  return result * 2;\n});\n\npromise.then(function(result) {\n  alert(result); // 1\n  return result * 2;\n});\n```\n\n...But that's a totally different thing. Here's the picture (compare it with the chaining above):\n\n![](promise-then-many.png)\n\nAll `.then` on the same promise get the same result -- the result of that promise. So in the code above all `alert` show the same: `1`. There is no result-passing between them.\n\nIn practice we rarely need multiple handlers for one promise. Chaining is used much more often.\n\n## Returning promises\n\nNormally, a value returned by a `.then` handler is immediately passed to the next handler. But there's an exception.\n\nIf the returned value is a promise, then the further execution is suspended until it settles. After that, the result of that promise is given to the next `.then` handler.\n\nFor instance:\n\n```js run\nnew Promise(function(resolve, reject) {\n\n  setTimeout(() => resolve(1), 1000);\n\n}).then(function(result) {\n\n  alert(result); // 1\n\n*!*\n  return new Promise((resolve, reject) => { // (*)\n    setTimeout(() => resolve(result * 2), 1000);\n  });\n*/!*\n\n}).then(function(result) { // (**)\n\n  alert(result); // 2\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(result * 2), 1000);\n  });\n\n}).then(function(result) {\n\n  alert(result); // 4\n\n});\n```\n\nHere the first `.then` shows `1` returns `new Promise(…)` in the line `(*)`. After one second it resolves, and the result (the argument of `resolve`, here it's `result*2`) is passed on to handler of the second `.then` in the line `(**)`. It shows `2` and does the same thing.\n\nSo the output is again 1 -> 2 -> 4, but now with 1 second delay between `alert` calls.\n\nReturning promises allows us to build chains of asynchronous actions.\n\n## Example: loadScript\n\nLet's use this feature with `loadScript` to load scripts one by one, in sequence:\n\n```js run\nloadScript(\"/article/promise-chaining/one.js\")\n  .then(function(script) {\n    return loadScript(\"/article/promise-chaining/two.js\");\n  })\n  .then(function(script) {\n    return loadScript(\"/article/promise-chaining/three.js\");\n  })\n  .then(function(script) {\n    // use functions declared in scripts\n    // to show that they indeed loaded\n    one();\n    two();\n    three();\n  });\n```\n\nHere each `loadScript` call returns a promise, and the next `.then` runs when it resolves. Then it initiates the loading of the next script. So scripts are loaded one after another.\n\nWe can add more asynchronous actions to the chain. Please note that code is still \"flat\", it grows down, not to the right. There are no signs of \"pyramid of doom\".\n\nPlease note that technically it is also possible to write `.then` directly after each promise, without returning them, like this:\n\n```js run\nloadScript(\"/article/promise-chaining/one.js\").then(function(script1) {\n  loadScript(\"/article/promise-chaining/two.js\").then(function(script2) {\n    loadScript(\"/article/promise-chaining/three.js\").then(function(script3) {\n      // this function has access to variables script1, script2 and script3\n      one();\n      two();\n      three();\n    });\n  });\n});\n```\n\nThis code does the same: loads 3 scripts in sequence. But it \"grows to the right\". So we have the same problem as with callbacks. Use chaining (return promises from `.then`) to evade it.\n\nSometimes it's ok to write `.then` directly, because the nested function has access to the outer scope (here the most nested callback has access to all variables `scriptX`), but that's an exception rather than a rule.\n\n\n````smart header=\"Thenables\"\nTo be precise, `.then` may return an arbitrary \"thenable\" object, and it will be treated the same way as a promise.\n\nA \"thenable\" object is any object with a method `.then`.\n\nThe idea is that 3rd-party libraries may implement \"promise-compatible\" objects of their own. They can have extended set of methods, but also be compatible with native promises, because they implement `.then`.\n\nHere's an example of a thenable object:\n\n```js run\nclass Thenable {\n  constructor(num) {\n    this.num = num;\n  }\n  then(resolve, reject) {\n    alert(resolve); // function() { native code }\n    // resolve with this.num*2 after the 1 second\n    setTimeout(() => resolve(this.num * 2), 1000); // (**)\n  }\n}\n\nnew Promise(resolve => resolve(1))\n  .then(result => {\n    return new Thenable(result); // (*)\n  })\n  .then(alert); // shows 2 after 1000ms\n```\n\nJavaScript checks the object returned by `.then` handler in the line `(*)`: if it has a callable method named `then`, then it calls that method providing native functions `resolve`, `reject` as arguments (similar to executor) and waits until one of them is called. In the example above `resolve(2)` is called after 1 second `(**)`. Then the result is passed further down the chain.\n\nThis feature allows to integrate custom objects with promise chains without having to inherit from `Promise`.\n````\n\n\n## Bigger example: fetch\n\nIn frontend programming promises are often used for network requests. So let's see an extended example of that.\n\nWe'll use the [fetch](mdn:api/WindowOrWorkerGlobalScope/fetch) method to load the information about the user from the remote server. The method is quite complex, it has many optional parameters, but the basic usage is quite simple:\n\n```js\nlet promise = fetch(url);\n```\n\nThis makes a network request to the `url` and returns a promise. The promise resolves with a `response` object when the remote server responds with headers, but *before the full response is downloaded*.\n\nTo read the full response, we should call a method `response.text()`: it returns a promise that resolves  when the full text downloaded from the remote server, with that text as a result.\n\nThe code below makes a request to `user.json` and loads its text from the server:\n\n```js run\nfetch('/article/promise-chaining/user.json')\n  // .then below runs when the remote server responds\n  .then(function(response) {\n    // response.text() returns a new promise that resolves with the full response text\n    // when we finish downloading it\n    return response.text();\n  })\n  .then(function(text) {\n    // ...and here's the content of the remote file\n    alert(text); // {\"name\": \"iliakan\", isAdmin: true}\n  });\n```\n\nThere is also a method `response.json()` that reads the remote data and parses it as JSON. In our case that's even more convenient, so let's switch to it.\n\nWe'll also use arrow functions for brevity:\n\n```js run\n// same as above, but response.json() parses the remote content as JSON\nfetch('/article/promise-chaining/user.json')\n  .then(response => response.json())\n  .then(user => alert(user.name)); // iliakan\n```\n\nNow let's do something with the loaded user.\n\nFor instance, we can make one more request to github, load the user profile and show the avatar:\n\n```js run\n// Make a request for user.json\nfetch('/article/promise-chaining/user.json')\n  // Load it as json\n  .then(response => response.json())\n  // Make a request to github\n  .then(user => fetch(`https://api.github.com/users/${user.name}`))\n  // Load the response as json\n  .then(response => response.json())\n  // Show the avatar image (githubUser.avatar_url) for 3 seconds (maybe animate it)\n  .then(githubUser => {\n    let img = document.createElement('img');\n    img.src = githubUser.avatar_url;\n    img.className = \"promise-avatar-example\";\n    document.body.append(img);\n\n    setTimeout(() => img.remove(), 3000); // (*)\n  });\n```\n\nThe code works, see comments about the details, but it should be quite self-descriptive. Although, there's a potential problem in it, a typical error of those who begin to use promises.\n\nLook at the line `(*)`: how can we do something *after* the avatar has finished showing and gets removed? For instance, we'd like to show a form for editing that user or something else. As of now, there's no way.\n\nTo make the chain extendable, we need to return a promise that resolves when the avatar finishes showing.\n\nLike this:\n\n```js run\nfetch('/article/promise-chaining/user.json')\n  .then(response => response.json())\n  .then(user => fetch(`https://api.github.com/users/${user.name}`))\n  .then(response => response.json())\n*!*\n  .then(githubUser => new Promise(function(resolve, reject) {\n*/!*\n    let img = document.createElement('img');\n    img.src = githubUser.avatar_url;\n    img.className = \"promise-avatar-example\";\n    document.body.append(img);\n\n    setTimeout(() => {\n      img.remove();\n*!*\n      resolve(githubUser);\n*/!*\n    }, 3000);\n  }))\n  // triggers after 3 seconds\n  .then(githubUser => alert(`Finished showing ${githubUser.name}`));\n```\n\nNow right after `setTimeout` runs `img.remove()`, it calls `resolve(githubUser)`, thus passing the control to the next `.then` in the chain and passing forward the user data.\n\nAs a rule, an asynchronous action should always return a promise.\n\nThat makes possible to plan actions after it. Even if we don't plan to extend the chain now, we may need it later.\n\nFinally, we can split the code into reusable functions:\n\n```js run\nfunction loadJson(url) {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nfunction loadGithubUser(name) {\n  return fetch(`https://api.github.com/users/${name}`)\n    .then(response => response.json());\n}\n\nfunction showAvatar(githubUser) {\n  return new Promise(function(resolve, reject) {\n    let img = document.createElement('img');\n    img.src = githubUser.avatar_url;\n    img.className = \"promise-avatar-example\";\n    document.body.append(img);\n\n    setTimeout(() => {\n      img.remove();\n      resolve(githubUser);\n    }, 3000);\n  });\n}\n\n// Use them:\nloadJson('/article/promise-chaining/user.json')\n  .then(user => loadGithubUser(user.name))\n  .then(showAvatar)\n  .then(githubUser => alert(`Finished showing ${githubUser.name}`));\n  // ...\n```\n\n## Error handling\n\nAsynchronous actions may sometimes fail: in case of an error the corresponding promise becomes rejected. For instance, `fetch` fails if the remote server is not available. We can use `.catch` to handle errors (rejections).\n\nPromise chaining is great at that aspect. When a promise rejects, the control jumps to the closest rejection handler down the chain. That's very convenient in practice.\n\nFor instance, in the code below the URL is wrong (no such server) and `.catch` handles the error:\n\n```js run\n*!*\nfetch('https://no-such-server.blabla') // rejects\n*/!*\n  .then(response => response.json())\n  .catch(err => alert(err)) // TypeError: failed to fetch (the text may vary)\n```\n\nOr, maybe, everything is all right with the server, but the response is not a valid JSON:\n\n```js run\nfetch('/') // fetch works fine now, the server responds successfully\n*!*\n  .then(response => response.json()) // rejects: the page is HTML, not a valid json\n*/!*\n  .catch(err => alert(err)) // SyntaxError: Unexpected token < in JSON at position 0\n```\n\n\nIn the example below we append `.catch` to handle all errors in the avatar-loading-and-showing chain:\n\n```js run\nfetch('/article/promise-chaining/user.json')\n  .then(response => response.json())\n  .then(user => fetch(`https://api.github.com/users/${user.name}`))\n  .then(response => response.json())\n  .then(githubUser => new Promise(function(resolve, reject) {\n    let img = document.createElement('img');\n    img.src = githubUser.avatar_url;\n    img.className = \"promise-avatar-example\";\n    document.body.append(img);\n\n    setTimeout(() => {\n      img.remove();\n      resolve(githubUser);\n    }, 3000);\n  }))\n  .catch(error => alert(error.message));\n```\n\nHere `.catch` doesn't trigger at all, because there are no errors. But if any of the promises above rejects, then it would execute.\n\n## Implicit try..catch\n\nThe code of the executor and promise handlers has an \"invisible `try..catch`\" around it. If an error happens, it gets caught and treated as a rejection.\n\nFor instance, this code:\n\n```js run\nnew Promise(function(resolve, reject) {\n*!*\n  throw new Error(\"Whoops!\");\n*/!*\n}).catch(alert); // Error: Whoops!\n```\n\n...Works the same way as this:\n\n```js run\nnew Promise(function(resolve, reject) {\n*!*\n  reject(new Error(\"Whoops!\"));\n*/!*  \n}).catch(alert); // Error: Whoops!\n```\n\nThe \"invisible `try..catch`\" around the executor automatically catches the error and treats it as a rejection.\n\nThat's so not only in the executor, but in handlers as well. If we `throw` inside `.then` handler, that means a rejected promise, so the control jumps to the nearest error handler.\n\nHere's an example:\n\n```js run\nnew Promise(function(resolve, reject) {\n  resolve(\"ok\");\n}).then(function(result) {\n*!*\n  throw new Error(\"Whoops!\"); // rejects the promise\n*/!*\n}).catch(alert); // Error: Whoops!\n```\n\nThat's so not only for `throw`, but for any errors, including programming errors as well:\n\n```js run\nnew Promise(function(resolve, reject) {\n  resolve(\"ok\");\n}).then(function(result) {\n*!*\n  blabla(); // no such function\n*/!*\n}).catch(alert); // ReferenceError: blabla is not defined\n```\n\nAs a side effect, the final `.catch` not only catches explicit rejections, but also occasional errors in the handlers above.\n\n## Rethrowing\n\nAs we already noticed, `.catch` behaves like `try..catch`. We may have as many `.then` as we want, and then use a single `.catch` at the end to handle errors in all of them.\n\nIn a regular `try..catch` we can analyze the error and maybe rethrow it if can't handle. The same thing is possible for promises. If we `throw` inside `.catch`, then the control goes to the next closest error handler. And if we handle the error and finish normally, then it continues to the closest successful `.then` handler.\n\nIn the example below the `.catch` successfully handles the error:\n```js run\n// the execution: catch -> then\nnew Promise(function(resolve, reject) {\n\n  throw new Error(\"Whoops!\");\n\n}).catch(function(error) {\n\n  alert(\"The error is handled, continue normally\");\n\n}).then(() => alert(\"Next successful handler runs\"));\n```\n\nHere the `.catch` block finishes normally. So the next successful handler is called. Or it could return something, that would be the same.\n\n...And here the `.catch` block analyzes the error and throws it again:\n\n```js run\n// the execution: catch -> catch -> then\nnew Promise(function(resolve, reject) {\n\n  throw new Error(\"Whoops!\");\n\n}).catch(function(error) { // (*)\n\n  if (error instanceof URIError) {\n    // handle it\n  } else {\n    alert(\"Can't handle such error\");\n\n*!*\n    throw error; // throwing this or another error jumps to the next catch\n*/!*\n  }\n\n}).then(function() {\n  /* never runs here */\n}).catch(error => { // (**)\n\n  alert(`The unknown error has occurred: ${error}`);\n  // don't return anything => execution goes the normal way\n\n});\n```\n\nThe handler `(*)` catches the error and just can't handle it, because it's not `URIError`, so it throws it again. Then the execution jumps to the next `.catch` down the chain `(**)`.\n\nIn the section below we'll see a practical example of rethrowing.\n\n## Fetch error handling example\n\nLet's improve error handling for the user-loading example.\n\nThe promise returned by [fetch](mdn:api/WindowOrWorkerGlobalScope/fetch) rejects when it's impossible to make a request. For instance, a remote server is not available, or the URL is malformed. But if the remote server responds with error 404, or even error 500, then it's considered a valid response.\n\nWhat if the server returns a non-JSON page with error 500 in the line `(*)`? What if there's no such user, and github returns a page with error 404 at `(**)`?\n\n```js run\nfetch('no-such-user.json') // (*)\n  .then(response => response.json())\n  .then(user => fetch(`https://api.github.com/users/${user.name}`)) // (**)\n  .then(response => response.json())\n  .catch(alert); // SyntaxError: Unexpected token < in JSON at position 0\n  // ...\n```\n\n\nAs of now, the code tries to load the response as JSON no matter what and dies with a syntax error. You can see that by running the example above, as the file `no-such-user.json` doesn't exist.\n\nThat's not good, because the error just falls through the chain, without details: what failed and where.\n\nSo let's add one more step: we should check the `response.status` property that has HTTP status, and if it's not 200, then throw an error.\n\n```js run\nclass HttpError extends Error { // (1)\n  constructor(response) {\n    super(`${response.status} for ${response.url}`);\n    this.name = 'HttpError';\n    this.response = response;\n  }\n}\n\nfunction loadJson(url) { // (2)\n  return fetch(url)\n    .then(response => {\n      if (response.status == 200) {\n        return response.json();\n      } else {\n        throw new HttpError(response);\n      }\n    })\n}\n\nloadJson('no-such-user.json') // (3)\n  .catch(alert); // HttpError: 404 for .../no-such-user.json\n```\n\n1. We make a custom class for HTTP Errors to distinguish them from other types of errors. Besides, the new class has a constructor that accepts the `response` object and saves it in the error. So error-handling code will be able to access it.\n2. Then we put together the requesting and error-handling code into a function that fetches the `url` *and* treats any non-200 status as an error. That's convenient, because we often need such logic.\n3. Now `alert` shows better message.\n\nThe great thing about having our own class for errors is that we can easily check for it in error-handling code.\n\nFor instance, we can make a request, and then if we get 404 -- ask the user to modify the information.\n\nThe code below loads a user with the given name from github. If there's no such user, then it asks for the correct name:\n\n```js run\nfunction demoGithubUser() {\n  let name = prompt(\"Enter a name?\", \"iliakan\");\n\n  return loadJson(`https://api.github.com/users/${name}`)\n    .then(user => {\n      alert(`Full name: ${user.name}.`); // (1)\n      return user;\n    })\n    .catch(err => {\n*!*\n      if (err instanceof HttpError && err.response.status == 404) { // (2)\n*/!*\n        alert(\"No such user, please reenter.\");\n        return demoGithubUser();\n      } else {\n        throw err;\n      }\n    });\n}\n\ndemoGithubUser();\n```\n\nHere:\n\n1. If `loadJson` returns a valid user object, then the name is shown `(1)`, and the user is returned, so that we can add more user-related actions to the chain. In that case the `.catch` below is ignored, everything's very simple and fine.\n2. Otherwise, in case of an error, we check it in the line `(2)`. Only if it's indeed the HTTP error, and the status is 404 (Not found), we ask the user to reenter. For other errors -- we don't know how to handle, so we just rethrow them.\n\n## Unhandled rejections\n\nWhat happens when an error is not handled? For instance, after the rethrow as in the example above. Or if we forget to append an error handler to the end of the chain, like here:\n\n```js untrusted run refresh\nnew Promise(function() {\n  noSuchFunction(); // Error here (no such function)\n}); // no .catch attached\n```\n\nOr here:\n\n```js untrusted run refresh\n// a chain of promises without .catch at the end\nnew Promise(function() {\n  throw new Error(\"Whoops!\");\n}).then(function() {\n  // ...something...\n}).then(function() {\n  // ...something else...\n}).then(function() {\n  // ...but no catch after it!\n});\n```\n\nIn case of an error, the promise state becomes \"rejected\", and the execution should jump to the closest rejection handler. But there is no such handler in the examples above. So the error gets \"stuck\".\n\nIn practice, that's usually because of the bad code. Indeed, how come that there's no error handling?\n\nMost JavaScript engines track such situations and generate a global error in that case. We can see it in the console.\n\nIn the browser we can catch it using the event `unhandledrejection`:\n\n```js run\n*!*\nwindow.addEventListener('unhandledrejection', function(event) {\n  // the event object has two special properties:\n  alert(event.promise); // [object Promise] - the promise that generated the error\n  alert(event.reason); // Error: Whoops! - the unhandled error object\n});\n*/!*\n\nnew Promise(function() {\n  throw new Error(\"Whoops!\");\n}); // no catch to handle the error\n```\n\nThe event is the part of the [HTML standard](https://html.spec.whatwg.org/multipage/webappapis.html#unhandled-promise-rejections). Now if an error occurs, and there's no `.catch`, the `unhandledrejection` handler triggers: the `event` object has the information about the error, so we can do something with it.\n\nUsually such errors are unrecoverable, so our best way out is to inform the user about the problem and probably report about the incident to the server.\n\nIn non-browser environments like Node.JS there are other similar ways to track unhandled errors.\n\n## Summary\n\nTo summarize, `.then/catch(handler)` returns a new promise that changes depending on what handler does:\n\n1. If it returns a value or finishes without a `return` (same as `return undefined`), then the new promise becomes resolved, and the closest resolve handler (the first argument of `.then`) is called with that value.\n2. If it throws an error, then the new promise becomes rejected, and the closest rejection handler (second argument of `.then` or `.catch`) is called with it.\n3. If it returns a promise, then JavaScript waits until it settles and then acts on its outcome the same way.\n\nThe picture of how the promise returned by `.then/catch` changes:\n\n![](promise-handler-variants.png)\n\nThe smaller picture of how handlers are called:\n\n![](promise-handler-variants-2.png)\n\nIn the examples of error handling above the `.catch` was always the last in the chain. In practice though, not every promise chain has a `.catch`. Just like regular code is not always wrapped in `try..catch`.\n\nWe should place `.catch` exactly in the places where we want to handle errors and know how to handle them. Using custom error classes can help to analyze errors and rethrow those that we can't handle.\n\nFor errors that fall outside of our scope we should have the `unhandledrejection` event handler (for browsers, and analogs for other environments). Such unknown errors are usually unrecoverable, so all we should do is to inform the user and probably report to our server about the incident.","libs":[],"children":["then-vs-catch","error-async"],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,102,117,110,99,116,105,111,110,32,108,111,97,100,83,99,114,105,112,116,40,115,114,99,41,32,123,10,32,32,114,101,116,117,114,110,32,110,101,119,32,80,114,111,109,105,115,101,40,102,117,110,99,116,105,111,110,40,114,101,115,111,108,118,101,44,32,114,101,106,101,99,116,41,32,123,10,32,32,32,32,108,101,116,32,115,99,114,105,112,116,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,10,32,32,32,32,115,99,114,105,112,116,46,115,114,99,32,61,32,115,114,99,59,10,10,32,32,32,32,115,99,114,105,112,116,46,111,110,108,111,97,100,32,61,32,40,41,32,61,62,32,114,101,115,111,108,118,101,40,115,99,114,105,112,116,41,59,10,32,32,32,32,115,99,114,105,112,116,46,111,110,101,114,114,111,114,32,61,32,40,41,32,61,62,32,114,101,106,101,99,116,40,110,101,119,32,69,114,114,111,114,40,34,83,99,114,105,112,116,32,108,111,97,100,32,101,114,114,111,114,58,32,34,32,43,32,115,114,99,41,41,59,10,10,32,32,32,32,100,111,99,117,109,101,110,116,46,104,101,97,100,46,97,112,112,101,110,100,40,115,99,114,105,112,116,41,59,10,32,32,125,41,59,10,125,10,10,99,108,97,115,115,32,72,116,116,112,69,114,114,111,114,32,101,120,116,101,110,100,115,32,69,114,114,111,114,32,123,10,32,32,99,111,110,115,116,114,117,99,116,111,114,40,114,101,115,112,111,110,115,101,41,32,123,10,32,32,32,32,115,117,112,101,114,40,96,36,123,114,101,115,112,111,110,115,101,46,115,116,97,116,117,115,125,32,102,111,114,32,36,123,114,101,115,112,111,110,115,101,46,117,114,108,125,96,41,59,10,32,32,32,32,116,104,105,115,46,110,97,109,101,32,61,32,39,72,116,116,112,69,114,114,111,114,39,59,10,32,32,32,32,116,104,105,115,46,114,101,115,112,111,110,115,101,32,61,32,114,101,115,112,111,110,115,101,59,10,32,32,125,10,125,10,10,102,117,110,99,116,105,111,110,32,108,111,97,100,74,115,111,110,40,117,114,108,41,32,123,10,32,32,114,101,116,117,114,110,32,102,101,116,99,104,40,117,114,108,41,10,32,32,32,32,46,116,104,101,110,40,114,101,115,112,111,110,115,101,32,61,62,32,123,10,32,32,32,32,32,32,105,102,32,40,114,101,115,112,111,110,115,101,46,115,116,97,116,117,115,32,61,61,32,50,48,48,41,32,123,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,115,112,111,110,115,101,46,106,115,111,110,40,41,59,10,32,32,32,32,32,32,125,32,101,108,115,101,32,123,10,32,32,32,32,32,32,32,32,116,104,114,111,119,32,110,101,119,32,72,116,116,112,69,114,114,111,114,40,114,101,115,112,111,110,115,101,41,59,10,32,32,32,32,32,32,125,10,32,32,32,32,125,41,10,125,10,60,47,115,99,114,105,112,116,62,10,10,60,115,116,121,108,101,62,10,46,112,114,111,109,105,115,101,45,97,118,97,116,97,114,45,101,120,97,109,112,108,101,32,123,10,32,32,98,111,114,100,101,114,45,114,97,100,105,117,115,58,32,53,48,37,59,10,32,32,112,111,115,105,116,105,111,110,58,32,102,105,120,101,100,59,10,32,32,108,101,102,116,58,32,49,48,112,120,59,10,32,32,116,111,112,58,32,49,48,112,120,59,10,125,10,60,47,115,116,121,108,101,62,10]},"parent":"async"}},"then-vs-catch":{"type":"Task","value":{"title":"Promise: then versus catch","slug":"then-vs-catch","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/03-promise-chaining/01-then-vs-catch","weight":1,"libs":[],"content":"\nAre these code fragments equal? In other words, do they behave the same way in any circumstances, for any handler functions?\n\n```js\npromise.then(f1, f2);\n```\n\nVersus;\n```js\npromise.then(f1).catch(f2);\n```","solution":"The short answer is: **no, they are not the equal**:\n\nThe difference is that if an error happens in `f1`, then it is handled by `.catch` here:\n\n```js run\npromise\n  .then(f1)\n  .catch(f2);\n```\n\n...But not here:\n\n```js run\npromise\n  .then(f1, f2);\n```\n\nThat's because an error is passed down the chain, and in the second code piece there's no chain below `f1`.\n\nIn other words, `.then` passes results/errors to the next `.then/catch`. So in the first example, there's a `catch` below, and in the second one -- there isn't, so the error is unhandled.","parent":"promise-chaining"}},"error-async":{"type":"Task","value":{"title":"Error in setTimeout","slug":"error-async","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/03-promise-chaining/02-error-async","weight":2,"libs":[],"content":"\nWhat do you think? Will the `.catch` trigger? Explain your answer.\n\n```js\nnew Promise(function(resolve, reject) {\n  setTimeout(() => {\n    throw new Error(\"Whoops!\");\n  }, 1000);\n}).catch(alert);\n```","solution":"The answer is: **no, it won't**:\n\n```js run\nnew Promise(function(resolve, reject) {\n  setTimeout(() => {\n    throw new Error(\"Whoops!\");\n  }, 1000);\n}).catch(alert);\n```\n\nAs said in the chapter, there's an \"implicit `try..catch`\" around the function code. So all synchronous errors are handled.\n\nBut here the error is generated not while the executor is running, but later. So the promise can't handle it.","parent":"promise-chaining"}},"promise-api":{"type":"Article","value":{"title":"Promise API","slug":"promise-api","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/04-promise-api/article.md","isFolder":false,"weight":4,"content":"\nThere are 4 static methods in the `Promise` class. We'll quickly cover their use cases here.\n\n## Promise.resolve\n\nThe syntax:\n\n```js\nlet promise = Promise.resolve(value);\n```\n\nReturns a resolved promise with the given `value`.\n\nSame as:\n\n```js\nlet promise = new Promise(resolve => resolve(value));\n```\n\nThe method is used when we already have a value, but would like to have it \"wrapped\" into a promise.\n\nFor instance, the `loadCached` function below fetches the `url` and remembers the result, so that future calls on the same URL return it immediately:\n\n```js\nfunction loadCached(url) {\n  let cache = loadCached.cache || (loadCached.cache = new Map());\n\n  if (cache.has(url)) {\n*!*\n    return Promise.resolve(cache.get(url)); // (*)\n*/!*\n  }\n\n  return fetch(url)\n    .then(response => response.text())\n    .then(text => {\n      cache[url] = text;\n      return text;\n    });\n}\n```\n\nWe can use `loadCached(url).then(…)`, because the function is guaranteed to return a promise. That's the purpose `Promise.resolve` in the line `(*)`: it makes sure the interface unified. We can always use `.then` after `loadCached`.\n\n## Promise.reject\n\nThe syntax:\n\n```js\nlet promise = Promise.reject(error);\n```\n\nCreate a rejected promise with the `error`.\n\nSame as:\n\n```js\nlet promise = new Promise((resolve, reject) => reject(error));\n```\n\nWe cover it here for completeness, rarely used in real code.\n\n## Promise.all\n\nThe method to run many promises in parallel and wait till all of them are ready.\n\nThe syntax is:\n\n```js\nlet promise = Promise.all(iterable);\n```\n\nIt takes an `iterable` object with promises, technically it can be any iterable, but usually it's an array, and returns a new promise. The new promise resolves with when all of them are settled and has an array of their results.\n\nFor instance, the `Promise.all` below settles after 3 seconds, and then its result is an array `[1, 2, 3]`:\n\n```js run\nPromise.all([\n  new Promise((resolve, reject) => setTimeout(() => resolve(1), 3000)), // 1\n  new Promise((resolve, reject) => setTimeout(() => resolve(2), 2000)), // 2\n  new Promise((resolve, reject) => setTimeout(() => resolve(3), 1000))  // 3\n]).then(alert); // 1,2,3 when promises are ready: each promise contributes an array member\n```\n\nPlease note that the relative order is the same. Even though the first promise takes the longest time to resolve, it is still first in the array of results.\n\nA common trick is to map an array of job data into an array of promises, and then wrap that into `Promise.all`.\n\nFor instance, if we have an array of URLs, we can fetch them all like this:\n\n```js run\nlet urls = [\n  'https://api.github.com/users/iliakan',\n  'https://api.github.com/users/remy',\n  'https://api.github.com/users/jeresig'\n];\n\n// map every url to the promise fetch(github url)\nlet requests = urls.map(url => fetch(url));\n\n// Promise.all waits until all jobs are resolved\nPromise.all(requests)\n  .then(responses => responses.forEach(\n    response => alert(`${response.url}: ${response.status}`)\n  ));\n```\n\nA more real-life example with fetching user information for an array of github users by their names (or we could fetch an array of goods by their ids, the logic is same):\n\n```js run\nlet names = ['iliakan', 'remy', 'jeresig'];\n\nlet requests = names.map(name => fetch(`https://api.github.com/users/${name}`));\n\nPromise.all(requests)\n  .then(responses => {\n    // all responses are ready, we can show HTTP status codes\n    for(let response of responses) {\n      alert(`${response.url}: ${response.status}`); // shows 200 for every url\n    }\n\n    return responses;\n  })\n  // map array of responses into array of response.json() to read their content\n  .then(responses => Promise.all(responses.map(r => r.json())))\n  // all JSON answers are parsed: \"users\" is the array of them\n  .then(users => users.forEach(user => alert(user.name)));\n```\n\nIf any of the promises is rejected, `Promise.all` immediately rejects with that error.\n\nFor instance:\n\n\n```js run\nPromise.all([\n  new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),\n*!*\n  new Promise((resolve, reject) => setTimeout(() => reject(new Error(\"Whoops!\")), 2000)),\n*/!*\n  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))\n]).catch(alert); // Error: Whoops!\n```\n\nHere the second promise rejects in two seconds. That leads to immediate rejection of `Promise.all`, so `.catch` executes: the rejection error becomes the outcome of the whole `Promise.all`.\n\nThe important detail is that promises provide no way to \"cancel\" or \"abort\" their execution. So other promises continue to execute, and the eventually settle, but all their results are ignored.\n\nThere are ways to avoid this: we can either write additional code to `clearTimeout` (or otherwise cancel) the promises in case of an error, or we can make errors show up as members in the resulting array (see the task below this chapter about it).\n\n````smart header=\"`Promise.all(iterable)` allows non-promise items in `iterable`\"\nNormally, `Promise.all(iterable)` accepts an iterable (in most cases an array) of promises. But if any of those objects is not a promise, it's wrapped in `Promise.resolve`.\n\nFor instance, here the results are `[1, 2, 3]`:\n\n```js run\nPromise.all([\n  new Promise((resolve, reject) => {\n    setTimeout(() => resolve(1), 1000)\n  }),\n  2, // treated as Promise.resolve(2)\n  3  // treated as Promise.resolve(3)\n]).then(alert); // 1, 2, 3\n```\n\nSo we are able to pass non-promise values to `Promise.all` where convenient.\n\n````\n\n## Promise.race\n\nSimilar to `Promise.all` takes an iterable of promises, but instead of waiting for all of them to finish -- waits for the first result (or error), and goes on with it.\n\nThe syntax is:\n\n```js\nlet promise = Promise.race(iterable);\n```\n\nFor instance, here the result will be `1`:\n\n```js run\nPromise.race([\n  new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),\n  new Promise((resolve, reject) => setTimeout(() => reject(new Error(\"Whoops!\")), 2000)),\n  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))\n]).then(alert); // 1\n```\n\nSo, the first result/error becomes the result of the whole `Promise.race`. After the first settled promise \"wins the race\", all further results/errors are ignored.\n\n## Summary\n\nThere are 4 static methods of `Promise` class:\n\n1. `Promise.resolve(value)` -- makes a resolved promise with the given value,\n2. `Promise.reject(error)` -- makes a rejected promise with the given error,\n3. `Promise.all(promises)` -- waits for all promises to resolve and returns an array of their results. If any of the given promises rejects, then it becomes the error of `Promise.all`, and all other results are ignored.\n4. `Promise.race(promises)` -- waits for the first promise to settle, and its result/error becomes the outcome.\n\nOf these four, `Promise.all` is the most common in practice.","libs":[],"children":["promise-errors-as-results","promise-errors-as-results-2"],"headHtml":{"type":"Buffer","data":[60,115,99,114,105,112,116,62,10,102,117,110,99,116,105,111,110,32,108,111,97,100,83,99,114,105,112,116,40,115,114,99,41,32,123,10,32,32,114,101,116,117,114,110,32,110,101,119,32,80,114,111,109,105,115,101,40,102,117,110,99,116,105,111,110,40,114,101,115,111,108,118,101,44,32,114,101,106,101,99,116,41,32,123,10,32,32,32,32,108,101,116,32,115,99,114,105,112,116,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,39,115,99,114,105,112,116,39,41,59,10,32,32,32,32,115,99,114,105,112,116,46,115,114,99,32,61,32,115,114,99,59,10,10,32,32,32,32,115,99,114,105,112,116,46,111,110,108,111,97,100,32,61,32,40,41,32,61,62,32,114,101,115,111,108,118,101,40,115,99,114,105,112,116,41,59,10,32,32,32,32,115,99,114,105,112,116,46,111,110,101,114,114,111,114,32,61,32,40,41,32,61,62,32,114,101,106,101,99,116,40,110,101,119,32,69,114,114,111,114,40,34,83,99,114,105,112,116,32,108,111,97,100,32,101,114,114,111,114,58,32,34,32,43,32,115,114,99,41,41,59,10,10,32,32,32,32,100,111,99,117,109,101,110,116,46,104,101,97,100,46,97,112,112,101,110,100,40,115,99,114,105,112,116,41,59,10,32,32,125,41,59,10,125,10,60,47,115,99,114,105,112,116,62,10]},"parent":"async"}},"promise-errors-as-results":{"type":"Task","value":{"title":"Fault-tolerant Promise.all","slug":"promise-errors-as-results","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/04-promise-api/01-promise-errors-as-results","weight":1,"libs":[],"content":"\nWe'd like to fetch multiple URLs in parallel.\n\nHere's the code to do that:\n\n```js run\nlet urls = [\n  'https://api.github.com/users/iliakan',\n  'https://api.github.com/users/remy',\n  'https://api.github.com/users/jeresig'\n];\n\nPromise.all(urls.map(url => fetch(url)))\n  // for each response show its status\n  .then(responses => { // (*)\n    for(let response of responses) {\n      alert(`${response.url}: ${response.status}`);\n    }\n  ));\n```\n\nThe problem is that if any of requests fails, then `Promise.all` rejects with the error, and we loose results of all the other requests.\n\nThat's not good.\n\nModify the code so that the array `responses` in the line `(*)` would include the response objects for successful fetches and error objects for failed ones.\n\nFor instance, if one of URLs is bad, then it should be like:\n\n```js\nlet urls = [\n  'https://api.github.com/users/iliakan',\n  'https://api.github.com/users/remy',\n  'http://no-such-url'\n];\n\nPromise.all(...) // your code to fetch URLs...\n  // ...and pass fetch errors as members of the resulting array...\n  .then(responses => {  \n    // 3 urls => 3 array members\n    alert(responses[0].status); // 200\n    alert(responses[1].status); // 200\n    alert(responses[2]); // TypeError: failed to fetch (text may vary)\n  });\n```\n\nP.S. In this task you don't have to load the full response using `response.text()` or `response.json()`. Just handle fetch errors the right way.","solution":"The solution is actually pretty simple.\n\nTake a look at this:\n\n```js\nPromise.all(\n  fetch('https://api.github.com/users/iliakan'),\n  fetch('https://api.github.com/users/remy'),\n  fetch('http://no-such-url')\n)\n```\n\nHere we have an array of `fetch(...)` promises that goes to `Promise.all`.\n\nWe can't change the way `Promise.all` works: if it detects an error, then it rejects with it. So we need to prevent any error from occuring. Instead, if a `fetch` error happens, we need to treat it as a \"normal\" result.\n\nHere's how:\n\n```js\nPromise.all(\n  fetch('https://api.github.com/users/iliakan').catch(err => err),\n  fetch('https://api.github.com/users/remy').catch(err => err),\n  fetch('http://no-such-url').catch(err => err)\n)\n```\n\nIn other words, the `.catch` takes an error for all of the promises and returns it normally. By the rules of how promises work, if a `.then/catch` handler returns a value (doesn't matter if it's an error object or something else), then the execution continues the \"normal\" flow.\n\nSo the `.catch` returns the error as a \"normal\" result into the outer `Promise.all`.\n\nThis code:\n```js\nPromise.all(\n  urls.map(url => fetch(url))\n)\n```\n\nCan be rewritten as:\n\n```js\nPromise.all(\n  urls.map(url => fetch(url).catch(err => err))\n)\n```","parent":"promise-api"}},"promise-errors-as-results-2":{"type":"Task","value":{"title":"Fault-tolerant fetch with JSON","slug":"promise-errors-as-results-2","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/04-promise-api/02-promise-errors-as-results-2","weight":2,"libs":[],"content":"\nImprove the solution of the previous task <info:task/promise-errors-as-results>. Now we need not just to call `fetch`, but to load the JSON objects from given URLs.\n\nHere's the example code to do that:\n\n```js run\nlet urls = [\n  'https://api.github.com/users/iliakan',\n  'https://api.github.com/users/remy',\n  'https://api.github.com/users/jeresig'\n];\n\n// make fetch requests\nPromise.all(urls.map(url => fetch(url)))\n  // map each response to response.json()\n  .then(responses => Promise.all(\n    responses.map(r => r.json())\n  ))\n  // show name of each user\n  .then(users => {  // (*)\n    for(let user of users) {\n      alert(user.name);\n    }\n  });\n```\n\nThe problem is that if any of requests fails, then `Promise.all` rejects with the error, and we loose results of all the other requests. So the code above is not fault-tolerant, just like the one in the previous task.\n\nModify the code so that the array in the line `(*)` would include parsed JSON for successful requests and error for errored ones.\n\nPlease note that the error may occur both in `fetch` (if the network request fails) and in `response.json()` (if the response is invalid JSON). In both cases the error should become a member of the results object.\n\nThe sandbox has both of these cases.","solution":"","parent":"promise-api"}},"async-await":{"type":"Article","value":{"title":"Async/await","slug":"async-await","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/05-async-await/article.md","isFolder":false,"weight":5,"content":"\nThere's a special syntax to work with promises in a more comfort fashion, called \"async/await\". It's surprisingly easy to understand and use.\n\n## Async functions\n\nLet's start with the `async` keyword. It can be placed before function, like this:\n\n```js\nasync function f() {\n  return 1;\n}\n```\n\nThe word \"async\" before a function means one simple thing: a function always returns a promise. If the code has `return <non-promise>` in it, then JavaScript automatically wraps it into a resolved promise with that value.\n\nFor instance, the code above returns a resolved promise with the result of `1`, let's test it:\n\n```js run\nasync function f() {\n  return 1;\n}\n\nf().then(alert); // 1\n```\n\n...We could explicitly return a promise, that would be the same:\n\n```js run\nasync function f() {\n  return Promise.resolve(1);\n}\n\nf().then(alert); // 1\n```\n\nSo, `async` ensures that the function returns a promise, wraps non-promises in it. Simple enough, right? But not only that. There's another keyword `await` that works only inside `async` functions, and it's pretty cool.\n\n## Await\n\nThe syntax:\n\n```js\n// works only inside async functions\nlet value = await promise;\n```\n\nThe keyword `await` makes JavaScript wait until that promise settles and returns its result.\n\nHere's example with a promise that resolves in 1 second:\n```js run\nasync function f() {\n\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"done!\"), 1000)\n  });\n\n*!*\n  let result = await promise; // wait till the promise resolves (*)\n*/!*\n\n  alert(result); // \"done!\"\n}\n\nf();\n```\n\nThe function execution \"pauses\" at the line `(*)` and resumes when the promise settles, with `result` becoming its result. So the code above shows \"done!\" in one second.\n\nLet's emphasize: `await` literally makes JavaScript wait until the promise settles, and then go on with the result. That doesn't cost any CPU resources, because the engine can do other jobs meanwhile: execute other scripts, handle events etc.\n\nIt's just a more elegant syntax of getting the promise result than `promise.then`, easier to read and write.\n\n````warn header=\"Can't use `await` in regular functions\"\nIf we try to use `await` in non-async function, that would be a syntax error:\n\n```js run\nfunction f() {\n  let promise = Promise.resolve(1);\n*!*\n  let result = await promise; // Syntax error\n*/!*\n}\n```\n\nWe can get such error in case if we forget to put `async` before a function. As said, `await` only works inside `async function`.\n````\n\nLet's take `showAvatar()` example from the chapter <info:promise-chaining> and rewrite it using `async/await`:\n\n1. We'll need to replace `.then` calls by `await`.\n2. Also we should make the function `async` for them to work.\n\n```js run\nasync function showAvatar() {\n\n  // read our JSON\n  let response = await fetch('/article/promise-chaining/user.json');\n  let user = await response.json();\n\n  // read github user\n  let githubResponse = await fetch(`https://api.github.com/users/${user.name}`);\n  let githubUser = await githubResponse.json();\n\n  // show the avatar\n  let img = document.createElement('img');\n  img.src = githubUser.avatar_url;\n  img.className = \"promise-avatar-example\";\n  document.body.append(img);\n\n  // wait 3 seconds\n  await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n\n  img.remove();\n\n  return githubUser;\n}\n\nshowAvatar();\n```\n\nPretty clean and easy to read, right? Much better than before.\n\n````smart header=\"`await` won't work in the top-level code\"\nPeople who are just starting to use `await` tend to forget that, but we can't write `await` in the top-level code. That wouldn't work:\n\n```js run\n// syntax error in top-level code\nlet response = await fetch('/article/promise-chaining/user.json');\nlet user = await response.json();\n```\n\nSo we need to have a wrapping async function for the code that awaits. Just as in the example above.\n````\n````smart header=\"`await` accepts thenables\"\nLike `promise.then`, `await` allows to use thenable objects (those with a callable `then` method). Again, the idea is that a 3rd-party object may be not a promise, but promise-compatible: if it supports `.then`, that's enough to use with `await`.\n\nFor instance, here `await` accepts `new Thenable(1)`:\n```js run\nclass Thenable {\n  constructor(num) {\n    this.num = num;\n  }\n  then(resolve, reject) {\n    alert(resolve); // function() { native code }\n    // resolve with this.num*2 after 1000ms\n    setTimeout(() => resolve(this.num * 2), 1000); // (*)\n  }\n};\n\nasync function f() {\n  // waits for 1 second, then result becomes 2\n  let result = await new Thenable(1);\n  alert(result);\n}\n\nf();\n```\n\nIf `await` gets a non-promise object with `.then`, it calls that method providing native functions `resolve`, `reject` as arguments. Then `await` waits until one of them is called (in the example above it happens in the line `(*)`) and then proceeds with the result.\n````\n\n````smart header=\"Async methods\"\nA class method can also be async, just put `async` before it.\n\nLike here:\n\n```js run\nclass Waiter {\n*!*\n  async wait() {\n*/!*\n    return await Promise.resolve(1);\n  }\n}\n\nnew Waiter()\n  .wait()\n  .then(alert); // 1\n```\nThe meaning is the same: it ensures that the returned value is a promise and enables `await`.\n\n````\n## Error handling\n\nIf a promise resolves normally, then `await promise` returns the result. But in case of a rejection it throws the error, just if there were a `throw` statement at that line.\n\nThis code:\n\n```js\nasync function f() {\n*!*\n  await Promise.reject(new Error(\"Whoops!\"));\n*/!*\n}\n```\n\n...Is the same as this:\n\n```js\nasync function f() {\n*!*\n  throw new Error(\"Whoops!\");\n*/!*\n}\n```\n\nIn real situations the promise may take some time before it rejects. So `await` will wait, and then throw an error.\n\nWe can catch that error using `try..catch`, the same way as a regular `throw`:\n\n```js run\nasync function f() {\n\n  try {\n    let response = await fetch('http://no-such-url');\n  } catch(err) {\n*!*\n    alert(err); // TypeError: failed to fetch\n*/!*\n  }\n}\n\nf();\n```\n\nIn case of an error, the control jumps to the `catch` block. We can also wrap multiple lines:\n\n```js run\nasync function f() {\n\n  try {\n    let response = await fetch('/no-user-here');\n    let user = await response.json();\n  } catch(err) {\n    // catches errors both in fetch and response.json\n    alert(err);\n  }\n}\n\nf();\n```\n\nIf we don't have `try..catch`, then the promise generated by the call of the async function `f()` becomes rejected. We can append `.catch` to handle it:\n\n```js run\nasync function f() {\n  let response = await fetch('http://no-such-url');\n}\n\n// f() becomes a rejected promise\n*!*\nf().catch(alert); // TypeError: failed to fetch // (*)\n*/!*\n```\n\nIf we forget to add `.catch` there, then we get an unhandled promise error (and can see it in the console). We can catch such errors using a global event handler as described in the chapter <info:promise-chaining>.\n\n\n```smart header=\"`async/await` and `promise.then/catch`\"\nWhen we use `async/await`, we rarely need `.then`, because `await` handles the waiting for us. And we can use a regular `try..catch` instead of `.catch`. That's usually (not always) more convenient.\n\nBut at the top level of the code, when we're outside of any `async` function, we're syntactically unable to use `await`, so it's a normal practice to add `.then/catch` to handle the final result or falling-through errors.\n\nLike in the line `(*)` of the example above.\n```\n\n````smart header=\"`async/await` works well with `Promise.all`\"\nWhen we need to wait for multiple promises, we can wrap them in `Promise.all` and then `await`:\n\n```js\n// wait for the array of results\nlet results = await Promise.all([\n  fetch(url1),\n  fetch(url2),\n  ...\n]);\n```\n\nIn case of an error, it propagates as usual: from the failed promise to `Promise.all`, and then becomes an exception that we can catch using `try..catch` around the call.\n\n````\n\n## Summary\n\nThe `async` keyword before a function has two effects:\n\n1. Makes it always return a promise.\n2. Allows to use `await` in it.\n\nThe `await` keyword before a promise makes JavaScript wait until that promise settles, and then:\n\n1. If it's an error, the exception is generated, same as if `throw error` were called at that very place.\n2. Otherwise, it returns the result, so we can assign it to a value.\n\nTogether they provide a great framework to write asynchronous code that is easy both to read and write.\n\nWith `async/await` we rarely need to write `promise.then/catch`, but we still shouldn't forget that they are based on promises, because sometimes (e.g. in the outermost scope) we have to use these methods. Also `Promise.all` is a nice thing to wait for many tasks simultaneously.","libs":[],"children":["rewrite-async-2","rewrite-async"],"headHtml":{"type":"Buffer","data":[60,115,116,121,108,101,62,10,46,112,114,111,109,105,115,101,45,97,118,97,116,97,114,45,101,120,97,109,112,108,101,32,123,10,32,32,98,111,114,100,101,114,45,114,97,100,105,117,115,58,32,53,48,37,59,10,32,32,112,111,115,105,116,105,111,110,58,32,102,105,120,101,100,59,10,32,32,108,101,102,116,58,32,49,48,112,120,59,10,32,32,116,111,112,58,32,49,48,112,120,59,10,125,10,60,47,115,116,121,108,101,62,10]},"parent":"async"}},"rewrite-async":{"type":"Task","value":{"title":"Rewrite using async/await","slug":"rewrite-async","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/05-async-await/01-rewrite-async","weight":1,"libs":[],"content":"\nRewrite the one of examples from the chapter <info:promise-chaining> using `async/await` instead of `.then/catch`:\n\n```js run\nfunction loadJson(url) {\n  return fetch(url)\n    .then(response => {\n      if (response.status == 200) {\n        return response.json();\n      } else {\n        throw new Error(response.status);\n      }\n    })\n}\n\nloadJson('no-such-user.json') // (3)\n  .catch(alert); // Error: 404\n```","solution":"The notes are below the code:\n\n```js run\nasync function loadJson(url) { // (1)\n  let response = await fetch(url); // (2)\n\n  if (response.status == 200) {\n    let json = await response.json(); // (3)\n    return json;\n  }\n\n  throw new Error(response.status);\n}\n\nloadJson('no-such-user.json')\n  .catch(alert); // Error: 404 (4)\n```\n\nNotes:\n\n1. The function `loadUrl` becomes `async`.\n2. All `.then` inside are replaced with `await`.\n3. We can `return response.json()` instead of awaiting for it, like this:\n\n    ```js\n    if (response.status == 200) {\n      return response.json(); // (3)\n    }\n    ```\n\n    Then the outer code would have to `await` for that promise to resolve. In our case it doesn't matter.\n4. The error thrown from `loadJson` is handled by `.catch`. We can't use `await loadJson(…)` there, because we're not in an `async` function.","parent":"async-await"}},"rewrite-async-2":{"type":"Task","value":{"title":"Rewrite \"rethrow\" async/await","slug":"rewrite-async-2","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/6-async/05-async-await/01-rewrite-async-2","weight":1,"libs":[],"content":"\nBelow you can find the \"rethrow\" example from the chapter <info:promise-chaining>. Rewrite it using `async/await` instead of `.then/catch`.\n\nAnd get rid of the recursion in favour of a loop in `demoGithubUser`: with `async/await` that becomes easy to do.\n\n```js run\nclass HttpError extends Error {\n  constructor(response) {\n    super(`${response.status} for ${response.url}`);\n    this.name = 'HttpError';\n    this.response = response;\n  }\n}\n\nfunction loadJson(url) {\n  return fetch(url)\n    .then(response => {\n      if (response.status == 200) {\n        return response.json();\n      } else {\n        throw new HttpError(response);\n      }\n    })\n}\n\n// Ask for a user name until github returns a valid user\nfunction demoGithubUser() {\n  let name = prompt(\"Enter a name?\", \"iliakan\");\n\n  return loadJson(`https://api.github.com/users/${name}`)\n    .then(user => {\n      alert(`Full name: ${user.name}.`);\n      return user;\n    })\n    .catch(err => {\n      if (err instanceof HttpError && err.response.status == 404) {\n        alert(\"No such user, please reenter.\");\n        return demoGithubUser();\n      } else {\n        throw err;\n      }\n    });\n}\n\ndemoGithubUser();\n```","solution":"There are no tricks here. Just replace `.catch` with `try...catch` inside `demoGithubUser` and add `async/await` where needed:\n\n```js run\nclass HttpError extends Error {\n  constructor(response) {\n    super(`${response.status} for ${response.url}`);\n    this.name = 'HttpError';\n    this.response = response;\n  }\n}\n\nasync function loadJson(url) {\n  let response = await fetch(url);\n  if (response.status == 200) {\n    return response.json();\n  } else {\n    throw new HttpError(response);\n  }\n}\n\n// Ask for a user name until github returns a valid user\nasync function demoGithubUser() {\n\n  let user;\n  while(true) {\n    let name = prompt(\"Enter a name?\", \"iliakan\");\n\n    try {\n      user = await loadJson(`https://api.github.com/users/${name}`);\n      break; // no error, exit loop\n    } catch(err) {\n      if (err instanceof HttpError && err.response.status == 404) {\n        // loop continues after the alert\n        alert(\"No such user, please reenter.\");\n      } else {\n        // unknown error, rethrow\n        throw err;\n      }\n    }      \n  }\n\n\n  alert(`Full name: ${user.name}.`);\n  return user;\n}\n\ndemoGithubUser();\n```","parent":"async-await"}},"network":{"type":"Article","value":{"title":"Network requests: AJAX and COMET","slug":"network","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/7-network","isFolder":true,"weight":7,"content":"","libs":[],"children":["xmlhttprequest"]}},"xmlhttprequest":{"type":"Article","value":{"title":"XMLHttpRequest and AJAX","slug":"xmlhttprequest","githubLink":"https://github.com/iliakan/javascript-tutorial-en/tree/master/7-network/1-xmlhttprequest/article.md","isFolder":false,"weight":1,"content":"\n`XMLHttpRequest` is a built-in browser object that allows to make HTTP requests in JavaScript.\n\nDespite of having the word \"XML\" in its name, it can operate on any data, not only in XML format.\n\n## Asynchronous XMLHttpRequest\n\nXMLHttpRequest has two modes of operation: synchronous and asynchronous.\n\nFirst let's see the asynchronous variant as it's used in the majority of cases.\n\nThe code below loads the URL at `/article/xmlhttprequest/hello.txt` from the server and shows its content on-screen:\n\n```js run\n*!*\n// 1. Create a new XMLHttpRequest object\n*/!*\nlet xhr = new XMLHttpRequest();\n\n*!*\n// 2. Configure it: GET-request for the URL /article/.../hello.txt\nxhr.open('GET', '/article/xmlhttprequest/hello.txt');\n*/!*\n\n*!*\n// 3. Send the request over the network\n*/!*\nxhr.send();\n\n*!*\n// 4. This will be called after the response is received\n*/!*\nxhr.onload = function() {\n  if (xhr.status != 200) { // analyze HTTP status of the response\n    // if it's not 200, consider it an error\n    alert(xhr.status + ': ' + xhr.statusText); // e.g. 404: Not Found\n  } else {\n    // show the result\n    alert(xhr.responseText); // responseText is the server response\n  }\n};\n```\n\nAs we can see, there are several methods of `XMLHttpRequest` here. Let's cover them.\n\n## Setup: \"open\"\n\nThe syntax:\n```js\nxhr.open(method, URL, async, user, password)\n```\n\nThis method is usually called first after `new XMLHttpRequest`. It specifies the main parameters of the request:\n\n- `method` -- HTTP-method. Usually `\"GET\"` or `\"POST\"`, but we can also use TRACE/DELETE/PUT and so on.\n- `URL` -- the URL to request. Can use any path and protocol, but there are cross-domain limitations called \"Same Origin Policy\". We can make any requests to the same `protocol://domain:port` that the current page comes from, but other locations are \"forbidden\" by default (unless they implement special HTTP-headers, we'll cover them in chapter [todo]).\n- `async` -- if the third parameter is explicitly set to `false`, then the request is synchronous, otherwise it's asynchronous. We'll talk more about that in this chapter soon.\n- `user`, `password` -- login and password for basic HTTP auth (if required).\n\nPlease note that `open` call, contrary to its name, does not open the connection. It only configures the request, but the network activity only starts with the call of `send`.\n\n## Send it out: \"send\"\n\nThe syntax:\n```js\nxhr.send([body])\n```\n\nThis method opens the connection and sends the request to server. The optional `body` parameter contains the request body. Some request methods like `GET` do not have a body. And some of them like `POST` use `body` to send the data. We'll see examples with a body in the next chapter.\n\n\n## Cancel: abort and timeout\n\nIf we changed our mind, we can terminate the request at any time. The call to `xhr.abort()` does that:\n\n```js\nxhr.abort(); // terminate the request\n```\n\nWe can also specify a timeout using the corresponding property:\n\n```js\nxhr.timeout = 10000;\n```\n\nThe timeout is expressed in ms. If the request does not succeed within the given time, it gets canceled automatically.\n\n## Events: onload, onerror etc\n\nA request is asynchronous by default. In other words, the browser sends it out and allows other JavaScript code to execute.\n\nAfter the request is sent, `xhr` starts to generate events. We can use `addEventListener` or `on<event>` properties to handle them, just like with DOM objects.\n\nThe modern [specification](https://xhr.spec.whatwg.org/#events) lists following events:\n\n- `loadstart` -- the request has started.\n- `progress` -- the browser received a data packet (can happen multiple times).\n- `abort` -- the request was aborted by `xhr.abort()`.\n- `error` -- an network error has occured, the request failed.\n- `load` -- the request is successful, no errors.\n- `timeout` -- the request was canceled due to timeout (if the timeout is set).\n- `loadend` -- the request is done (with an error or without it)\n- `readystatechange` -- the request state is changed (will cover later).\n\nUsing these events we can track successful loading (`onload`), errors (`onerror`) and the amount of the data loaded (`onprogress`).\n\nPlease note that errors here are \"communication errors\". In other words, if the connection is lost or the remote server does not respond at all -- then it's the error in the terms of XMLHttpRequest. Bad HTTP status like 500 or 404 are not considered errors.\n\nHere's a more feature-full example, with errors and a timeout:\n\n```html run\n<script>\n  function load(url) {\n    let xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.timeout = 1000;\n    xhr.send();\n\n    xhr.onload = function() {\n      alert(`Loaded: ${this.status} ${this.responseText}`);\n    };\n\n    xhr.onerror = () => alert('Error');\n\n    xhr.ontimeout = () => alert('Timeout!');\n  }\n</script>\n\n<button onclick=\"load('/article/xmlhttprequest/hello.txt')\">Load</button>\n<button onclick=\"load('/article/xmlhttprequest/hello.txt?speed=0')\">Load with timeout</button>\n<button onclick=\"load('no-such-page')\">Load 404</button>\n<button onclick=\"load('http://example.com')\">Load another domain</button>\n```\n\n1. The first button triggers only `onload` as it loads the file `hello.txt` normally.\n2. The second button loads a very slow URL, so it calls only `ontimeout` (because `xhr.timeout` is set).\n3. The third button loads a non-existant URL, but it also calls `onload` (with \"Loaded: 404\"), because there's no network error.\n4. The last button tries to load a page from another domain. That's prohibited unless the remote server explicitly agrees by sending certain headers (to be covered later), so we have `onerror` here. The `onerror` handler would also trigger in other cases if we start a request, and then sever the network connection of our device.\n\n## Response: status, responseText and others\n\nOnce the server has responded, we can receive the result in the following properties of the request object:\n\n`status`\n: HTTP status code: `200`, `404`, `403` and so on. Also can be `0` if an error occured.\n\n`statusText`\n: HTTP status message: usually `OK` for `200`, `Not Found` for `404`, `Forbidden` for `403` and so on.\n\n`responseText`\n: The text of the server response,\n\nЕсть и ещё одно свойство, которое используется гораздо реже:\n\n`responseXML`\n: Если сервер вернул XML, снабдив его правильным заголовком `Content-type: text/xml`, то браузер создаст из него XML-документ. По нему можно будет делать запросы `xhr.responseXml.querySelector(\"...\")` и другие.\n\n    Оно используется редко, так как обычно используют не XML, а JSON. То есть, сервер возвращает JSON в виде текста, который браузер превращает в объект вызовом `JSON.parse(xhr.responseText)`.\n\n## Синхронные и асинхронные запросы\n\nЕсли в методе `open` установить параметр `async` равным `false`, то запрос будет синхронным.\n\nСинхронные вызовы используются чрезвычайно редко, так как блокируют взаимодействие со страницей до окончания загрузки. Посетитель не может даже прокручивать её. Никакой JavaScript не может быть выполнен, пока синхронный вызов не завершён -- в общем, в точности те же ограничения как `alert`.\n\n```js\n// Синхронный запрос\nxhr.open('GET', 'phones.json', *!*false*/!*);\n\n// Отсылаем его\nxhr.send();\n*!*\n// ...весь JavaScript \"подвиснет\", пока запрос не завершится\n*/!*\n```\n\nЕсли синхронный вызов занял слишком много времени, то браузер предложит закрыть \"зависшую\" страницу.\n\nИз-за такой блокировки получается, что нельзя отослать два запроса одновременно. Кроме того, забегая вперёд, заметим, что ряд продвинутых возможностей, таких как возможность делать запросы на другой домен и указывать таймаут, в синхронном режиме не работают.\n\nИз всего вышесказанного уже должно быть понятно, что синхронные запросы используются чрезвычайно редко, а асинхронные -- почти всегда.\n\nДля того, чтобы запрос стал асинхронным, укажем параметр `async` равным `true`.\n\nИзменённый JS-код:\n\n```js\nvar xhr = new XMLHttpRequest();\n\nxhr.open('GET', 'phones.json', *!*true*/!*);\n\nxhr.send(); // (1)\n\n*!*\nxhr.onreadystatechange = function() { // (3)\n  if (xhr.readyState != 4) return;\n*/!*\n\n  button.innerHTML = 'Готово!';\n\n  if (xhr.status != 200) {\n    alert(xhr.status + ': ' + xhr.statusText);\n  } else {\n    alert(xhr.responseText);\n  }\n\n}\n\nbutton.innerHTML = 'Загружаю...'; // (2)\nbutton.disabled = true;\n```\n\nЕсли в `open` указан третий аргумент `true` (или если третьего аргумента нет), то запрос выполняется асинхронно. Это означает, что после вызова `xhr.send()` в строке `(1)` код не \"зависает\", а преспокойно продолжает выполняться, выполняется строка `(2)`, а результат приходит через событие `(3)`, мы изучим его чуть позже.\n\nПолный пример в действии:\n\n[codetabs src=\"phones-async\"]\n\n# Событие readystatechange\n\nСобытие `readystatechange` происходит несколько раз в процессе отсылки и получения ответа. При этом можно посмотреть \"текущее состояние запроса\" в свойстве `xhr.readyState`.\n\nВ примере выше мы использовали только состояние `4` (запрос завершён), но есть и другие.\n\nВсе состояния, по [спецификации](http://www.w3.org/TR/XMLHttpRequest/#states):\n\n```js\nconst unsigned short UNSENT = 0; // начальное состояние\nconst unsigned short OPENED = 1; // вызван open\nconst unsigned short HEADERS_RECEIVED = 2; // получены заголовки\nconst unsigned short LOADING = 3; // загружается тело (получен очередной пакет данных)\nconst unsigned short DONE = 4; // запрос завершён\n```\n\nЗапрос проходит их в порядке `0` -> `1` -> `2` -> `3` -> ... -> `3` -> `4`, состояние `3` повторяется при каждом получении очередного пакета данных по сети.\n\nПример ниже демонстрирует переключение между состояниями. В нём сервер отвечает на запрос `digits`, пересылая по строке из 1000 цифр раз в секунду.\n\n[codetabs src=\"readystate\"]\n\n```warn header=\"Точка разрыва пакетов не гарантирована\"\nПри состоянии `readyState=3` (получен очередной пакет) мы можем посмотреть текущие данные в `responseText` и, казалось бы, могли бы работать с этими данными как с \"ответом на текущий момент\".\n\nОднако, технически мы не управляем разрывами между сетевыми пакетами. Если протестировать пример выше в локальной сети, то в большинстве браузеров разрывы будут каждые 1000 символов, но в реальности пакет может прерваться на любом байте.\n\nЧем это опасно? Хотя бы тем, что символы русского языка в кодировке UTF-8 кодируются двумя байтами каждый -- и разрыв может возникнуть *между ними*.\n\nПолучится, что при очередном `readyState` в конце `responseText` будет байт-полсимвола, то есть он не будет корректной строкой -- частью ответа! Если в скрипте как-то по-особому это не обработать, то неизбежны проблемы.\n```\n\n## HTTP-заголовки\n\n`XMLHttpRequest` умеет как указывать свои заголовки в запросе, так и читать присланные в ответ.\n\nДля работы с HTTP-заголовками есть 3 метода:\n\n`setRequestHeader(name, value)`\n: Устанавливает заголовок `name` запроса со значением `value`.\n\n    Например:\n\n    ```js\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    ```\n\n```warn header=\"Ограничения на заголовки\"\nНельзя установить заголовки, которые контролирует браузер, например `Referer` или `Host` и ряд других (полный список [тут](http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader-method)).\n\nЭто ограничение существует в целях безопасности и для контроля корректности запроса.\n```\n\n````warn header=\"Поставленный заголовок нельзя снять\"\nОсобенностью `XMLHttpRequest` является то, что отменить `setRequestHeader` невозможно.\n\nПовторные вызовы лишь добавляют информацию к заголовку, например:\n\n```js\nxhr.setRequestHeader('X-Auth', '123');\nxhr.setRequestHeader('X-Auth', '456');\n\n// в результате будет заголовок:\n// X-Auth: 123, 456\n```\n````\n\n`getResponseHeader(name)`\n: Возвращает значение заголовка ответа `name`, кроме `Set-Cookie` и `Set-Cookie2`.\n\n    Например:\n\n    ```js\n    xhr.getResponseHeader('Content-Type')\n    ```\n\n`getAllResponseHeaders()`\n: Возвращает все заголовки ответа, кроме `Set-Cookie` и `Set-Cookie2`.\n\n    Заголовки возвращаются в виде единой строки, например:\n\n    ```\n    Cache-Control: max-age=31536000\n    Content-Length: 4260\n    Content-Type: image/png\n    Date: Sat, 08 Sep 2012 16:53:16 GMT\n    ```\n\n    Между заголовками стоит перевод строки в два символа `\"\\r\\n\"` (не зависит от ОС), значение заголовка отделено двоеточием с пробелом `\": \"`. Этот формат задан стандартом.\n\n    Таким образом, если хочется получить объект с парами заголовок-значение, то эту строку необходимо разбить и обработать.\n\n## Таймаут\n\nМаксимальную продолжительность асинхронного запроса можно задать свойством `timeout`:\n\n```js\nxhr.timeout = 30000; // 30 секунд (в миллисекундах)\n```\n\nПри превышении этого времени запрос будет оборван и сгенерировано событие `ontimeout`:\n\n```js\nxhr.ontimeout = function() {\n  alert( 'Извините, запрос превысил максимальное время' );\n}\n```\n\n## Полный список событий\n\nСовременная [спецификация](http://www.w3.org/TR/XMLHttpRequest/#events) предусматривает следующие события по ходу обработки запроса:\n\n- `loadstart` -- запрос начат.\n- `progress` -- браузер получил очередной пакет данных, можно прочитать текущие полученные данные в `responseText`.\n- `abort` -- запрос был отменён вызовом `xhr.abort()`.\n- `error` -- произошла ошибка.\n- `load` -- запрос был успешно (без ошибок) завершён.\n- `timeout` -- запрос был прекращён по таймауту.\n- `loadend` -- запрос был завершён (успешно или неуспешно)\n\nИспользуя эти события можно более удобно отслеживать загрузку (`onload`) и ошибку (`onerror`), а также количество загруженных данных (`onprogress`).\n\nРанее мы видели ещё одно событие -- `readystatechange`. Оно появилось гораздо раньше, ещё до появления текущего стандарта.\n\nВ современных браузерах от него можно отказаться в пользу других, необходимо лишь, как мы увидим далее,  учесть особенности IE8-9.\n\n## IE8,9: XDomainRequest\n\nВ IE8 и IE9 поддержка `XMLHttpRequest` ограничена:\n\n- Не поддерживаются события, кроме `onreadystatechange`.\n- Некорректно поддерживается состояние `readyState = 3`: браузер может сгенерировать его только один раз во время запроса, а не при каждом пакете данных. Кроме того, он не даёт доступ к ответу `responseText` до того, как он будет до конца получен.\n\nДело в том, что, когда создавались эти браузеры, спецификации были не до конца проработаны. Поэтому разработчики браузера решили добавить свой объект `XDomainRequest`, который реализовывал часть возможностей современного стандарта.\n\nА обычный `XMLHttpRequest` решили не трогать, чтобы ненароком не сломать существующий код.\n\nМы подробнее поговорим про `XDomainRequest` в главе <info:xhr-crossdomain>. Пока лишь заметим, что для того, чтобы получить некоторые из современных возможностей в IE8,9 -- вместо `new XMLHttpRequest()` нужно использовать `new XDomainRequest`.\n\nКросс-браузерно:\n\n```js\nvar XHR = (\"onload\" in new XMLHttpRequest()) ? XMLHttpRequest : XDomainRequest;\nvar xhr = new XHR();\n```\n\nТеперь в IE8,9 поддерживаются события `onload`, `onerror` и `onprogress`. Это именно для IE8,9. Для IE10 обычный `XMLHttpRequest` уже является полноценным.\n\n### IE9- и кеширование\n\nОбычно ответы на запросы `XMLHttpRequest` кешируются, как и обычные страницы.\n\nНо IE9- по умолчанию кеширует все ответы, не снабжённые антикеш-заголовком. Другие браузеры этого не делают. Чтобы этого избежать, сервер должен добавить в ответ соответствующие антикеш-заголовки, например `Cache-Control: no-cache`.\n\nВпрочем, использовать заголовки типа `Expires`, `Last-Modified` и `Cache-Control` рекомендуется в любом случае, чтобы дать понять браузеру (не обязательно IE), что ему следует делать.\n\nАльтернативный вариант -- добавить в URL запроса случайный параметр, предотвращающий кеширование.\n\nНапример, вместо `xhr.open('GET', 'service', false)` написать:\n\n```js\nxhr.open('GET', *!*'service?r=' + Math.random()*/!*, false);\n```\n\nПо историческим причинам такой способ предотвращения кеширования можно увидеть много где, так как старые браузеры плохо обрабатывали кеширующие заголовки. Сейчас серверные заголовки поддерживаются хорошо.\n\n## Итого\n\nТиповой код для GET-запроса при помощи `XMLHttpRequest`:\n\n```js\nvar xhr = new XMLHttpRequest();\n\nxhr.open('GET', '/my/url', true);\n\nxhr.send();\n\nxhr.onreadystatechange = function() {\n  if (this.readyState != 4) return;\n\n  // по окончании запроса доступны:\n  // status, statusText\n  // responseText, responseXML (при content-type: text/xml)\n\n  if (this.status != 200) {\n    // обработать ошибку\n    alert( 'ошибка: ' + (this.status ? this.statusText : 'запрос не удался') );\n    return;\n  }\n\n  // получить результат из this.responseText или this.responseXML\n}\n```\n\nМы разобрали следующие методы `XMLHttpRequest`:\n\n- `open(method, url, async, user, password)`\n- `send(body)`\n- `abort()`\n- `setRequestHeader(name, value)`\n- `getResponseHeader(name)`\n- `getAllResponseHeaders()`\n\nСвойства `XMLHttpRequest`:\n\n- `timeout`\n- `responseText`\n- `responseXML`\n- `status`\n- `statusText`\n\nСобытия:\n\n- `onreadystatechange`\n- `ontimeout`\n- `onerror`\n- `onload`\n- `onprogress`\n- `onabort`\n- `onloadstart`\n- `onloadend`","libs":[],"children":[],"parent":"network"}}}}